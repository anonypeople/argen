<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\bm\PhoneticEngineRegressionTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>bm</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TreeMap</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests PhoneticEngine and Languages.LanguageSet in ways very similar to code found in solr-3.6.0.
 *
 * @since 1.7
 */</comment>
<class><specifier>public</specifier> class <name>PhoneticEngineRegressionTest</name> <block>{

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSolrGENERIC</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>args</name></decl>;</decl_stmt>

        <comment type="line">// concat is true, ruleType is EXACT</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"nameType"</expr></argument>, <argument><expr>"GENERIC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"EXACT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anZelo|andZelo|angelo|anhelo|anjelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"andZelo|angelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// concat is false, ruleType is EXACT</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"EXACT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anZelo|andZelo|angelo|anhelo|anjelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"andZelo|angelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// concat is true, ruleType is APPROX</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"APPROX"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"(agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo)-(dagilo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongilo|doniilo|donilo|donxilo|donzilo)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"angilo|anxilo|anzilo|ongilo|onxilo|onzilo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// concat is false, ruleType is APPROX</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"APPROX"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"(agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo)-(dagilo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongilo|doniilo|donilo|donxilo|donzilo)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"angilo|anxilo|anzilo|ongilo|onxilo|onzilo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSolrASHKENAZI</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>args</name></decl>;</decl_stmt>

        <comment type="line">// concat is true, ruleType is EXACT</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"nameType"</expr></argument>, <argument><expr>"ASHKENAZI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"EXACT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"andZelo|angelo|anhelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"dandZelo|dangelo|danhelo|danxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"angelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// concat is false, ruleType is EXACT</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"nameType"</expr></argument>, <argument><expr>"ASHKENAZI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"EXACT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"andZelo|angelo|anhelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"dandZelo|dangelo|danhelo|danxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"angelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// concat is true, ruleType is APPROX</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"nameType"</expr></argument>, <argument><expr>"ASHKENAZI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"APPROX"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"dAnElO|dAnSelO|dAngElO|dAngzelO|dAnkselO|dAnzelO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"AnSelO|AngElO|AngzelO|AnkselO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// concat is false, ruleType is APPROX</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"nameType"</expr></argument>, <argument><expr>"ASHKENAZI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"APPROX"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"dAnElO|dAnSelO|dAngElO|dAngzelO|dAnkselO|dAnzelO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"AnSelO|AngElO|AngzelO|AnkselO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSolrSEPHARDIC</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>args</name></decl>;</decl_stmt>

        <comment type="line">// concat is true, ruleType is EXACT</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"nameType"</expr></argument>, <argument><expr>"SEPHARDIC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"EXACT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anZelo|andZelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anZelo|andZelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"andZelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// concat is false, ruleType is EXACT</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"nameType"</expr></argument>, <argument><expr>"SEPHARDIC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"EXACT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anZelo|andZelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"danZelo|dandZelo|danxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"andZelo|anxelo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// concat is true, ruleType is APPROX</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"nameType"</expr></argument>, <argument><expr>"SEPHARDIC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"APPROX"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// concat is false, ruleType is APPROX</comment>
        <expr_stmt><expr><name>args</name> = new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"nameType"</expr></argument>, <argument><expr>"SEPHARDIC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>, <argument><expr>"APPROX"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"D'Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"danhila|danhilu|danzila|danzilu|nhila|nhilu|nzila|nzilu"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name>.<name>put</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>, <argument><expr>"italian,greek,spanish"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>"1234"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This code is similar in style to code found in Solr:
     * solr/core/src/java/org/apache/solr/analysis/BeiderMorseFilterFactory.java
     *
     * Making a JUnit test out of it to protect Solr from possible future
     * regressions in Commons-Codec.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>args</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>concat</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Languages</name>.<name>LanguageSet</name></name></type> <name>languageSet</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PhoneticEngine</name></type> <name>engine</name></decl>;</decl_stmt>

        <comment type="line">// PhoneticEngine = NameType + RuleType + concat</comment>
        <comment type="line">// we use common-codec's defaults: GENERIC + APPROX + true</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>nameTypeArg</name> =<init> <expr><call><name><name>args</name>.<name>get</name></name><argument_list>(<argument><expr>"nameType"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>NameType</name></type> <name>nameType</name> =<init> <expr>(<name>nameTypeArg</name> == <name>null</name>) ? <name><name>NameType</name>.<name>GENERIC</name></name> : <call><name><name>NameType</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>nameTypeArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>ruleTypeArg</name> =<init> <expr><call><name><name>args</name>.<name>get</name></name><argument_list>(<argument><expr>"ruleType"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>RuleType</name></type> <name>ruleType</name> =<init> <expr>(<name>ruleTypeArg</name> == <name>null</name>) ? <name><name>RuleType</name>.<name>APPROX</name></name> : <call><name><name>RuleType</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>ruleTypeArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>engine</name> = new <call><name>PhoneticEngine</name><argument_list>(<argument><expr><name>nameType</name></expr></argument>, <argument><expr><name>ruleType</name></expr></argument>, <argument><expr><name>concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// LanguageSet: defaults to automagic, otherwise a comma-separated list.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>languageSetArg</name> =<init> <expr><call><name><name>args</name>.<name>get</name></name><argument_list>(<argument><expr>"languageSet"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>languageSetArg</name> == <name>null</name> || <call><name><name>languageSetArg</name>.<name>equals</name></name><argument_list>(<argument><expr>"auto"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>languageSet</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>languageSet</name> = <call><name><name>Languages</name>.<name>LanguageSet</name>.<name>from</name></name><argument_list>(<argument><expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><call><name><name>languageSetArg</name>.<name>split</name></name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="block">/*
            org/apache/lucene/analysis/phonetic/BeiderMorseFilter.java (lines 96-98) does this:

            encoded = (languages == null)
                ? engine.encode(termAtt.toString())
                : engine.encode(termAtt.toString(), languages);

            Hence our approach, below:
        */</comment>
        <if>if <condition>(<expr><name>languageSet</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>engine</name>.<name>encode</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>engine</name>.<name>encode</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>languageSet</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
