<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\bm\PhoneticEngineTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>bm</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runner</name>.<name>RunWith</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runners</name>.<name>Parameterized</name></name>;</import>

<comment type="javadoc">/**
 * Tests PhoneticEngine.
 *
 * @since 1.6
 */</comment>
<class><annotation>@<name>RunWith</name><argument_list>(Parameterized.class)</argument_list></annotation>
<specifier>public</specifier> class <name>PhoneticEngineTest</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Integer</name></type> <name>TEN</name> =<init> <expr><call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><annotation>@<name><name>Parameterized</name>.<name>Parameters</name></name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Object</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>data</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Arrays</name>
                .<name>asList</name></name><argument_list>(<argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{ <expr>"Renault"</expr>, <expr>"rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult"</expr>, <expr><name><name>NameType</name>.<name>GENERIC</name></name></expr>, <expr><name><name>RuleType</name>.<name>APPROX</name></name></expr>, <expr><name><name>Boolean</name>.<name>TRUE</name></name></expr>, <expr><name>TEN</name></expr> }</block></expr></argument>,
                        <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{ <expr>"Renault"</expr>, <expr>"rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult"</expr>, <expr><name><name>NameType</name>.<name>ASHKENAZI</name></name></expr>, <expr><name><name>RuleType</name>.<name>APPROX</name></name></expr>, <expr><name><name>Boolean</name>.<name>TRUE</name></name></expr>, <expr><name>TEN</name></expr> }</block></expr></argument>,
                        <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{ <expr>"Renault"</expr>, <expr>"rYnDlt"</expr>, <expr><name><name>NameType</name>.<name>ASHKENAZI</name></name></expr>, <expr><name><name>RuleType</name>.<name>APPROX</name></name></expr>, <expr><name><name>Boolean</name>.<name>TRUE</name></name></expr>, <expr><call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr> }</block></expr></argument>,
                        <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{ <expr>"Renault"</expr>, <expr>"rinDlt"</expr>, <expr><name><name>NameType</name>.<name>SEPHARDIC</name></name></expr>, <expr><name><name>RuleType</name>.<name>APPROX</name></name></expr>, <expr><name><name>Boolean</name>.<name>TRUE</name></name></expr>, <expr><name>TEN</name></expr> }</block></expr></argument>,
                        <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{ <expr>"SntJohn-Smith"</expr>, <expr>"sntjonsmit"</expr>, <expr><name><name>NameType</name>.<name>GENERIC</name></name></expr>, <expr><name><name>RuleType</name>.<name>EXACT</name></name></expr>, <expr><name><name>Boolean</name>.<name>TRUE</name></name></expr>, <expr><name>TEN</name></expr> }</block></expr></argument>,
                        <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{ <expr>"d'ortley"</expr>, <expr>"(ortlaj|ortlej)-(dortlaj|dortlej)"</expr>, <expr><name><name>NameType</name>.<name>GENERIC</name></name></expr>, <expr><name><name>RuleType</name>.<name>EXACT</name></name></expr>, <expr><name><name>Boolean</name>.<name>TRUE</name></name></expr>, <expr><name>TEN</name></expr> }</block></expr></argument>,
                        <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{
                                <expr>"van helsing"</expr>,
                                <expr>"(elSink|elsink|helSink|helsink|helzink|xelsink)-(banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink)"</expr>,
                                <expr><name><name>NameType</name>.<name>GENERIC</name></name></expr>,
                                <expr><name><name>RuleType</name>.<name>EXACT</name></name></expr>,
                                <expr><name><name>Boolean</name>.<name>FALSE</name></name></expr>, <expr><name>TEN</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>concat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>NameType</name></type> <name>nameType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>phoneticExpected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RuleType</name></type> <name>ruleType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxPhonemes</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PhoneticEngineTest</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>phoneticExpected</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>NameType</name></type> <name>nameType</name></decl></param>,
                              <param><decl><type><specifier>final</specifier> <name>RuleType</name></type> <name>ruleType</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>concat</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxPhonemes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>phoneticExpected</name></name> = <name>phoneticExpected</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>nameType</name></name> = <name>nameType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>ruleType</name></name> = <name>ruleType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>concat</name></name> = <name>concat</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxPhonemes</name></name> = <name>maxPhonemes</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Test</name><argument_list>(timeout = 10000L)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PhoneticEngine</name></type> <name>engine</name> =<init> <expr>new <call><name>PhoneticEngine</name><argument_list>(<argument><expr><name><name>this</name>.<name>nameType</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>ruleType</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>concat</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>maxPhonemes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>phoneticActual</name> =<init> <expr><call><name><name>engine</name>.<name>encode</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//System.err.println("expecting: " + this.phoneticExpected);</comment>
        <comment type="line">//System.err.println("actual:    " + phoneticActual);</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"phoneme incorrect"</expr></argument>, <argument><expr><name><name>this</name>.<name>phoneticExpected</name></name></expr></argument>, <argument><expr><name>phoneticActual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>concat</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>split</name> =<init> <expr><call><name><name>phoneticActual</name>.<name>split</name></name><argument_list>(<argument><expr>"\\|"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>split</name>.<name>length</name></name> &lt;= <name><name>this</name>.<name>maxPhonemes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>words</name> =<init> <expr><call><name><name>phoneticActual</name>.<name>split</name></name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>word</name> :<range> <expr><name>words</name></expr></range></decl></init>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>split</name> =<init> <expr><call><name><name>word</name>.<name>split</name></name><argument_list>(<argument><expr>"\\|"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>split</name>.<name>length</name></name> &lt;= <name><name>this</name>.<name>maxPhonemes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
