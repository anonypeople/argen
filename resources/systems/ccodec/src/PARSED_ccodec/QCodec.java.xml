<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\net\QCodec.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>Charset</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>BitSet</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringDecoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>

<comment type="javadoc">/**
 * Similar to the Quoted-Printable content-transfer-encoding defined in
 * &lt;a href="http://www.ietf.org/rfc/rfc1521.txt"&gt;RFC 1521&lt;/a&gt; and designed to allow text containing mostly ASCII
 * characters to be decipherable on an ASCII terminal without decoding.
 * &lt;p&gt;
 * &lt;a href="http://www.ietf.org/rfc/rfc1522.txt"&gt;RFC 1522&lt;/a&gt; describes techniques to allow the encoding of non-ASCII
 * text in various portions of a RFC 822 [2] message header, in a manner which is unlikely to confuse existing message
 * handling software.
 * &lt;p&gt;
 * This class is conditionally thread-safe.
 * The instance field {@link #encodeBlanks} is mutable {@link #setEncodeBlanks(boolean)}
 * but is not volatile, and accesses are not synchronised.
 * If an instance of the class is shared between threads, the caller needs to ensure that suitable synchronisation
 * is used to ensure safe publication of the value between threads, and must not invoke
 * {@link #setEncodeBlanks(boolean)} after initial setup.
 *
 * @see &lt;a href="http://www.ietf.org/rfc/rfc1522.txt"&gt;MIME (Multipurpose Internet Mail Extensions) Part Two: Message
 *          Header Extensions for Non-ASCII Text&lt;/a&gt;
 *
 * @since 1.3
 * @version $Id: QCodec.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>QCodec</name> <super><extends>extends <name>RFC1522Codec</name></extends> <implements>implements <name>StringEncoder</name>, <name>StringDecoder</name></implements></super> <block>{
    <comment type="javadoc">/**
     * The default charset used for string decoding and encoding.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * BitSet of printable characters as defined in RFC 1522.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BitSet</name></type> <name>PRINTABLE_CHARS</name> =<init> <expr>new <call><name>BitSet</name><argument_list>(<argument><expr>256</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Static initializer for printable chars collection</comment>
    static <block>{
        <comment type="line">// alpha characters</comment>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'!'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'"'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'#'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'$'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'%'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'&amp;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'\''</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'('</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>')'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'*'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'+'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'-'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>'0'</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= '9'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>';'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'&lt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'@'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>'A'</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 'Z'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'['</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'\\'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>']'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'^'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'`'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>'a'</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 'z'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'{'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'|'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'}'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr>'~'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>BLANK</name> =<init> <expr>32</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>UNDERSCORE</name> =<init> <expr>95</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>encodeBlanks</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>QCodec</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor which allows for the selection of a default charset.
     *
     * @param charset
     *            the default string charset to use.
     *
     * @see &lt;a href="http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"&gt;Standard charsets&lt;/a&gt;
     * @since 1.7
     */</comment>
    <constructor><specifier>public</specifier> <name>QCodec</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>charset</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor which allows for the selection of a default charset.
     *
     * @param charsetName
     *            the charset to use.
     * @throws java.nio.charset.UnsupportedCharsetException
     *             If the named charset is unavailable
     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable
     * @see &lt;a href="http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"&gt;Standard charsets&lt;/a&gt;
     */</comment>
    <constructor><specifier>public</specifier> <name>QCodec</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Charset</name>.<name>forName</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>String</name></type> <name>getEncoding</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"Q"</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>byte</name><index>[]</index></type> <name>doEncoding</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>bytes</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>data</name> =<init> <expr><call><name><name>QuotedPrintableCodec</name>.<name>encodeQuotedPrintable</name></name><argument_list>(<argument><expr><name>PRINTABLE_CHARS</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>encodeBlanks</name></name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> == <name>BLANK</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <name>UNDERSCORE</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>data</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>byte</name><index>[]</index></type> <name>doDecoding</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>bytes</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasUnderscores</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>byte</name></type> <name>b</name> :<range> <expr><name>bytes</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><name>b</name> == <name>UNDERSCORE</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>hasUnderscores</name> = true</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>hasUnderscores</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>tmp</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>bytes</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>bytes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name></type> <name>b</name> =<init> <expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>b</name> != <name>UNDERSCORE</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> = <name>b</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> = <name>BLANK</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <return>return <expr><call><name><name>QuotedPrintableCodec</name>.<name>decodeQuotedPrintable</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>QuotedPrintableCodec</name>.<name>decodeQuotedPrintable</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.
     *
     * @param str
     *            string to convert to quoted-printable form
     * @param charset
     *            the charset for str
     * @return quoted-printable string
     * @throws EncoderException
     *             thrown if a failure condition is encountered during the encoding process.
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>encodeText</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.
     *
     * @param str
     *            string to convert to quoted-printable form
     * @param charset
     *            the charset for str
     * @return quoted-printable string
     * @throws EncoderException
     *             thrown if a failure condition is encountered during the encoding process.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <try>try <block>{
            <return>return <expr><call><name>encodeText</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a string into its quoted-printable form using the default charset. Unsafe characters are escaped.
     *
     * @param str
     *            string to convert to quoted-printable form
     * @return quoted-printable string
     * @throws EncoderException
     *             thrown if a failure condition is encountered during the encoding process.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>encode</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>getCharset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a quoted-printable string into its original form. Escaped characters are converted back to their original
     * representation.
     *
     * @param str
     *            quoted-printable string to convert into its original form
     * @return original string
     * @throws DecoderException
     *             A decoder exception is thrown if a failure condition is encountered during the decode process.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <try>try <block>{
            <return>return <expr><call><name>decodeText</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes an object into its quoted-printable form using the default charset. Unsafe characters are escaped.
     *
     * @param obj
     *            object to convert to quoted-printable form
     * @return quoted-printable object
     * @throws EncoderException
     *             thrown if a failure condition is encountered during the encoding process.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>encode</name><argument_list>(<argument><expr>(<name>String</name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr>"Objects of type " +
                  <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> +
                  " cannot be encoded using Q codec"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original
     * representation.
     *
     * @param obj
     *            quoted-printable object to convert into its original form
     * @return original object
     * @throws DecoderException
     *             Thrown if the argument is not a &lt;code&gt;String&lt;/code&gt;. Thrown if a failure condition is encountered
     *             during the decode process.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>decode</name><argument_list>(<argument><expr>(<name>String</name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"Objects of type " +
                  <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> +
                  " cannot be decoded using Q codec"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the default charset name used for string decoding and encoding.
     *
     * @return the default charset name
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Charset</name></type> <name>getCharset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>charset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the default charset name used for string decoding and encoding.
     *
     * @return the default charset name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefaultCharset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>charset</name>.<name>name</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests if optional transformation of SPACE characters is to be used
     *
     * @return {@code true} if SPACE characters are to be transformed, {@code false} otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEncodeBlanks</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>encodeBlanks</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Defines whether optional transformation of SPACE characters is to be used
     *
     * @param b
     *            {@code true} if SPACE characters are to be transformed, {@code false} otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEncodeBlanks</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>encodeBlanks</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
