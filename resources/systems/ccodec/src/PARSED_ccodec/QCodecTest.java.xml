<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\net\QCodecTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>


<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>net</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertNull</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>fail</name></name>;</import>

<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>UnsupportedCharsetException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>CharEncoding</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Quoted-printable codec test cases
 *
 * @version $Id: QCodecTest.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>QCodecTest</name> <block>{

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name><name>SWISS_GERMAN_STUFF_UNICODE</name> <index>[]</index></name> =<init> <expr><block>{
        <expr>0x47</expr>, <expr>0x72</expr>, <expr>0xFC</expr>, <expr>0x65</expr>, <expr>0x7A</expr>, <expr>0x69</expr>, <expr>0x5F</expr>, <expr>0x7A</expr>, <expr>0xE4</expr>, <expr>0x6D</expr>, <expr>0xE4</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name><name>RUSSIAN_STUFF_UNICODE</name> <index>[]</index></name> =<init> <expr><block>{
        <expr>0x412</expr>, <expr>0x441</expr>, <expr>0x435</expr>, <expr>0x43C</expr>, <expr>0x5F</expr>, <expr>0x43F</expr>, <expr>0x440</expr>, <expr>0x438</expr>,
        <expr>0x432</expr>, <expr>0x435</expr>, <expr>0x442</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>constructString</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>int</name> <index>[]</index></name></type> <name>unicodeChars</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>buffer</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>unicodeChars</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><specifier>final</specifier> <name>int</name></type> <name>unicodeChar</name> :<range> <expr><name>unicodeChars</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>)<name>unicodeChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><call><name><name>buffer</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNullInput</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>qcodec</name>.<name>doDecoding</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>qcodec</name>.<name>doEncoding</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUTF8RoundTrip</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>ru_msg</name> =<init> <expr><call><name>constructString</name><argument_list>(<argument><expr><name>RUSSIAN_STUFF_UNICODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>ch_msg</name> =<init> <expr><call><name>constructString</name><argument_list>(<argument><expr><name>SWISS_GERMAN_STUFF_UNICODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>(<argument><expr><name><name>CharEncoding</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?="</expr></argument>,
        <argument><expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>ru_msg</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"=?UTF-8?Q?Gr=C3=BCezi=5Fz=C3=A4m=C3=A4?="</expr></argument>, <argument><expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>ch_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>ru_msg</name></expr></argument>, <argument><expr><call><name><name>qcodec</name>.<name>decode</name></name><argument_list>(<argument><expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>ru_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>ch_msg</name></expr></argument>, <argument><expr><call><name><name>qcodec</name>.<name>decode</name></name><argument_list>(<argument><expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>ch_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBasicEncodeDecode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"= Hello there =\r\n"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded</name> =<init> <expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic Q encoding test"</expr></argument>,
            <argument><expr>"=?UTF-8?Q?=3D Hello there =3D=0D=0A?="</expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic Q decoding test"</expr></argument>,
            <argument><expr><name>plain</name></expr></argument>, <argument><expr><call><name><name>qcodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUnsafeEncodeDecode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"?_=\r\n"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded</name> =<init> <expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Unsafe chars Q encoding test"</expr></argument>,
            <argument><expr>"=?UTF-8?Q?=3F=5F=3D=0D=0A?="</expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Unsafe chars Q decoding test"</expr></argument>,
            <argument><expr><name>plain</name></expr></argument>, <argument><expr><call><name><name>qcodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeDecodeNull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"Null string Q encoding test"</expr></argument>,
            <argument><expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr>(<name>String</name>)<name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"Null string Q decoding test"</expr></argument>,
            <argument><expr><call><name><name>qcodec</name>.<name>decode</name></name><argument_list>(<argument><expr>(<name>String</name>)<name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeStringWithNull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>test</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>result</name> =<init> <expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>( <argument><expr><name>test</name></expr></argument>, <argument><expr>"charset"</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Result should be null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeStringWithNull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>test</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>result</name> =<init> <expr><call><name><name>qcodec</name>.<name>decode</name></name><argument_list>( <argument><expr><name>test</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Result should be null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeObjects</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"1+1 = 2"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded</name> =<init> <expr>(<name>String</name>) <call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic Q encoding test"</expr></argument>,
            <argument><expr>"=?UTF-8?Q?1+1 =3D 2?="</expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>result</name> =<init> <expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"Encoding a null Object should return null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>dObj</name> =<init> <expr>new <call><name>Double</name><argument_list>(<argument><expr>3.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>( <argument><expr><name>dObj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr>"Trying to url encode a Double object should cause an exception."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>EncoderException</name></type> <name>ee</name></decl></param>) <block>{
            <comment type="line">// Exception expected, test segment passes.</comment>
        }</block></catch></try>
    }</block></function>


    <function><type><annotation>@<name>Test</name><argument_list>(expected=UnsupportedCharsetException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testInvalidEncoding</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr>new <call><name>QCodec</name><argument_list>(<argument><expr>"NONSENSE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeObjects</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>decoded</name> =<init> <expr>"=?UTF-8?Q?1+1 =3D 2?="</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>(<name>String</name>) <call><name><name>qcodec</name>.<name>decode</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>decoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic Q decoding test"</expr></argument>,
            <argument><expr>"1+1 = 2"</expr></argument>, <argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>result</name> =<init> <expr><call><name><name>qcodec</name>.<name>decode</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"Decoding a null Object should return null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>dObj</name> =<init> <expr>new <call><name>Double</name><argument_list>(<argument><expr>3.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>qcodec</name>.<name>decode</name></name><argument_list>( <argument><expr><name>dObj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr>"Trying to url encode a Double object should cause an exception."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>ee</name></decl></param>) <block>{
            <comment type="line">// Exception expected, test segment passes.</comment>
        }</block></catch></try>
    }</block></function>


    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeDecodeBlanks</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"Mind those pesky blanks"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded1</name> =<init> <expr>"=?UTF-8?Q?Mind those pesky blanks?="</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded2</name> =<init> <expr>"=?UTF-8?Q?Mind_those_pesky_blanks?="</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>qcodec</name>.<name>setEncodeBlanks</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Blanks encoding with the Q codec test"</expr></argument>, <argument><expr><name>encoded1</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>qcodec</name>.<name>setEncodeBlanks</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> = <call><name><name>qcodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Blanks encoding with the Q codec test"</expr></argument>, <argument><expr><name>encoded2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> = <call><name><name>qcodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>encoded1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Blanks decoding with the Q codec test"</expr></argument>, <argument><expr><name>plain</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> = <call><name><name>qcodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>encoded2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Blanks decoding with the Q codec test"</expr></argument>, <argument><expr><name>plain</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testLetUsMakeCloverHappy</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>QCodec</name></type> <name>qcodec</name> =<init> <expr>new <call><name>QCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>qcodec</name>.<name>setEncodeBlanks</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>qcodec</name>.<name>isEncodeBlanks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>qcodec</name>.<name>setEncodeBlanks</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>qcodec</name>.<name>isEncodeBlanks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
