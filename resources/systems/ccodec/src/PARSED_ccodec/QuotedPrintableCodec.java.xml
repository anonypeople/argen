<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\net\QuotedPrintableCodec.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>Charset</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>IllegalCharsetNameException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>UnsupportedCharsetException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>BitSet</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>BinaryDecoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>BinaryEncoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringDecoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * Codec for the Quoted-Printable section of &lt;a href="http://www.ietf.org/rfc/rfc1521.txt"&gt;RFC 1521&lt;/a&gt;.
 * &lt;p&gt;
 * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to
 * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are
 * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the
 * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable
 * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping
 * gateway.
 * &lt;p&gt;
 * Note:
 * &lt;p&gt;
 * Rules #3, #4, and #5 of the quoted-printable spec are not implemented yet because the complete quoted-printable spec
 * does not lend itself well into the byte[] oriented codec framework. Complete the codec once the streamable codec
 * framework is ready. The motivation behind providing the codec in a partial form is that it can already come in handy
 * for those applications that do not require quoted-printable line formatting (rules #3, #4, #5), for instance Q codec.
 * &lt;p&gt;
 * This class is immutable and thread-safe.
 *
 * @see &lt;a href="http://www.ietf.org/rfc/rfc1521.txt"&gt; RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:
 *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies &lt;/a&gt;
 *
 * @since 1.3
 * @version $Id: QuotedPrintableCodec.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>QuotedPrintableCodec</name> <super><implements>implements <name>BinaryEncoder</name>, <name>BinaryDecoder</name>, <name>StringEncoder</name>, <name>StringDecoder</name></implements></super> <block>{
    <comment type="javadoc">/**
     * The default charset used for string decoding and encoding.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * BitSet of printable characters as defined in RFC 1521.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BitSet</name></type> <name>PRINTABLE_CHARS</name> =<init> <expr>new <call><name>BitSet</name><argument_list>(<argument><expr>256</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>ESCAPE_CHAR</name> =<init> <expr>'='</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>TAB</name> =<init> <expr>9</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>SPACE</name> =<init> <expr>32</expr></init></decl>;</decl_stmt>
    <comment type="line">// Static initializer for printable chars collection</comment>
    static <block>{
        <comment type="line">// alpha characters</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>33</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 60</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>62</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 126</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <constructor_decl><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><parameter_list>(<param><decl><type><name>TAB</name></type></decl></param>)</parameter_list>;</constructor_decl>
        <constructor_decl><name><name>PRINTABLE_CHARS</name>.<name>set</name></name><parameter_list>(<param><decl><type><name>SPACE</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block>

    <comment type="javadoc">/**
     * Default constructor, assumes default charset of {@link Charsets#UTF_8}
     */</comment>
    <constructor><specifier>public</specifier> <name>QuotedPrintableCodec</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor which allows for the selection of a default charset.
     *
     * @param charset
     *            the default string charset to use.
     * @since 1.7
     */</comment>
    <constructor><specifier>public</specifier> <name>QuotedPrintableCodec</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>charset</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor which allows for the selection of a default charset.
     *
     * @param charsetName
     *            the default string charset to use.
     * @throws UnsupportedCharsetException
     *             If no support for the named charset is available
     *             in this instance of the Java virtual machine
     * @throws IllegalArgumentException
     *             If the given charsetName is null
     * @throws IllegalCharsetNameException
     *             If the given charset name is illegal
     *
     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable
     */</comment>
    <constructor><specifier>public</specifier> <name>QuotedPrintableCodec</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IllegalCharsetNameException</name></expr></argument>, <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>UnsupportedCharsetException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Charset</name>.<name>forName</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Encodes byte into its quoted-printable representation.
     *
     * @param b
     *            byte to encode
     * @param buffer
     *            the buffer to write to
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>void</name></type> <name>encodeQuotedPrintable</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>b</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>buffer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>ESCAPE_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>hex1</name> =<init> <expr><call><name><name>Character</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>Character</name>.<name>forDigit</name></name><argument_list>(<argument><expr>(<name>b</name> &gt;&gt; 4) &amp; 0xF</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>hex2</name> =<init> <expr><call><name><name>Character</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>Character</name>.<name>forDigit</name></name><argument_list>(<argument><expr><name>b</name> &amp; 0xF</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>hex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>hex2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.
     * &lt;p&gt;
     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in
     * RFC 1521 and is suitable for encoding binary data and unformatted text.
     *
     * @param printable
     *            bitset of characters deemed quoted-printable
     * @param bytes
     *            array of bytes to be encoded
     * @return array of bytes containing quoted-printable data
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encodeQuotedPrintable</name><parameter_list>(<param><decl><type><name>BitSet</name></type> <name>printable</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>bytes</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>printable</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>printable</name> = <name>PRINTABLE_CHARS</name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>buffer</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>byte</name></type> <name>c</name> :<range> <expr><name>bytes</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr><name>c</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b</name> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>b</name> = 256 + <name>b</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>printable</name>.<name>get</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>encodeQuotedPrintable</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><call><name><name>buffer</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are converted
     * back to their original representation.
     * &lt;p&gt;
     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in
     * RFC 1521.
     *
     * @param bytes
     *            array of quoted-printable characters
     * @return array of original bytes
     * @throws DecoderException
     *             Thrown if quoted-printable decoding is unsuccessful
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decodeQuotedPrintable</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>bytes</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>buffer</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>bytes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>b</name> =<init> <expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b</name> == <name>ESCAPE_CHAR</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>u</name> =<init> <expr><call><name><name>Utils</name>.<name>digit16</name></name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr>++<name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>l</name> =<init> <expr><call><name><name>Utils</name>.<name>digit16</name></name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr>++<name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><call>(<name>char</name>) <argument_list>(<argument><expr>(<name>u</name> &lt;&lt; 4) + <name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>ArrayIndexOutOfBoundsException</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"Invalid quoted-printable encoding"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><call><name><name>buffer</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.
     * &lt;p&gt;
     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in
     * RFC 1521 and is suitable for encoding binary data and unformatted text.
     *
     * @param bytes
     *            array of bytes to be encoded
     * @return array of bytes containing quoted-printable data
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>encodeQuotedPrintable</name><argument_list>(<argument><expr><name>PRINTABLE_CHARS</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes an array of quoted-printable characters into an array of original bytes. Escaped characters are converted
     * back to their original representation.
     * &lt;p&gt;
     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in
     * RFC 1521.
     *
     * @param bytes
     *            array of quoted-printable characters
     * @return array of original bytes
     * @throws DecoderException
     *             Thrown if quoted-printable decoding is unsuccessful
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>decodeQuotedPrintable</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a string into its quoted-printable form using the default string charset. Unsafe characters are escaped.
     * &lt;p&gt;
     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in
     * RFC 1521 and is suitable for encoding binary data.
     *
     * @param str
     *            string to convert to quoted-printable form
     * @return quoted-printable string
     * @throws EncoderException
     *             Thrown if quoted-printable encoding is unsuccessful
     *
     * @see #getCharset()
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>this</name>.<name>encode</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>getCharset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a quoted-printable string into its original form using the specified string charset. Escaped characters
     * are converted back to their original representation.
     *
     * @param str
     *            quoted-printable string to convert into its original form
     * @param charset
     *            the original string charset
     * @return original string
     * @throws DecoderException
     *             Thrown if quoted-printable decoding is unsuccessful
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>decode</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUsAscii</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a quoted-printable string into its original form using the specified string charset. Escaped characters
     * are converted back to their original representation.
     *
     * @param str
     *            quoted-printable string to convert into its original form
     * @param charset
     *            the original string charset
     * @return original string
     * @throws DecoderException
     *             Thrown if quoted-printable decoding is unsuccessful
     * @throws UnsupportedEncodingException
     *             Thrown if charset is not supported
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument>, <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><call><name>decode</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUsAscii</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a quoted-printable string into its original form using the default string charset. Escaped characters are
     * converted back to their original representation.
     *
     * @param str
     *            quoted-printable string to convert into its original form
     * @return original string
     * @throws DecoderException
     *             Thrown if quoted-printable decoding is unsuccessful. Thrown if charset is not supported.
     * @see #getCharset()
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>this</name>.<name>decode</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>getCharset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes an object into its quoted-printable safe form. Unsafe characters are escaped.
     *
     * @param obj
     *            string to convert to a quoted-printable form
     * @return quoted-printable object
     * @throws EncoderException
     *             Thrown if quoted-printable encoding is not applicable to objects of this type or if encoding is
     *             unsuccessful
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name><name>byte</name><index>[]</index></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>encode</name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>encode</name><argument_list>(<argument><expr>(<name>String</name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr>"Objects of type " +
                  <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> +
                  " cannot be quoted-printable encoded"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original
     * representation.
     *
     * @param obj
     *            quoted-printable object to convert into its original form
     * @return original object
     * @throws DecoderException
     *             Thrown if the argument is not a &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;byte[]&lt;/code&gt;. Thrown if a failure
     *             condition is encountered during the decode process.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name><name>byte</name><index>[]</index></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>decode</name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>decode</name><argument_list>(<argument><expr>(<name>String</name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"Objects of type " +
                  <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> +
                  " cannot be quoted-printable decoded"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the default charset name used for string decoding and encoding.
     *
     * @return the default charset name
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Charset</name></type> <name>getCharset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>charset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the default charset name used for string decoding and encoding.
     *
     * @return the default charset name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefaultCharset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>charset</name>.<name>name</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.
     * &lt;p&gt;
     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in
     * RFC 1521 and is suitable for encoding binary data and unformatted text.
     *
     * @param str
     *            string to convert to quoted-printable form
     * @param charset
     *            the charset for str
     * @return quoted-printable string
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>str</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.
     * &lt;p&gt;
     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in
     * RFC 1521 and is suitable for encoding binary data and unformatted text.
     *
     * @param str
     *            string to convert to quoted-printable form
     * @param charset
     *            the charset for str
     * @return quoted-printable string
     * @throws UnsupportedEncodingException
     *             Thrown if the charset is not supported
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><call><name><name>str</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
