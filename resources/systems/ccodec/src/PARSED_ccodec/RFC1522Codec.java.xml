<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\net\RFC1522Codec.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>Charset</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * Implements methods common to all codecs defined in RFC 1522.
 * &lt;p&gt;
 * &lt;a href="http://www.ietf.org/rfc/rfc1522.txt"&gt;RFC 1522&lt;/a&gt; describes techniques to allow the
 * encoding of non-ASCII text in various portions of a RFC 822 [2] message header, in a manner which
 * is unlikely to confuse existing message handling software.
 * &lt;p&gt;
 * This class is immutable and thread-safe.
 *
 * @see &lt;a href="http://www.ietf.org/rfc/rfc1522.txt"&gt;MIME (Multipurpose Internet Mail Extensions) Part Two:
 *          Message Header Extensions for Non-ASCII Text&lt;/a&gt;
 *
 * @since 1.3
 * @version $Id: RFC1522Codec.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>abstract</specifier> class <name>RFC1522Codec</name> <block>{

    <comment type="javadoc">/** Separator. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name></type> <name>SEP</name> =<init> <expr>'?'</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Prefix. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>POSTFIX</name> =<init> <expr>"?="</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Postfix. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFIX</name> =<init> <expr>"=?"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the given charset.
     * &lt;p&gt;
     * This method constructs the "encoded-word" header common to all the RFC 1522 codecs and then invokes
     * {@link #doEncoding(byte [])} method of a concrete class to perform the specific encoding.
     *
     * @param text
     *            a string to encode
     * @param charset
     *            a charset to be used
     * @return RFC 1522 compliant "encoded-word"
     * @throws EncoderException
     *             thrown if there is an error condition during the Encoding process.
     * @see &lt;a href="http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"&gt;Standard charsets&lt;/a&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>encodeText</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>text</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>buffer</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><name>PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getEncoding</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name> <index>[]</index></type> <name>rawData</name> =<init> <expr><call><name><name>this</name>.<name>doEncoding</name></name><argument_list>(<argument><expr><call><name><name>text</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><name>rawData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><name>POSTFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buffer</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the given charset.
     * &lt;p&gt;
     * This method constructs the "encoded-word" header common to all the RFC 1522 codecs and then invokes
     * {@link #doEncoding(byte [])} method of a concrete class to perform the specific encoding.
     *
     * @param text
     *            a string to encode
     * @param charsetName
     *            the charset to use
     * @return RFC 1522 compliant "encoded-word"
     * @throws EncoderException
     *             thrown if there is an error condition during the Encoding process.
     * @throws UnsupportedEncodingException
     *             if charset is not available
     *
     * @see &lt;a href="http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"&gt;Standard charsets&lt;/a&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>encodeText</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>text</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>EncoderException</name></expr></argument>, <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>encodeText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name><name>Charset</name>.<name>forName</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Applies an RFC 1522 compliant decoding scheme to the given string of text.
     * &lt;p&gt;
     * This method processes the "encoded-word" header common to all the RFC 1522 codecs and then invokes
     * {@link #doEncoding(byte [])} method of a concrete class to perform the specific decoding.
     *
     * @param text
     *            a string to decode
     * @return A new decoded String or {@code null} if the input is {@code null}.
     * @throws DecoderException
     *             thrown if there is an error condition during the decoding process.
     * @throws UnsupportedEncodingException
     *             thrown if charset specified in the "encoded-word" header is not supported
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>decodeText</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>text</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>DecoderException</name></expr></argument>, <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>text</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>PREFIX</name></expr></argument>)</argument_list></call> || !<call><name><name>text</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>POSTFIX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"RFC 1522 violation: malformed encoded content"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>terminator</name> =<init> <expr><call><name><name>text</name>.<name>length</name></name><argument_list>()</argument_list></call> - 2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to</name> =<init> <expr><call><name><name>text</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>SEP</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>to</name> == <name>terminator</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"RFC 1522 violation: charset token not found"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charset</name> =<init> <expr><call><name><name>text</name>.<name>substring</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>charset</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"RFC 1522 violation: charset not specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>from</name> = <name>to</name> + 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>to</name> = <call><name><name>text</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>SEP</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>to</name> == <name>terminator</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"RFC 1522 violation: encoding token not found"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoding</name> =<init> <expr><call><name><name>text</name>.<name>substring</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>getEncoding</name><argument_list>()</argument_list></call>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"This codec cannot decode " + <name>encoding</name> + " encoded content"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>from</name> = <name>to</name> + 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>to</name> = <call><name><name>text</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>SEP</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUsAscii</name></name><argument_list>(<argument><expr><call><name><name>text</name>.<name>substring</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>data</name> = <call><name>doDecoding</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the codec name (referred to as encoding in the RFC 1522).
     *
     * @return name of the codec
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getEncoding</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Encodes an array of bytes using the defined encoding scheme.
     *
     * @param bytes
     *            Data to be encoded
     * @return A byte array containing the encoded data
     * @throws EncoderException
     *             thrown if the Encoder encounters a failure condition during the encoding process.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>byte</name><index>[]</index></type> <name>doEncoding</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Decodes an array of bytes using the defined encoding scheme.
     *
     * @param bytes
     *            Data to be decoded
     * @return a byte array that contains decoded data
     * @throws DecoderException
     *             A decoder exception is thrown if a Decoder encounters a failure condition during the decode process.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>byte</name><index>[]</index></type> <name>doDecoding</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws>;</function_decl>
}</block></class>
</unit>
