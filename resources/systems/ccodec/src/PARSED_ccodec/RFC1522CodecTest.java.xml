<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\net\RFC1522CodecTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>net</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertNull</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>fail</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>CharEncoding</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * RFC 1522 compliant codec test cases
 *
 * @version $Id: RFC1522CodecTest.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>RFC1522CodecTest</name> <block>{

    <class><specifier>static</specifier> class <name>RFC1522TestCodec</name> <super><extends>extends <name>RFC1522Codec</name></extends></super> <block>{

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <name>byte</name><index>[]</index></type> <name>doDecoding</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name>bytes</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <name>byte</name><index>[]</index></type> <name>doEncoding</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name>bytes</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <name>String</name></type> <name>getEncoding</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>"T"</expr>;</return>
        }</block></function>

    }</block></class>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNullInput</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>RFC1522TestCodec</name></type> <name>testcodec</name> =<init> <expr>new <call><name>RFC1522TestCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>testcodec</name>.<name>decodeText</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>testcodec</name>.<name>encodeText</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>CharEncoding</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertExpectedDecoderException</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>s</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>RFC1522TestCodec</name></type> <name>testcodec</name> =<init> <expr>new <call><name>RFC1522TestCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>testcodec</name>.<name>decodeText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DecoderException should have been thrown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected.</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeInvalid</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"whatever"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"=?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"?="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"=??="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"=?stuff?="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"=?UTF-8??="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"=?UTF-8?stuff?="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"=?UTF-8?T?stuff"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"=??T?stuff?="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"=?UTF-8??stuff?="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertExpectedDecoderException</name><argument_list>(<argument><expr>"=?UTF-8?W?stuff?="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
