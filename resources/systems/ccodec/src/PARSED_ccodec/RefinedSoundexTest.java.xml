<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\RefinedSoundexTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoderAbstractTest</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests RefinedSoundex.
 *
 * @version $Id: RefinedSoundexTest.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>RefinedSoundexTest</name> <super><extends>extends <name><name>StringEncoderAbstractTest</name><argument_list>&lt;<argument><name>RefinedSoundex</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>RefinedSoundex</name></type> <name>createStringEncoder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>RefinedSoundex</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDifference</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <comment type="line">// Edge cases</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Normal cases</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>6</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Smith"</expr></argument>, <argument><expr>"Smythe"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Ann"</expr></argument>, <argument><expr>"Andrew"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Margaret"</expr></argument>, <argument><expr>"Andrew"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Janet"</expr></argument>, <argument><expr>"Margaret"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Examples from</comment>
        <comment type="line">// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Green"</expr></argument>, <argument><expr>"Greene"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Blotchet-Halls"</expr></argument>, <argument><expr>"Greene"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Examples from</comment>
        <comment type="line">// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>6</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Smith"</expr></argument>, <argument><expr>"Smythe"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>8</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Smithers"</expr></argument>, <argument><expr>"Smythers"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Anothers"</expr></argument>, <argument><expr>"Brothers"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"T6036084"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"testing"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"T6036084"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"TESTING"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"T60"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"The"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Q503"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"quick"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"B1908"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"brown"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"F205"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"fox"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"J408106"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"jumped"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"O0209"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"over"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"T60"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"the"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"L7050"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"lazy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"D6043"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"dogs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Testing CODEC-56</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"D6043"</expr></argument>, <argument><expr><call><name><name>RefinedSoundex</name>.<name>US_ENGLISH</name>.<name>encode</name></name><argument_list>(<argument><expr>"dogs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testGetMappingCodeNonLetter</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>code</name> =<init> <expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMappingCode</name><argument_list>(<argument><expr>'#'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Code does not equals zero"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewInstance</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"D6043"</expr></argument>, <argument><expr>new <call><name>RefinedSoundex</name><argument_list>()</argument_list></call>.<call><name>soundex</name><argument_list>(<argument><expr>"dogs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewInstance2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"D6043"</expr></argument>, <argument><expr>new <call><name>RefinedSoundex</name><argument_list>(<argument><expr><call><name><name>RefinedSoundex</name>.<name>US_ENGLISH_MAPPING_STRING</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>soundex</name><argument_list>(<argument><expr>"dogs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewInstance3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"D6043"</expr></argument>, <argument><expr>new <call><name>RefinedSoundex</name><argument_list>(<argument><expr><name><name>RefinedSoundex</name>.<name>US_ENGLISH_MAPPING_STRING</name></name></expr></argument>)</argument_list></call>.<call><name>soundex</name><argument_list>(<argument><expr>"dogs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
