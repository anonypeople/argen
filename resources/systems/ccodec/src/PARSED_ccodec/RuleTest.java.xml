<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\bm\RuleTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>bm</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertThat</name></name>;</import>

<import>import <name><name>org</name>.<name>hamcrest</name>.<name>BaseMatcher</name></name>;</import>
<import>import <name><name>org</name>.<name>hamcrest</name>.<name>Description</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests Rule.
 *
 * @since 1.6
 */</comment>
<class><specifier>public</specifier> class <name>RuleTest</name> <block>{
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>NegativeIntegerBaseMatcher</name> <super><extends>extends <name><name>BaseMatcher</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>void</name></type> <name>describeTo</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Description</name></type> <name>description</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>description</name>.<name>appendText</name></name><argument_list>(<argument><expr>"value should be negative"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>((<name>Integer</name>) <name>item</name>).<call><name>intValue</name><argument_list>()</argument_list></call> &lt; 0</expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <name><name>Rule</name>.<name>Phoneme</name></name><index>[]</index><index>[]</index></type> <name>makePhonemes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>words</name> =<init> <expr><block>{
                <expr><block>{ <expr>"rinD"</expr>, <expr>"rinDlt"</expr>, <expr>"rina"</expr>, <expr>"rinalt"</expr>, <expr>"rino"</expr>, <expr>"rinolt"</expr>, <expr>"rinu"</expr>, <expr>"rinult"</expr> }</block></expr>,
                <expr><block>{ <expr>"dortlaj"</expr>, <expr>"dortlej"</expr>, <expr>"ortlaj"</expr>, <expr>"ortlej"</expr>, <expr>"ortlej-dortlaj"</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name><index>[]</index><index>[]</index></type> <name>phonemes</name> =<init> <expr>new <name><name>Rule</name>.<name>Phoneme</name><index>[<expr><name><name>words</name>.<name>length</name></name></expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>words</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>words_i</name> =<init> <expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name><index>[]</index></type> <name>phonemes_i</name> =<init> <expr><name><name>phonemes</name><index>[<expr><name>i</name></expr>]</index></name> = new <name><name>Rule</name>.<name>Phoneme</name><index>[<expr><name><name>words_i</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>words_i</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name><name>phonemes_i</name><index>[<expr><name>j</name></expr>]</index></name> = new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr><name><name>words_i</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Languages</name>.<name>NO_LANGUAGES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>

        <return>return <expr><name>phonemes</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testPhonemeComparedToLaterIsNegative</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name><index>[]</index></type> <name>phs</name> :<range> <expr><call><name>makePhonemes</name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>phs</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name>i</name> + 1</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>phs</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>c</name> =<init> <expr><call><name><name>Rule</name>.<name>Phoneme</name>.<name>COMPARATOR</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>phs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>phs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr>"Comparing " + <name><name>phs</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getPhonemeText</name><argument_list>()</argument_list></call> + " to " + <name><name>phs</name><index>[<expr><name>j</name></expr>]</index></name>.<call><name>getPhonemeText</name><argument_list>()</argument_list></call> + " should be negative"</expr></argument>, <argument><expr><call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr>new <call><name>NegativeIntegerBaseMatcher</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testPhonemeComparedToSelfIsZero</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name><index>[]</index></type> <name>phs</name> :<range> <expr><call><name>makePhonemes</name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <for>for (<init><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name></type> <name>ph</name> :<range> <expr><name>phs</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Phoneme compared to itself should be zero: " + <call><name><name>ph</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>,
                        <argument><expr><call><name><name>Rule</name>.<name>Phoneme</name>.<name>COMPARATOR</name>.<name>compare</name></name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSubSequenceWorks</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// AppendableCharSequence is private to Rule. We can only make it through a Phoneme.</comment>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name></type> <name>a</name> =<init> <expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr>"a"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name></type> <name>b</name> =<init> <expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr>"b"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name></type> <name>cd</name> =<init> <expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr>"cd"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name></type> <name>ef</name> =<init> <expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr>"ef"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name></type> <name>ghi</name> =<init> <expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr>"ghi"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name></type> <name>jkl</name> =<init> <expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr>"jkl"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'a'</expr></argument>, <argument><expr><call><name><name>a</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'b'</expr></argument>, <argument><expr><call><name><name>b</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'c'</expr></argument>, <argument><expr><call><name><name>cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'d'</expr></argument>, <argument><expr><call><name><name>cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'e'</expr></argument>, <argument><expr><call><name><name>ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'f'</expr></argument>, <argument><expr><call><name><name>ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'g'</expr></argument>, <argument><expr><call><name><name>ghi</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'h'</expr></argument>, <argument><expr><call><name><name>ghi</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'i'</expr></argument>, <argument><expr><call><name><name>ghi</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'j'</expr></argument>, <argument><expr><call><name><name>jkl</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'k'</expr></argument>, <argument><expr><call><name><name>jkl</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'l'</expr></argument>, <argument><expr><call><name><name>jkl</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name></type> <name>a_b</name> =<init> <expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'a'</expr></argument>, <argument><expr><call><name><name>a_b</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'b'</expr></argument>, <argument><expr><call><name><name>a_b</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ab"</expr></argument>, <argument><expr><call><name><name>a_b</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"a"</expr></argument>, <argument><expr><call><name><name>a_b</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"b"</expr></argument>, <argument><expr><call><name><name>a_b</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name></type> <name>cd_ef</name> =<init> <expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><name>ef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'c'</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'d'</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'e'</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'f'</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c"</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"d"</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"e"</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"f"</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"cd"</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"de"</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ef"</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"cde"</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"def"</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"cdef"</expr></argument>, <argument><expr><call><name><name>cd_ef</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Rule</name>.<name>Phoneme</name></name></type> <name>a_b_cd</name> =<init> <expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'a'</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'b'</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'c'</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>'d'</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"a"</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"b"</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c"</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"d"</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ab"</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bc"</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"cd"</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"abc"</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bcd"</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"abcd"</expr></argument>, <argument><expr><call><name><name>a_b_cd</name>.<name>getPhonemeText</name></name><argument_list>()</argument_list></call>.<call><name>subSequence</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
