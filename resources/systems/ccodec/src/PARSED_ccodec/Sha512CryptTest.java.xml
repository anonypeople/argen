<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\digest\Sha512CryptTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>digest</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Ignore</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>Sha512CryptTest</name> <block>{

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha512CryptStrings</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// empty data</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$6$foo$Nywkte7LPWjaJhWjNeGJN.dFdY3pN1wYlGifyRLYOVlGS9EMSiZaDDe/BGSOYQ327q9.32I4UqQ5odsqvsBLX/"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>"$6$foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// salt gets cut at dollar sign</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$6$45678$f2en/Y053Knir/wu/T8DQKSbiUGcPcbXKsmyVlP820dIpXoY0KlqgUqRVFfavdRXwDMUZYsxPOymA4zgX0qE5."</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>"$6$45678"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$6$45678$f2en/Y053Knir/wu/T8DQKSbiUGcPcbXKsmyVlP820dIpXoY0KlqgUqRVFfavdRXwDMUZYsxPOymA4zgX0qE5."</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>"$6$45678$012"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$6$45678$f2en/Y053Knir/wu/T8DQKSbiUGcPcbXKsmyVlP820dIpXoY0KlqgUqRVFfavdRXwDMUZYsxPOymA4zgX0qE5."</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>"$6$45678$012$456"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// salt gets cut at maximum length</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$6$1234567890123456$d2HCAnimIF5VMqUnwaZ/4JhNDJ.ttsjm0nbbmc9eE7xUYiw79GMvXUc5ZqG5BlqkXSbASZxrvR0QefAgdLbeH."</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>"$6$1234567890123456"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$6$1234567890123456$d2HCAnimIF5VMqUnwaZ/4JhNDJ.ttsjm0nbbmc9eE7xUYiw79GMvXUc5ZqG5BlqkXSbASZxrvR0QefAgdLbeH."</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>"$6$1234567890123456789"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha512CryptBytes</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// An empty Bytearray equals an empty String</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$6$foo$Nywkte7LPWjaJhWjNeGJN.dFdY3pN1wYlGifyRLYOVlGS9EMSiZaDDe/BGSOYQ327q9.32I4UqQ5odsqvsBLX/"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>"$6$foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// UTF-8 stores \u00e4 "a with diaeresis" as two bytes 0xc3 0xa4.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$6$./$fKtWqslQkwI8ZxjdWoeS.jHHrte97bZxiwB5gwCRHX6LG62fUhT6Bb5MRrjWvieh0C/gxh8ItFuTsVy80VrED1"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"t\u00e4st"</expr></argument>, <argument><expr>"$6$./$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// ISO-8859-1 stores "a with diaeresis" as single byte 0xe4.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$6$./$L49DSK.d2df/LxGLJQMyS5A/Um.TdHqgc46j5FpScEPlqQHP5dEazltaDNDZ6UEs2mmNI6kPwtH/rsP9g5zBI."</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"t\u00e4st".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>ISO_8859_1</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"$6$./$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha512CryptExplicitCall</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Sha2Crypt</name>.<name>sha512Crypt</name></name><argument_list>(<argument><expr>"secret".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>matches</name><argument_list>(<argument><expr>"^\\$6\\$[a-zA-Z0-9./]{0,16}\\$.{1,}$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Sha2Crypt</name>.<name>sha512Crypt</name></name><argument_list>(<argument><expr>"secret".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>matches</name><argument_list>(<argument><expr>"^\\$6\\$[a-zA-Z0-9./]{0,16}\\$.{1,}$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected = NullPointerException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha512CryptNullData</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Sha2Crypt</name>.<name>sha512Crypt</name></name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Ignore</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha512CryptNullSalt</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// cannot be tested as sha512Crypt() with all params is private and</comment>
        <comment type="line">// all public methods check for salt==null.</comment>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha2CryptRounds</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// minimum rounds?</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$5$rounds=1000$abcd$b8MCU4GEeZIekOy5ahQ8EWfT330hvYGVeDYkBxXBva."</expr></argument>, <argument><expr><call><name><name>Sha2Crypt</name>.<name>sha256Crypt</name></name><argument_list>(<argument><expr>"secret".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"$5$rounds=50$abcd$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$5$rounds=1001$abcd$SQsJZs7KXKdd2DtklI3TY3tkD7UYA99RD0FBLm4Sk48"</expr></argument>, <argument><expr><call><name><name>Sha2Crypt</name>.<name>sha256Crypt</name></name><argument_list>(<argument><expr>"secret".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"$5$rounds=1001$abcd$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$5$rounds=9999$abcd$Rh/8ngVh9oyuS6lL3.fsq.9xbvXJsfyKWxSjO2mPIa7"</expr></argument>, <argument><expr><call><name><name>Sha2Crypt</name>.<name>sha256Crypt</name></name><argument_list>(<argument><expr>"secret".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"$5$rounds=9999$abcd"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected = IllegalArgumentException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha2CryptWrongSalt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Sha2Crypt</name>.<name>sha512Crypt</name></name><argument_list>(<argument><expr>"secret".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"xx"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected = IllegalArgumentException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha512CryptWithEmptySalt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Sha2Crypt</name>.<name>sha512Crypt</name></name><argument_list>(<argument><expr>"secret".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha256LargetThanBlocksize</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>buffer</name> =<init> <expr>new <name><name>byte</name><index>[<expr>200</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name>.<name>fill</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>200</expr></argument>, <argument><expr>(<name>byte</name>)'A'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$6$abc$oP/h8PRhCKIA66KSTjGwNsQMSLLZnuFOTjOhrqNrDkKgjTlpePSqibB0qtmDapMbP/zN1cUEYSeHFrpgqZ.GG1"</expr></argument>, <argument><expr><call><name><name>Sha2Crypt</name>.<name>sha512Crypt</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"$6$abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
