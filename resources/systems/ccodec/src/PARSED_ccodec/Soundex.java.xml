<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\language\Soundex.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>

<comment type="javadoc">/**
 * Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a
 * general purpose scheme to find word with similar phonemes.
 *
 * This class is thread-safe.
 * Although not strictly immutable, the {@link #maxLength} field is not actually used.
 *
 * @version $Id: Soundex.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>Soundex</name> <super><implements>implements <name>StringEncoder</name></implements></super> <block>{

    <comment type="javadoc">/**
     * This is a default mapping of the 26 letters used in US English. A value of &lt;code&gt;0&lt;/code&gt; for a letter position
     * means do not encode.
     * &lt;p&gt;
     * (This constant is provided as both an implementation convenience and to allow Javadoc to pick
     * up the value for the constant values page.)
     * &lt;/p&gt;
     *
     * @see #US_ENGLISH_MAPPING
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>US_ENGLISH_MAPPING_STRING</name> =<init> <expr>"01230120022455012623010202"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * This is a default mapping of the 26 letters used in US English. A value of &lt;code&gt;0&lt;/code&gt; for a letter position
     * means do not encode.
     *
     * @see Soundex#Soundex(char[])
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>US_ENGLISH_MAPPING</name> =<init> <expr><call><name><name>US_ENGLISH_MAPPING_STRING</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * An instance of Soundex using the US_ENGLISH_MAPPING mapping.
     *
     * @see #US_ENGLISH_MAPPING
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Soundex</name></type> <name>US_ENGLISH</name> =<init> <expr>new <call><name>Soundex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The maximum length of a Soundex code - Soundex codes are only four characters by definition.
     *
     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.
     */</comment>
    <decl_stmt><decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>private</specifier> <name>int</name></type> <name>maxLength</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Every letter of the alphabet is "mapped" to a numerical value. This char array holds the values to which each
     * letter is mapped. This implementation contains a default map for US_ENGLISH
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>soundexMapping</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an instance using US_ENGLISH_MAPPING
     *
     * @see Soundex#Soundex(char[])
     * @see Soundex#US_ENGLISH_MAPPING
     */</comment>
    <constructor><specifier>public</specifier> <name>Soundex</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>soundexMapping</name></name> = <name>US_ENGLISH_MAPPING</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized
     * mapping for a non-Western character set.
     *
     * Every letter of the alphabet is "mapped" to a numerical value. This char array holds the values to which each
     * letter is mapped. This implementation contains a default map for US_ENGLISH
     *
     * @param mapping
     *                  Mapping array to use when finding the corresponding code for a given character
     */</comment>
    <constructor><specifier>public</specifier> <name>Soundex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>mapping</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>soundexMapping</name></name> = new <name><name>char</name><index>[<expr><name><name>mapping</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>this</name>.<name>soundexMapping</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>mapping</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,
     * and/or possibly provide an internationalized mapping for a non-Western character set.
     *
     * @param mapping
     *            Mapping string to use when finding the corresponding code for a given character
     * @since 1.4
     */</comment>
    <constructor><specifier>public</specifier> <name>Soundex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>mapping</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>soundexMapping</name></name> = <call><name><name>mapping</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This
     * return value ranges from 0 through 4: 0 indicates little or no similarity, and 4 indicates strong similarity or
     * identical values.
     *
     * @param s1
     *                  A String that will be encoded and compared.
     * @param s2
     *                  A String that will be encoded and compared.
     * @return The number of characters in the two encoded Strings that are the same from 0 to 4.
     *
     * @see SoundexUtils#difference(StringEncoder,String,String)
     * @see &lt;a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp"&gt; MS
     *          T-SQL DIFFERENCE &lt;/a&gt;
     *
     * @throws EncoderException
     *                  if an error occurs encoding one of the strings
     * @since 1.3
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>difference</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>s1</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>s2</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>SoundexUtils</name>.<name>difference</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of
     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.
     *
     * @param obj
     *                  Object to encode
     * @return An object (or type java.lang.String) containing the soundex code which corresponds to the String
     *             supplied.
     * @throws EncoderException
     *                  if the parameter supplied is not of type java.lang.String
     * @throws IllegalArgumentException
     *                  if a character is not mapped
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>String</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr>"Parameter supplied to Soundex encode is not of type java.lang.String"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name>soundex</name><argument_list>(<argument><expr>(<name>String</name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a String using the soundex algorithm.
     *
     * @param str
     *                  A String object to encode
     * @return A Soundex code corresponding to the String supplied
     * @throws IllegalArgumentException
     *                  if a character is not mapped
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>soundex</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Used internally by the SoundEx algorithm.
     *
     * Consonants from the same code group separated by W or H are treated as one.
     *
     * @param str
     *                  the cleaned working string to encode (in upper case).
     * @param index
     *                  the character position to encode
     * @return Mapping code for a particular character
     * @throws IllegalArgumentException
     *                  if the character is not mapped
     */</comment>
    <function><type><specifier>private</specifier> <name>char</name></type> <name>getMappingCode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// map() throws IllegalArgumentException</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>mappedChar</name> =<init> <expr><call><name><name>this</name>.<name>map</name></name><argument_list>(<argument><expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// HW rule check</comment>
        <if>if <condition>(<expr><name>index</name> &gt; 1 &amp;&amp; <name>mappedChar</name> != '0'</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>hwChar</name> =<init> <expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>'H' == <name>hwChar</name> || 'W' == <name>hwChar</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>preHWChar</name> =<init> <expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>index</name> - 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>firstCode</name> =<init> <expr><call><name><name>this</name>.<name>map</name></name><argument_list>(<argument><expr><name>preHWChar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>firstCode</name> == <name>mappedChar</name> || 'H' == <name>preHWChar</name> || 'W' == <name>preHWChar</name></expr>)</condition><then> <block>{
                    <return>return <expr>0</expr>;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>mappedChar</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maxLength. Standard Soundex
     *
     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.
     * @return int
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>getMaxLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxLength</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the soundex mapping.
     *
     * @return soundexMapping.
     */</comment>
    <function><type><specifier>private</specifier> <name>char</name><index>[]</index></type> <name>getSoundexMapping</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>soundexMapping</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Maps the given upper-case character to its Soundex code.
     *
     * @param ch
     *                  An upper-case character.
     * @return A Soundex code.
     * @throws IllegalArgumentException
     *                  Thrown if &lt;code&gt;ch&lt;/code&gt; is not mapped.
     */</comment>
    <function><type><specifier>private</specifier> <name>char</name></type> <name>map</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name> =<init> <expr><name>ch</name> - 'A'</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt;= <call><name><name>this</name>.<name>getSoundexMapping</name></name><argument_list>()</argument_list></call>.<name>length</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"The character is not mapped: " + <name>ch</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>getSoundexMapping</name></name><argument_list>()</argument_list></call><index>[<expr><name>index</name></expr>]</index></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maxLength.
     *
     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.
     * @param maxLength
     *                  The maxLength to set
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>setMaxLength</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxLength</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maxLength</name></name> = <name>maxLength</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieves the Soundex code for a given String object.
     *
     * @param str
     *                  String to encode using the Soundex algorithm
     * @return A soundex code for the String supplied
     * @throws IllegalArgumentException
     *                  if a character is not mapped
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>soundex</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>str</name> = <call><name><name>SoundexUtils</name>.<name>clean</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>str</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name><name>out</name><index>[]</index></name> =<init> <expr><block>{<expr>'0'</expr>, <expr>'0'</expr>, <expr>'0'</expr>, <expr>'0'</expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>last</name>, <name>mapped</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>incount</name> =<init> <expr>1</expr></init>, <name>count</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>out</name><index>[<expr>0</expr>]</index></name> = <call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// getMappingCode() throws IllegalArgumentException</comment>
        <expr_stmt><expr><name>last</name> = <call><name>getMappingCode</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>incount</name> &lt; <call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>count</name> &lt; <name><name>out</name>.<name>length</name></name></expr>)</condition> <block>{
            <expr_stmt><expr><name>mapped</name> = <call><name>getMappingCode</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>incount</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>mapped</name> != 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>mapped</name> != '0' &amp;&amp; <name>mapped</name> != <name>last</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>out</name><index>[<expr><name>count</name>++</expr>]</index></name> = <name>mapped</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>last</name> = <name>mapped</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
