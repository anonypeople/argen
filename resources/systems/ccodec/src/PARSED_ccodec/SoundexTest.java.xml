<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\SoundexTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="line">// (FYI: Formatted and sorted with Eclipse)</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>org</name>.<name>junit</name>.<name>Assert</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoderAbstractTest</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests {@link Soundex}.
 *
 * &lt;p&gt;Keep this file in UTF-8 encoding for proper Javadoc processing.&lt;/p&gt;
 *
 * @version $Id: SoundexTest.java 1437501 2013-01-23 15:51:21Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>SoundexTest</name> <super><extends>extends <name><name>StringEncoderAbstractTest</name><argument_list>&lt;<argument><name>Soundex</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>Soundex</name></type> <name>createStringEncoder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>Soundex</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testB650</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"B650"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{
            <expr>"BARHAM"</expr>,
            <expr>"BARONE"</expr>,
            <expr>"BARRON"</expr>,
            <expr>"BERNA"</expr>,
            <expr>"BIRNEY"</expr>,
            <expr>"BIRNIE"</expr>,
            <expr>"BOOROM"</expr>,
            <expr>"BOREN"</expr>,
            <expr>"BORN"</expr>,
            <expr>"BOURN"</expr>,
            <expr>"BOURNE"</expr>,
            <expr>"BOWRON"</expr>,
            <expr>"BRAIN"</expr>,
            <expr>"BRAME"</expr>,
            <expr>"BRANN"</expr>,
            <expr>"BRAUN"</expr>,
            <expr>"BREEN"</expr>,
            <expr>"BRIEN"</expr>,
            <expr>"BRIM"</expr>,
            <expr>"BRIMM"</expr>,
            <expr>"BRINN"</expr>,
            <expr>"BRION"</expr>,
            <expr>"BROOM"</expr>,
            <expr>"BROOME"</expr>,
            <expr>"BROWN"</expr>,
            <expr>"BROWNE"</expr>,
            <expr>"BRUEN"</expr>,
            <expr>"BRUHN"</expr>,
            <expr>"BRUIN"</expr>,
            <expr>"BRUMM"</expr>,
            <expr>"BRUN"</expr>,
            <expr>"BRUNO"</expr>,
            <expr>"BRYAN"</expr>,
            <expr>"BURIAN"</expr>,
            <expr>"BURN"</expr>,
            <expr>"BURNEY"</expr>,
            <expr>"BYRAM"</expr>,
            <expr>"BYRNE"</expr>,
            <expr>"BYRON"</expr>,
            <expr>"BYRUM"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBadCharacters</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"H452"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"HOL&gt;MES"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDifference</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <comment type="line">// Edge cases</comment>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Normal cases</comment>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Smith"</expr></argument>, <argument><expr>"Smythe"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Ann"</expr></argument>, <argument><expr>"Andrew"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Margaret"</expr></argument>, <argument><expr>"Andrew"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Janet"</expr></argument>, <argument><expr>"Margaret"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Examples from http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp</comment>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Green"</expr></argument>, <argument><expr>"Greene"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Blotchet-Halls"</expr></argument>, <argument><expr>"Greene"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Examples from http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp</comment>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Smith"</expr></argument>, <argument><expr>"Smythe"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Smithers"</expr></argument>, <argument><expr>"Smythers"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>difference</name><argument_list>(<argument><expr>"Anothers"</expr></argument>, <argument><expr>"Brothers"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeBasic</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"T235"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"testing"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"T000"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"The"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"Q200"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"quick"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"B650"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"brown"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"F200"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"fox"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"J513"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"jumped"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"O160"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"over"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"T000"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"the"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"L200"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"lazy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"D200"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"dogs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Examples from http://www.bradandkathy.com/genealogy/overviewofsoundex.html
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeBatch2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"A462"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Allricht"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"E166"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Eberhard"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"E521"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Engebrethson"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"H512"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Heimbach"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"H524"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Hanselmann"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"H431"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Hildebrand"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"K152"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Kavanagh"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"L530"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Lind"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"L222"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Lukaschowsky"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"M235"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"McDonnell"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"M200"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"McGee"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"O155"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Opnian"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"O155"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Oppenheimer"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"R355"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Riedemanas"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"Z300"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Zita"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"Z325"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Zitzmeinn"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Examples from http://www.archives.gov/research_room/genealogy/census/soundex.html
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeBatch3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"W252"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Washington"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"L000"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Lee"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"G362"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Gutierrez"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"P236"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Pfister"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"J250"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Jackson"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"T522"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Tymczak"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// For VanDeusen: D-250 (D, 2 for the S, 5 for the N, 0 added) is also</comment>
        <comment type="line">// possible.</comment>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"V532"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"VanDeusen"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Examples from: http://www.myatt.demon.co.uk/sxalg.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeBatch4</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"H452"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"HOLMES"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"A355"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"ADOMOMI"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"V536"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"VONDERLEHR"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"B400"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"BALL"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"S000"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"SHAW"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"J250"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"JACKSON"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"S545"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"SCANLON"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"S532"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"SAINTJOHN"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeIgnoreApostrophes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"O165"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{
            <expr>"OBrien"</expr>,
            <expr>"'OBrien"</expr>,
            <expr>"O'Brien"</expr>,
            <expr>"OB'rien"</expr>,
            <expr>"OBr'ien"</expr>,
            <expr>"OBri'en"</expr>,
            <expr>"OBrie'n"</expr>,
            <expr>"OBrien'"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test data from http://www.myatt.demon.co.uk/sxalg.htm
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeIgnoreHyphens</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"K525"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{
            <expr>"KINGSMITH"</expr>,
            <expr>"-KINGSMITH"</expr>,
            <expr>"K-INGSMITH"</expr>,
            <expr>"KI-NGSMITH"</expr>,
            <expr>"KIN-GSMITH"</expr>,
            <expr>"KING-SMITH"</expr>,
            <expr>"KINGS-MITH"</expr>,
            <expr>"KINGSM-ITH"</expr>,
            <expr>"KINGSMI-TH"</expr>,
            <expr>"KINGSMIT-H"</expr>,
            <expr>"KINGSMITH-"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeIgnoreTrimmable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"W252"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>" \t\n\r Washington \t\n\r "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Consonants from the same code group separated by W or H are treated as one.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testHWRuleEx1</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// From</comment>
        <comment type="line">// http://www.archives.gov/research_room/genealogy/census/soundex.html:</comment>
        <comment type="line">// Ashcraft is coded A-261 (A, 2 for the S, C ignored, 6 for the R, 1</comment>
        <comment type="line">// for the F). It is not coded A-226.</comment>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"A261"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Ashcraft"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Consonants from the same code group separated by W or H are treated as one.
     *
     * Test data from http://www.myatt.demon.co.uk/sxalg.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testHWRuleEx2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"B312"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"BOOTHDAVIS"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"B312"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"BOOTH-DAVIS"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Consonants from the same code group separated by W or H are treated as one.
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testHWRuleEx3</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"S460"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Sgler"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"S460"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Swhgler"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Also S460:</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"S460"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{
            <expr>"SAILOR"</expr>,
            <expr>"SALYER"</expr>,
            <expr>"SAYLOR"</expr>,
            <expr>"SCHALLER"</expr>,
            <expr>"SCHELLER"</expr>,
            <expr>"SCHILLER"</expr>,
            <expr>"SCHOOLER"</expr>,
            <expr>"SCHULER"</expr>,
            <expr>"SCHUYLER"</expr>,
            <expr>"SEILER"</expr>,
            <expr>"SEYLER"</expr>,
            <expr>"SHOLAR"</expr>,
            <expr>"SHULER"</expr>,
            <expr>"SILAR"</expr>,
            <expr>"SILER"</expr>,
            <expr>"SILLER"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Examples for MS SQLServer from
     * http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMsSqlServer1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"S530"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Smith"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"S530"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Smythe"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Examples for MS SQLServer from
     * http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support
     * /kb/articles/Q100/3/65.asp&amp;NoWebContent=1
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMsSqlServer2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"E625"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{<expr>"Erickson"</expr>, <expr>"Erickson"</expr>, <expr>"Erikson"</expr>, <expr>"Ericson"</expr>, <expr>"Ericksen"</expr>, <expr>"Ericsen"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Examples for MS SQLServer from http://databases.about.com/library/weekly/aa042901a.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMsSqlServer3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"A500"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Ann"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"A536"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Andrew"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"J530"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Janet"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"M626"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Margaret"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"S315"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Steven"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"M240"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Michael"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"R163"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Robert"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"L600"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Laura"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"A500"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Anne"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * https://issues.apache.org/jira/browse/CODEC-54 https://issues.apache.org/jira/browse/CODEC-56
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewInstance</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"W452"</expr></argument>, <argument><expr>new <call><name>Soundex</name><argument_list>()</argument_list></call>.<call><name>soundex</name><argument_list>(<argument><expr>"Williams"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewInstance2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"W452"</expr></argument>, <argument><expr>new <call><name>Soundex</name><argument_list>(<argument><expr><call><name><name>Soundex</name>.<name>US_ENGLISH_MAPPING_STRING</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>soundex</name><argument_list>(<argument><expr>"Williams"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewInstance3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"W452"</expr></argument>, <argument><expr>new <call><name>Soundex</name><argument_list>(<argument><expr><name><name>Soundex</name>.<name>US_ENGLISH_MAPPING_STRING</name></name></expr></argument>)</argument_list></call>.<call><name>soundex</name><argument_list>(<argument><expr>"Williams"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSoundexUtilsConstructable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr>new <call><name>SoundexUtils</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSoundexUtilsNullBehaviour</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>SoundexUtils</name>.<name>clean</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>SoundexUtils</name>.<name>clean</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>SoundexUtils</name>.<name>differenceEncoded</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>SoundexUtils</name>.<name>differenceEncoded</name></name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * https://issues.apache.org/jira/browse/CODEC-54 https://issues.apache.org/jira/browse/CODEC-56
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUsEnglishStatic</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"W452"</expr></argument>, <argument><expr><call><name><name>Soundex</name>.<name>US_ENGLISH</name>.<name>soundex</name></name><argument_list>(<argument><expr>"Williams"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Fancy characters are not mapped by the default US mapping.
     *
     * http://issues.apache.org/bugzilla/show_bug.cgi?id=29080
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUsMappingEWithAcute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"E000"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"e"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>Character</name>.<name>isLetter</name></name><argument_list>(<argument><expr>'\u00e9'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// e-acute</comment>
            <try>try <block>{
                <comment type="line">//         uppercase E-acute</comment>
                <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"\u00c9000"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"\u00e9"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Assert</name>.<name>fail</name></name><argument_list>(<argument><expr>"Expected IllegalArgumentException not thrown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// expected</comment>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"\u00e9"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Fancy characters are not mapped by the default US mapping.
     *
     * http://issues.apache.org/bugzilla/show_bug.cgi?id=29080
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUsMappingOWithDiaeresis</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"O000"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"o"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>Character</name>.<name>isLetter</name></name><argument_list>(<argument><expr>'\u00f6'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// o-umlaut</comment>
            <try>try <block>{
                <comment type="line">//         uppercase O-umlaut</comment>
                <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"\u00d6000"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"\u00f6"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Assert</name>.<name>fail</name></name><argument_list>(<argument><expr>"Expected IllegalArgumentException not thrown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// expected</comment>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"\u00f6"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
