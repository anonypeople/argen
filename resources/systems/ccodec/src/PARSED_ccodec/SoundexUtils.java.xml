<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\language\SoundexUtils.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>

<comment type="javadoc">/**
 * Utility methods for {@link Soundex} and {@link RefinedSoundex} classes.
 *
 * &lt;p&gt;This class is immutable and thread-safe.&lt;/p&gt;
 *
 * @version $Id: SoundexUtils.java 1429868 2013-01-07 16:08:05Z ggregory $
 * @since 1.3
 */</comment>
<class><specifier>final</specifier> class <name>SoundexUtils</name> <block>{

    <comment type="javadoc">/**
     * Cleans up the input string before Soundex processing by only returning
     * upper case letters.
     *
     * @param str
     *                  The String to clean.
     * @return A clean String.
     */</comment>
    <function><type><specifier>static</specifier> <name>String</name></type> <name>clean</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name> || <call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>str</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name> =<init> <expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>chars</name> =<init> <expr>new <name><name>char</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>Character</name>.<name>isLetter</name></name><argument_list>(<argument><expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>chars</name><index>[<expr><name>count</name>++</expr>]</index></name> = <call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>count</name> == <name>len</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>str</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>java</name>.<name>util</name>.<name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call>.<call><name>toUpperCase</name><argument_list>(<argument><expr><name><name>java</name>.<name>util</name>.<name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes the Strings and returns the number of characters in the two
     * encoded Strings that are the same.
     * &lt;ul&gt;
     * &lt;li&gt;For Soundex, this return value ranges from 0 through 4: 0 indicates
     * little or no similarity, and 4 indicates strong similarity or identical
     * values.&lt;/li&gt;
     * &lt;li&gt;For refined Soundex, the return value can be greater than 4.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param encoder
     *                  The encoder to use to encode the Strings.
     * @param s1
     *                  A String that will be encoded and compared.
     * @param s2
     *                  A String that will be encoded and compared.
     * @return The number of characters in the two Soundex encoded Strings that
     *             are the same.
     *
     * @see #differenceEncoded(String,String)
     * @see &lt;a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp"&gt;
     *          MS T-SQL DIFFERENCE&lt;/a&gt;
     *
     * @throws EncoderException
     *                  if an error occurs encoding one of the strings
     */</comment>
    <function><type><specifier>static</specifier> <name>int</name></type> <name>difference</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>StringEncoder</name></type> <name>encoder</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>s1</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>s2</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>differenceEncoded</name><argument_list>(<argument><expr><call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of characters in the two Soundex encoded Strings that
     * are the same.
     * &lt;ul&gt;
     * &lt;li&gt;For Soundex, this return value ranges from 0 through 4: 0 indicates
     * little or no similarity, and 4 indicates strong similarity or identical
     * values.&lt;/li&gt;
     * &lt;li&gt;For refined Soundex, the return value can be greater than 4.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param es1
     *                  An encoded String.
     * @param es2
     *                  An encoded String.
     * @return The number of characters in the two Soundex encoded Strings that
     *             are the same.
     *
     * @see &lt;a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp"&gt;
     *          MS T-SQL DIFFERENCE&lt;/a&gt;
     */</comment>
    <function><type><specifier>static</specifier> <name>int</name></type> <name>differenceEncoded</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>es1</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>es2</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>es1</name> == <name>null</name> || <name>es2</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>lengthToMatch</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>es1</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>es2</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>diff</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>lengthToMatch</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>es1</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <call><name><name>es2</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>diff</name>++</expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>diff</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
