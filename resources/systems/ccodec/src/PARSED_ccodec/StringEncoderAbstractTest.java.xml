<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\StringEncoderAbstractTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Assert</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * @version $Id: StringEncoderAbstractTest.java 1437501 2013-01-23 15:51:21Z ggregory $
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>StringEncoderAbstractTest</name><argument_list>&lt;<argument><name>T</name> <extends>extends <name>StringEncoder</name></extends></argument>&gt;</argument_list></name> <block>{

    <decl_stmt><decl><type><specifier>protected</specifier> <name>T</name></type> <name>stringEncoder</name> =<init> <expr><call><name><name>this</name>.<name>createStringEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkEncoding</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>source</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"Source: " + <name>source</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkEncodings</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>element</name> :<range> <expr><name>data</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>checkEncoding</name></name><argument_list>(<argument><expr><name><name>element</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>element</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkEncodingVariations</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name><name>data</name><index>[]</index></name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>element</name> :<range> <expr><name>data</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>checkEncoding</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>T</name></type> <name>createStringEncoder</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>T</name></type> <name>getStringEncoder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>stringEncoder</name></name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeEmpty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Encoder</name></type> <name>encoder</name> =<init> <expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr>"\t"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeNull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringEncoder</name></type> <name>encoder</name> =<init> <expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>EncoderException</name></type> <name>ee</name></decl></param>) <block>{
            <comment type="line">// An exception should be thrown</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeWithInvalidObject</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>exceptionThrown</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringEncoder</name></type> <name>encoder</name> =<init> <expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr>new <call><name>Float</name><argument_list>(<argument><expr>3.4</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><name>exceptionThrown</name> = true</expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr>"An exception was not thrown when we tried to encode " + "a Float object"</expr></argument>, <argument><expr><name>exceptionThrown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testLocaleIndependence</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringEncoder</name></type> <name>encoder</name> =<init> <expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>data</name> =<init> <expr><block>{<expr>"I"</expr>, <expr>"i"</expr>,}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Locale</name></type> <name>orig</name> =<init> <expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Locale</name><index>[]</index></type> <name>locales</name> =<init> <expr><block>{<expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr>, <expr>new <call><name>Locale</name><argument_list>(<argument><expr>"tr"</expr></argument>)</argument_list></call></expr>, <expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>element</name> :<range> <expr><name>data</name></expr></range></decl></init>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>ref</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>locales</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><call><name><name>Locale</name>.<name>setDefault</name></name><argument_list>(<argument><expr><name><name>locales</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>j</name> &lt;= 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>ref</name> = <call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>cur</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                        <try>try <block>{
                            <expr_stmt><expr><name>cur</name> = <call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></param>) <block>{
                            <expr_stmt><expr><call><name><name>Assert</name>.<name>fail</name></name><argument_list>(<argument><expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call> + ": " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></catch></try>
                        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call> + ": "</expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>
            }</block></for>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>Locale</name>.<name>setDefault</name></name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

}</block></class>
</unit>
