<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\StringEncoderComparator.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>

<comment type="javadoc">/**
 * Compares Strings using a {@link StringEncoder}. This comparator is used to sort Strings by an encoding scheme such as
 * Soundex, Metaphone, etc. This class can come in handy if one need to sort Strings by an encoded form of a name such
 * as Soundex.
 *
 * &lt;p&gt;This class is immutable and thread-safe.&lt;/p&gt;
 *
 * @version $Id: StringEncoderComparator.java 1468177 2013-04-15 18:35:15Z ggregory $
 */</comment>
<class><annotation>@<name>SuppressWarnings</name><argument_list>("rawtypes")</argument_list></annotation>
<comment type="line">// TODO ought to implement Comparator&lt;String&gt; but that's not possible whilst maintaining binary compatibility.</comment>
<specifier>public</specifier> class <name>StringEncoderComparator</name> <super><implements>implements <name>Comparator</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Internal encoder instance.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StringEncoder</name></type> <name>stringEncoder</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new instance.
     *
     * @deprecated Creating an instance without a {@link StringEncoder} leads to a {@link NullPointerException}. Will be
     *             removed in 2.0.
     */</comment>
    <constructor><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>StringEncoderComparator</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>stringEncoder</name></name> = <name>null</name></expr>;</expr_stmt> <comment type="line">// Trying to use this will cause things to break</comment>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new instance with the given algorithm.
     *
     * @param stringEncoder
     *            the StringEncoder used for comparisons.
     */</comment>
    <constructor><specifier>public</specifier> <name>StringEncoderComparator</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>StringEncoder</name></type> <name>stringEncoder</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>stringEncoder</name></name> = <name>stringEncoder</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Compares two strings based not on the strings themselves, but on an encoding of the two strings using the
     * StringEncoder this Comparator was created with.
     *
     * If an {@link EncoderException} is encountered, return &lt;code&gt;0&lt;/code&gt;.
     *
     * @param o1
     *            the object to compare
     * @param o2
     *            the object to compare to
     * @return the Comparable.compareTo() return code or 0 if an encoding error was caught.
     * @see Comparable
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>o1</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>o2</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>compareCode</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation> <comment type="line">// May fail with CCE if encode returns something that is not Comparable</comment>
            <comment type="line">// However this was always the case.</comment>
            <specifier>final</specifier> <name><name>Comparable</name><argument_list>&lt;<argument><name><name>Comparable</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>s1</name> =<init> <expr>(<name><name>Comparable</name><argument_list>&lt;<argument><name><name>Comparable</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name>) <call><name><name>this</name>.<name>stringEncoder</name>.<name>encode</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Comparable</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>s2</name> =<init> <expr>(<name><name>Comparable</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>) <call><name><name>this</name>.<name>stringEncoder</name>.<name>encode</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>compareCode</name> = <call><name><name>s1</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>EncoderException</name></type> <name>ee</name></decl></param>) <block>{
            <expr_stmt><expr><name>compareCode</name> = 0</expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>compareCode</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
