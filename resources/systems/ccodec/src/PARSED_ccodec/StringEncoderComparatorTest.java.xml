<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\StringEncoderComparatorTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>DoubleMetaphone</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>Soundex</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Test cases for the StingEncoderComparator.
 *
 * @version $Id: StringEncoderComparatorTest.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>StringEncoderComparatorTest</name> <block>{

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testComparatorWithSoundex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringEncoderComparator</name></type> <name>sCompare</name> =<init>
            <expr>new <call><name>StringEncoderComparator</name><argument_list>( <argument><expr>new <call><name>Soundex</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr>"O'Brien and O'Brian didn't come out with " +
                    "the same Soundex, something must be wrong here"</expr></argument>,
                    <argument><expr>0 == <call><name><name>sCompare</name>.<name>compare</name></name><argument_list>( <argument><expr>"O'Brien"</expr></argument>, <argument><expr>"O'Brian"</expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testComparatorWithDoubleMetaphone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringEncoderComparator</name></type> <name>sCompare</name> =<init> <expr>new <call><name>StringEncoderComparator</name><argument_list>(<argument><expr>new <call><name>DoubleMetaphone</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>testArray</name> =<init> <expr><block>{ <expr>"Jordan"</expr>, <expr>"Sosa"</expr>, <expr>"Prior"</expr>, <expr>"Pryor"</expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>testList</name> =<init> <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>testArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>controlArray</name> =<init> <expr><block>{ <expr>"Jordan"</expr>, <expr>"Prior"</expr>, <expr>"Pryor"</expr>, <expr>"Sosa"</expr> }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>testList</name></expr></argument>, <argument><expr><name>sCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>resultArray</name> =<init> <expr><call><name><name>testList</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>resultArray</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Result Array not Equal to Control Array at index: " + <name>i</name></expr></argument>, <argument><expr><name><name>controlArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>resultArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testComparatorWithDoubleMetaphoneAndInvalidInput</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringEncoderComparator</name></type> <name>sCompare</name> =<init>
            <expr>new <call><name>StringEncoderComparator</name><argument_list>( <argument><expr>new <call><name>DoubleMetaphone</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>compare</name> =<init> <expr><call><name><name>sCompare</name>.<name>compare</name></name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>3.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Long</name>.<name>valueOf</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"Trying to compare objects that make no sense to the underlying encoder should return a zero compare code"</expr></argument>,
                                <argument><expr>0</expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
