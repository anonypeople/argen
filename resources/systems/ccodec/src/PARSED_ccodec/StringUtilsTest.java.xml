<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\binary\StringUtilsTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Assert</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests {@link StringUtils}
 *
 * @version $Id: StringUtilsTest.java 1437501 2013-01-23 15:51:21Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>StringUtilsTest</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>BYTES_FIXTURE</name> =<init> <expr><block>{<expr>'a'</expr>,<expr>'b'</expr>,<expr>'c'</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// This is valid input for UTF-16BE</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>BYTES_FIXTURE_16BE</name> =<init> <expr><block>{<expr>0</expr>, <expr>'a'</expr>, <expr>0</expr>, <expr>'b'</expr>, <expr>0</expr>, <expr>'c'</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// This is valid for UTF-16LE</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>BYTES_FIXTURE_16LE</name> =<init> <expr><block>{<expr>'a'</expr>, <expr>0</expr>, <expr>'b'</expr>, <expr>0</expr>, <expr>'c'</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STRING_FIXTURE</name> =<init> <expr>"ABC"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops
     * to restrict instantiation right now.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testConstructor</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr>new <call><name>StringUtils</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testGetBytesIso8859_1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"ISO-8859-1"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testGetBytesUnchecked</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>expected</name> =<init> <expr><call><name><name>STRING_FIXTURE</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesIso8859_1</name></name><argument_list>(<argument><expr><name>STRING_FIXTURE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testGetBytesUnchecked</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>expected</name> =<init> <expr><call><name><name>STRING_FIXTURE</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUnchecked</name></name><argument_list>(<argument><expr><name>STRING_FIXTURE</name></expr></argument>, <argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testGetBytesUsAscii</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"US-ASCII"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testGetBytesUnchecked</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>expected</name> =<init> <expr><call><name><name>STRING_FIXTURE</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUsAscii</name></name><argument_list>(<argument><expr><name>STRING_FIXTURE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testGetBytesUtf16</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"UTF-16"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testGetBytesUnchecked</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>expected</name> =<init> <expr><call><name><name>STRING_FIXTURE</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf16</name></name><argument_list>(<argument><expr><name>STRING_FIXTURE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testGetBytesUtf16Be</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"UTF-16BE"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testGetBytesUnchecked</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>expected</name> =<init> <expr><call><name><name>STRING_FIXTURE</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf16Be</name></name><argument_list>(<argument><expr><name>STRING_FIXTURE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testGetBytesUtf16Le</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"UTF-16LE"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testGetBytesUnchecked</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>expected</name> =<init> <expr><call><name><name>STRING_FIXTURE</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf16Le</name></name><argument_list>(<argument><expr><name>STRING_FIXTURE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testGetBytesUtf8</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"UTF-8"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testGetBytesUnchecked</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>expected</name> =<init> <expr><call><name><name>STRING_FIXTURE</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>STRING_FIXTURE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testGetBytesUncheckedBadName</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>StringUtils</name>.<name>getBytesUnchecked</name></name><argument_list>(<argument><expr><name>STRING_FIXTURE</name></expr></argument>, <argument><expr>"UNKNOWN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Assert</name>.<name>fail</name></name><argument_list>(<argument><expr>"Expected " + <name><name>IllegalStateException</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IllegalStateException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testGetBytesUncheckedNullInput</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertNull</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUnchecked</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"UNKNOWN"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testNewString</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>, <argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newString</name></name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>, <argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewStringBadEnc</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>StringUtils</name>.<name>newString</name></name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>, <argument><expr>"UNKNOWN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Assert</name>.<name>fail</name></name><argument_list>(<argument><expr>"Expected " + <name><name>IllegalStateException</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IllegalStateException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewStringNullInput</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertNull</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>newString</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"UNKNOWN"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewStringIso8859_1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"ISO-8859-1"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testNewString</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>, <argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringIso8859_1</name></name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewStringUsAscii</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"US-ASCII"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testNewString</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>, <argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewStringUtf16</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"UTF-16"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testNewString</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>, <argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUtf16</name></name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewStringUtf16Be</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"UTF-16BE"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testNewString</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>BYTES_FIXTURE_16BE</name></expr></argument>, <argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUtf16Be</name></name><argument_list>(<argument><expr><name>BYTES_FIXTURE_16BE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewStringUtf16Le</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"UTF-16LE"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testNewString</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>BYTES_FIXTURE_16LE</name></expr></argument>, <argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUtf16Le</name></name><argument_list>(<argument><expr><name>BYTES_FIXTURE_16LE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNewStringUtf8</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name> =<init> <expr>"UTF-8"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testNewString</name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>, <argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actual</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name>BYTES_FIXTURE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
