<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\net\URLCodec.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>BitSet</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>BinaryDecoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>BinaryEncoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>CharEncoding</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringDecoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * Implements the 'www-form-urlencoded' encoding scheme, also misleadingly known as URL encoding.
 * &lt;p&gt;
 * This codec is meant to be a replacement for standard Java classes {@link java.net.URLEncoder} and
 * {@link java.net.URLDecoder} on older Java platforms, as these classes in Java versions below
 * 1.4 rely on the platform's default charset encoding.
 * &lt;p&gt;
 * This class is immutable and thread-safe.
 *
 * @see &lt;a href="http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1"&gt;Chapter 17.13.4 Form content types&lt;/a&gt;
 *           of the &lt;a href="http://www.w3.org/TR/html4/"&gt;HTML 4.01 Specification&lt;a&gt;
 *
 * @since 1.2
 * @version $Id: URLCodec.java 1462705 2013-03-30 05:22:40Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>URLCodec</name> <super><implements>implements <name>BinaryEncoder</name>, <name>BinaryDecoder</name>, <name>StringEncoder</name>, <name>StringDecoder</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Radix used in encoding and decoding.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RADIX</name> =<init> <expr>16</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The default charset used for string decoding and encoding.
     *
     * @deprecated TODO: This field will be changed to a private final Charset in 2.0.
     */</comment>
    <decl_stmt><decl><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>protected</specifier> <name>String</name></type> <name>charset</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Release 1.5 made this field final.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>ESCAPE_CHAR</name> =<init> <expr>'%'</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * BitSet of www-form-url safe characters.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BitSet</name></type> <name>WWW_FORM_URL</name> =<init> <expr>new <call><name>BitSet</name><argument_list>(<argument><expr>256</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Static initializer for www_form_url</comment>
    static <block>{
        <comment type="line">// alpha characters</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>'a'</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 'z'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>WWW_FORM_URL</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>'A'</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 'Z'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>WWW_FORM_URL</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <comment type="line">// numeric characters</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>'0'</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= '9'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>WWW_FORM_URL</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <comment type="line">// special chars</comment>
        <expr_stmt><expr><call><name><name>WWW_FORM_URL</name>.<name>set</name></name><argument_list>(<argument><expr>'-'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WWW_FORM_URL</name>.<name>set</name></name><argument_list>(<argument><expr>'_'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WWW_FORM_URL</name>.<name>set</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>WWW_FORM_URL</name>.<name>set</name></name><argument_list>(<argument><expr>'*'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// blank to be replaced with +</comment>
        <expr_stmt><expr><call><name><name>WWW_FORM_URL</name>.<name>set</name></name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>


    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>URLCodec</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>CharEncoding</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor which allows for the selection of a default charset.
     *
     * @param charset the default string charset to use.
     */</comment>
    <constructor><specifier>public</specifier> <name>URLCodec</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>charset</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Encodes an array of bytes into an array of URL safe 7-bit characters. Unsafe characters are escaped.
     *
     * @param urlsafe
     *            bitset of characters deemed URL safe
     * @param bytes
     *            array of bytes to convert to URL safe characters
     * @return array of bytes containing URL safe characters
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encodeUrl</name><parameter_list>(<param><decl><type><name>BitSet</name></type> <name>urlsafe</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>bytes</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>urlsafe</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>urlsafe</name> = <name>WWW_FORM_URL</name></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>buffer</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>byte</name></type> <name>c</name> :<range> <expr><name>bytes</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr><name>c</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b</name> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>b</name> = 256 + <name>b</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>urlsafe</name>.<name>get</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>b</name> == ' '</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>b</name> = '+'</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>ESCAPE_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>hex1</name> =<init> <expr><call><name><name>Character</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>Character</name>.<name>forDigit</name></name><argument_list>(<argument><expr>(<name>b</name> &gt;&gt; 4) &amp; 0xF</expr></argument>, <argument><expr><name>RADIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>hex2</name> =<init> <expr><call><name><name>Character</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>Character</name>.<name>forDigit</name></name><argument_list>(<argument><expr><name>b</name> &amp; 0xF</expr></argument>, <argument><expr><name>RADIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>hex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>hex2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><call><name><name>buffer</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes an array of URL safe 7-bit characters into an array of original bytes. Escaped characters are converted
     * back to their original representation.
     *
     * @param bytes
     *            array of URL safe characters
     * @return array of original bytes
     * @throws DecoderException
     *             Thrown if URL decoding is unsuccessful
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decodeUrl</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>bytes</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>buffer</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>bytes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>b</name> =<init> <expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>b</name> == '+'</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>b</name> == <name>ESCAPE_CHAR</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>u</name> =<init> <expr><call><name><name>Utils</name>.<name>digit16</name></name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr>++<name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>l</name> =<init> <expr><call><name><name>Utils</name>.<name>digit16</name></name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr>++<name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><call>(<name>char</name>) <argument_list>(<argument><expr>(<name>u</name> &lt;&lt; 4) + <name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>ArrayIndexOutOfBoundsException</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"Invalid URL encoding: "</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>buffer</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></for>
        <return>return <expr><call><name><name>buffer</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes an array of bytes into an array of URL safe 7-bit characters. Unsafe characters are escaped.
     *
     * @param bytes
     *            array of bytes to convert to URL safe characters
     * @return array of bytes containing URL safe characters
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>encodeUrl</name><argument_list>(<argument><expr><name>WWW_FORM_URL</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Decodes an array of URL safe 7-bit characters into an array of original bytes. Escaped characters are converted
     * back to their original representation.
     *
     * @param bytes
     *            array of URL safe characters
     * @return array of original bytes
     * @throws DecoderException
     *             Thrown if URL decoding is unsuccessful
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>decodeUrl</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a string into its URL safe form using the specified string charset. Unsafe characters are escaped.
     *
     * @param str
     *            string to convert to a URL safe form
     * @param charset
     *            the charset for str
     * @return URL safe string
     * @throws UnsupportedEncodingException
     *             Thrown if charset is not supported
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><call><name><name>str</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a string into its URL safe form using the default string charset. Unsafe characters are escaped.
     *
     * @param str
     *            string to convert to a URL safe form
     * @return URL safe string
     * @throws EncoderException
     *             Thrown if URL encoding is unsuccessful
     *
     * @see #getDefaultCharset()
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <try>try <block>{
            <return>return <expr><call><name>encode</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>getDefaultCharset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <comment type="javadoc">/**
     * Decodes a URL safe string into its original form using the specified encoding. Escaped characters are converted
     * back to their original representation.
     *
     * @param str
     *            URL safe string to convert into its original form
     * @param charset
     *            the original string charset
     * @return original string
     * @throws DecoderException
     *             Thrown if URL decoding is unsuccessful
     * @throws UnsupportedEncodingException
     *             Thrown if charset is not supported
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument>, <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><call><name>decode</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUsAscii</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a URL safe string into its original form using the default string charset. Escaped characters are
     * converted back to their original representation.
     *
     * @param str
     *            URL safe string to convert into its original form
     * @return original string
     * @throws DecoderException
     *             Thrown if URL decoding is unsuccessful
     * @see #getDefaultCharset()
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <try>try <block>{
            <return>return <expr><call><name>decode</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>getDefaultCharset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes an object into its URL safe form. Unsafe characters are escaped.
     *
     * @param obj
     *            string to convert to a URL safe form
     * @return URL safe object
     * @throws EncoderException
     *             Thrown if URL encoding is not applicable to objects of this type or if encoding is unsuccessful
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name><name>byte</name><index>[]</index></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>encode</name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>)<name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>encode</name><argument_list>(<argument><expr>(<name>String</name>)<name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr>"Objects of type " + <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + " cannot be URL encoded"</expr></argument>)</argument_list></call></expr>;</throw>

        }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a URL safe object into its original form. Escaped characters are converted back to their original
     * representation.
     *
     * @param obj
     *            URL safe object to convert into its original form
     * @return original object
     * @throws DecoderException
     *             Thrown if the argument is not a &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;byte[]&lt;/code&gt;. Thrown if a failure
     *             condition is encountered during the decode process.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name><name>byte</name><index>[]</index></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>decode</name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>decode</name><argument_list>(<argument><expr>(<name>String</name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"Objects of type " + <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + " cannot be URL decoded"</expr></argument>)</argument_list></call></expr>;</throw>

        }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * The default charset used for string decoding and encoding.
     *
     * @return the default string charset.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefaultCharset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>charset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The &lt;code&gt;String&lt;/code&gt; encoding used for decoding and encoding.
     *
     * @return Returns the encoding.
     *
     * @deprecated Use {@link #getDefaultCharset()}, will be removed in 2.0.
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>getEncoding</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>charset</name></name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
