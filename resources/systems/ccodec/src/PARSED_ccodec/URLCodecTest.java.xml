<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\net\URLCodecTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>net</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertNull</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>fail</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>CharEncoding</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * URL codec test cases
 *
 * @version $Id: URLCodecTest.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>URLCodecTest</name> <block>{

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name><name>SWISS_GERMAN_STUFF_UNICODE</name> <index>[]</index></name> =<init> <expr><block>{
        <expr>0x47</expr>, <expr>0x72</expr>, <expr>0xFC</expr>, <expr>0x65</expr>, <expr>0x7A</expr>, <expr>0x69</expr>, <expr>0x5F</expr>, <expr>0x7A</expr>, <expr>0xE4</expr>, <expr>0x6D</expr>, <expr>0xE4</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name><name>RUSSIAN_STUFF_UNICODE</name> <index>[]</index></name> =<init> <expr><block>{
        <expr>0x412</expr>, <expr>0x441</expr>, <expr>0x435</expr>, <expr>0x43C</expr>, <expr>0x5F</expr>, <expr>0x43F</expr>, <expr>0x440</expr>, <expr>0x438</expr>,
        <expr>0x432</expr>, <expr>0x435</expr>, <expr>0x442</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateState</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// no tests for now.</comment>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>constructString</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>int</name> <index>[]</index></name></type> <name>unicodeChars</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>buffer</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>unicodeChars</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><specifier>final</specifier> <name>int</name></type> <name>unicodeChar</name> :<range> <expr><name>unicodeChars</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>)<name>unicodeChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><call><name><name>buffer</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUTF8RoundTrip</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>ru_msg</name> =<init> <expr><call><name>constructString</name><argument_list>(<argument><expr><name>RUSSIAN_STUFF_UNICODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>ch_msg</name> =<init> <expr><call><name>constructString</name><argument_list>(<argument><expr><name>SWISS_GERMAN_STUFF_UNICODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82"</expr></argument>,
            <argument><expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>ru_msg</name></expr></argument>, <argument><expr><name><name>CharEncoding</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Gr%C3%BCezi_z%C3%A4m%C3%A4"</expr></argument>, <argument><expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>ch_msg</name></expr></argument>, <argument><expr><name><name>CharEncoding</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>ru_msg</name></expr></argument>, <argument><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>ru_msg</name></expr></argument>, <argument><expr><name><name>CharEncoding</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>CharEncoding</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>ch_msg</name></expr></argument>, <argument><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>ch_msg</name></expr></argument>, <argument><expr><name><name>CharEncoding</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>CharEncoding</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBasicEncodeDecode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"Hello there!"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded</name> =<init> <expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic URL encoding test"</expr></argument>,
            <argument><expr>"Hello+there%21"</expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic URL decoding test"</expr></argument>,
            <argument><expr><name>plain</name></expr></argument>, <argument><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSafeCharEncodeDecode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"abc123_-.*"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded</name> =<init> <expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Safe chars URL encoding test"</expr></argument>,
            <argument><expr><name>plain</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Safe chars URL decoding test"</expr></argument>,
            <argument><expr><name>plain</name></expr></argument>, <argument><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUnsafeEncodeDecode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"~!@#$%^&amp;()+{}\"\\;:`,/[]"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded</name> =<init> <expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Unsafe chars URL encoding test"</expr></argument>,
            <argument><expr>"%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D"</expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Unsafe chars URL decoding test"</expr></argument>,
            <argument><expr><name>plain</name></expr></argument>, <argument><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeDecodeNull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"Null string URL encoding test"</expr></argument>,
            <argument><expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr>(<name>String</name>)<name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"Null string URL decoding test"</expr></argument>,
            <argument><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr>(<name>String</name>)<name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeInvalid</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr>"%"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DecoderException should have been thrown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected. Move on</comment>
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr>"%A"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DecoderException should have been thrown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected. Move on</comment>
        }</block></catch></try>
        <try>try <block>{
            <comment type="line">// Bad 1st char after %</comment>
            <expr_stmt><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr>"%WW"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DecoderException should have been thrown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected. Move on</comment>
        }</block></catch></try>
        <try>try <block>{
            <comment type="line">// Bad 2nd char after %</comment>
            <expr_stmt><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr>"%0W"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DecoderException should have been thrown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected. Move on</comment>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeInvalidContent</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument>, <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>ch_msg</name> =<init> <expr><call><name>constructString</name><argument_list>(<argument><expr><name>SWISS_GERMAN_STUFF_UNICODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>input</name> =<init> <expr><call><name><name>ch_msg</name>.<name>getBytes</name></name><argument_list>(<argument><expr>"ISO-8859-1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>output</name> =<init> <expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>input</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>output</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>input</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeNull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>plain</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encoded</name> =<init> <expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Encoding a null string should return null"</expr></argument>,
            <argument><expr><name>null</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeUrlWithNullBitSet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"Hello there!"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded</name> =<init> <expr>new <call><name>String</name><argument_list>( <argument><expr><call><name><name>URLCodec</name>.<name>encodeUrl</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>plain</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic URL encoding test"</expr></argument>,
            <argument><expr>"Hello+there%21"</expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic URL decoding test"</expr></argument>,
            <argument><expr><name>plain</name></expr></argument>, <argument><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeWithNullArray</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>plain</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>result</name> =<init> <expr><call><name><name>URLCodec</name>.<name>decodeUrl</name></name><argument_list>( <argument><expr><name>plain</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Result should be null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeStringWithNull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>test</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>result</name> =<init> <expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>( <argument><expr><name>test</name></expr></argument>, <argument><expr>"charset"</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Result should be null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeStringWithNull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>test</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>result</name> =<init> <expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>( <argument><expr><name>test</name></expr></argument>, <argument><expr>"charset"</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Result should be null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeObjects</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"Hello there!"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>encoded</name> =<init> <expr>(<name>String</name>) <call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic URL encoding test"</expr></argument>,
            <argument><expr>"Hello+there%21"</expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>plainBA</name> =<init> <expr><call><name><name>plain</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encodedBA</name> =<init> <expr>(<name><name>byte</name><index>[]</index></name>) <call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>plainBA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>encoded</name> = new <call><name>String</name><argument_list>(<argument><expr><name>encodedBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic URL encoding test"</expr></argument>,
            <argument><expr>"Hello+there%21"</expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>result</name> =<init> <expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"Encoding a null Object should return null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>dObj</name> =<init> <expr>new <call><name>Double</name><argument_list>(<argument><expr>3.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>( <argument><expr><name>dObj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr>"Trying to url encode a Double object should cause an exception."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>EncoderException</name></type> <name>ee</name></decl></param>) <block>{
            <comment type="line">// Exception expected, test segment passes.</comment>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testInvalidEncoding</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>(<argument><expr>"NONSENSE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"Hello there!"</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>EncoderException</name></type> <name>ee</name></decl></param>) <block>{
            <comment type="line">// Exception expected, test segment passes.</comment>
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>ee</name></decl></param>) <block>{
            <comment type="line">// Exception expected, test segment passes.</comment>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeObjects</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"Hello+there%21"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>decoded</name> =<init> <expr>(<name>String</name>) <call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic URL decoding test"</expr></argument>,
            <argument><expr>"Hello there!"</expr></argument>, <argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>plainBA</name> =<init> <expr><call><name><name>plain</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decodedBA</name> =<init> <expr>(<name><name>byte</name><index>[]</index></name>) <call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>plainBA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>decoded</name> = new <call><name>String</name><argument_list>(<argument><expr><name>decodedBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Basic URL decoding test"</expr></argument>,
            <argument><expr>"Hello there!"</expr></argument>, <argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>result</name> =<init> <expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>(<argument><expr>(<name>Object</name>) <name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"Decoding a null Object should return null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>dObj</name> =<init> <expr>new <call><name>Double</name><argument_list>(<argument><expr>3.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>urlCodec</name>.<name>decode</name></name><argument_list>( <argument><expr><name>dObj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr>"Trying to url encode a Double object should cause an exception."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>ee</name></decl></param>) <block>{
            <comment type="line">// Exception expected, test segment passes.</comment>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDefaultEncoding</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>plain</name> =<init> <expr>"Hello there!"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>URLCodec</name></type> <name>urlCodec</name> =<init> <expr>new <call><name>URLCodec</name><argument_list>(<argument><expr>"UnicodeBig"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// To work around a weird quirk in Java 1.2.2</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded1</name> =<init> <expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>, <argument><expr>"UnicodeBig"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded2</name> =<init> <expr><call><name><name>urlCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>encoded1</name></expr></argument>, <argument><expr><name>encoded2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>validateState</name></name><argument_list>(<argument><expr><name>urlCodec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
