<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\digest\UnixCrypt.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>digest</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>

<comment type="javadoc">/**
 * Unix crypt(3) algorithm implementation.
 * &lt;p&gt;
 * This class only implements the traditional 56 bit DES based algorithm. Please use DigestUtils.crypt() for a method
 * that distinguishes between all the algorithms supported in the current glibc's crypt().
 * &lt;p&gt;
 * The Java implementation was taken from the JetSpeed Portal project (see
 * org.apache.jetspeed.services.security.ldap.UnixCrypt).
 * &lt;p&gt;
 * This class is slightly incompatible if the given salt contains characters that are not part of the allowed range
 * [a-zA-Z0-9./].
 * &lt;p&gt;
 * This class is immutable and thread-safe.
 *
 * @version $Id: UnixCrypt.java 1429868 2013-01-07 16:08:05Z ggregory $
 * @since 1.7
 */</comment>
<class><specifier>public</specifier> class <name>UnixCrypt</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name><name>CON_SALT</name><index>[]</index></name> =<init> <expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
            <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>2</expr>, <expr>3</expr>, <expr>4</expr>, <expr>5</expr>, <expr>6</expr>, <expr>7</expr>, <expr>8</expr>, <expr>9</expr>, <expr>10</expr>, <expr>11</expr>, <expr>5</expr>, <expr>6</expr>,
            <expr>7</expr>, <expr>8</expr>, <expr>9</expr>, <expr>10</expr>, <expr>11</expr>, <expr>12</expr>, <expr>13</expr>, <expr>14</expr>, <expr>15</expr>, <expr>16</expr>, <expr>17</expr>, <expr>18</expr>, <expr>19</expr>, <expr>20</expr>, <expr>21</expr>, <expr>22</expr>, <expr>23</expr>, <expr>24</expr>, <expr>25</expr>, <expr>26</expr>, <expr>27</expr>, <expr>28</expr>, <expr>29</expr>, <expr>30</expr>, <expr>31</expr>, <expr>32</expr>, <expr>33</expr>,
            <expr>34</expr>, <expr>35</expr>, <expr>36</expr>, <expr>37</expr>, <expr>32</expr>, <expr>33</expr>, <expr>34</expr>, <expr>35</expr>, <expr>36</expr>, <expr>37</expr>, <expr>38</expr>, <expr>39</expr>, <expr>40</expr>, <expr>41</expr>, <expr>42</expr>, <expr>43</expr>, <expr>44</expr>, <expr>45</expr>, <expr>46</expr>, <expr>47</expr>, <expr>48</expr>, <expr>49</expr>, <expr>50</expr>, <expr>51</expr>, <expr>52</expr>, <expr>53</expr>,
            <expr>54</expr>, <expr>55</expr>, <expr>56</expr>, <expr>57</expr>, <expr>58</expr>, <expr>59</expr>, <expr>60</expr>, <expr>61</expr>, <expr>62</expr>, <expr>63</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name><name>COV2CHAR</name><index>[]</index></name> =<init> <expr><block>{ <expr>46</expr>, <expr>47</expr>, <expr>48</expr>, <expr>49</expr>, <expr>50</expr>, <expr>51</expr>, <expr>52</expr>, <expr>53</expr>, <expr>54</expr>, <expr>55</expr>, <expr>56</expr>, <expr>57</expr>, <expr>65</expr>, <expr>66</expr>, <expr>67</expr>, <expr>68</expr>, <expr>69</expr>, <expr>70</expr>,
            <expr>71</expr>, <expr>72</expr>, <expr>73</expr>, <expr>74</expr>, <expr>75</expr>, <expr>76</expr>, <expr>77</expr>, <expr>78</expr>, <expr>79</expr>, <expr>80</expr>, <expr>81</expr>, <expr>82</expr>, <expr>83</expr>, <expr>84</expr>, <expr>85</expr>, <expr>86</expr>, <expr>87</expr>, <expr>88</expr>, <expr>89</expr>, <expr>90</expr>, <expr>97</expr>, <expr>98</expr>, <expr>99</expr>, <expr>100</expr>, <expr>101</expr>, <expr>102</expr>,
            <expr>103</expr>, <expr>104</expr>, <expr>105</expr>, <expr>106</expr>, <expr>107</expr>, <expr>108</expr>, <expr>109</expr>, <expr>110</expr>, <expr>111</expr>, <expr>112</expr>, <expr>113</expr>, <expr>114</expr>, <expr>115</expr>, <expr>116</expr>, <expr>117</expr>, <expr>118</expr>, <expr>119</expr>, <expr>120</expr>, <expr>121</expr>, <expr>122</expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name></type> <name><name>SALT_CHARS</name><index>[]</index></name> =<init> <expr>"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./"
            .<call><name>toCharArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name><name>SHIFT2</name><index>[]</index></name> =<init> <expr><block>{ <expr>false</expr>, <expr>false</expr>, <expr>true</expr>, <expr>true</expr>, <expr>true</expr>, <expr>true</expr>, <expr>true</expr>, <expr>true</expr>, <expr>false</expr>, <expr>true</expr>, <expr>true</expr>,
            <expr>true</expr>, <expr>true</expr>, <expr>true</expr>, <expr>true</expr>, <expr>false</expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name><name>SKB</name><index>[]</index><index>[]</index></name> =<init> <expr><block>{
            <expr><block>{ <expr>0</expr>, <expr>16</expr>, <expr>0x20000000</expr>, <expr>0x20000010</expr>, <expr>0x10000</expr>, <expr>0x10010</expr>, <expr>0x20010000</expr>, <expr>0x20010010</expr>, <expr>2048</expr>, <expr>2064</expr>, <expr>0x20000800</expr>,
                    <expr>0x20000810</expr>, <expr>0x10800</expr>, <expr>0x10810</expr>, <expr>0x20010800</expr>, <expr>0x20010810</expr>, <expr>32</expr>, <expr>48</expr>, <expr>0x20000020</expr>, <expr>0x20000030</expr>, <expr>0x10020</expr>,
                    <expr>0x10030</expr>, <expr>0x20010020</expr>, <expr>0x20010030</expr>, <expr>2080</expr>, <expr>2096</expr>, <expr>0x20000820</expr>, <expr>0x20000830</expr>, <expr>0x10820</expr>, <expr>0x10830</expr>, <expr>0x20010820</expr>,
                    <expr>0x20010830</expr>, <expr>0x80000</expr>, <expr>0x80010</expr>, <expr>0x20080000</expr>, <expr>0x20080010</expr>, <expr>0x90000</expr>, <expr>0x90010</expr>, <expr>0x20090000</expr>, <expr>0x20090010</expr>,
                    <expr>0x80800</expr>, <expr>0x80810</expr>, <expr>0x20080800</expr>, <expr>0x20080810</expr>, <expr>0x90800</expr>, <expr>0x90810</expr>, <expr>0x20090800</expr>, <expr>0x20090810</expr>, <expr>0x80020</expr>,
                    <expr>0x80030</expr>, <expr>0x20080020</expr>, <expr>0x20080030</expr>, <expr>0x90020</expr>, <expr>0x90030</expr>, <expr>0x20090020</expr>, <expr>0x20090030</expr>, <expr>0x80820</expr>, <expr>0x80830</expr>,
                    <expr>0x20080820</expr>, <expr>0x20080830</expr>, <expr>0x90820</expr>, <expr>0x90830</expr>, <expr>0x20090820</expr>, <expr>0x20090830</expr> }</block></expr>,
            <expr><block>{ <expr>0</expr>, <expr>0x2000000</expr>, <expr>8192</expr>, <expr>0x2002000</expr>, <expr>0x200000</expr>, <expr>0x2200000</expr>, <expr>0x202000</expr>, <expr>0x2202000</expr>, <expr>4</expr>, <expr>0x2000004</expr>, <expr>8196</expr>, <expr>0x2002004</expr>,
                    <expr>0x200004</expr>, <expr>0x2200004</expr>, <expr>0x202004</expr>, <expr>0x2202004</expr>, <expr>1024</expr>, <expr>0x2000400</expr>, <expr>9216</expr>, <expr>0x2002400</expr>, <expr>0x200400</expr>, <expr>0x2200400</expr>,
                    <expr>0x202400</expr>, <expr>0x2202400</expr>, <expr>1028</expr>, <expr>0x2000404</expr>, <expr>9220</expr>, <expr>0x2002404</expr>, <expr>0x200404</expr>, <expr>0x2200404</expr>, <expr>0x202404</expr>, <expr>0x2202404</expr>,
                    <expr>0x10000000</expr>, <expr>0x12000000</expr>, <expr>0x10002000</expr>, <expr>0x12002000</expr>, <expr>0x10200000</expr>, <expr>0x12200000</expr>, <expr>0x10202000</expr>, <expr>0x12202000</expr>,
                    <expr>0x10000004</expr>, <expr>0x12000004</expr>, <expr>0x10002004</expr>, <expr>0x12002004</expr>, <expr>0x10200004</expr>, <expr>0x12200004</expr>, <expr>0x10202004</expr>, <expr>0x12202004</expr>,
                    <expr>0x10000400</expr>, <expr>0x12000400</expr>, <expr>0x10002400</expr>, <expr>0x12002400</expr>, <expr>0x10200400</expr>, <expr>0x12200400</expr>, <expr>0x10202400</expr>, <expr>0x12202400</expr>,
                    <expr>0x10000404</expr>, <expr>0x12000404</expr>, <expr>0x10002404</expr>, <expr>0x12002404</expr>, <expr>0x10200404</expr>, <expr>0x12200404</expr>, <expr>0x10202404</expr>, <expr>0x12202404</expr> }</block></expr>,
            <expr><block>{ <expr>0</expr>, <expr>1</expr>, <expr>0x40000</expr>, <expr>0x40001</expr>, <expr>0x1000000</expr>, <expr>0x1000001</expr>, <expr>0x1040000</expr>, <expr>0x1040001</expr>, <expr>2</expr>, <expr>3</expr>, <expr>0x40002</expr>, <expr>0x40003</expr>, <expr>0x1000002</expr>,
                    <expr>0x1000003</expr>, <expr>0x1040002</expr>, <expr>0x1040003</expr>, <expr>512</expr>, <expr>513</expr>, <expr>0x40200</expr>, <expr>0x40201</expr>, <expr>0x1000200</expr>, <expr>0x1000201</expr>, <expr>0x1040200</expr>,
                    <expr>0x1040201</expr>, <expr>514</expr>, <expr>515</expr>, <expr>0x40202</expr>, <expr>0x40203</expr>, <expr>0x1000202</expr>, <expr>0x1000203</expr>, <expr>0x1040202</expr>, <expr>0x1040203</expr>, <expr>0x8000000</expr>,
                    <expr>0x8000001</expr>, <expr>0x8040000</expr>, <expr>0x8040001</expr>, <expr>0x9000000</expr>, <expr>0x9000001</expr>, <expr>0x9040000</expr>, <expr>0x9040001</expr>, <expr>0x8000002</expr>, <expr>0x8000003</expr>,
                    <expr>0x8040002</expr>, <expr>0x8040003</expr>, <expr>0x9000002</expr>, <expr>0x9000003</expr>, <expr>0x9040002</expr>, <expr>0x9040003</expr>, <expr>0x8000200</expr>, <expr>0x8000201</expr>, <expr>0x8040200</expr>,
                    <expr>0x8040201</expr>, <expr>0x9000200</expr>, <expr>0x9000201</expr>, <expr>0x9040200</expr>, <expr>0x9040201</expr>, <expr>0x8000202</expr>, <expr>0x8000203</expr>, <expr>0x8040202</expr>, <expr>0x8040203</expr>,
                    <expr>0x9000202</expr>, <expr>0x9000203</expr>, <expr>0x9040202</expr>, <expr>0x9040203</expr> }</block></expr>,
            <expr><block>{ <expr>0</expr>, <expr>0x100000</expr>, <expr>256</expr>, <expr>0x100100</expr>, <expr>8</expr>, <expr>0x100008</expr>, <expr>264</expr>, <expr>0x100108</expr>, <expr>4096</expr>, <expr>0x101000</expr>, <expr>4352</expr>, <expr>0x101100</expr>, <expr>4104</expr>, <expr>0x101008</expr>,
                    <expr>4360</expr>, <expr>0x101108</expr>, <expr>0x4000000</expr>, <expr>0x4100000</expr>, <expr>0x4000100</expr>, <expr>0x4100100</expr>, <expr>0x4000008</expr>, <expr>0x4100008</expr>, <expr>0x4000108</expr>,
                    <expr>0x4100108</expr>, <expr>0x4001000</expr>, <expr>0x4101000</expr>, <expr>0x4001100</expr>, <expr>0x4101100</expr>, <expr>0x4001008</expr>, <expr>0x4101008</expr>, <expr>0x4001108</expr>, <expr>0x4101108</expr>,
                    <expr>0x20000</expr>, <expr>0x120000</expr>, <expr>0x20100</expr>, <expr>0x120100</expr>, <expr>0x20008</expr>, <expr>0x120008</expr>, <expr>0x20108</expr>, <expr>0x120108</expr>, <expr>0x21000</expr>, <expr>0x121000</expr>,
                    <expr>0x21100</expr>, <expr>0x121100</expr>, <expr>0x21008</expr>, <expr>0x121008</expr>, <expr>0x21108</expr>, <expr>0x121108</expr>, <expr>0x4020000</expr>, <expr>0x4120000</expr>, <expr>0x4020100</expr>,
                    <expr>0x4120100</expr>, <expr>0x4020008</expr>, <expr>0x4120008</expr>, <expr>0x4020108</expr>, <expr>0x4120108</expr>, <expr>0x4021000</expr>, <expr>0x4121000</expr>, <expr>0x4021100</expr>, <expr>0x4121100</expr>,
                    <expr>0x4021008</expr>, <expr>0x4121008</expr>, <expr>0x4021108</expr>, <expr>0x4121108</expr> }</block></expr>,
            <expr><block>{ <expr>0</expr>, <expr>0x10000000</expr>, <expr>0x10000</expr>, <expr>0x10010000</expr>, <expr>4</expr>, <expr>0x10000004</expr>, <expr>0x10004</expr>, <expr>0x10010004</expr>, <expr>0x20000000</expr>, <expr>0x30000000</expr>,
                    <expr>0x20010000</expr>, <expr>0x30010000</expr>, <expr>0x20000004</expr>, <expr>0x30000004</expr>, <expr>0x20010004</expr>, <expr>0x30010004</expr>, <expr>0x100000</expr>, <expr>0x10100000</expr>,
                    <expr>0x110000</expr>, <expr>0x10110000</expr>, <expr>0x100004</expr>, <expr>0x10100004</expr>, <expr>0x110004</expr>, <expr>0x10110004</expr>, <expr>0x20100000</expr>, <expr>0x30100000</expr>,
                    <expr>0x20110000</expr>, <expr>0x30110000</expr>, <expr>0x20100004</expr>, <expr>0x30100004</expr>, <expr>0x20110004</expr>, <expr>0x30110004</expr>, <expr>4096</expr>, <expr>0x10001000</expr>, <expr>0x11000</expr>,
                    <expr>0x10011000</expr>, <expr>4100</expr>, <expr>0x10001004</expr>, <expr>0x11004</expr>, <expr>0x10011004</expr>, <expr>0x20001000</expr>, <expr>0x30001000</expr>, <expr>0x20011000</expr>, <expr>0x30011000</expr>,
                    <expr>0x20001004</expr>, <expr>0x30001004</expr>, <expr>0x20011004</expr>, <expr>0x30011004</expr>, <expr>0x101000</expr>, <expr>0x10101000</expr>, <expr>0x111000</expr>, <expr>0x10111000</expr>,
                    <expr>0x101004</expr>, <expr>0x10101004</expr>, <expr>0x111004</expr>, <expr>0x10111004</expr>, <expr>0x20101000</expr>, <expr>0x30101000</expr>, <expr>0x20111000</expr>, <expr>0x30111000</expr>,
                    <expr>0x20101004</expr>, <expr>0x30101004</expr>, <expr>0x20111004</expr>, <expr>0x30111004</expr> }</block></expr>,
            <expr><block>{ <expr>0</expr>, <expr>0x8000000</expr>, <expr>8</expr>, <expr>0x8000008</expr>, <expr>1024</expr>, <expr>0x8000400</expr>, <expr>1032</expr>, <expr>0x8000408</expr>, <expr>0x20000</expr>, <expr>0x8020000</expr>, <expr>0x20008</expr>, <expr>0x8020008</expr>,
                    <expr>0x20400</expr>, <expr>0x8020400</expr>, <expr>0x20408</expr>, <expr>0x8020408</expr>, <expr>1</expr>, <expr>0x8000001</expr>, <expr>9</expr>, <expr>0x8000009</expr>, <expr>1025</expr>, <expr>0x8000401</expr>, <expr>1033</expr>,
                    <expr>0x8000409</expr>, <expr>0x20001</expr>, <expr>0x8020001</expr>, <expr>0x20009</expr>, <expr>0x8020009</expr>, <expr>0x20401</expr>, <expr>0x8020401</expr>, <expr>0x20409</expr>, <expr>0x8020409</expr>,
                    <expr>0x2000000</expr>, <expr>0xa000000</expr>, <expr>0x2000008</expr>, <expr>0xa000008</expr>, <expr>0x2000400</expr>, <expr>0xa000400</expr>, <expr>0x2000408</expr>, <expr>0xa000408</expr>, <expr>0x2020000</expr>,
                    <expr>0xa020000</expr>, <expr>0x2020008</expr>, <expr>0xa020008</expr>, <expr>0x2020400</expr>, <expr>0xa020400</expr>, <expr>0x2020408</expr>, <expr>0xa020408</expr>, <expr>0x2000001</expr>, <expr>0xa000001</expr>,
                    <expr>0x2000009</expr>, <expr>0xa000009</expr>, <expr>0x2000401</expr>, <expr>0xa000401</expr>, <expr>0x2000409</expr>, <expr>0xa000409</expr>, <expr>0x2020001</expr>, <expr>0xa020001</expr>, <expr>0x2020009</expr>,
                    <expr>0xa020009</expr>, <expr>0x2020401</expr>, <expr>0xa020401</expr>, <expr>0x2020409</expr>, <expr>0xa020409</expr> }</block></expr>,
            <expr><block>{ <expr>0</expr>, <expr>256</expr>, <expr>0x80000</expr>, <expr>0x80100</expr>, <expr>0x1000000</expr>, <expr>0x1000100</expr>, <expr>0x1080000</expr>, <expr>0x1080100</expr>, <expr>16</expr>, <expr>272</expr>, <expr>0x80010</expr>, <expr>0x80110</expr>,
                    <expr>0x1000010</expr>, <expr>0x1000110</expr>, <expr>0x1080010</expr>, <expr>0x1080110</expr>, <expr>0x200000</expr>, <expr>0x200100</expr>, <expr>0x280000</expr>, <expr>0x280100</expr>, <expr>0x1200000</expr>,
                    <expr>0x1200100</expr>, <expr>0x1280000</expr>, <expr>0x1280100</expr>, <expr>0x200010</expr>, <expr>0x200110</expr>, <expr>0x280010</expr>, <expr>0x280110</expr>, <expr>0x1200010</expr>, <expr>0x1200110</expr>,
                    <expr>0x1280010</expr>, <expr>0x1280110</expr>, <expr>512</expr>, <expr>768</expr>, <expr>0x80200</expr>, <expr>0x80300</expr>, <expr>0x1000200</expr>, <expr>0x1000300</expr>, <expr>0x1080200</expr>, <expr>0x1080300</expr>, <expr>528</expr>,
                    <expr>784</expr>, <expr>0x80210</expr>, <expr>0x80310</expr>, <expr>0x1000210</expr>, <expr>0x1000310</expr>, <expr>0x1080210</expr>, <expr>0x1080310</expr>, <expr>0x200200</expr>, <expr>0x200300</expr>, <expr>0x280200</expr>,
                    <expr>0x280300</expr>, <expr>0x1200200</expr>, <expr>0x1200300</expr>, <expr>0x1280200</expr>, <expr>0x1280300</expr>, <expr>0x200210</expr>, <expr>0x200310</expr>, <expr>0x280210</expr>, <expr>0x280310</expr>,
                    <expr>0x1200210</expr>, <expr>0x1200310</expr>, <expr>0x1280210</expr>, <expr>0x1280310</expr> }</block></expr>,
            <expr><block>{ <expr>0</expr>, <expr>0x4000000</expr>, <expr>0x40000</expr>, <expr>0x4040000</expr>, <expr>2</expr>, <expr>0x4000002</expr>, <expr>0x40002</expr>, <expr>0x4040002</expr>, <expr>8192</expr>, <expr>0x4002000</expr>, <expr>0x42000</expr>, <expr>0x4042000</expr>,
                    <expr>8194</expr>, <expr>0x4002002</expr>, <expr>0x42002</expr>, <expr>0x4042002</expr>, <expr>32</expr>, <expr>0x4000020</expr>, <expr>0x40020</expr>, <expr>0x4040020</expr>, <expr>34</expr>, <expr>0x4000022</expr>, <expr>0x40022</expr>,
                    <expr>0x4040022</expr>, <expr>8224</expr>, <expr>0x4002020</expr>, <expr>0x42020</expr>, <expr>0x4042020</expr>, <expr>8226</expr>, <expr>0x4002022</expr>, <expr>0x42022</expr>, <expr>0x4042022</expr>, <expr>2048</expr>,
                    <expr>0x4000800</expr>, <expr>0x40800</expr>, <expr>0x4040800</expr>, <expr>2050</expr>, <expr>0x4000802</expr>, <expr>0x40802</expr>, <expr>0x4040802</expr>, <expr>10240</expr>, <expr>0x4002800</expr>, <expr>0x42800</expr>,
                    <expr>0x4042800</expr>, <expr>10242</expr>, <expr>0x4002802</expr>, <expr>0x42802</expr>, <expr>0x4042802</expr>, <expr>2080</expr>, <expr>0x4000820</expr>, <expr>0x40820</expr>, <expr>0x4040820</expr>, <expr>2082</expr>,
                    <expr>0x4000822</expr>, <expr>0x40822</expr>, <expr>0x4040822</expr>, <expr>10272</expr>, <expr>0x4002820</expr>, <expr>0x42820</expr>, <expr>0x4042820</expr>, <expr>10274</expr>, <expr>0x4002822</expr>, <expr>0x42822</expr>,
                    <expr>0x4042822</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name><name>SPTRANS</name><index>[]</index><index>[]</index></name> =<init> <expr><block>{
            <expr><block>{ <expr>0x820200</expr>, <expr>0x20000</expr>, <expr>0x80800000</expr>, <expr>0x80820200</expr>, <expr>0x800000</expr>, <expr>0x80020200</expr>, <expr>0x80020000</expr>, <expr>0x80800000</expr>, <expr>0x80020200</expr>,
                    <expr>0x820200</expr>, <expr>0x820000</expr>, <expr>0x80000200</expr>, <expr>0x80800200</expr>, <expr>0x800000</expr>, <expr>0</expr>, <expr>0x80020000</expr>, <expr>0x20000</expr>, <expr>0x80000000</expr>,
                    <expr>0x800200</expr>, <expr>0x20200</expr>, <expr>0x80820200</expr>, <expr>0x820000</expr>, <expr>0x80000200</expr>, <expr>0x800200</expr>, <expr>0x80000000</expr>, <expr>512</expr>, <expr>0x20200</expr>,
                    <expr>0x80820000</expr>, <expr>512</expr>, <expr>0x80800200</expr>, <expr>0x80820000</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0x80820200</expr>, <expr>0x800200</expr>, <expr>0x80020000</expr>, <expr>0x820200</expr>,
                    <expr>0x20000</expr>, <expr>0x80000200</expr>, <expr>0x800200</expr>, <expr>0x80820000</expr>, <expr>512</expr>, <expr>0x20200</expr>, <expr>0x80800000</expr>, <expr>0x80020200</expr>, <expr>0x80000000</expr>,
                    <expr>0x80800000</expr>, <expr>0x820000</expr>, <expr>0x80820200</expr>, <expr>0x20200</expr>, <expr>0x820000</expr>, <expr>0x80800200</expr>, <expr>0x800000</expr>, <expr>0x80000200</expr>, <expr>0x80020000</expr>,
                    <expr>0</expr>, <expr>0x20000</expr>, <expr>0x800000</expr>, <expr>0x80800200</expr>, <expr>0x820200</expr>, <expr>0x80000000</expr>, <expr>0x80820000</expr>, <expr>512</expr>, <expr>0x80020200</expr> }</block></expr>,
            <expr><block>{ <expr>0x10042004</expr>, <expr>0</expr>, <expr>0x42000</expr>, <expr>0x10040000</expr>, <expr>0x10000004</expr>, <expr>8196</expr>, <expr>0x10002000</expr>, <expr>0x42000</expr>, <expr>8192</expr>, <expr>0x10040004</expr>, <expr>4</expr>,
                    <expr>0x10002000</expr>, <expr>0x40004</expr>, <expr>0x10042000</expr>, <expr>0x10040000</expr>, <expr>4</expr>, <expr>0x40000</expr>, <expr>0x10002004</expr>, <expr>0x10040004</expr>, <expr>8192</expr>, <expr>0x42004</expr>,
                    <expr>0x10000000</expr>, <expr>0</expr>, <expr>0x40004</expr>, <expr>0x10002004</expr>, <expr>0x42004</expr>, <expr>0x10042000</expr>, <expr>0x10000004</expr>, <expr>0x10000000</expr>, <expr>0x40000</expr>, <expr>8196</expr>,
                    <expr>0x10042004</expr>, <expr>0x40004</expr>, <expr>0x10042000</expr>, <expr>0x10002000</expr>, <expr>0x42004</expr>, <expr>0x10042004</expr>, <expr>0x40004</expr>, <expr>0x10000004</expr>, <expr>0</expr>,
                    <expr>0x10000000</expr>, <expr>8196</expr>, <expr>0x40000</expr>, <expr>0x10040004</expr>, <expr>8192</expr>, <expr>0x10000000</expr>, <expr>0x42004</expr>, <expr>0x10002004</expr>, <expr>0x10042000</expr>, <expr>8192</expr>, <expr>0</expr>,
                    <expr>0x10000004</expr>, <expr>4</expr>, <expr>0x10042004</expr>, <expr>0x42000</expr>, <expr>0x10040000</expr>, <expr>0x10040004</expr>, <expr>0x40000</expr>, <expr>8196</expr>, <expr>0x10002000</expr>, <expr>0x10002004</expr>,
                    <expr>4</expr>, <expr>0x10040000</expr>, <expr>0x42000</expr> }</block></expr>,
            <expr><block>{ <expr>0x41000000</expr>, <expr>0x1010040</expr>, <expr>64</expr>, <expr>0x41000040</expr>, <expr>0x40010000</expr>, <expr>0x1000000</expr>, <expr>0x41000040</expr>, <expr>0x10040</expr>, <expr>0x1000040</expr>, <expr>0x10000</expr>,
                    <expr>0x1010000</expr>, <expr>0x40000000</expr>, <expr>0x41010040</expr>, <expr>0x40000040</expr>, <expr>0x40000000</expr>, <expr>0x41010000</expr>, <expr>0</expr>, <expr>0x40010000</expr>, <expr>0x1010040</expr>,
                    <expr>64</expr>, <expr>0x40000040</expr>, <expr>0x41010040</expr>, <expr>0x10000</expr>, <expr>0x41000000</expr>, <expr>0x41010000</expr>, <expr>0x1000040</expr>, <expr>0x40010040</expr>, <expr>0x1010000</expr>,
                    <expr>0x10040</expr>, <expr>0</expr>, <expr>0x1000000</expr>, <expr>0x40010040</expr>, <expr>0x1010040</expr>, <expr>64</expr>, <expr>0x40000000</expr>, <expr>0x10000</expr>, <expr>0x40000040</expr>, <expr>0x40010000</expr>,
                    <expr>0x1010000</expr>, <expr>0x41000040</expr>, <expr>0</expr>, <expr>0x1010040</expr>, <expr>0x10040</expr>, <expr>0x41010000</expr>, <expr>0x40010000</expr>, <expr>0x1000000</expr>, <expr>0x41010040</expr>,
                    <expr>0x40000000</expr>, <expr>0x40010040</expr>, <expr>0x41000000</expr>, <expr>0x1000000</expr>, <expr>0x41010040</expr>, <expr>0x10000</expr>, <expr>0x1000040</expr>, <expr>0x41000040</expr>,
                    <expr>0x10040</expr>, <expr>0x1000040</expr>, <expr>0</expr>, <expr>0x41010000</expr>, <expr>0x40000040</expr>, <expr>0x41000000</expr>, <expr>0x40010040</expr>, <expr>64</expr>, <expr>0x1010000</expr> }</block></expr>,
            <expr><block>{ <expr>0x100402</expr>, <expr>0x4000400</expr>, <expr>2</expr>, <expr>0x4100402</expr>, <expr>0</expr>, <expr>0x4100000</expr>, <expr>0x4000402</expr>, <expr>0x100002</expr>, <expr>0x4100400</expr>, <expr>0x4000002</expr>, <expr>0x4000000</expr>,
                    <expr>1026</expr>, <expr>0x4000002</expr>, <expr>0x100402</expr>, <expr>0x100000</expr>, <expr>0x4000000</expr>, <expr>0x4100002</expr>, <expr>0x100400</expr>, <expr>1024</expr>, <expr>2</expr>, <expr>0x100400</expr>, <expr>0x4000402</expr>,
                    <expr>0x4100000</expr>, <expr>1024</expr>, <expr>1026</expr>, <expr>0</expr>, <expr>0x100002</expr>, <expr>0x4100400</expr>, <expr>0x4000400</expr>, <expr>0x4100002</expr>, <expr>0x4100402</expr>, <expr>0x100000</expr>,
                    <expr>0x4100002</expr>, <expr>1026</expr>, <expr>0x100000</expr>, <expr>0x4000002</expr>, <expr>0x100400</expr>, <expr>0x4000400</expr>, <expr>2</expr>, <expr>0x4100000</expr>, <expr>0x4000402</expr>, <expr>0</expr>, <expr>1024</expr>,
                    <expr>0x100002</expr>, <expr>0</expr>, <expr>0x4100002</expr>, <expr>0x4100400</expr>, <expr>1024</expr>, <expr>0x4000000</expr>, <expr>0x4100402</expr>, <expr>0x100402</expr>, <expr>0x100000</expr>, <expr>0x4100402</expr>, <expr>2</expr>,
                    <expr>0x4000400</expr>, <expr>0x100402</expr>, <expr>0x100002</expr>, <expr>0x100400</expr>, <expr>0x4100000</expr>, <expr>0x4000402</expr>, <expr>1026</expr>, <expr>0x4000000</expr>, <expr>0x4000002</expr>,
                    <expr>0x4100400</expr> }</block></expr>,
            <expr><block>{ <expr>0x2000000</expr>, <expr>16384</expr>, <expr>256</expr>, <expr>0x2004108</expr>, <expr>0x2004008</expr>, <expr>0x2000100</expr>, <expr>16648</expr>, <expr>0x2004000</expr>, <expr>16384</expr>, <expr>8</expr>, <expr>0x2000008</expr>, <expr>16640</expr>,
                    <expr>0x2000108</expr>, <expr>0x2004008</expr>, <expr>0x2004100</expr>, <expr>0</expr>, <expr>16640</expr>, <expr>0x2000000</expr>, <expr>16392</expr>, <expr>264</expr>, <expr>0x2000100</expr>, <expr>16648</expr>, <expr>0</expr>, <expr>0x2000008</expr>,
                    <expr>8</expr>, <expr>0x2000108</expr>, <expr>0x2004108</expr>, <expr>16392</expr>, <expr>0x2004000</expr>, <expr>256</expr>, <expr>264</expr>, <expr>0x2004100</expr>, <expr>0x2004100</expr>, <expr>0x2000108</expr>, <expr>16392</expr>,
                    <expr>0x2004000</expr>, <expr>16384</expr>, <expr>8</expr>, <expr>0x2000008</expr>, <expr>0x2000100</expr>, <expr>0x2000000</expr>, <expr>16640</expr>, <expr>0x2004108</expr>, <expr>0</expr>, <expr>16648</expr>, <expr>0x2000000</expr>, <expr>256</expr>,
                    <expr>16392</expr>, <expr>0x2000108</expr>, <expr>256</expr>, <expr>0</expr>, <expr>0x2004108</expr>, <expr>0x2004008</expr>, <expr>0x2004100</expr>, <expr>264</expr>, <expr>16384</expr>, <expr>16640</expr>, <expr>0x2004008</expr>,
                    <expr>0x2000100</expr>, <expr>264</expr>, <expr>8</expr>, <expr>16648</expr>, <expr>0x2004000</expr>, <expr>0x2000008</expr> }</block></expr>,
            <expr><block>{ <expr>0x20000010</expr>, <expr>0x80010</expr>, <expr>0</expr>, <expr>0x20080800</expr>, <expr>0x80010</expr>, <expr>2048</expr>, <expr>0x20000810</expr>, <expr>0x80000</expr>, <expr>2064</expr>, <expr>0x20080810</expr>, <expr>0x80800</expr>,
                    <expr>0x20000000</expr>, <expr>0x20000800</expr>, <expr>0x20000010</expr>, <expr>0x20080000</expr>, <expr>0x80810</expr>, <expr>0x80000</expr>, <expr>0x20000810</expr>, <expr>0x20080010</expr>, <expr>0</expr>, <expr>2048</expr>,
                    <expr>16</expr>, <expr>0x20080800</expr>, <expr>0x20080010</expr>, <expr>0x20080810</expr>, <expr>0x20080000</expr>, <expr>0x20000000</expr>, <expr>2064</expr>, <expr>16</expr>, <expr>0x80800</expr>, <expr>0x80810</expr>,
                    <expr>0x20000800</expr>, <expr>2064</expr>, <expr>0x20000000</expr>, <expr>0x20000800</expr>, <expr>0x80810</expr>, <expr>0x20080800</expr>, <expr>0x80010</expr>, <expr>0</expr>, <expr>0x20000800</expr>, <expr>0x20000000</expr>,
                    <expr>2048</expr>, <expr>0x20080010</expr>, <expr>0x80000</expr>, <expr>0x80010</expr>, <expr>0x20080810</expr>, <expr>0x80800</expr>, <expr>16</expr>, <expr>0x20080810</expr>, <expr>0x80800</expr>, <expr>0x80000</expr>,
                    <expr>0x20000810</expr>, <expr>0x20000010</expr>, <expr>0x20080000</expr>, <expr>0x80810</expr>, <expr>0</expr>, <expr>2048</expr>, <expr>0x20000010</expr>, <expr>0x20000810</expr>, <expr>0x20080800</expr>,
                    <expr>0x20080000</expr>, <expr>2064</expr>, <expr>16</expr>, <expr>0x20080010</expr> }</block></expr>,
            <expr><block>{ <expr>4096</expr>, <expr>128</expr>, <expr>0x400080</expr>, <expr>0x400001</expr>, <expr>0x401081</expr>, <expr>4097</expr>, <expr>4224</expr>, <expr>0</expr>, <expr>0x400000</expr>, <expr>0x400081</expr>, <expr>129</expr>, <expr>0x401000</expr>, <expr>1</expr>, <expr>0x401080</expr>,
                    <expr>0x401000</expr>, <expr>129</expr>, <expr>0x400081</expr>, <expr>4096</expr>, <expr>4097</expr>, <expr>0x401081</expr>, <expr>0</expr>, <expr>0x400080</expr>, <expr>0x400001</expr>, <expr>4224</expr>, <expr>0x401001</expr>, <expr>4225</expr>,
                    <expr>0x401080</expr>, <expr>1</expr>, <expr>4225</expr>, <expr>0x401001</expr>, <expr>128</expr>, <expr>0x400000</expr>, <expr>4225</expr>, <expr>0x401000</expr>, <expr>0x401001</expr>, <expr>129</expr>, <expr>4096</expr>, <expr>128</expr>, <expr>0x400000</expr>,
                    <expr>0x401001</expr>, <expr>0x400081</expr>, <expr>4225</expr>, <expr>4224</expr>, <expr>0</expr>, <expr>128</expr>, <expr>0x400001</expr>, <expr>1</expr>, <expr>0x400080</expr>, <expr>0</expr>, <expr>0x400081</expr>, <expr>0x400080</expr>, <expr>4224</expr>, <expr>129</expr>,
                    <expr>4096</expr>, <expr>0x401081</expr>, <expr>0x400000</expr>, <expr>0x401080</expr>, <expr>1</expr>, <expr>4097</expr>, <expr>0x401081</expr>, <expr>0x400001</expr>, <expr>0x401080</expr>, <expr>0x401000</expr>, <expr>4097</expr> }</block></expr>,
            <expr><block>{ <expr>0x8200020</expr>, <expr>0x8208000</expr>, <expr>32800</expr>, <expr>0</expr>, <expr>0x8008000</expr>, <expr>0x200020</expr>, <expr>0x8200000</expr>, <expr>0x8208020</expr>, <expr>32</expr>, <expr>0x8000000</expr>, <expr>0x208000</expr>,
                    <expr>32800</expr>, <expr>0x208020</expr>, <expr>0x8008020</expr>, <expr>0x8000020</expr>, <expr>0x8200000</expr>, <expr>32768</expr>, <expr>0x208020</expr>, <expr>0x200020</expr>, <expr>0x8008000</expr>, <expr>0x8208020</expr>,
                    <expr>0x8000020</expr>, <expr>0</expr>, <expr>0x208000</expr>, <expr>0x8000000</expr>, <expr>0x200000</expr>, <expr>0x8008020</expr>, <expr>0x8200020</expr>, <expr>0x200000</expr>, <expr>32768</expr>, <expr>0x8208000</expr>, <expr>32</expr>,
                    <expr>0x200000</expr>, <expr>32768</expr>, <expr>0x8000020</expr>, <expr>0x8208020</expr>, <expr>32800</expr>, <expr>0x8000000</expr>, <expr>0</expr>, <expr>0x208000</expr>, <expr>0x8200020</expr>, <expr>0x8008020</expr>,
                    <expr>0x8008000</expr>, <expr>0x200020</expr>, <expr>0x8208000</expr>, <expr>32</expr>, <expr>0x200020</expr>, <expr>0x8008000</expr>, <expr>0x8208020</expr>, <expr>0x200000</expr>, <expr>0x8200000</expr>,
                    <expr>0x8000020</expr>, <expr>0x208000</expr>, <expr>32800</expr>, <expr>0x8008020</expr>, <expr>0x8200000</expr>, <expr>32</expr>, <expr>0x8208000</expr>, <expr>0x208020</expr>, <expr>0</expr>, <expr>0x8000000</expr>,
                    <expr>0x8200020</expr>, <expr>32768</expr>, <expr>0x208020</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Generates a crypt(3) compatible hash using the DES algorithm.
     * &lt;p&gt;
     * As no salt is given, a random one will be used.
     *
     * @param original
     *            plaintext password
     * @return a 13 character string starting with the salt string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>original</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>crypt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a crypt(3) compatible hash using the DES algorithm.
     * &lt;p&gt;
     * Using unspecified characters as salt results incompatible hash values.
     *
     * @param original
     *            plaintext password
     * @param salt
     *            a two character string drawn from [a-zA-Z0-9./] or null for a random one
     * @return a 13 character string starting with the salt string
     * @throws IllegalArgumentException
     *             if the salt does not match the allowed pattern
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>original</name></decl></param>, <param><decl><type><name>String</name></type> <name>salt</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>salt</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Random</name></type> <name>randomGenerator</name> =<init> <expr>new <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numSaltChars</name> =<init> <expr><name><name>SALT_CHARS</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>salt</name> = "" + <name><name>SALT_CHARS</name><index>[<expr><call><name><name>randomGenerator</name>.<name>nextInt</name></name><argument_list>(<argument><expr><name>numSaltChars</name></expr></argument>)</argument_list></call></expr>]</index></name> +
                    <name><name>SALT_CHARS</name><index>[<expr><call><name><name>randomGenerator</name>.<name>nextInt</name></name><argument_list>(<argument><expr><name>numSaltChars</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>salt</name>.<name>matches</name></name><argument_list>(<argument><expr>"^[" + <name><name>B64</name>.<name>B64T</name></name> + "]{2,}$"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid salt value: " + <name>salt</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>buffer</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"             "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>charZero</name> =<init> <expr><call><name><name>salt</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>charOne</name> =<init> <expr><call><name><name>salt</name>.<name>charAt</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>setCharAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>charZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>setCharAt</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>charOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>eSwap0</name> =<init> <expr><name><name>CON_SALT</name><index>[<expr><name>charZero</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>eSwap1</name> =<init> <expr><name><name>CON_SALT</name><index>[<expr><name>charOne</name></expr>]</index></name> &lt;&lt; 4</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>key</name><index>[]</index></name> =<init> <expr>new <name><name>byte</name><index>[<expr>8</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>key</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
        }</block></for>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>key</name>.<name>length</name></name> &amp;&amp; <name>i</name> &lt; <name><name>original</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>iChar</name> =<init> <expr><name><name>original</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><name>iChar</name> &lt;&lt; 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>schedule</name><index>[]</index></name> =<init> <expr><call><name>desSetKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>out</name><index>[]</index></name> =<init> <expr><call><name>body</name><argument_list>(<argument><expr><name>schedule</name></expr></argument>, <argument><expr><name>eSwap0</name></expr></argument>, <argument><expr><name>eSwap1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>b</name><index>[]</index></name> =<init> <expr>new <name><name>byte</name><index>[<expr>9</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>intToFourBytes</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>intToFourBytes</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr>8</expr>]</index></name> = 0</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> =<init> <expr>128</expr></init></decl>;</decl_stmt>
        <for>for (<init>;</init> <condition><expr><name>i</name> &lt; 13</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <for>for (<init>;</init> <condition><expr><name>j</name> &lt; 6</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>c</name> &lt;&lt;= 1</expr>;</expr_stmt>
                <if>if <condition>(<expr>(<name><name>b</name><index>[<expr><name>y</name></expr>]</index></name> &amp; <name>u</name>) != 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>c</name> |= 0x1</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>u</name> &gt;&gt;&gt;= 1</expr>;</expr_stmt>
                <if>if <condition>(<expr><name>u</name> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>y</name>++</expr>;</expr_stmt>
                    <expr_stmt><expr><name>u</name> = 128</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>buffer</name>.<name>setCharAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>char</name>) <name><name>COV2CHAR</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <return>return <expr><call><name><name>buffer</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a crypt(3) compatible hash using the DES algorithm.
     * &lt;p&gt;
     * As no salt is given, a random one is used.
     *
     * @param original
     *            plaintext password
     * @return a 13 character string starting with the salt string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>original</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>crypt</name><argument_list>(<argument><expr><call><name><name>original</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a crypt(3) compatible hash using the DES algorithm.
     *
     * @param original
     *            plaintext password
     * @param salt
     *            a two character string drawn from [a-zA-Z0-9./] or null for a random one
     * @return a 13 character string starting with the salt string
     * @throws IllegalArgumentException
     *             if the salt does not match the allowed pattern
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>original</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>salt</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>crypt</name><argument_list>(<argument><expr><call><name><name>original</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>body</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>schedule</name><index>[]</index></name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>eSwap0</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>eSwap1</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>left</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>right</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; 25</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 32</expr>;</condition> <incr><expr><name>i</name> += 4</expr></incr>) <block>{
                <expr_stmt><expr><name>left</name> = <call><name>dEncrypt</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>eSwap0</name></expr></argument>, <argument><expr><name>eSwap1</name></expr></argument>, <argument><expr><name>schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>right</name> = <call><name>dEncrypt</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>i</name> + 2</expr></argument>, <argument><expr><name>eSwap0</name></expr></argument>, <argument><expr><name>eSwap1</name></expr></argument>, <argument><expr><name>schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>t</name> = <name>left</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> = <name>right</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>right</name> = <name>t</name></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><name>t</name> = <name>right</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> = <name>left</name> &gt;&gt;&gt; 1 | <name>left</name> &lt;&lt; 31</expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> = <name>t</name> &gt;&gt;&gt; 1 | <name>t</name> &lt;&lt; 31</expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>results</name><index>[]</index></name> =<init> <expr>new <name><name>int</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>permOp</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0x55555555</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> = <name><name>results</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> = <name><name>results</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>permOp</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0xff00ff</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> = <name><name>results</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> = <name><name>results</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>permOp</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0x33333333</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> = <name><name>results</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> = <name><name>results</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>permOp</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>65535</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> = <name><name>results</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> = <name><name>results</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>permOp</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0xf0f0f0f</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> = <name><name>results</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> = <name><name>results</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>out</name><index>[]</index></name> =<init> <expr>new <name><name>int</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>out</name><index>[<expr>0</expr>]</index></name> = <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out</name><index>[<expr>1</expr>]</index></name> = <name>right</name></expr>;</expr_stmt>
        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>byteToUnsigned</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>byte</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>value</name> =<init> <expr><name>b</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>value</name> &lt; 0 ? <name>value</name> + 256 : <name>value</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>dEncrypt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>el</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>r</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>s</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>e0</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>e1</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>sArr</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> =<init> <expr><name>r</name> ^ <name>r</name> &gt;&gt;&gt; 16</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> =<init> <expr><name>v</name> &amp; <name>e0</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>v</name> &amp;= <name>e1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name> = <name>u</name> ^ <name>u</name> &lt;&lt; 16 ^ <name>r</name> ^ <name><name>sArr</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> =<init> <expr><name>v</name> ^ <name>v</name> &lt;&lt; 16 ^ <name>r</name> ^ <name><name>sArr</name><index>[<expr><name>s</name> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>t</name> = <name>t</name> &gt;&gt;&gt; 4 | <name>t</name> &lt;&lt; 28</expr>;</expr_stmt>
        <expr_stmt><expr><name>el</name> ^= <name><name>SPTRANS</name><index>[<expr>1</expr>]</index><index>[<expr><name>t</name> &amp; 0x3f</expr>]</index></name> | <name><name>SPTRANS</name><index>[<expr>3</expr>]</index><index>[<expr><name>t</name> &gt;&gt;&gt; 8 &amp; 0x3f</expr>]</index></name> | <name><name>SPTRANS</name><index>[<expr>5</expr>]</index><index>[<expr><name>t</name> &gt;&gt;&gt; 16 &amp; 0x3f</expr>]</index></name> |
                <name><name>SPTRANS</name><index>[<expr>7</expr>]</index><index>[<expr><name>t</name> &gt;&gt;&gt; 24 &amp; 0x3f</expr>]</index></name> | <name><name>SPTRANS</name><index>[<expr>0</expr>]</index><index>[<expr><name>u</name> &amp; 0x3f</expr>]</index></name> | <name><name>SPTRANS</name><index>[<expr>2</expr>]</index><index>[<expr><name>u</name> &gt;&gt;&gt; 8 &amp; 0x3f</expr>]</index></name> |
                <name><name>SPTRANS</name><index>[<expr>4</expr>]</index><index>[<expr><name>u</name> &gt;&gt;&gt; 16 &amp; 0x3f</expr>]</index></name> | <name><name>SPTRANS</name><index>[<expr>6</expr>]</index><index>[<expr><name>u</name> &gt;&gt;&gt; 24 &amp; 0x3f</expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><name>el</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>desSetKey</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>key</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>schedule</name><index>[]</index></name> =<init> <expr>new <name><name>int</name><index>[<expr>32</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr><call><name>fourBytesToInt</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> =<init> <expr><call><name>fourBytesToInt</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>results</name><index>[]</index></name> =<init> <expr>new <name><name>int</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>permOp</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0xf0f0f0f</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> = <name><name>results</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> = <name><name>results</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> = <call><name>hPermOp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>0xcccc0000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> = <call><name>hPermOp</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>-2</expr></argument>, <argument><expr>0xcccc0000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>permOp</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0x55555555</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> = <name><name>results</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> = <name><name>results</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>permOp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0xff00ff</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> = <name><name>results</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> = <name><name>results</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>permOp</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0x55555555</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> = <name><name>results</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> = <name><name>results</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> = (<name>d</name> &amp; 0xff) &lt;&lt; 16 | <name>d</name> &amp; 0xff00 | (<name>d</name> &amp; 0xff0000) &gt;&gt;&gt; 16 | (<name>c</name> &amp; 0xf0000000) &gt;&gt;&gt; 4</expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> &amp;= 0xfffffff</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 16</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>SHIFT2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>c</name> = <name>c</name> &gt;&gt;&gt; 2 | <name>c</name> &lt;&lt; 26</expr>;</expr_stmt>
                <expr_stmt><expr><name>d</name> = <name>d</name> &gt;&gt;&gt; 2 | <name>d</name> &lt;&lt; 26</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>c</name> = <name>c</name> &gt;&gt;&gt; 1 | <name>c</name> &lt;&lt; 27</expr>;</expr_stmt>
                <expr_stmt><expr><name>d</name> = <name>d</name> &gt;&gt;&gt; 1 | <name>d</name> &lt;&lt; 27</expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>c</name> &amp;= 0xfffffff</expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> &amp;= 0xfffffff</expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> =<init> <expr><name><name>SKB</name><index>[<expr>0</expr>]</index><index>[<expr><name>c</name> &amp; 0x3f</expr>]</index></name> | <name><name>SKB</name><index>[<expr>1</expr>]</index><index>[<expr><name>c</name> &gt;&gt;&gt; 6 &amp; 0x3 | <name>c</name> &gt;&gt;&gt; 7 &amp; 0x3c</expr>]</index></name> |
                    <name><name>SKB</name><index>[<expr>2</expr>]</index><index>[<expr><name>c</name> &gt;&gt;&gt; 13 &amp; 0xf | <name>c</name> &gt;&gt;&gt; 14 &amp; 0x30</expr>]</index></name> |
                    <name><name>SKB</name><index>[<expr>3</expr>]</index><index>[<expr><name>c</name> &gt;&gt;&gt; 20 &amp; 0x1 | <name>c</name> &gt;&gt;&gt; 21 &amp; 0x6 | <name>c</name> &gt;&gt;&gt; 22 &amp; 0x38</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>t</name> =<init> <expr><name><name>SKB</name><index>[<expr>4</expr>]</index><index>[<expr><name>d</name> &amp; 0x3f</expr>]</index></name> | <name><name>SKB</name><index>[<expr>5</expr>]</index><index>[<expr><name>d</name> &gt;&gt;&gt; 7 &amp; 0x3 | <name>d</name> &gt;&gt;&gt; 8 &amp; 0x3c</expr>]</index></name> | <name><name>SKB</name><index>[<expr>6</expr>]</index><index>[<expr><name>d</name> &gt;&gt;&gt; 15 &amp; 0x3f</expr>]</index></name> |
                    <name><name>SKB</name><index>[<expr>7</expr>]</index><index>[<expr><name>d</name> &gt;&gt;&gt; 21 &amp; 0xf | <name>d</name> &gt;&gt;&gt; 22 &amp; 0x30</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>schedule</name><index>[<expr><name>j</name>++</expr>]</index></name> = (<name>t</name> &lt;&lt; 16 | <name>s</name> &amp; 0xffff)</expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name> = <name>s</name> &gt;&gt;&gt; 16 | <name>t</name> &amp; 0xffff0000</expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name> = <name>s</name> &lt;&lt; 4 | <name>s</name> &gt;&gt;&gt; 28</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>schedule</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name>s</name></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>schedule</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>fourBytesToInt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>b</name><index>[]</index></name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>value</name> =<init> <expr><call><name>byteToUnsigned</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>offset</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>value</name> |= <call><name>byteToUnsigned</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>offset</name>++</expr>]</index></name></expr></argument>)</argument_list></call> &lt;&lt; 8</expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> |= <call><name>byteToUnsigned</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>offset</name>++</expr>]</index></name></expr></argument>)</argument_list></call> &lt;&lt; 16</expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> |= <call><name>byteToUnsigned</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>offset</name>++</expr>]</index></name></expr></argument>)</argument_list></call> &lt;&lt; 24</expr>;</expr_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>hPermOp</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>n</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>t</name> =<init> <expr>(<name>a</name> &lt;&lt; 16 - <name>n</name> ^ <name>a</name>) &amp; <name>m</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> = <name>a</name> ^ <name>t</name> ^ <name>t</name> &gt;&gt;&gt; 16 - <name>n</name></expr>;</expr_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>intToFourBytes</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>iValue</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>b</name><index>[]</index></name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>offset</name>++</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><name>iValue</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>offset</name>++</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><name>iValue</name> &gt;&gt;&gt; 8 &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>offset</name>++</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><name>iValue</name> &gt;&gt;&gt; 16 &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>offset</name>++</expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><name>iValue</name> &gt;&gt;&gt; 24 &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>permOp</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>b</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>n</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>m</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>results</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>t</name> =<init> <expr>(<name>a</name> &gt;&gt;&gt; <name>n</name> ^ <name>b</name>) &amp; <name>m</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> ^= <name>t</name> &lt;&lt; <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> ^= <name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>results</name><index>[<expr>0</expr>]</index></name> = <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>results</name><index>[<expr>1</expr>]</index></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
