<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\output\CountingOutputStream.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>output</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A decorating output stream that counts the number of bytes that have passed
        * through the stream so far.
        * &lt;p&gt;
        * A typical use case would be during debugging, to ensure that data is being
        * written as expected.
        *
        * @version $Id: CountingOutputStream.java 1304052 2012-03-22 20:55:29Z ggregory $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CountingOutputStream</name>
        <super>
            <extends>extends
                <name>ProxyOutputStream</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/** The count of bytes that have passed. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>count</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructs a new CountingOutputStream.
                *
                * @param out the OutputStream to write to
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>CountingOutputStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>out</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * Updates the count with the number of bytes that are being written.
                *
                * @param n number of bytes to be written to the stream
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>beforeWrite</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>count</name>
                            +=
                            <name>n</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * The number of bytes that have passed through this stream.
                * &lt;p&gt;
                * NOTE: From v1.3 this method throws an ArithmeticException if the
                * count is greater than can be expressed by an &lt;code&gt;int&lt;/code&gt;.
                * See {@link #getByteCount()} for a method using a &lt;code&gt;long&lt;/code&gt;.
                *
                * @return the number of bytes accumulated
                * @throws ArithmeticException if the byte count is too large
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getByteCount</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                &gt;
                                <name><name>Integer</name>.
                                    <name>MAX_VALUE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The byte count " + <name>result</name> + " is too large to be
                                                        converted to an int"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>int</name>)
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the byte count back to 0.
                * &lt;p&gt;
                * NOTE: From v1.3 this method throws an ArithmeticException if the
                * count is greater than can be expressed by an &lt;code&gt;int&lt;/code&gt;.
                * See {@link #resetByteCount()} for a method using a &lt;code&gt;long&lt;/code&gt;.
                *
                * @return the count previous to resetting
                * @throws ArithmeticException if the byte count is too large
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>resetCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>resetByteCount</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                &gt;
                                <name><name>Integer</name>.
                                    <name>MAX_VALUE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The byte count " + <name>result</name> + " is too large to be
                                                        converted to an int"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>int</name>)
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The number of bytes that have passed through this stream.
                * &lt;p&gt;
                * NOTE: This method is an alternative for &lt;code&gt;getCount()&lt;/code&gt;.
                * It was added because that method returns an integer which will
                * result in incorrect count for files over 2GB.
                *
                * @return the number of bytes accumulated
                * @since 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>long</name>
                </type>
                <name>getByteCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>count</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the byte count back to 0.
                * &lt;p&gt;
                * NOTE: This method is an alternative for &lt;code&gt;resetCount()&lt;/code&gt;.
                * It was added because that method returns an integer which will
                * result in incorrect count for files over 2GB.
                *
                * @return the count previous to resetting
                * @since 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>long</name>
                </type>
                <name>resetByteCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>tmp</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>count</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>count</name>
                            </name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>tmp</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
