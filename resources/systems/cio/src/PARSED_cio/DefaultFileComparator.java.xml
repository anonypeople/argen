<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\comparator\DefaultFileComparator.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>comparator</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Compare two files using the &lt;b&gt;default&lt;/b&gt; {@link File#compareTo(File)} method.
        * &lt;p&gt;
        * This comparator can be used to sort lists or arrays of files
        * by using the default file comparison.
        * &lt;p&gt;
        * Example of sorting a list of files using the
        * {@link #DEFAULT_COMPARATOR} singleton instance:
        * &lt;pre&gt;
        * List&amp;lt;File&amp;gt; list = ...
        * DefaultFileComparator.DEFAULT_COMPARATOR.sort(list);
        * &lt;/pre&gt;
        * &lt;p&gt;
        * Example of doing a &lt;i&gt;reverse&lt;/i&gt; sort of an array of files using the
        * {@link #DEFAULT_REVERSE} singleton instance:
        * &lt;pre&gt;
        * File[] array = ...
        * DefaultFileComparator.DEFAULT_REVERSE.sort(array);
        * &lt;/pre&gt;
        * &lt;p&gt;
        *
        * @version $Id: DefaultFileComparator.java 1304052 2012-03-22 20:55:29Z ggregory $
        * @since 1.4
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>DefaultFileComparator</name>
        <super>
            <extends>extends
                <name>AbstractFileComparator</name>
            </extends>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/** Singleton default comparator instance */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>File</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>DEFAULT_COMPARATOR</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>DefaultFileComparator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Singleton reverse default comparator instance */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>File</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>DEFAULT_REVERSE</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ReverseComparator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>DEFAULT_COMPARATOR</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Compare the two files using the {@link File#compareTo(File)} method.
                *
                * @param file1 The first file to compare
                * @param file2 The second file to compare
                * @return the result of calling file1's
                * {@link File#compareTo(File)} with file2 as the parameter.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>compare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>file1</name>.
                                    <name>compareTo</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>file2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
