<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\output\DeferredFileOutputStream.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>output</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>FileInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>FileOutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>IOUtils</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * An output stream which will retain data in memory until a specified
        * threshold is reached, and only then commit it to disk. If the stream is
        * closed before the threshold is reached, the data will not be written to
        * disk at all.
        * &lt;p&gt;
        * This class originated in FileUpload processing. In this use case, you do
        * not know in advance the size of the file being uploaded. If the file is small
        * you want to store it in memory (for speed), but if the file is large you want
        * to store it to file (to avoid memory issues).
        *
        * @version $Id: DeferredFileOutputStream.java 1304052 2012-03-22 20:55:29Z ggregory $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class
        <name>DeferredFileOutputStream</name>
        <super>
            <extends>extends
                <name>ThresholdingOutputStream</name>
            </extends>
        </super>
        <block>{

            <comment type="line">// ----------------------------------------------------------- Data members</comment>


            <comment type="javadoc">/**
                * The output stream to which data will be written prior to the theshold
                * being reached.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>ByteArrayOutputStream</name>
                    </type>
                    <name>memoryOutputStream</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The output stream to which data will be written at any given time. This
                * will always be one of &lt;code&gt;memoryOutputStream&lt;/code&gt; or
                * &lt;code&gt;diskOutputStream&lt;/code&gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>OutputStream</name>
                    </type>
                    <name>currentOutputStream</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The file to which output will be directed if the threshold is exceeded.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>File</name>
                    </type>
                    <name>outputFile</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The temporary file prefix.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>prefix</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The temporary file suffix.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>suffix</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The directory to use for temporary files.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>File</name>
                    </type>
                    <name>directory</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * True when close() has been called successfully.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>closed</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// ----------------------------------------------------------- Constructors</comment>


            <comment type="javadoc">/**
                * Constructs an instance of this class which will trigger an event at the
                * specified threshold, and save data to a file beyond that point.
                *
                * @param threshold The number of bytes at which to trigger an event.
                * @param outputFile The file to which data is saved beyond the threshold.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DeferredFileOutputStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>threshold</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>outputFile</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>threshold</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputFile</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="javadoc">/**
                * Constructs an instance of this class which will trigger an event at the
                * specified threshold, and save data to a temporary file beyond that point.
                *
                * @param threshold The number of bytes at which to trigger an event.
                * @param prefix Prefix to use for the temporary file.
                * @param suffix Suffix to use for the temporary file.
                * @param directory Temporary file directory.
                *
                * @since 1.4
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>DeferredFileOutputStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>threshold</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>suffix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>directory</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>threshold</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>suffix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>directory</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>prefix</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Temporary file prefix is missing"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs an instance of this class which will trigger an event at the
                * specified threshold, and save data either to a file beyond that point.
                *
                * @param threshold The number of bytes at which to trigger an event.
                * @param outputFile The file to which data is saved beyond the threshold.
                * @param prefix Prefix to use for the temporary file.
                * @param suffix Suffix to use for the temporary file.
                * @param directory Temporary file directory.
                */
            </comment>
            <constructor>
                <specifier>private</specifier>
                <name>DeferredFileOutputStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>threshold</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>outputFile</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>suffix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>directory</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>threshold</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>outputFile</name>
                            </name>
                            =
                            <name>outputFile</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>memoryOutputStream</name>
                            = new
                            <call>
                                <name>ByteArrayOutputStream</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>currentOutputStream</name>
                            =
                            <name>memoryOutputStream</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>prefix</name>
                            </name>
                            =
                            <name>prefix</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>suffix</name>
                            </name>
                            =
                            <name>suffix</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>directory</name>
                            </name>
                            =
                            <name>directory</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="line">// --------------------------------------- ThresholdingOutputStream methods</comment>


            <comment type="javadoc">/**
                * Returns the current output stream. This may be memory based or disk
                * based, depending on the current state with respect to the threshold.
                *
                * @return The underlying output stream.
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>OutputStream</name>
                </type>
                <name>getStream</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <name>currentOutputStream</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Switches the underlying output stream from a memory based stream to one
                * that is backed by disk. This is the point at which we realise that too
                * much data is being written to keep in memory, so we elect to switch to
                * disk-based storage.
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>thresholdReached</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>prefix</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>outputFile</name>
                                        =
                                        <call>
                                            <name><name>File</name>.
                                                <name>createTempFile</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>prefix</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>suffix</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>directory</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>FileOutputStream</name>
                            </type>
                            <name>fos</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>FileOutputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>outputFile</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>memoryOutputStream</name>.
                                    <name>writeTo</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>currentOutputStream</name>
                            =
                            <name>fos</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>memoryOutputStream</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="line">// --------------------------------------------------------- Public methods</comment>


            <comment type="javadoc">/**
                * Determines whether or not the data for this output stream has been
                * retained in memory.
                *
                * @return &lt;code&gt;true&lt;/code&gt; if the data is available in memory;
                * &lt;code&gt;false&lt;/code&gt; otherwise.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isInMemory</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <call>
                                <name>isThresholdExceeded</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the data for this output stream as an array of bytes, assuming
                * that the data has been retained in memory. If the data was written to
                * disk, this method returns &lt;code&gt;null&lt;/code&gt;.
                *
                * @return The data for this output stream, or &lt;code&gt;null&lt;/code&gt; if no such
                * data is available.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>getData</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>memoryOutputStream</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>memoryOutputStream</name>.
                                                <name>toByteArray</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns either the output file specified in the constructor or
                * the temporary file created or null.
                * &lt;p&gt;
                * If the constructor specifying the file is used then it returns that
                * same output file, even when threshold has not been reached.
                * &lt;p&gt;
                * If constructor specifying a temporary file prefix/suffix is used
                * then the temporary file created once the threshold is reached is returned
                * If the threshold was not reached then &lt;code&gt;null&lt;/code&gt; is returned.
                *
                * @return The file for this output stream, or &lt;code&gt;null&lt;/code&gt; if no such
                * file exists.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>File</name>
                </type>
                <name>getFile</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>outputFile</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Closes underlying output stream, and mark this as closed
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>close</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>close</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>closed</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Writes the data from this output stream to the specified output stream,
                * after it has been closed.
                *
                * @param out output stream to write to.
                * @exception IOException if this stream is not yet closed or an error occurs.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>writeTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// we may only need to check if this is closed if we are working with a file
                    </comment>
                    <comment type="line">// but we should force the habit of closing wether we are working with
                    </comment>
                    <comment type="line">// a file or memory.</comment>
                    <if>if
                        <condition>(
                            <expr>!
                                <name>closed</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Stream not closed"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isInMemory</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>memoryOutputStream</name>.
                                                <name>writeTo</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>out</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>FileInputStream</name>
                                        </type>
                                        <name>fis</name> =
                                        <init>
                                            <expr>new
                                                <call>
                                                    <name>FileInputStream</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>outputFile</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>IOUtils</name>.
                                                        <name>copy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>fis</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>out</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <finally>finally
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>IOUtils</name>.
                                                            <name>closeQuietly</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fis</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
