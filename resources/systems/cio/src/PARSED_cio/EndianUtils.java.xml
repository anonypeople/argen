<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\EndianUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>EOFException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Utility code for dealing with different endian systems.
        * &lt;p&gt;
        * Different computer architectures adopt different conventions for
        * byte ordering. In so-called "Little Endian" architectures (eg Intel),
        * the low-order byte is stored in memory at the lowest address, and
        * subsequent bytes at higher addresses. For "Big Endian" architectures
        * (eg Motorola), the situation is reversed.
        * This class helps you solve this incompatability.
        * &lt;p&gt;
        * Origin of code: Excalibur
        *
        * @version $Id: EndianUtils.java 1302056 2012-03-18 03:03:38Z ggregory $
        * @see org.apache.commons.io.input.SwappedDataInputStream
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>EndianUtils</name>
        <block>{

            <comment type="javadoc">/**
                * Instances should NOT be constructed in standard programming.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>EndianUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// ========================================== Swapping routines</comment>

            <comment type="javadoc">/**
                * Converts a "short" value between endian systems.
                * @param value value to convert
                * @return the converted value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                </type>
                <name>swapShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( ( ( <name>value</name> &gt;&gt; 0 ) &amp; 0xff ) &lt;&lt; 8 ) +
                                            ( ( ( <name>value</name> &gt;&gt; 8 ) &amp; 0xff ) &lt;&lt; 0 )
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts a "int" value between endian systems.
                * @param value value to convert
                * @return the converted value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>swapInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>( ( ( <name>value</name> &gt;&gt; 0 ) &amp; 0xff ) &lt;&lt; 24 ) +
                            ( ( ( <name>value</name> &gt;&gt; 8 ) &amp; 0xff ) &lt;&lt; 16 ) +
                            ( ( ( <name>value</name> &gt;&gt; 16 ) &amp; 0xff ) &lt;&lt; 8 ) +
                            ( ( ( <name>value</name> &gt;&gt; 24 ) &amp; 0xff ) &lt;&lt; 0 )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts a "long" value between endian systems.
                * @param value value to convert
                * @return the converted value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>swapLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>( ( ( <name>value</name> &gt;&gt; 0 ) &amp; 0xff ) &lt;&lt; 56 ) +
                            ( ( ( <name>value</name> &gt;&gt; 8 ) &amp; 0xff ) &lt;&lt; 48 ) +
                            ( ( ( <name>value</name> &gt;&gt; 16 ) &amp; 0xff ) &lt;&lt; 40 ) +
                            ( ( ( <name>value</name> &gt;&gt; 24 ) &amp; 0xff ) &lt;&lt; 32 ) +
                            ( ( ( <name>value</name> &gt;&gt; 32 ) &amp; 0xff ) &lt;&lt; 24 ) +
                            ( ( ( <name>value</name> &gt;&gt; 40 ) &amp; 0xff ) &lt;&lt; 16 ) +
                            ( ( ( <name>value</name> &gt;&gt; 48 ) &amp; 0xff ) &lt;&lt; 8 ) +
                            ( ( ( <name>value</name> &gt;&gt; 56 ) &amp; 0xff ) &lt;&lt; 0 )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts a "float" value between endian systems.
                * @param value value to convert
                * @return the converted value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                </type>
                <name>swapFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Float</name>.
                                    <name>intBitsToFloat</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>swapInteger</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>Float</name>.
                                                                    <name>floatToIntBits</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>value</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts a "double" value between endian systems.
                * @param value value to convert
                * @return the converted value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>swapDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Double</name>.
                                    <name>longBitsToDouble</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>swapLong</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>Double</name>.
                                                                    <name>doubleToLongBits</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>value</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ========================================== Swapping read/write routines</comment>

            <comment type="javadoc">/**
                * Writes a "short" value to a byte array at a given offset. The value is
                * converted to the opposed endian system while writing.
                * @param data target byte array
                * @param offset starting offset in the byte array
                * @param value value to write
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeSwappedShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 0
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 0 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 8 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a "short" value from a byte array at a given offset. The value is
                * converted to the opposed endian system while reading.
                * @param data source byte array
                * @param offset starting offset in the byte array
                * @return the value read
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                </type>
                <name>readSwappedShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( (
                                            <name>
                                                <name>data</name>
                                                <index>[
                                                    <expr>
                                                        <name>offset</name>
                                                        + 0
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            &amp; 0xff ) &lt;&lt; 0 ) +
                                            ( (
                                            <name>
                                                <name>data</name>
                                                <index>[
                                                    <expr>
                                                        <name>offset</name>
                                                        + 1
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            &amp; 0xff ) &lt;&lt; 8 )
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads an unsigned short (16-bit) value from a byte array at a given
                * offset. The value is converted to the opposed endian system while
                * reading.
                * @param data source byte array
                * @param offset starting offset in the byte array
                * @return the value read
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>readSwappedUnsignedShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>( ( (
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 0
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; 0xff ) &lt;&lt; 0 ) +
                            ( (
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; 0xff ) &lt;&lt; 8 ) )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes a "int" value to a byte array at a given offset. The value is
                * converted to the opposed endian system while writing.
                * @param data target byte array
                * @param offset starting offset in the byte array
                * @param value value to write
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeSwappedInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 0
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 0 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 8 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 2
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 16 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 3
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 24 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a "int" value from a byte array at a given offset. The value is
                * converted to the opposed endian system while reading.
                * @param data source byte array
                * @param offset starting offset in the byte array
                * @return the value read
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>readSwappedInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>( ( (
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 0
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; 0xff ) &lt;&lt; 0 ) +
                            ( (
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; 0xff ) &lt;&lt; 8 ) +
                            ( (
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 2
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; 0xff ) &lt;&lt; 16 ) +
                            ( (
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 3
                                    </expr>
                                    ]
                                </index>
                            </name>
                            &amp; 0xff ) &lt;&lt; 24 ) )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads an unsigned integer (32-bit) value from a byte array at a given
                * offset. The value is converted to the opposed endian system while
                * reading.
                * @param data source byte array
                * @param offset starting offset in the byte array
                * @return the value read
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>readSwappedUnsignedInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>low</name> =
                            <init>
                                <expr>( ( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 0
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 0 ) +
                                    ( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 8 ) +
                                    ( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 2
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 16 ) )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>high</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 3
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <return>return
                        <expr>(<name>high</name> &lt;&lt; 24) + (0xffffffffL &amp; <name>low</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes a "long" value to a byte array at a given offset. The value is
                * converted to the opposed endian system while writing.
                * @param data target byte array
                * @param offset starting offset in the byte array
                * @param value value to write
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeSwappedLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 0
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 0 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 8 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 2
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 16 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 3
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 24 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 4
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 32 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 5
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 40 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 6
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 48 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>data</name>
                                <index>[
                                    <expr>
                                        <name>offset</name>
                                        + 7
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <call>(<name>byte</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( <name>value</name> &gt;&gt; 56 ) &amp; 0xff
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a "long" value from a byte array at a given offset. The value is
                * converted to the opposed endian system while reading.
                * @param data source byte array
                * @param offset starting offset in the byte array
                * @return the value read
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>readSwappedLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>low</name> =
                            <init>
                                <expr>( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 0
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 0 ) +
                                    ( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 8 ) +
                                    ( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 2
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 16 ) +
                                    ( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 3
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 24 )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>high</name> =
                            <init>
                                <expr>( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 4
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 0 ) +
                                    ( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 5
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 8 ) +
                                    ( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 6
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 16 ) +
                                    ( (
                                    <name>
                                        <name>data</name>
                                        <index>[
                                            <expr>
                                                <name>offset</name>
                                                + 7
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xff ) &lt;&lt; 24 )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>high</name> &lt;&lt; 32) + (0xffffffffL &amp; <name>low</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes a "float" value to a byte array at a given offset. The value is
                * converted to the opposed endian system while writing.
                * @param data target byte array
                * @param offset starting offset in the byte array
                * @param value value to write
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeSwappedFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>writeSwappedInteger</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Float</name>.
                                                    <name>floatToIntBits</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a "float" value from a byte array at a given offset. The value is
                * converted to the opposed endian system while reading.
                * @param data source byte array
                * @param offset starting offset in the byte array
                * @return the value read
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                </type>
                <name>readSwappedFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Float</name>.
                                    <name>intBitsToFloat</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>readSwappedInteger</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>data</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>offset</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes a "double" value to a byte array at a given offset. The value is
                * converted to the opposed endian system while writing.
                * @param data target byte array
                * @param offset starting offset in the byte array
                * @param value value to write
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeSwappedDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>writeSwappedLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>data</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Double</name>.
                                                    <name>doubleToLongBits</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a "double" value from a byte array at a given offset. The value is
                * converted to the opposed endian system while reading.
                * @param data source byte array
                * @param offset starting offset in the byte array
                * @return the value read
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>readSwappedDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Double</name>.
                                    <name>longBitsToDouble</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>readSwappedLong</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>data</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>offset</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes a "short" value to an OutputStream. The value is
                * converted to the opposed endian system while writing.
                * @param output target OutputStream
                * @param value value to write
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeSwappedShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>output</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 0 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 8 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a "short" value from an InputStream. The value is
                * converted to the opposed endian system while reading.
                * @param input source InputStream
                * @return the value just read
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                </type>
                <name>readSwappedShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>(<name>short</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>( (
                                            <call>
                                                <name>read</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>input</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp; 0xff ) &lt;&lt; 0 ) +
                                            ( (
                                            <call>
                                                <name>read</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>input</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp; 0xff ) &lt;&lt; 8 )
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a unsigned short (16-bit) from an InputStream. The value is
                * converted to the opposed endian system while reading.
                * @param input source InputStream
                * @return the value just read
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>readSwappedUnsignedShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value1</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value2</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <return>return
                        <expr>( ( ( <name>value1</name> &amp; 0xff ) &lt;&lt; 0 ) +
                            ( ( <name>value2</name> &amp; 0xff ) &lt;&lt; 8 ) )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes a "int" value to an OutputStream. The value is
                * converted to the opposed endian system while writing.
                * @param output target OutputStream
                * @param value value to write
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeSwappedInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>output</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 0 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 8 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 16 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 24 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a "int" value from an InputStream. The value is
                * converted to the opposed endian system while reading.
                * @param input source InputStream
                * @return the value just read
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>readSwappedInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value1</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value2</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value3</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value4</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <return>return
                        <expr>( ( <name>value1</name> &amp; 0xff ) &lt;&lt; 0 ) +
                            ( ( <name>value2</name> &amp; 0xff ) &lt;&lt; 8 ) +
                            ( ( <name>value3</name> &amp; 0xff ) &lt;&lt; 16 ) +
                            ( ( <name>value4</name> &amp; 0xff ) &lt;&lt; 24 )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a unsigned integer (32-bit) from an InputStream. The value is
                * converted to the opposed endian system while reading.
                * @param input source InputStream
                * @return the value just read
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>readSwappedUnsignedInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value1</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value2</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value3</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value4</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>low</name> =
                            <init>
                                <expr>( ( ( <name>value1</name> &amp; 0xff ) &lt;&lt; 0 ) +
                                    ( ( <name>value2</name> &amp; 0xff ) &lt;&lt; 8 ) +
                                    ( ( <name>value3</name> &amp; 0xff ) &lt;&lt; 16 ) )
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>high</name> =
                            <init>
                                <expr>
                                    <name>value4</name>
                                    &amp; 0xff
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <return>return
                        <expr>(<name>high</name> &lt;&lt; 24) + (0xffffffffL &amp; <name>low</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes a "long" value to an OutputStream. The value is
                * converted to the opposed endian system while writing.
                * @param output target OutputStream
                * @param value value to write
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeSwappedLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>output</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 0 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 8 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 16 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 24 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 32 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 40 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 48 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>output</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>( <name>value</name> &gt;&gt; 56 ) &amp; 0xff
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a "long" value from an InputStream. The value is
                * converted to the opposed endian system while reading.
                * @param input source InputStream
                * @return the value just read
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>readSwappedLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>bytes</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[<expr>8</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;8
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>bytes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>)
                                    <call>
                                        <name>read</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>readSwappedLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bytes</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes a "float" value to an OutputStream. The value is
                * converted to the opposed endian system while writing.
                * @param output target OutputStream
                * @param value value to write
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeSwappedFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>output</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>writeSwappedInteger</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>output</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Float</name>.
                                                    <name>floatToIntBits</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a "float" value from an InputStream. The value is
                * converted to the opposed endian system while reading.
                * @param input source InputStream
                * @return the value just read
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                </type>
                <name>readSwappedFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Float</name>.
                                    <name>intBitsToFloat</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>readSwappedInteger</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>input</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes a "double" value to an OutputStream. The value is
                * converted to the opposed endian system while writing.
                * @param output target OutputStream
                * @param value value to write
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeSwappedDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>output</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>writeSwappedLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>output</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Double</name>.
                                                    <name>doubleToLongBits</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a "double" value from an InputStream. The value is
                * converted to the opposed endian system while reading.
                * @param input source InputStream
                * @return the value just read
                * @throws IOException in case of an I/O problem
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>readSwappedDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Double</name>.
                                    <name>longBitsToDouble</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>readSwappedLong</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>input</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads the next byte from the input stream.
                * @param input the stream
                * @return the byte
                * @throws IOException if the end of file is reached
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>read</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>input</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>-1 ==
                                <name>value</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>EOFException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Unexpected EOF reached"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
