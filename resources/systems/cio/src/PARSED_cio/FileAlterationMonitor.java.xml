<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\monitor\FileAlterationMonitor.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>monitor</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>CopyOnWriteArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ThreadFactory</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A runnable that spawns a monitoring thread triggering any
        * registered {@link FileAlterationObserver} at a specified interval.
        *
        * @see FileAlterationObserver
        * @version $Id: FileAlterationMonitor.java 1304052 2012-03-22 20:55:29Z ggregory $
        * @since 2.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>FileAlterationMonitor</name>
        <super>
            <implements>implements
                <name>Runnable</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>interval</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>FileAlterationObserver</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>observers</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>CopyOnWriteArrayList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>FileAlterationObserver</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Thread</name>
                    </type>
                    <name>thread</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>ThreadFactory</name>
                    </type>
                    <name>threadFactory</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>volatile</name>
                        <name>boolean</name>
                    </type>
                    <name>running</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Construct a monitor with a default interval of 10 seconds.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>FileAlterationMonitor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>10000</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a monitor with the specified interval.
                *
                * @param interval The amount of time in miliseconds to wait between
                * checks of the file system
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>FileAlterationMonitor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>interval</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>interval</name>
                            </name>
                            =
                            <name>interval</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a monitor with the specified interval and set of observers.
                *
                * @param interval The amount of time in miliseconds to wait between
                * checks of the file system
                * @param observers The set of observers to add to the monitor.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>FileAlterationMonitor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>interval</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>FileAlterationObserver</name>...
                            </type>
                            <name>observers</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>interval</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>observers</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>FileAlterationObserver</name>
                                            </type>
                                            <name>observer</name> :
                                            <range>
                                                <expr>
                                                    <name>observers</name>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>addObserver</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>observer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Return the interval.
                *
                * @return the interval
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getInterval</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>interval</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the thread factory.
                *
                * @param threadFactory the thread factory
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>setThreadFactory</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ThreadFactory</name>
                            </type>
                            <name>threadFactory</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>threadFactory</name>
                            </name>
                            =
                            <name>threadFactory</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Add a file system observer to this monitor.
                *
                * @param observer The file system observer to add
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addObserver</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>FileAlterationObserver</name>
                            </type>
                            <name>observer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>observer</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>observers</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>observer</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Remove a file system observer from this monitor.
                *
                * @param observer The file system observer to remove
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeObserver</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>FileAlterationObserver</name>
                            </type>
                            <name>observer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>observer</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <while>while
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>observers</name>.
                                                    <name>remove</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>observer</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the set of {@link FileAlterationObserver} registered with
                * this monitor.
                *
                * @return The set of {@link FileAlterationObserver}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>FileAlterationObserver</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getObservers</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>observers</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Start monitoring.
                *
                * @throws Exception if an error occurs initializing the observer
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>start</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>running</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Monitor is already running"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>FileAlterationObserver</name>
                                </type>
                                <name>observer</name> :
                                <range>
                                    <expr>
                                        <name>observers</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>observer</name>.
                                            <name>initialize</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>running</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>threadFactory</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>thread</name>
                                        =
                                        <call>
                                            <name><name>threadFactory</name>.
                                                <name>newThread</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>thread</name>
                                        = new
                                        <call>
                                            <name>Thread</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>thread</name>.
                                    <name>start</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Stop monitoring.
                *
                * @throws Exception if an error occurs initializing the observer
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>stop</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>stop</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>interval</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Stop monitoring.
                *
                * @param stopInterval the amount of time in milliseconds to wait for the thread to finish.
                * A value of zero will wait until the thread is finished (see {@link Thread#join(long)}).
                * @throws Exception if an error occurs initializing the observer
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>stop</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>stopInterval</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>running</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Monitor is not running"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>running</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>thread</name>.
                                            <name>join</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>stopInterval</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InterruptedException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>Thread</name>.
                                                <name>currentThread</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>interrupt</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>FileAlterationObserver</name>
                                </type>
                                <name>observer</name> :
                                <range>
                                    <expr>
                                        <name>observers</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>observer</name>.
                                            <name>destroy</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Run.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>run</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <while>while
                        <condition>(
                            <expr>
                                <name>running</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>FileAlterationObserver</name>
                                        </type>
                                        <name>observer</name> :
                                        <range>
                                            <expr>
                                                <name>observers</name>
                                            </expr>
                                        </range>
                                    </decl>
                                </init>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>observer</name>.
                                                    <name>checkAndNotify</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <name>running</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <try>try
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>Thread</name>.
                                                    <name>sleep</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>interval</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <specifier>final</specifier>
                                                <name>InterruptedException</name>
                                            </type>
                                            <name>ignored</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        }
                                    </block>
                                </catch>
                            </try>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
