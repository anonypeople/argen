<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\FileCleaner.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Keeps track of files awaiting deletion, and deletes them when an associated
        * marker object is reclaimed by the garbage collector.
        * &lt;p&gt;
        * This utility creates a background thread to handle file deletion.
        * Each file to be deleted is registered with a handler object.
        * When the handler object is garbage collected, the file is deleted.
        * &lt;p&gt;
        * In an environment with multiple class loaders (a servlet container, for
        * example), you should consider stopping the background thread if it is no
        * longer needed. This is done by invoking the method
        * {@link #exitWhenFinished}, typically in
        * {@link javax.servlet.ServletContextListener#contextDestroyed} or similar.
        *
        * @version $Id: FileCleaner.java 1302056 2012-03-18 03:03:38Z ggregory $
        * @deprecated Use {@link FileCleaningTracker}
        */
    </comment>
    <class>
        <annotation>@
            <name>Deprecated</name>
        </annotation>
        <specifier>public</specifier>
        class <name>FileCleaner</name>
        <block>{
            <comment type="javadoc">/**
                * The instance to use for the deprecated, static methods.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>FileCleaningTracker</name>
                    </type>
                    <name>theInstance</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>FileCleaningTracker</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Track the specified file, using the provided marker, deleting the file
                * when the marker instance is garbage collected.
                * The {@link FileDeleteStrategy#NORMAL normal} deletion strategy will be used.
                *
                * @param file the file to be tracked, not null
                * @param marker the marker object used to track the file, not null
                * @throws NullPointerException if the file is null
                * @deprecated Use {@link FileCleaningTracker#track(File, Object)}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>track</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>marker</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>theInstance</name>.
                                    <name>track</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>file</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>marker</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Track the specified file, using the provided marker, deleting the file
                * when the marker instance is garbage collected.
                * The speified deletion strategy is used.
                *
                * @param file the file to be tracked, not null
                * @param marker the marker object used to track the file, not null
                * @param deleteStrategy the strategy to delete the file, null means normal
                * @throws NullPointerException if the file is null
                * @deprecated Use {@link FileCleaningTracker#track(File, Object, FileDeleteStrategy)}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>track</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>marker</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>FileDeleteStrategy</name>
                            </type>
                            <name>deleteStrategy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>theInstance</name>.
                                    <name>track</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>file</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>marker</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>deleteStrategy</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Track the specified file, using the provided marker, deleting the file
                * when the marker instance is garbage collected.
                * The {@link FileDeleteStrategy#NORMAL normal} deletion strategy will be used.
                *
                * @param path the full path to the file to be tracked, not null
                * @param marker the marker object used to track the file, not null
                * @throws NullPointerException if the path is null
                * @deprecated Use {@link FileCleaningTracker#track(String, Object)}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>track</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>marker</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>theInstance</name>.
                                    <name>track</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>marker</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Track the specified file, using the provided marker, deleting the file
                * when the marker instance is garbage collected.
                * The speified deletion strategy is used.
                *
                * @param path the full path to the file to be tracked, not null
                * @param marker the marker object used to track the file, not null
                * @param deleteStrategy the strategy to delete the file, null means normal
                * @throws NullPointerException if the path is null
                * @deprecated Use {@link FileCleaningTracker#track(String, Object, FileDeleteStrategy)}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>track</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>marker</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>FileDeleteStrategy</name>
                            </type>
                            <name>deleteStrategy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>theInstance</name>.
                                    <name>track</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>marker</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>deleteStrategy</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Retrieve the number of files currently being tracked, and therefore
                * awaiting deletion.
                *
                * @return the number of files being tracked
                * @deprecated Use {@link FileCleaningTracker#getTrackCount()}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>getTrackCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>theInstance</name>.
                                    <name>getTrackCount</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Call this method to cause the file cleaner thread to terminate when
                * there are no more objects being tracked for deletion.
                * &lt;p&gt;
                * In a simple environment, you don't need this method as the file cleaner
                * thread will simply exit when the JVM exits. In a more complex environment,
                * with multiple class loaders (such as an application server), you should be
                * aware that the file cleaner thread will continue running even if the class
                * loader it was started from terminates. This can consitute a memory leak.
                * &lt;p&gt;
                * For example, suppose that you have developed a web application, which
                * contains the commons-io jar file in your WEB-INF/lib directory. In other
                * words, the FileCleaner class is loaded through the class loader of your
                * web application. If the web application is terminated, but the servlet
                * container is still running, then the file cleaner thread will still exist,
                * posing a memory leak.
                * &lt;p&gt;
                * This method allows the thread to be terminated. Simply call this method
                * in the resource cleanup code, such as {@link javax.servlet.ServletContextListener#contextDestroyed}.
                * One called, no new objects can be tracked by the file cleaner.
                * @deprecated Use {@link FileCleaningTracker#exitWhenFinished()}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>exitWhenFinished</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>theInstance</name>.
                                    <name>exitWhenFinished</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the singleton instance, which is used by the deprecated, static methods.
                * This is mainly useful for code, which wants to support the new
                * {@link FileCleaningTracker} class while maintain compatibility with the
                * deprecated {@link FileCleaner}.
                *
                * @return the singleton instance
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>FileCleaningTracker</name>
                </type>
                <name>getInstance</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>theInstance</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
