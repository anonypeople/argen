<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\FileCleaningTracker.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>PhantomReference</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>ReferenceQueue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Keeps track of files awaiting deletion, and deletes them when an associated
        * marker object is reclaimed by the garbage collector.
        * &lt;p&gt;
        * This utility creates a background thread to handle file deletion.
        * Each file to be deleted is registered with a handler object.
        * When the handler object is garbage collected, the file is deleted.
        * &lt;p&gt;
        * In an environment with multiple class loaders (a servlet container, for
        * example), you should consider stopping the background thread if it is no
        * longer needed. This is done by invoking the method
        * {@link #exitWhenFinished}, typically in
        * {@link javax.servlet.ServletContextListener#contextDestroyed} or similar.
        *
        * @version $Id: FileCleaningTracker.java 1304052 2012-03-22 20:55:29Z ggregory $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>FileCleaningTracker</name>
        <block>{
            <comment type="javadoc">/**
                * Queue of &lt;code&gt;Tracker&lt;/code&gt; instances being watched.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceQueue</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>q</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Collection of &lt;code&gt;Tracker&lt;/code&gt; instances in existence.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Collection</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Tracker</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>trackers</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>synchronizedSet</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>
                                                    <name>HashSet</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>Tracker</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// synchronized</comment>
            <comment type="javadoc">/**
                * Collection of File paths that failed to delete.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>deleteFailures</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>synchronizedList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>
                                                    <name>ArrayList</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>String</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Whether to terminate the thread when the tracking is complete.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>boolean</name>
                    </type>
                    <name>exitWhenFinished</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The thread that will clean up registered files.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Thread</name>
                    </type>
                    <name>reaper</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Track the specified file, using the provided marker, deleting the file
                * when the marker instance is garbage collected.
                * The {@link FileDeleteStrategy#NORMAL normal} deletion strategy will be used.
                *
                * @param file the file to be tracked, not null
                * @param marker the marker object used to track the file, not null
                * @throws NullPointerException if the file is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>track</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>marker</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>track</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>file</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>marker</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>(<name>FileDeleteStrategy</name>)
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Track the specified file, using the provided marker, deleting the file
                * when the marker instance is garbage collected.
                * The speified deletion strategy is used.
                *
                * @param file the file to be tracked, not null
                * @param marker the marker object used to track the file, not null
                * @param deleteStrategy the strategy to delete the file, null means normal
                * @throws NullPointerException if the file is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>track</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>marker</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>FileDeleteStrategy</name>
                            </type>
                            <name>deleteStrategy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>file</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The file must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>addTracker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>file</name>.
                                                    <name>getPath</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>marker</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>deleteStrategy</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Track the specified file, using the provided marker, deleting the file
                * when the marker instance is garbage collected.
                * The {@link FileDeleteStrategy#NORMAL normal} deletion strategy will be used.
                *
                * @param path the full path to the file to be tracked, not null
                * @param marker the marker object used to track the file, not null
                * @throws NullPointerException if the path is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>track</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>marker</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>track</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>marker</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>(<name>FileDeleteStrategy</name>)
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Track the specified file, using the provided marker, deleting the file
                * when the marker instance is garbage collected.
                * The speified deletion strategy is used.
                *
                * @param path the full path to the file to be tracked, not null
                * @param marker the marker object used to track the file, not null
                * @param deleteStrategy the strategy to delete the file, null means normal
                * @throws NullPointerException if the path is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>track</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>marker</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>FileDeleteStrategy</name>
                            </type>
                            <name>deleteStrategy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>path</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The path must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>addTracker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>marker</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>deleteStrategy</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Adds a tracker to the list of trackers.
                *
                * @param path the full path to the file to be tracked, not null
                * @param marker the marker object used to track the file, not null
                * @param deleteStrategy the strategy to delete the file, null means normal
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>addTracker</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>marker</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>FileDeleteStrategy</name>
                            </type>
                            <name>deleteStrategy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// synchronized block protects reaper</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>exitWhenFinished</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"No new trackers can be added once exitWhenFinished() is
                                                        called"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>reaper</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>reaper</name>
                                        = new
                                        <call>
                                            <name>Reaper</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>reaper</name>.
                                                <name>start</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>trackers</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Tracker</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>path</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>deleteStrategy</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>marker</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>q</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Retrieve the number of files currently being tracked, and therefore
                * awaiting deletion.
                *
                * @return the number of files being tracked
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getTrackCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>trackers</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the file paths that failed to delete.
                *
                * @return the file paths that failed to delete
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getDeleteFailures</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>deleteFailures</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Call this method to cause the file cleaner thread to terminate when
                * there are no more objects being tracked for deletion.
                * &lt;p&gt;
                * In a simple environment, you don't need this method as the file cleaner
                * thread will simply exit when the JVM exits. In a more complex environment,
                * with multiple class loaders (such as an application server), you should be
                * aware that the file cleaner thread will continue running even if the class
                * loader it was started from terminates. This can consitute a memory leak.
                * &lt;p&gt;
                * For example, suppose that you have developed a web application, which
                * contains the commons-io jar file in your WEB-INF/lib directory. In other
                * words, the FileCleaner class is loaded through the class loader of your
                * web application. If the web application is terminated, but the servlet
                * container is still running, then the file cleaner thread will still exist,
                * posing a memory leak.
                * &lt;p&gt;
                * This method allows the thread to be terminated. Simply call this method
                * in the resource cleanup code, such as {@link javax.servlet.ServletContextListener#contextDestroyed}.
                * Once called, no new objects can be tracked by the file cleaner.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>exitWhenFinished</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// synchronized block protects reaper</comment>
                    <expr_stmt>
                        <expr>
                            <name>exitWhenFinished</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>reaper</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <synchronized>synchronized (
                                    <expr>
                                        <name>reaper</name>
                                    </expr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>reaper</name>.
                                                        <name>interrupt</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </synchronized>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * The reaper thread.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>final</specifier> class <name>Reaper</name>
                <super>
                    <extends>extends
                        <name>Thread</name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/** Construct a new Reaper */</comment>
                    <constructor>
                        <name>Reaper</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"File Reaper"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>setPriority</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Thread</name>.
                                                        <name>MAX_PRIORITY</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>setDaemon</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Run the reaper thread that will delete files as their associated
                        * marker objects are reclaimed by the garbage collector.
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>run</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <comment type="line">// thread exits when exitWhenFinished is true and there are no more
                                tracked objects
                            </comment>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>exitWhenFinished</name>
                                        == false ||
                                        <call>
                                            <name><name>trackers</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <try>try
                                        <block>{
                                            <comment type="line">// Wait for a tracker to remove.</comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>Tracker</name>
                                                    </type>
                                                    <name>tracker</name> =
                                                    <init>
                                                        <expr>(<name>Tracker</name>)
                                                            <call>
                                                                <name><name>q</name>.
                                                                    <name>remove</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <comment type="line">// cannot return null</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>trackers</name>.
                                                            <name>remove</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>tracker</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>!
                                                        <call>
                                                            <name><name>tracker</name>.
                                                                <name>delete</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>deleteFailures</name>.
                                                                        <name>add</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>tracker</name>.
                                                                                        <name>getPath</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>tracker</name>.
                                                            <name>clear</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                        <catch>catch (
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>InterruptedException</name>
                                                    </type>
                                                    <name>e</name>
                                                </decl>
                                            </param>
                                            )
                                            <block>{
                                                <continue>continue;</continue>
                                                }
                                            </block>
                                        </catch>
                                    </try>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Inner class which acts as the reference for a file pending deletion.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>Tracker</name>
                <super>
                    <extends>extends
                        <name>
                            <name>PhantomReference</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{

                    <comment type="javadoc">/**
                        * The full path to the file being tracked.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="javadoc">/**
                        * The strategy for deleting files.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>FileDeleteStrategy</name>
                            </type>
                            <name>deleteStrategy</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Constructs an instance of this class from the supplied parameters.
                        *
                        * @param path the full path to the file to be tracked, not null
                        * @param deleteStrategy the strategy to delete the file, null means normal
                        * @param marker the marker object used to track the file, not null
                        * @param queue the queue on to which the tracker will be pushed, not null
                        */
                    </comment>
                    <constructor>
                        <name>Tracker</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>path</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>FileDeleteStrategy</name>
                                    </type>
                                    <name>deleteStrategy</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>marker</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceQueue</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>Object</name>
                                                    </super>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>queue</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>marker</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>queue</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>path</name>
                                    </name>
                                    =
                                    <name>path</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>deleteStrategy</name>
                                    </name>
                                    = <name>deleteStrategy</name> == <name>null</name> ?
                                    <name><name>FileDeleteStrategy</name>.
                                        <name>NORMAL</name>
                                    </name>
                                    :
                                    <name>deleteStrategy</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Return the path.
                        *
                        * @return the path
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>getPath</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>path</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Deletes the file associated with this tracker instance.
                        *
                        * @return &lt;code&gt;true&lt;/code&gt; if the file was deleted successfully;
                        * &lt;code&gt;false&lt;/code&gt; otherwise.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>delete</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>deleteStrategy</name>.
                                            <name>deleteQuietly</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>File</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>path</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            }
        </block>
    </class>
</unit>
