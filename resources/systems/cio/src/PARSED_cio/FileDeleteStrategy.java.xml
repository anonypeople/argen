<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\FileDeleteStrategy.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Strategy for deleting files.
        * &lt;p&gt;
        * There is more than one way to delete a file.
        * You may want to limit access to certain directories, to only delete
        * directories if they are empty, or maybe to force deletion.
        * &lt;p&gt;
        * This class captures the strategy to use and is designed for user subclassing.
        *
        * @version $Id: FileDeleteStrategy.java 1304052 2012-03-22 20:55:29Z ggregory $
        * @since 1.3
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>FileDeleteStrategy</name>
        <block>{

            <comment type="javadoc">/**
                * The singleton instance for normal file deletion, which does not permit
                * the deletion of directories that are not empty.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>FileDeleteStrategy</name>
                    </type>
                    <name>NORMAL</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>FileDeleteStrategy</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Normal"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The singleton instance for forced file deletion, which always deletes,
                * even if the file represents a non-empty directory.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>FileDeleteStrategy</name>
                    </type>
                    <name>FORCE</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>ForceFileDeleteStrategy</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The name of the strategy. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>name</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Restricted constructor.
                *
                * @param name the name by which the strategy is known
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>FileDeleteStrategy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>name</name>
                            </name>
                            =
                            <name>name</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Deletes the file object, which may be a file or a directory.
                * All &lt;code&gt;IOException&lt;/code&gt;s are caught and false returned instead.
                * If the file does not exist or is null, true is returned.
                * &lt;p&gt;
                * Subclass writers should override {@link #doDelete(File)}, not this method.
                *
                * @param fileToDelete the file to delete, null returns true
                * @return true if the file was deleted, or there was no such file
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>deleteQuietly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>fileToDelete</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fileToDelete</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>fileToDelete</name>.
                                        <name>exists</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>doDelete</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fileToDelete</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Deletes the file object, which may be a file or a directory.
                * If the file does not exist, the method just returns.
                * &lt;p&gt;
                * Subclass writers should override {@link #doDelete(File)}, not this method.
                *
                * @param fileToDelete the file to delete, not null
                * @throws NullPointerException if the file is null
                * @throws IOException if an error occurs during file deletion
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>delete</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>fileToDelete</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>fileToDelete</name>.
                                        <name>exists</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &amp;&amp;
                                <call>
                                    <name>doDelete</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>fileToDelete</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Deletion failed: " +
                                                        <name>fileToDelete</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Actually deletes the file object, which may be a file or a directory.
                * &lt;p&gt;
                * This method is designed for subclasses to override.
                * The implementation may return either false or an &lt;code&gt;IOException&lt;/code&gt;
                * when deletion fails. The {@link #delete(File)} and {@link #deleteQuietly(File)}
                * methods will handle either response appropriately.
                * A check has been made to ensure that the file will exist.
                * &lt;p&gt;
                * This implementation uses {@link File#delete()}.
                *
                * @param fileToDelete the file to delete, exists, not null
                * @return true if the file was deleteds
                * @throws NullPointerException if the file is null
                * @throws IOException if an error occurs during file deletion
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>doDelete</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>fileToDelete</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fileToDelete</name>.
                                    <name>delete</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets a string describing the delete strategy.
                *
                * @return a string describing the delete strategy
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"FileDeleteStrategy[" + <name>name</name> + "]"
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Force file deletion strategy.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>ForceFileDeleteStrategy</name>
                <super>
                    <extends>extends
                        <name>FileDeleteStrategy</name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/** Default Constructor */</comment>
                    <constructor>
                        <name>ForceFileDeleteStrategy</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"Force"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Deletes the file object.
                        * &lt;p&gt;
                        * This implementation uses &lt;code&gt;FileUtils.forceDelete() &lt;code&gt;
                        * if the file exists.
                        *
                        * @param fileToDelete the file to delete, not null
                        * @return Always returns &lt;code&gt;true&lt;/code&gt;
                        * @throws NullPointerException if the file is null
                        * @throws IOException if an error occurs during file deletion
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>protected</specifier>
                            <name>boolean</name>
                        </type>
                        <name>doDelete</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>File</name>
                                    </type>
                                    <name>fileToDelete</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>IOException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>FileUtils</name>.
                                            <name>forceDelete</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fileToDelete</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return <expr>true</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            }
        </block>
    </class>
</unit>
