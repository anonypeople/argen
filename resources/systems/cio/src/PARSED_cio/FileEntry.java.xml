<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\monitor\FileEntry.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>monitor</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * {@link FileEntry} represents the state of a file or directory, capturing
        * the following {@link File} attributes at a point in time.
        * &lt;ul&gt;
        * &lt;li&gt;File Name (see {@link File#getName()})&lt;/li&gt;
        * &lt;li&gt;Exists - whether the file exists or not (see {@link File#exists()})&lt;/li&gt;
        * &lt;li&gt;Directory - whether the file is a directory or not (see {@link File#isDirectory()})&lt;/li&gt;
        * &lt;li&gt;Last Modified Date/Time (see {@link File#lastModified()})&lt;/li&gt;
        * &lt;li&gt;Length (see {@link File#length()}) - directories treated as zero&lt;/li&gt;
        * &lt;li&gt;Children - contents of a directory (see {@link File#listFiles(java.io.FileFilter)})&lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;p&gt;
        * &lt;h3&gt;Custom Implementations&lt;/h3&gt;
        * If the state of additional {@link File} attributes is required then create a custom
        * {@link FileEntry} with properties for those attributes. Override the
        * {@link #newChildInstance(File)} to return a new instance of the appropriate type.
        * You may also want to override the {@link #refresh(File)} method.
        * @see FileAlterationObserver
        * @since 2.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>FileEntry</name>
        <super>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>FileEntry</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_ENTRIES</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>FileEntry</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>FileEntry</name>
                    </type>
                    <name>parent</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>FileEntry</name>
                        <index>[]</index>
                    </type>
                    <name>children</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>File</name>
                    </type>
                    <name>file</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>name</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>exists</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>directory</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>lastModified</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>length</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Construct a new monitor for a specified {@link File}.
                *
                * @param file The file being monitored
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>FileEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>FileEntry</name>)
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>file</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Construct a new monitor for a specified {@link File}.
                *
                * @param parent The parent
                * @param file The file being monitored
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>FileEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FileEntry</name>
                            </type>
                            <name>parent</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>file</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"File is missing"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>file</name>
                            </name>
                            =
                            <name>file</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>parent</name>
                            </name>
                            =
                            <name>parent</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>name</name>
                            </name>
                            =
                            <call>
                                <name><name>file</name>.
                                    <name>getName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Refresh the attributes from the {@link File}, indicating
                * whether the file has changed.
                * &lt;p&gt;
                * This implementation refreshes the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;exists&lt;/code&gt;,
                * &lt;code&gt;directory&lt;/code&gt;, &lt;code&gt;lastModified&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt;
                * properties.
                * &lt;p&gt;
                * The &lt;code&gt;exists&lt;/code&gt;, &lt;code&gt;directory&lt;/code&gt;, &lt;code&gt;lastModified&lt;/code&gt;
                * and &lt;code&gt;length&lt;/code&gt; properties are compared for changes
                *
                * @param file the file instance to compare to
                * @return &lt;code&gt;true&lt;/code&gt; if the file has changed, otherwise &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>refresh</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// cache original values</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>origExists</name>       =
                            <init>
                                <expr>
                                    <name>exists</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>origLastModified</name> =
                            <init>
                                <expr>
                                    <name>lastModified</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>origDirectory</name>    =
                            <init>
                                <expr>
                                    <name>directory</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>origLength</name>       =
                            <init>
                                <expr>
                                    <name>length</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// refresh the values</comment>
                    <expr_stmt>
                        <expr>
                            <name>name</name>
                            =
                            <call>
                                <name><name>file</name>.
                                    <name>getName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>exists</name>
                            =
                            <call>
                                <name><name>file</name>.
                                    <name>exists</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>directory</name>
                            = <name>exists</name> ?
                            <call>
                                <name><name>file</name>.
                                    <name>isDirectory</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            : false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>lastModified</name>
                            = <name>exists</name> ?
                            <call>
                                <name><name>file</name>.
                                    <name>lastModified</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            : 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>length</name>
                            = <name>exists</name> &amp;&amp; !<name>directory</name> ?
                            <call>
                                <name><name>file</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            : 0
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Return if there are changes</comment>
                    <return>return
                        <expr>
                            <name>exists</name>
                            != <name>origExists</name> ||
                            <name>lastModified</name>
                            != <name>origLastModified</name> ||
                            <name>directory</name>
                            != <name>origDirectory</name> ||
                            <name>length</name>
                            !=
                            <name>origLength</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Create a new child instance.
                * &lt;p&gt;
                * Custom implementations should override this method to return
                * a new instance of the appropriate type.
                *
                * @param file The child file
                * @return a new child instance
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>FileEntry</name>
                </type>
                <name>newChildInstance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>FileEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>file</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the parent entry.
                *
                * @return the parent entry
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>FileEntry</name>
                </type>
                <name>getParent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>parent</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the level
                *
                * @return the level
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getLevel</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>parent</name>
                            == <name>null</name> ? 0 :
                            <call>
                                <name><name>parent</name>.
                                    <name>getLevel</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            + 1
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the directory's files.
                *
                * @return This directory's files or an empty
                * array if the file is not a directory or the
                * directory is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>FileEntry</name>
                    <index>[]</index>
                </type>
                <name>getChildren</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>children</name>
                            != <name>null</name> ? <name>children</name> :
                            <name>EMPTY_ENTRIES</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the directory's files.
                *
                * @param children This directory's files, may be null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setChildren</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>FileEntry</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>children</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>children</name>
                            </name>
                            =
                            <name>children</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the file being monitored.
                *
                * @return the file being monitored
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>File</name>
                </type>
                <name>getFile</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>file</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the file name.
                *
                * @return the file name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>name</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the file name.
                *
                * @param name the file name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>name</name>
                            </name>
                            =
                            <name>name</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the last modified time from the last time it
                * was checked.
                *
                * @return the last modified time
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getLastModified</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>lastModified</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the last modified time from the last time it
                * was checked.
                *
                * @param lastModified The last modified time
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLastModified</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>lastModified</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>lastModified</name>
                            </name>
                            =
                            <name>lastModified</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the length.
                *
                * @return the length
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getLength</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>length</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the length.
                *
                * @param length the length
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>length</name>
                            </name>
                            =
                            <name>length</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicate whether the file existed the last time it
                * was checked.
                *
                * @return whether the file existed
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isExists</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>exists</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set whether the file existed the last time it
                * was checked.
                *
                * @param exists whether the file exists or not
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExists</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>exists</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>exists</name>
                            </name>
                            =
                            <name>exists</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicate whether the file is a directory or not.
                *
                * @return whether the file is a directory or not
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isDirectory</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>directory</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set whether the file is a directory or not.
                *
                * @param directory whether the file is a directory or not
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDirectory</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>directory</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>directory</name>
                            </name>
                            =
                            <name>directory</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
