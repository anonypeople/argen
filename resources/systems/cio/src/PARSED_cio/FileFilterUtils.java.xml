<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\filefilter\FileFilterUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>filefilter</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>FileFilter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>FilenameFilter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Date</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>IOCase</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Useful utilities for working with file filters. It provides access to all
        * file filter implementations in this package so you don't have to import
        * every class you use.
        *
        * @since 1.0
        * @version $Id: FileFilterUtils.java 1304052 2012-03-22 20:55:29Z ggregory $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>FileFilterUtils</name>
        <block>{

            <comment type="javadoc">/**
                * FileFilterUtils is not normally instantiated.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>FileFilterUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Applies an {@link IOFileFilter} to the provided {@link File}
                * objects. The resulting array is a subset of the original file list that
                * matches the provided filter.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The {@link Set} returned by this method is not guaranteed to be thread safe.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * Set&amp;lt;File&amp;gt; allFiles = ...
                * Set&amp;lt;File&amp;gt; javaFiles = FileFilterUtils.filterSet(allFiles,
                * FileFilterUtils.suffixFileFilter(".java"));
                * &lt;/pre&gt;
                * @param filter the filter to apply to the set of files.
                * @param files the array of files to apply the filter to.
                *
                * @return a subset of &lt;code&gt;files&lt;/code&gt; that is accepted by the
                * file filter.
                * @throws IllegalArgumentException if the filter is &lt;code&gt;null&lt;/code&gt;
                * or &lt;code&gt;files&lt;/code&gt; contains a &lt;code&gt;null&lt;/code&gt; value.
                *
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>File</name>
                    <index>[]</index>
                </type>
                <name>filter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>File</name>...
                            </type>
                            <name>files</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"file filter is null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>files</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>new
                                        <name>
                                            <name>File</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>File</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>acceptedFiles</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ArrayList</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>File</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>File</name>
                                </type>
                                <name>file</name> :
                                <range>
                                    <expr>
                                        <name>files</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>file</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"file array contains null"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>filter</name>.
                                                <name>accept</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>file</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>acceptedFiles</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>file</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>acceptedFiles</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>File</name>
                                                <index>[
                                                    <expr>
                                                        <call>
                                                            <name><name>acceptedFiles</name>.
                                                                <name>size</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Applies an {@link IOFileFilter} to the provided {@link File}
                * objects. The resulting array is a subset of the original file list that
                * matches the provided filter.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The {@link Set} returned by this method is not guaranteed to be thread safe.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * Set&amp;lt;File&amp;gt; allFiles = ...
                * Set&amp;lt;File&amp;gt; javaFiles = FileFilterUtils.filterSet(allFiles,
                * FileFilterUtils.suffixFileFilter(".java"));
                * &lt;/pre&gt;
                * @param filter the filter to apply to the set of files.
                * @param files the array of files to apply the filter to.
                *
                * @return a subset of &lt;code&gt;files&lt;/code&gt; that is accepted by the
                * file filter.
                * @throws IllegalArgumentException if the filter is &lt;code&gt;null&lt;/code&gt;
                * or &lt;code&gt;files&lt;/code&gt; contains a &lt;code&gt;null&lt;/code&gt; value.
                *
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>File</name>
                    <index>[]</index>
                </type>
                <name>filter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>File</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>files</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>File</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>acceptedFiles</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>filterList</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filter</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>files</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>acceptedFiles</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>File</name>
                                                <index>[
                                                    <expr>
                                                        <call>
                                                            <name><name>acceptedFiles</name>.
                                                                <name>size</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Applies an {@link IOFileFilter} to the provided {@link File}
                * objects. The resulting list is a subset of the original files that
                * matches the provided filter.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The {@link List} returned by this method is not guaranteed to be thread safe.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * List&amp;lt;File&amp;gt; filesAndDirectories = ...
                * List&amp;lt;File&amp;gt; directories = FileFilterUtils.filterList(filesAndDirectories,
                * FileFilterUtils.directoryFileFilter());
                * &lt;/pre&gt;
                * @param filter the filter to apply to each files in the list.
                * @param files the collection of files to apply the filter to.
                *
                * @return a subset of &lt;code&gt;files&lt;/code&gt; that is accepted by the
                * file filter.
                * @throws IllegalArgumentException if the filter is &lt;code&gt;null&lt;/code&gt;
                * or &lt;code&gt;files&lt;/code&gt; contains a &lt;code&gt;null&lt;/code&gt; value.
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>File</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>filterList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>File</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>files</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>filter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filter</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>files</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>
                                                    <name>ArrayList</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>File</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Applies an {@link IOFileFilter} to the provided {@link File}
                * objects. The resulting list is a subset of the original files that
                * matches the provided filter.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The {@link List} returned by this method is not guaranteed to be thread safe.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * List&amp;lt;File&amp;gt; filesAndDirectories = ...
                * List&amp;lt;File&amp;gt; directories = FileFilterUtils.filterList(filesAndDirectories,
                * FileFilterUtils.directoryFileFilter());
                * &lt;/pre&gt;
                * @param filter the filter to apply to each files in the list.
                * @param files the collection of files to apply the filter to.
                *
                * @return a subset of &lt;code&gt;files&lt;/code&gt; that is accepted by the
                * file filter.
                * @throws IllegalArgumentException if the filter is &lt;code&gt;null&lt;/code&gt;
                * or &lt;code&gt;files&lt;/code&gt; contains a &lt;code&gt;null&lt;/code&gt; value.
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>File</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>filterList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>File</name>...
                            </type>
                            <name>files</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>File</name>
                                <index>[]</index>
                            </type>
                            <name>acceptedFiles</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>filter</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filter</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>files</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Arrays</name>.
                                    <name>asList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>acceptedFiles</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Applies an {@link IOFileFilter} to the provided {@link File}
                * objects. The resulting set is a subset of the original file list that
                * matches the provided filter.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The {@link Set} returned by this method is not guaranteed to be thread safe.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * Set&amp;lt;File&amp;gt; allFiles = ...
                * Set&amp;lt;File&amp;gt; javaFiles = FileFilterUtils.filterSet(allFiles,
                * FileFilterUtils.suffixFileFilter(".java"));
                * &lt;/pre&gt;
                * @param filter the filter to apply to the set of files.
                * @param files the collection of files to apply the filter to.
                *
                * @return a subset of &lt;code&gt;files&lt;/code&gt; that is accepted by the
                * file filter.
                * @throws IllegalArgumentException if the filter is &lt;code&gt;null&lt;/code&gt;
                * or &lt;code&gt;files&lt;/code&gt; contains a &lt;code&gt;null&lt;/code&gt; value.
                *
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>File</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>filterSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>File</name>...
                            </type>
                            <name>files</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>File</name>
                                <index>[]</index>
                            </type>
                            <name>acceptedFiles</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>filter</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filter</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>files</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>HashSet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>File</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Arrays</name>.
                                                    <name>asList</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>acceptedFiles</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Applies an {@link IOFileFilter} to the provided {@link File}
                * objects. The resulting set is a subset of the original file list that
                * matches the provided filter.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The {@link Set} returned by this method is not guaranteed to be thread safe.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * Set&amp;lt;File&amp;gt; allFiles = ...
                * Set&amp;lt;File&amp;gt; javaFiles = FileFilterUtils.filterSet(allFiles,
                * FileFilterUtils.suffixFileFilter(".java"));
                * &lt;/pre&gt;
                * @param filter the filter to apply to the set of files.
                * @param files the collection of files to apply the filter to.
                *
                * @return a subset of &lt;code&gt;files&lt;/code&gt; that is accepted by the
                * file filter.
                * @throws IllegalArgumentException if the filter is &lt;code&gt;null&lt;/code&gt;
                * or &lt;code&gt;files&lt;/code&gt; contains a &lt;code&gt;null&lt;/code&gt; value.
                *
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>File</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>filterSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>File</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>files</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>filter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filter</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>files</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>
                                                    <name>HashSet</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>File</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Applies an {@link IOFileFilter} to the provided {@link File}
                * objects and appends the accepted files to the other supplied collection.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * List&amp;lt;File&amp;gt; files = ...
                * List&amp;lt;File&amp;gt; directories = FileFilterUtils.filterList(files,
                * FileFilterUtils.sizeFileFilter(FileUtils.FIFTY_MB),
                * new ArrayList&amp;lt;File&amp;gt;());
                * &lt;/pre&gt;
                * @param filter the filter to apply to the collection of files.
                * @param files the collection of files to apply the filter to.
                * @param acceptedFiles the list of files to add accepted files to.
                *
                * @param &lt;T&gt; the type of the file collection.
                * @return a subset of &lt;code&gt;files&lt;/code&gt; that is accepted by the
                * file filter.
                * @throws IllegalArgumentException if the filter is &lt;code&gt;null&lt;/code&gt;
                * or &lt;code&gt;files&lt;/code&gt; contains a &lt;code&gt;null&lt;/code&gt; value.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                            <extends>extends
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>File</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>filter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>File</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>files</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>acceptedFiles</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"file filter is null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>files</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>File</name>
                                            </type>
                                            <name>file</name> :
                                            <range>
                                                <expr>
                                                    <name>files</name>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>file</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <throw>throw
                                                        <expr>new
                                                            <call>
                                                                <name>IllegalArgumentException</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"file collection contains null"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>filter</name>.
                                                            <name>accept</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>file</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>acceptedFiles</name>.
                                                                    <name>add</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>file</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>acceptedFiles</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that returns true if the filename starts with the specified text.
                *
                * @param prefix the filename prefix
                * @return a prefix checking filter
                * @see PrefixFileFilter
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>prefixFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>PrefixFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that returns true if the filename starts with the specified text.
                *
                * @param prefix the filename prefix
                * @param caseSensitivity how to handle case sensitivity, null means case-sensitive
                * @return a prefix checking filter
                * @see PrefixFileFilter
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>prefixFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IOCase</name>
                            </type>
                            <name>caseSensitivity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>PrefixFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>caseSensitivity</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that returns true if the filename ends with the specified text.
                *
                * @param suffix the filename suffix
                * @return a suffix checking filter
                * @see SuffixFileFilter
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>suffixFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>suffix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>SuffixFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>suffix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that returns true if the filename ends with the specified text.
                *
                * @param suffix the filename suffix
                * @param caseSensitivity how to handle case sensitivity, null means case-sensitive
                * @return a suffix checking filter
                * @see SuffixFileFilter
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>suffixFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>suffix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IOCase</name>
                            </type>
                            <name>caseSensitivity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>SuffixFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>suffix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>caseSensitivity</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that returns true if the filename matches the specified text.
                *
                * @param name the filename
                * @return a name checking filter
                * @see NameFileFilter
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>nameFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>NameFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that returns true if the filename matches the specified text.
                *
                * @param name the filename
                * @param caseSensitivity how to handle case sensitivity, null means case-sensitive
                * @return a name checking filter
                * @see NameFileFilter
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>nameFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IOCase</name>
                            </type>
                            <name>caseSensitivity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>NameFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>caseSensitivity</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that checks if the file is a directory.
                *
                * @return file filter that accepts only directories and not files
                * @see DirectoryFileFilter#DIRECTORY
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>directoryFileFilter</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>DirectoryFileFilter</name>.
                                <name>DIRECTORY</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that checks if the file is a file (and not a directory).
                *
                * @return file filter that accepts only files and not directories
                * @see FileFileFilter#FILE
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>fileFileFilter</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>FileFileFilter</name>.
                                <name>FILE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns a filter that ANDs the two specified filters.
                *
                * @param filter1 the first filter
                * @param filter2 the second filter
                * @return a filter that ANDs the two specified filters
                * @see #and(IOFileFilter...)
                * @see AndFileFilter
                * @deprecated use {@link #and(IOFileFilter...)}
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>andFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>AndFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filter1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>filter2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that ORs the two specified filters.
                *
                * @param filter1 the first filter
                * @param filter2 the second filter
                * @return a filter that ORs the two specified filters
                * @see #or(IOFileFilter...)
                * @see OrFileFilter
                * @deprecated use {@link #or(IOFileFilter...)}
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>orFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>OrFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filter1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>filter2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that ANDs the specified filters.
                *
                * @param filters the IOFileFilters that will be ANDed together.
                * @return a filter that ANDs the specified filters
                *
                * @throws IllegalArgumentException if the filters are null or contain a
                * null value.
                * @see AndFileFilter
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>and</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>IOFileFilter</name>...
                            </type>
                            <name>filters</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>AndFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toList</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>filters</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that ORs the specified filters.
                *
                * @param filters the IOFileFilters that will be ORed together.
                * @return a filter that ORs the specified filters
                *
                * @throws IllegalArgumentException if the filters are null or contain a
                * null value.
                * @see OrFileFilter
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>or</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>IOFileFilter</name>...
                            </type>
                            <name>filters</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>OrFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toList</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>filters</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Create a List of file filters.
                *
                * @param filters The file filters
                * @return The list of file filters
                * @throws IllegalArgumentException if the filters are null or contain a
                * null value.
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>IOFileFilter</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>toList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>IOFileFilter</name>...
                            </type>
                            <name>filters</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filters</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The filters must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>IOFileFilter</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ArrayList</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>IOFileFilter</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>filters</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>filters</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>filters</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"The filter[" + <name>i</name> + "] is null"
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>list</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>filters</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>list</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that NOTs the specified filter.
                *
                * @param filter the filter to invert
                * @return a filter that NOTs the specified filter
                * @see NotFileFilter
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>notFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>NotFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns a filter that always returns true.
                *
                * @return a true filter
                * @see TrueFileFilter#TRUE
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>trueFileFilter</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>TrueFileFilter</name>.
                                <name>TRUE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that always returns false.
                *
                * @return a false filter
                * @see FalseFileFilter#FALSE
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>falseFileFilter</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>FalseFileFilter</name>.
                                <name>FALSE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns an &lt;code&gt;IOFileFilter&lt;/code&gt; that wraps the
                * &lt;code&gt;FileFilter&lt;/code&gt; instance.
                *
                * @param filter the filter to be wrapped
                * @return a new filter that implements IOFileFilter
                * @see DelegateFileFilter
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>asFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>DelegateFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an &lt;code&gt;IOFileFilter&lt;/code&gt; that wraps the
                * &lt;code&gt;FilenameFilter&lt;/code&gt; instance.
                *
                * @param filter the filter to be wrapped
                * @return a new filter that implements IOFileFilter
                * @see DelegateFileFilter
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>asFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>FilenameFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>DelegateFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns a filter that returns true if the file was last modified after
                * the specified cutoff time.
                *
                * @param cutoff the time threshold
                * @return an appropriately configured age file filter
                * @see AgeFileFilter
                * @since 1.2
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>ageFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>cutoff</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>AgeFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cutoff</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that filters files based on a cutoff time.
                *
                * @param cutoff the time threshold
                * @param acceptOlder if true, older files get accepted, if false, newer
                * @return an appropriately configured age file filter
                * @see AgeFileFilter
                * @since 1.2
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>ageFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>cutoff</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>acceptOlder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>AgeFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cutoff</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>acceptOlder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that returns true if the file was last modified after
                * the specified cutoff date.
                *
                * @param cutoffDate the time threshold
                * @return an appropriately configured age file filter
                * @see AgeFileFilter
                * @since 1.2
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>ageFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Date</name>
                            </type>
                            <name>cutoffDate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>AgeFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cutoffDate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that filters files based on a cutoff date.
                *
                * @param cutoffDate the time threshold
                * @param acceptOlder if true, older files get accepted, if false, newer
                * @return an appropriately configured age file filter
                * @see AgeFileFilter
                * @since 1.2
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>ageFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Date</name>
                            </type>
                            <name>cutoffDate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>acceptOlder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>AgeFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cutoffDate</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>acceptOlder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that returns true if the file was last modified after
                * the specified reference file.
                *
                * @param cutoffReference the file whose last modification
                * time is usesd as the threshold age of the files
                * @return an appropriately configured age file filter
                * @see AgeFileFilter
                * @since 1.2
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>ageFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>cutoffReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>AgeFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cutoffReference</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that filters files based on a cutoff reference file.
                *
                * @param cutoffReference the file whose last modification
                * time is usesd as the threshold age of the files
                * @param acceptOlder if true, older files get accepted, if false, newer
                * @return an appropriately configured age file filter
                * @see AgeFileFilter
                * @since 1.2
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>ageFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>cutoffReference</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>acceptOlder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>AgeFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cutoffReference</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>acceptOlder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns a filter that returns true if the file is bigger than a certain size.
                *
                * @param threshold the file size threshold
                * @return an appropriately configured SizeFileFilter
                * @see SizeFileFilter
                * @since 1.2
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>sizeFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>threshold</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>SizeFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>threshold</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that filters based on file size.
                *
                * @param threshold the file size threshold
                * @param acceptLarger if true, larger files get accepted, if false, smaller
                * @return an appropriately configured SizeFileFilter
                * @see SizeFileFilter
                * @since 1.2
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>sizeFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>threshold</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>acceptLarger</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>SizeFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>threshold</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>acceptLarger</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that accepts files whose size is &amp;gt;= minimum size
                * and &amp;lt;= maximum size.
                *
                * @param minSizeInclusive the minimum file size (inclusive)
                * @param maxSizeInclusive the maximum file size (inclusive)
                * @return an appropriately configured IOFileFilter
                * @see SizeFileFilter
                * @since 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>sizeRangeFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>minSizeInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>maxSizeInclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>minimumFilter</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SizeFileFilter</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>minSizeInclusive</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>maximumFilter</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SizeFileFilter</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>maxSizeInclusive</name>
                                                    + 1L
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>AndFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>minimumFilter</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>maximumFilter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that accepts files that begin with the provided magic
                * number.
                *
                * @param magicNumber the magic number (byte sequence) to match at the
                * beginning of each file.
                *
                * @return an IOFileFilter that accepts files beginning with the provided
                * magic number.
                *
                * @throws IllegalArgumentException if &lt;code&gt;magicNumber&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt; or the empty String.
                * @see MagicNumberFileFilter
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>magicNumberFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>magicNumber</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>MagicNumberFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>magicNumber</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that accepts files that contains the provided magic
                * number at a specified offset within the file.
                *
                * @param magicNumber the magic number (byte sequence) to match at the
                * provided offset in each file.
                * @param offset the offset within the files to look for the magic number.
                *
                * @return an IOFileFilter that accepts files containing the magic number
                * at the specified offset.
                *
                * @throws IllegalArgumentException if &lt;code&gt;magicNumber&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt; or the empty String, or if offset is a
                * negative number.
                * @see MagicNumberFileFilter
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>magicNumberFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>magicNumber</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>MagicNumberFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>magicNumber</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that accepts files that begin with the provided magic
                * number.
                *
                * @param magicNumber the magic number (byte sequence) to match at the
                * beginning of each file.
                *
                * @return an IOFileFilter that accepts files beginning with the provided
                * magic number.
                *
                * @throws IllegalArgumentException if &lt;code&gt;magicNumber&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt; or is of length zero.
                * @see MagicNumberFileFilter
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>magicNumberFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>magicNumber</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>MagicNumberFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>magicNumber</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a filter that accepts files that contains the provided magic
                * number at a specified offset within the file.
                *
                * @param magicNumber the magic number (byte sequence) to match at the
                * provided offset in each file.
                * @param offset the offset within the files to look for the magic number.
                *
                * @return an IOFileFilter that accepts files containing the magic number
                * at the specified offset.
                *
                * @throws IllegalArgumentException if &lt;code&gt;magicNumber&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt;, or contains no bytes, or &lt;code&gt;offset&lt;/code&gt;
                * is a negative number.
                * @see MagicNumberFileFilter
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>magicNumberFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>magicNumber</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>MagicNumberFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>magicNumber</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="block">/* Constructed on demand and then cached */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>IOFileFilter</name>
                    </type>
                    <name>cvsFilter</name> =
                    <init>
                        <expr>
                            <call>
                                <name>notFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>and</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>directoryFileFilter</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>nameFileFilter</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"CVS"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="block">/* Constructed on demand and then cached */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>IOFileFilter</name>
                    </type>
                    <name>svnFilter</name> =
                    <init>
                        <expr>
                            <call>
                                <name>notFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>and</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>directoryFileFilter</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>nameFileFilter</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>".svn"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Decorates a filter to make it ignore CVS directories.
                * Passing in &lt;code&gt;null&lt;/code&gt; will return a filter that accepts everything
                * except CVS directories.
                *
                * @param filter the filter to decorate, null means an unrestricted filter
                * @return the decorated filter, never null
                * @since 1.1 (method existed but had bug in 1.0)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>makeCVSAware</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>cvsFilter</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>and</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>filter</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>cvsFilter</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Decorates a filter to make it ignore SVN directories.
                * Passing in &lt;code&gt;null&lt;/code&gt; will return a filter that accepts everything
                * except SVN directories.
                *
                * @param filter the filter to decorate, null means an unrestricted filter
                * @return the decorated filter, never null
                * @since 1.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>makeSVNAware</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>svnFilter</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>and</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>filter</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>svnFilter</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Decorates a filter so that it only applies to directories and not to files.
                *
                * @param filter the filter to decorate, null means an unrestricted filter
                * @return the decorated filter, never null
                * @see DirectoryFileFilter#DIRECTORY
                * @since 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>makeDirectoryOnly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>DirectoryFileFilter</name>.
                                            <name>DIRECTORY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>AndFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>DirectoryFileFilter</name>.
                                                <name>DIRECTORY</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>filter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Decorates a filter so that it only applies to files and not to directories.
                *
                * @param filter the filter to decorate, null means an unrestricted filter
                * @return the decorated filter, never null
                * @see FileFileFilter#FILE
                * @since 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>IOFileFilter</name>
                </type>
                <name>makeFileOnly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOFileFilter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filter</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>FileFileFilter</name>.
                                            <name>FILE</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>AndFileFilter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>FileFileFilter</name>.
                                                <name>FILE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>filter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
