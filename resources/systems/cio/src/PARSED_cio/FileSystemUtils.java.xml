<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\FileSystemUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>BufferedReader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStreamReader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>StringTokenizer</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * General File System utilities.
        * &lt;p&gt;
        * This class provides static utility methods for general file system
        * functions not provided via the JDK {@link java.io.File File} class.
        * &lt;p&gt;
        * The current functions provided are:
        * &lt;ul&gt;
        * &lt;li&gt;Get the free space on a drive
        * &lt;/ul&gt;
        *
        * @version $Id: FileSystemUtils.java 1304052 2012-03-22 20:55:29Z ggregory $
        * @since 1.1
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>FileSystemUtils</name>
        <block>{

            <comment type="javadoc">/** Singleton instance, used mainly for testing. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>FileSystemUtils</name>
                    </type>
                    <name>INSTANCE</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>FileSystemUtils</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Operating system state flag for error. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>INIT_PROBLEM</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Operating system state flag for neither Unix nor Windows. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>OTHER</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Operating system state flag for Windows. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>WINDOWS</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Operating system state flag for Unix. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>UNIX</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Operating system state flag for Posix flavour Unix. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>POSIX_UNIX</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The operating system flag. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>OS</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The path to df */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>DF</name>
                </decl>
                ;
            </decl_stmt>

            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>os</name> =
                        <init>
                            <expr>
                                <name>OTHER</name>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>String</name>
                        </type>
                        <name>dfPath</name> =
                        <init>
                            <expr>"df"</expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <try>try
                    <block>{
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>String</name>
                                </type>
                                <name>osName</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>getProperty</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"os.name"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <if>if
                            <condition>(
                                <expr>
                                    <name>osName</name>
                                    ==
                                    <name>null</name>
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>IOException</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"os.name not found"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                    }
                                </block>
                            </then>
                        </if>
                        <expr_stmt>
                            <expr>
                                <name>osName</name>
                                =
                                <call>
                                    <name><name>osName</name>.
                                        <name>toLowerCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Locale</name>.
                                                    <name>ENGLISH</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <comment type="line">// match</comment>
                        <if>if
                            <condition>(
                                <expr>
                                    <call>
                                        <name><name>osName</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"windows"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    != -1
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>os</name>
                                            =
                                            <name>WINDOWS</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </then>
                            <else>else
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>osName</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"linux"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != -1 ||
                                            <call>
                                                <name><name>osName</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"mpe/ix"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != -1 ||
                                            <call>
                                                <name><name>osName</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"freebsd"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != -1 ||
                                            <call>
                                                <name><name>osName</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"irix"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != -1 ||
                                            <call>
                                                <name><name>osName</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"digital unix"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != -1 ||
                                            <call>
                                                <name><name>osName</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"unix"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != -1 ||
                                            <call>
                                                <name><name>osName</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"mac os x"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>os</name>
                                                    =
                                                    <name>UNIX</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>osName</name>.
                                                            <name>indexOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"sun os"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    != -1 ||
                                                    <call>
                                                        <name><name>osName</name>.
                                                            <name>indexOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"sunos"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    != -1 ||
                                                    <call>
                                                        <name><name>osName</name>.
                                                            <name>indexOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"solaris"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    != -1
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>os</name>
                                                            =
                                                            <name>POSIX_UNIX</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>dfPath</name>
                                                            = "/usr/xpg4/bin/df"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>osName</name>.
                                                                    <name>indexOf</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"hp-ux"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            != -1 ||
                                                            <call>
                                                                <name><name>osName</name>.
                                                                    <name>indexOf</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"aix"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            != -1
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>os</name>
                                                                    =
                                                                    <name>POSIX_UNIX</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>os</name>
                                                                    =
                                                                    <name>OTHER</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                            </else>
                        </if>

                        }
                    </block>
                    <catch>catch (
                        <param>
                            <decl>
                                <type>
                                    <name>Exception</name>
                                </type>
                                <name>ex</name>
                            </decl>
                        </param>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>os</name>
                                    =
                                    <name>INIT_PROBLEM</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </catch>
                </try>
                <expr_stmt>
                    <expr>
                        <name>OS</name>
                        =
                        <name>os</name>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <name>DF</name>
                        =
                        <name>dfPath</name>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <comment type="javadoc">/**
                * Instances should NOT be constructed in standard programming.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>FileSystemUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns the free space on a drive or volume by invoking
                * the command line.
                * This method does not normalize the result, and typically returns
                * bytes on Windows, 512 byte units on OS X and kilobytes on Unix.
                * As this is not very useful, this method is deprecated in favour
                * of {@link #freeSpaceKb(String)} which returns a result in kilobytes.
                * &lt;p&gt;
                * Note that some OS's are NOT currently supported, including OS/390,
                * OpenVMS.
                * &lt;pre&gt;
                * FileSystemUtils.freeSpace("C:"); // Windows
                * FileSystemUtils.freeSpace("/volume"); // *nix
                * &lt;/pre&gt;
                * The free space is calculated via the command line.
                * It uses 'dir /-c' on Windows and 'df' on *nix.
                *
                * @param path the path to get free space for, not null, not empty on Unix
                * @return the amount of free drive space on the drive or volume
                * @throws IllegalArgumentException if the path is invalid
                * @throws IllegalStateException if an error occurred in initialisation
                * @throws IOException if an error occurs when finding the free space
                * @since 1.1, enhanced OS support in 1.2 and 1.3
                * @deprecated Use freeSpaceKb(String)
                * Deprecated from 1.3, may be removed in 2.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>freeSpace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>INSTANCE</name>.
                                    <name>freeSpaceOS</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>OS</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns the free space on a drive or volume in kilobytes by invoking
                * the command line.
                * &lt;pre&gt;
                * FileSystemUtils.freeSpaceKb("C:"); // Windows
                * FileSystemUtils.freeSpaceKb("/volume"); // *nix
                * &lt;/pre&gt;
                * The free space is calculated via the command line.
                * It uses 'dir /-c' on Windows, 'df -kP' on AIX/HP-UX and 'df -k' on other Unix.
                * &lt;p&gt;
                * In order to work, you must be running Windows, or have a implementation of
                * Unix df that supports GNU format when passed -k (or -kP). If you are going
                * to rely on this code, please check that it works on your OS by running
                * some simple tests to compare the command line with the output from this class.
                * If your operating system isn't supported, please raise a JIRA call detailing
                * the exact result from df -k and as much other detail as possible, thanks.
                *
                * @param path the path to get free space for, not null, not empty on Unix
                * @return the amount of free drive space on the drive or volume in kilobytes
                * @throws IllegalArgumentException if the path is invalid
                * @throws IllegalStateException if an error occurred in initialisation
                * @throws IOException if an error occurs when finding the free space
                * @since 1.2, enhanced OS support in 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>freeSpaceKb</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>freeSpaceKb</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Returns the free space on a drive or volume in kilobytes by invoking
                * the command line.
                * &lt;pre&gt;
                * FileSystemUtils.freeSpaceKb("C:"); // Windows
                * FileSystemUtils.freeSpaceKb("/volume"); // *nix
                * &lt;/pre&gt;
                * The free space is calculated via the command line.
                * It uses 'dir /-c' on Windows, 'df -kP' on AIX/HP-UX and 'df -k' on other Unix.
                * &lt;p&gt;
                * In order to work, you must be running Windows, or have a implementation of
                * Unix df that supports GNU format when passed -k (or -kP). If you are going
                * to rely on this code, please check that it works on your OS by running
                * some simple tests to compare the command line with the output from this class.
                * If your operating system isn't supported, please raise a JIRA call detailing
                * the exact result from df -k and as much other detail as possible, thanks.
                *
                * @param path the path to get free space for, not null, not empty on Unix
                * @param timeout The timout amount in milliseconds or no timeout if the value
                * is zero or less
                * @return the amount of free drive space on the drive or volume in kilobytes
                * @throws IllegalArgumentException if the path is invalid
                * @throws IllegalStateException if an error occurred in initialisation
                * @throws IOException if an error occurs when finding the free space
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>freeSpaceKb</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>INSTANCE</name>.
                                    <name>freeSpaceOS</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>OS</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>timeout</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the disk size of the volume which holds the working directory.
                * &lt;p&gt;
                * Identical to:
                * &lt;pre&gt;
                * freeSpaceKb(new File(".").getAbsolutePath())
                * &lt;/pre&gt;
                * @return the amount of free drive space on the drive or volume in kilobytes
                * @throws IllegalStateException if an error occurred in initialisation
                * @throws IOException if an error occurs when finding the free space
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>freeSpaceKb</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>freeSpaceKb</name>
                                <argument_list>(
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the disk size of the volume which holds the working directory.
                * &lt;p&gt;
                * Identical to:
                * &lt;pre&gt;
                * freeSpaceKb(new File(".").getAbsolutePath())
                * &lt;/pre&gt;
                * @param timeout The timout amount in milliseconds or no timeout if the value
                * is zero or less
                * @return the amount of free drive space on the drive or volume in kilobytes
                * @throws IllegalStateException if an error occurred in initialisation
                * @throws IOException if an error occurs when finding the free space
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>freeSpaceKb</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>freeSpaceKb</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>File</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"."</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getAbsolutePath</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>timeout</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns the free space on a drive or volume in a cross-platform manner.
                * Note that some OS's are NOT currently supported, including OS/390.
                * &lt;pre&gt;
                * FileSystemUtils.freeSpace("C:"); // Windows
                * FileSystemUtils.freeSpace("/volume"); // *nix
                * &lt;/pre&gt;
                * The free space is calculated via the command line.
                * It uses 'dir /-c' on Windows and 'df' on *nix.
                *
                * @param path the path to get free space for, not null, not empty on Unix
                * @param os the operating system code
                * @param kb whether to normalize to kilobytes
                * @param timeout The timout amount in milliseconds or no timeout if the value
                * is zero or less
                * @return the amount of free drive space on the drive or volume
                * @throws IllegalArgumentException if the path is invalid
                * @throws IllegalStateException if an error occurred in initialisation
                * @throws IOException if an error occurs when finding the free space
                */
            </comment>
            <function>
                <type>
                    <name>long</name>
                </type>
                <name>freeSpaceOS</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>os</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>kb</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>path</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Path must not be empty"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>os</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>WINDOWS</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>kb</name>
                                        ?
                                        <call>
                                            <name>freeSpaceWindows</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>path</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>timeout</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        /
                                        <name><name>FileUtils</name>.
                                            <name>ONE_KB</name>
                                        </name>
                                        :
                                        <call>
                                            <name>freeSpaceWindows</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>path</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>timeout</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>UNIX</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name>freeSpaceUnix</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>path</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>kb</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>timeout</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>POSIX_UNIX</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name>freeSpaceUnix</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>path</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>kb</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>timeout</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>OTHER</name>
                                </expr>
                                :
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Unsupported operating system"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Exception caught when determining operating system"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Find free space on the Windows platform using the 'dir' command.
                *
                * @param path the path to get free space for, including the colon
                * @param timeout The timout amount in milliseconds or no timeout if the value
                * is zero or less
                * @return the amount of free drive space on the drive
                * @throws IOException if an error occurs
                */
            </comment>
            <function>
                <type>
                    <name>long</name>
                </type>
                <name>freeSpaceWindows</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>path</name>
                            =
                            <call>
                                <name><name>FilenameUtils</name>.
                                    <name>normalize</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>path</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0 &amp;&amp;
                                <call>
                                    <name><name>path</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>0</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                != '"'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>path</name>
                                        = "\"" + <name>path</name> + "\""
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// build and run the 'dir' command</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>cmdAttribs</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>String</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{<expr>"cmd.exe"</expr>, <expr>"/C"</expr>,
                                        <expr>"dir /a /-c " +
                                            <name>path</name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// read in the output of the command to an ArrayList</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>lines</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>performCommand</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cmdAttribs</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Integer</name>.
                                                        <name>MAX_VALUE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>timeout</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// now iterate over the lines we just read and find the LAST</comment>
                    <comment type="line">// non-empty line (the free space bytes should be in the last element</comment>
                    <comment type="line">// of the ArrayList anyway, but this will ensure it works even if it's
                    </comment>
                    <comment type="line">// not, still assuming it is on the last non-blank line)</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>lines</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        - 1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>line</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>lines</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>line</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>parseDir</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>line</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>path</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <comment type="line">// all lines are blank</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IOException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Command line 'dir /-c' did not return any info " +
                                            "for path '" + <name>path</name> + "'"
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Parses the Windows dir response last line
                *
                * @param line the line to parse
                * @param path the path that was sent
                * @return the number of bytes
                * @throws IOException if an error occurs
                */
            </comment>
            <function>
                <type>
                    <name>long</name>
                </type>
                <name>parseDir</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>line</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// read from the end of the line to find the last numeric</comment>
                    <comment type="line">// character on the line, then continue until we find the first</comment>
                    <comment type="line">// non-numeric character, and everything between that and the last</comment>
                    <comment type="line">// numeric character inclusive is our free space bytes count</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bytesStart</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bytesEnd</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>line</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <label><name>innerLoop1</name>:
                    </label>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>line</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>j</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isDigit</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>c</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// found the last numeric character, this is the end of
                                        </comment>
                                        <comment type="line">// the free space bytes count</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>bytesEnd</name>
                                                = <name>j</name> + 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break innerLoop1;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <label><name>innerLoop2</name>:
                    </label>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>line</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>j</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isDigit</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>c</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp; <name>c</name> != ',' &amp;&amp; <name>c</name> != '.'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// found the next non-numeric character, this is the
                                        </comment>
                                        <comment type="line">// beginning of the free space bytes count</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>bytesStart</name>
                                                = <name>j</name> + 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break innerLoop2;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <name>j</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Command line 'dir /-c' did not return valid info " +
                                                        "for path '" + <name>path</name> + "'"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// remove commas and dots in the bytes count</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>line</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>bytesStart</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>bytesEnd</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>k</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>k</name>
                                &lt;
                                <call>
                                    <name><name>buf</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>k</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>buf</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>k</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == ',' ||
                                        <call>
                                            <name><name>buf</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>k</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == '.'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>deleteCharAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr><name>k</name>--
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>parseBytes</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>buf</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Find free space on the *nix platform using the 'df' command.
                *
                * @param path the path to get free space for
                * @param kb whether to normalize to kilobytes
                * @param posix whether to use the posix standard format flag
                * @param timeout The timout amount in milliseconds or no timeout if the value
                * is zero or less
                * @return the amount of free drive space on the volume
                * @throws IOException if an error occurs
                */
            </comment>
            <function>
                <type>
                    <name>long</name>
                </type>
                <name>freeSpaceUnix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>kb</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>posix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>path</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Path must not be empty"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// build and run the 'dir' command</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>flags</name> =
                            <init>
                                <expr>"-"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>kb</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>flags</name>
                                        += "k"
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>posix</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>flags</name>
                                        += "P"
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>cmdAttribs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>flags</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    &gt; 1 ? new
                                    <name>
                                        <name>String</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{
                                        <expr>
                                            <name>DF</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <name>flags</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                        }
                                    </block>
                                    : new
                                    <name>
                                        <name>String</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{
                                        <expr>
                                            <name>DF</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// perform the command, asking for up to 3 lines (header, interesting,
                        overflow)
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>lines</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>performCommand</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cmdAttribs</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>3</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>timeout</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>lines</name>.
                                        <name>size</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt; 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// unknown problem, throw exception</comment>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Command line '" + <name>DF</name> + "' did not return info as
                                                        expected " +
                                                        "for path '" + <name>path</name> + "'- response was " +
                                                        <name>lines</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>line2</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>lines</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>1</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// the line we're interested in</comment>

                    <comment type="line">// Now, we tokenize the string. The fourth element is what we want.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringTokenizer</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringTokenizer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>line2</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>" "</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>tok</name>.
                                        <name>countTokens</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt; 4
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// could be long Filesystem, thus data on third line</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>tok</name>.
                                                    <name>countTokens</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            == 1 &amp;&amp;
                                            <call>
                                                <name><name>lines</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &gt;= 3
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>String</name>
                                                    </type>
                                                    <name>line3</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>lines</name>.
                                                                    <name>get</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>2</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <comment type="line">// the line may be interested in</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>tok</name>
                                                    = new
                                                    <call>
                                                        <name>StringTokenizer</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>line3</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>" "</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>IOException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Command line '" + <name>DF</name> + "' did not
                                                                    return data as expected " +
                                                                    "for path '" + <name>path</name> + "'- check path is
                                                                    valid"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>tok</name>.
                                                <name>nextToken</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// Ignore Filesystem</comment>
                                }
                            </block>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>nextToken</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Ignore 1K-blocks</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>nextToken</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Ignore Used</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>freeSpace</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>tok</name>.
                                            <name>nextToken</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>parseBytes</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>freeSpace</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>path</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Parses the bytes from a string.
                *
                * @param freeSpace the free space string
                * @param path the path
                * @return the number of bytes
                * @throws IOException if an error occurs
                */
            </comment>
            <function>
                <type>
                    <name>long</name>
                </type>
                <name>parseBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>freeSpace</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>bytes</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Long</name>.
                                                    <name>parseLong</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>freeSpace</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>bytes</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IOException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Command line '" + <name>DF</name> + "' did not find
                                                                free space in response " +
                                                                "for path '" + <name>path</name> + "'- check path is
                                                                valid"
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>bytes</name>
                                </expr>
                                ;
                            </return>

                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NumberFormatException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOExceptionWithCause</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Command line '" + <name>DF</name> + "' did not return numeric
                                                        data as expected " +
                                                        "for path '" + <name>path</name> + "'- check path is valid"
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>ex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Performs the os command.
                *
                * @param cmdAttribs the command line parameters
                * @param max The maximum limit for the lines returned
                * @param timeout The timout amount in milliseconds or no timeout if the value
                * is zero or less
                * @return the parsed data
                * @throws IOException if an error occurs
                */
            </comment>
            <function>
                <type>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>performCommand</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>cmdAttribs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// this method does what it can to avoid the 'Too many open files' error
                    </comment>
                    <comment type="line">// based on trial and error and these links:</comment>
                    <comment type="line">// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4784692</comment>
                    <comment type="line">// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4801027</comment>
                    <comment type="line">//
                        http://forum.java.sun.com/thread.jspa?threadID=533029&amp;messageID=2572018
                    </comment>
                    <comment type="line">// however, its still not perfect as the JDK support is so poor</comment>
                    <comment type="line">// (see commond-exec or ant for a better multi-threaded multi-os solution)
                    </comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>lines</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ArrayList</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>20</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Process</name>
                            </type>
                            <name>proc</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>in</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>out</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>err</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BufferedReader</name>
                            </type>
                            <name>inr</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Thread</name>
                                    </type>
                                    <name>monitor</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>ThreadMonitor</name>.
                                                    <name>start</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>timeout</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>proc</name>
                                    =
                                    <call>
                                        <name>openProcess</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cmdAttribs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>in</name>
                                    =
                                    <call>
                                        <name><name>proc</name>.
                                            <name>getInputStream</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>out</name>
                                    =
                                    <call>
                                        <name><name>proc</name>.
                                            <name>getOutputStream</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>err</name>
                                    =
                                    <call>
                                        <name><name>proc</name>.
                                            <name>getErrorStream</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>inr</name>
                                    = new
                                    <call>
                                        <name>BufferedReader</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>InputStreamReader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>in</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>line</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>inr</name>.
                                                    <name>readLine</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>line</name>
                                        != <name>null</name> &amp;&amp;
                                        <call>
                                            <name><name>lines</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &lt;
                                        <name>max</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>line</name>
                                            =
                                            <call>
                                                <name><name>line</name>.
                                                    <name>toLowerCase</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>Locale</name>.
                                                                <name>ENGLISH</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>trim</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>lines</name>.
                                                    <name>add</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>line</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>line</name>
                                            =
                                            <call>
                                                <name><name>inr</name>.
                                                    <name>readLine</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>proc</name>.
                                            <name>waitFor</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ThreadMonitor</name>.
                                            <name>stop</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>monitor</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>proc</name>.
                                                <name>exitValue</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        != 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// os command problem, throw exception</comment>
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IOException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Command line returned OS error code '" +
                                                                <call>
                                                                    <name><name>proc</name>.
                                                                        <name>exitValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                +
                                                                "' for command " +
                                                                <call>
                                                                    <name><name>Arrays</name>.
                                                                        <name>asList</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>cmdAttribs</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>lines</name>.
                                                <name>isEmpty</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// unknown problem, throw exception</comment>
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IOException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Command line did not return any info " +
                                                                "for command " +
                                                                <call>
                                                                    <name><name>Arrays</name>.
                                                                        <name>asList</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>cmdAttribs</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>lines</name>
                                </expr>
                                ;
                            </return>

                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InterruptedException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOExceptionWithCause</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Command line threw an InterruptedException " +
                                                        "for command " +
                                                        <call>
                                                            <name><name>Arrays</name>.
                                                                <name>asList</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>cmdAttribs</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        + " timeout=" +
                                                        <name>timeout</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>ex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>IOUtils</name>.
                                                <name>closeQuietly</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>in</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>IOUtils</name>.
                                                <name>closeQuietly</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>out</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>IOUtils</name>.
                                                <name>closeQuietly</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>err</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>IOUtils</name>.
                                                <name>closeQuietly</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>inr</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>proc</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>proc</name>.
                                                            <name>destroy</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Opens the process to the operating system.
                *
                * @param cmdAttribs the command line parameters
                * @return the process
                * @throws IOException if an error occurs
                */
            </comment>
            <function>
                <type>
                    <name>Process</name>
                </type>
                <name>openProcess</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>cmdAttribs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Runtime</name>.
                                    <name>getRuntime</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>exec</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cmdAttribs</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
