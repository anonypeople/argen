<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\FilenameUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Stack</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * General filename and filepath manipulation utilities.
        * &lt;p&gt;
        * When dealing with filenames you can hit problems when moving from a Windows
        * based development machine to a Unix based production machine.
        * This class aims to help avoid those problems.
        * &lt;p&gt;
        * &lt;b&gt;NOTE&lt;/b&gt;: You may be able to avoid using this class entirely simply by
        * using JDK {@link java.io.File File} objects and the two argument constructor
        * {@link java.io.File#File(java.io.File, java.lang.String) File(File,String)}.
        * &lt;p&gt;
        * Most methods on this class are designed to work the same on both Unix and Windows.
        * Those that don't include 'System', 'Unix' or 'Windows' in their name.
        * &lt;p&gt;
        * Most methods recognise both separators (forward and back), and both
        * sets of prefixes. See the javadoc of each method for details.
        * &lt;p&gt;
        * This class defines six components within a filename
        * (example C:\dev\project\file.txt):
        * &lt;ul&gt;
        * &lt;li&gt;the prefix - C:\&lt;/li&gt;
        * &lt;li&gt;the path - dev\project\&lt;/li&gt;
        * &lt;li&gt;the full path - C:\dev\project\&lt;/li&gt;
        * &lt;li&gt;the name - file.txt&lt;/li&gt;
        * &lt;li&gt;the base name - file&lt;/li&gt;
        * &lt;li&gt;the extension - txt&lt;/li&gt;
        * &lt;/ul&gt;
        * Note that this class works best if directory filenames end with a separator.
        * If you omit the last separator, it is impossible to determine if the filename
        * corresponds to a file or a directory. As a result, we have chosen to say
        * it corresponds to a file.
        * &lt;p&gt;
        * This class only supports Unix and Windows style names.
        * Prefixes are matched as follows:
        * &lt;pre&gt;
        * Windows:
        * a\b\c.txt --&gt; "" --&gt; relative
        * \a\b\c.txt --&gt; "\" --&gt; current drive absolute
        * C:a\b\c.txt --&gt; "C:" --&gt; drive relative
        * C:\a\b\c.txt --&gt; "C:\" --&gt; absolute
        * \\server\a\b\c.txt --&gt; "\\server\" --&gt; UNC
        *
        * Unix:
        * a/b/c.txt --&gt; "" --&gt; relative
        * /a/b/c.txt --&gt; "/" --&gt; absolute
        * ~/a/b/c.txt --&gt; "~/" --&gt; current user
        * ~ --&gt; "~/" --&gt; current user (slash added)
        * ~user/a/b/c.txt --&gt; "~user/" --&gt; named user
        * ~user --&gt; "~user/" --&gt; named user (slash added)
        * &lt;/pre&gt;
        * Both prefix styles are matched always, irrespective of the machine that you are
        * currently running on.
        * &lt;p&gt;
        * Origin of code: Excalibur, Alexandria, Tomcat, Commons-Utils.
        *
        * @version $Id: FilenameUtils.java 1304052 2012-03-22 20:55:29Z ggregory $
        * @since 1.1
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>FilenameUtils</name>
        <block>{

            <comment type="javadoc">/**
                * The extension separator character.
                * @since 1.4
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>EXTENSION_SEPARATOR</name> =
                    <init>
                        <expr>'.'</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The extension separator String.
                * @since 1.4
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>EXTENSION_SEPARATOR_STR</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Character</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>EXTENSION_SEPARATOR</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The Unix separator character.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>UNIX_SEPARATOR</name> =
                    <init>
                        <expr>'/'</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The Windows separator character.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>WINDOWS_SEPARATOR</name> =
                    <init>
                        <expr>'\\'</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The system separator character.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>SYSTEM_SEPARATOR</name> =
                    <init>
                        <expr>
                            <name><name>File</name>.
                                <name>separatorChar</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The separator character that is the opposite of the system separator.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>OTHER_SEPARATOR</name>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <if>if
                    <condition>(
                        <expr>
                            <call>
                                <name>isSystemWindows</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        )
                    </condition>
                    <then>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>OTHER_SEPARATOR</name>
                                    =
                                    <name>UNIX_SEPARATOR</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </then>
                    <else>else
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>OTHER_SEPARATOR</name>
                                    =
                                    <name>WINDOWS_SEPARATOR</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </else>
                </if>
                }
            </block>

            <comment type="javadoc">/**
                * Instances should NOT be constructed in standard programming.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>FilenameUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Determines if Windows file system is in use.
                *
                * @return true if the system is Windows
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSystemWindows</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>SYSTEM_SEPARATOR</name>
                            ==
                            <name>WINDOWS_SEPARATOR</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks if the character is a separator.
                *
                * @param ch the character to check
                * @return true if it is a separator character
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ch</name>
                            == <name>UNIX_SEPARATOR</name> || <name>ch</name> ==
                            <name>WINDOWS_SEPARATOR</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Normalizes a path, removing double and single dot path steps.
                * &lt;p&gt;
                * This method normalizes a path to a standard format.
                * The input may contain separators in either Unix or Windows format.
                * The output will contain separators in the format of the system.
                * &lt;p&gt;
                * A trailing slash will be retained.
                * A double slash will be merged to a single slash (but UNC names are handled).
                * A single dot path segment will be removed.
                * A double dot will cause that path segment and the one before to be removed.
                * If the double dot has no parent path segment to work with, &lt;code&gt;null&lt;/code&gt;
                * is returned.
                * &lt;p&gt;
                * The output will be the same on both Unix and Windows except
                * for the separator character.
                * &lt;pre&gt;
                * /foo// --&gt; /foo/
                * /foo/./ --&gt; /foo/
                * /foo/../bar --&gt; /bar
                * /foo/../bar/ --&gt; /bar/
                * /foo/../bar/../baz --&gt; /baz
                * //foo//./bar --&gt; /foo/bar
                * /../ --&gt; null
                * ../foo --&gt; null
                * foo/bar/.. --&gt; foo/
                * foo/../../bar --&gt; null
                * foo/../bar --&gt; bar
                * //server/foo/../bar --&gt; //server/bar
                * //server/../bar --&gt; null
                * C:\foo\..\bar --&gt; C:\bar
                * C:\..\bar --&gt; null
                * ~/foo/../bar/ --&gt; ~/bar/
                * ~/../bar --&gt; null
                * &lt;/pre&gt;
                * (Note the file separator returned will be correct for Windows/Unix)
                *
                * @param filename the filename to normalize, null returns null
                * @return the normalized filename, or null if invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>normalize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>doNormalize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>SYSTEM_SEPARATOR</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <comment type="javadoc">/**
                * Normalizes a path, removing double and single dot path steps.
                * &lt;p&gt;
                * This method normalizes a path to a standard format.
                * The input may contain separators in either Unix or Windows format.
                * The output will contain separators in the format specified.
                * &lt;p&gt;
                * A trailing slash will be retained.
                * A double slash will be merged to a single slash (but UNC names are handled).
                * A single dot path segment will be removed.
                * A double dot will cause that path segment and the one before to be removed.
                * If the double dot has no parent path segment to work with, &lt;code&gt;null&lt;/code&gt;
                * is returned.
                * &lt;p&gt;
                * The output will be the same on both Unix and Windows except
                * for the separator character.
                * &lt;pre&gt;
                * /foo// --&gt; /foo/
                * /foo/./ --&gt; /foo/
                * /foo/../bar --&gt; /bar
                * /foo/../bar/ --&gt; /bar/
                * /foo/../bar/../baz --&gt; /baz
                * //foo//./bar --&gt; /foo/bar
                * /../ --&gt; null
                * ../foo --&gt; null
                * foo/bar/.. --&gt; foo/
                * foo/../../bar --&gt; null
                * foo/../bar --&gt; bar
                * //server/foo/../bar --&gt; //server/bar
                * //server/../bar --&gt; null
                * C:\foo\..\bar --&gt; C:\bar
                * C:\..\bar --&gt; null
                * ~/foo/../bar/ --&gt; ~/bar/
                * ~/../bar --&gt; null
                * &lt;/pre&gt;
                * The output will be the same on both Unix and Windows including
                * the separator character.
                *
                * @param filename the filename to normalize, null returns null
                * @param unixSeparator &lt;code&gt;true&lt;/code&gt; if a unix separator should
                * be used or &lt;code&gt;false&lt;/code&gt; if a windows separator should be used.
                * @return the normalized filename, or null if invalid
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>normalize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>unixSeparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separator</name> =
                            <init>
                                <expr>
                                    <name>unixSeparator</name>
                                    ? <name>UNIX_SEPARATOR</name> :
                                    <name>WINDOWS_SEPARATOR</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>doNormalize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Normalizes a path, removing double and single dot path steps,
                * and removing any final directory separator.
                * &lt;p&gt;
                * This method normalizes a path to a standard format.
                * The input may contain separators in either Unix or Windows format.
                * The output will contain separators in the format of the system.
                * &lt;p&gt;
                * A trailing slash will be removed.
                * A double slash will be merged to a single slash (but UNC names are handled).
                * A single dot path segment will be removed.
                * A double dot will cause that path segment and the one before to be removed.
                * If the double dot has no parent path segment to work with, &lt;code&gt;null&lt;/code&gt;
                * is returned.
                * &lt;p&gt;
                * The output will be the same on both Unix and Windows except
                * for the separator character.
                * &lt;pre&gt;
                * /foo// --&gt; /foo
                * /foo/./ --&gt; /foo
                * /foo/../bar --&gt; /bar
                * /foo/../bar/ --&gt; /bar
                * /foo/../bar/../baz --&gt; /baz
                * //foo//./bar --&gt; /foo/bar
                * /../ --&gt; null
                * ../foo --&gt; null
                * foo/bar/.. --&gt; foo
                * foo/../../bar --&gt; null
                * foo/../bar --&gt; bar
                * //server/foo/../bar --&gt; //server/bar
                * //server/../bar --&gt; null
                * C:\foo\..\bar --&gt; C:\bar
                * C:\..\bar --&gt; null
                * ~/foo/../bar/ --&gt; ~/bar
                * ~/../bar --&gt; null
                * &lt;/pre&gt;
                * (Note the file separator returned will be correct for Windows/Unix)
                *
                * @param filename the filename to normalize, null returns null
                * @return the normalized filename, or null if invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>normalizeNoEndSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>doNormalize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>SYSTEM_SEPARATOR</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Normalizes a path, removing double and single dot path steps,
                * and removing any final directory separator.
                * &lt;p&gt;
                * This method normalizes a path to a standard format.
                * The input may contain separators in either Unix or Windows format.
                * The output will contain separators in the format specified.
                * &lt;p&gt;
                * A trailing slash will be removed.
                * A double slash will be merged to a single slash (but UNC names are handled).
                * A single dot path segment will be removed.
                * A double dot will cause that path segment and the one before to be removed.
                * If the double dot has no parent path segment to work with, &lt;code&gt;null&lt;/code&gt;
                * is returned.
                * &lt;p&gt;
                * The output will be the same on both Unix and Windows including
                * the separator character.
                * &lt;pre&gt;
                * /foo// --&gt; /foo
                * /foo/./ --&gt; /foo
                * /foo/../bar --&gt; /bar
                * /foo/../bar/ --&gt; /bar
                * /foo/../bar/../baz --&gt; /baz
                * //foo//./bar --&gt; /foo/bar
                * /../ --&gt; null
                * ../foo --&gt; null
                * foo/bar/.. --&gt; foo
                * foo/../../bar --&gt; null
                * foo/../bar --&gt; bar
                * //server/foo/../bar --&gt; //server/bar
                * //server/../bar --&gt; null
                * C:\foo\..\bar --&gt; C:\bar
                * C:\..\bar --&gt; null
                * ~/foo/../bar/ --&gt; ~/bar
                * ~/../bar --&gt; null
                * &lt;/pre&gt;
                *
                * @param filename the filename to normalize, null returns null
                * @param unixSeparator &lt;code&gt;true&lt;/code&gt; if a unix separator should
                * be used or &lt;code&gt;false&lt;/code&gt; if a windows separtor should be used.
                * @return the normalized filename, or null if invalid
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>normalizeNoEndSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>unixSeparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separator</name> =
                            <init>
                                <expr>
                                    <name>unixSeparator</name>
                                    ? <name>UNIX_SEPARATOR</name> :
                                    <name>WINDOWS_SEPARATOR</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>doNormalize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Internal method to perform the normalization.
                *
                * @param filename the filename
                * @param separator The separator character to use
                * @param keepSeparator true to keep the final separator
                * @return the normalized filename
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>doNormalize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>keepSeparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>filename</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>size</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>filename</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>prefix</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getPrefixLength</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>prefix</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>array</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>char</name>
                                        <index>[
                                            <expr>
                                                <name>size</name>
                                                + 2
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// +1 for possible extra slash, +2 for arraycopy</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>filename</name>.
                                    <name>getChars</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>filename</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// fix separators throughout</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>otherSeparator</name> =
                            <init>
                                <expr>
                                    <name>separator</name>
                                    == <name>SYSTEM_SEPARATOR</name> ? <name>OTHER_SEPARATOR</name> :
                                    <name>SYSTEM_SEPARATOR</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name>otherSeparator</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>array</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>separator</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <comment type="line">// add extra separator on the end to simplify code below</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>lastIsDirectory</name> =
                            <init>
                                <expr>true</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>
                                    <name>array</name>
                                    <index>[
                                        <expr>
                                            <name>size</name>
                                            - 1
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                !=
                                <name>separator</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr><name>size</name>++
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        =
                                        <name>separator</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>lastIsDirectory</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// adjoining slashes</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>prefix</name>
                                        + 1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>size</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == <name>separator</name> &amp;&amp;
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                    - 1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name>separator</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>array</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                                - 1
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>size</name>
                                                                -
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr><name>size</name>--
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr><name>i</name>--
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <comment type="line">// dot slash</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>prefix</name>
                                        + 1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>size</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == <name>separator</name> &amp;&amp;
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                    - 1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == '.' &amp;&amp;
                                        (<name>i</name> == <name>prefix</name> + 1 ||
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                    - 2
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == <name>separator</name>)
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    == <name>size</name> - 1
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>lastIsDirectory</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                                + 1
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>array</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                                - 1
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>size</name>
                                                                -
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>size</name>
                                                -=2
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr><name>i</name>--
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <comment type="line">// double dot slash</comment>
                    <label><name>outer</name>:
                    </label>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>prefix</name>
                                        + 2
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>size</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == <name>separator</name> &amp;&amp;
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                    - 1
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == '.' &amp;&amp;
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                    - 2
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == '.' &amp;&amp;
                                        (<name>i</name> == <name>prefix</name> + 2 ||
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                    - 3
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == <name>separator</name>)
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    == <name>prefix</name> + 2
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    == <name>size</name> - 1
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>lastIsDirectory</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>j</name>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (
                                            <init>
                                                <expr>
                                                    <name>j</name>
                                                    = <name>i</name> - 4
                                                </expr>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>j</name>
                                                    &gt;=
                                                    <name>prefix</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>j</name>--
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>
                                                                <name>array</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>j</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            ==
                                                            <name>separator</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <comment type="line">// remove b/../ from a/b/../c</comment>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>System</name>.
                                                                            <name>arraycopy</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>array</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                    + 1
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>array</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>j</name>
                                                                                    + 1
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>size</name>
                                                                                    -
                                                                                    <name>i</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>size</name>
                                                                    -= <name>i</name> -
                                                                    <name>j</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>i</name>
                                                                    = <name>j</name> + 1
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <continue>continue outer;</continue>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </for>
                                        <comment type="line">// remove a/../ from a/../c</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                                + 1
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>array</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>prefix</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>size</name>
                                                                -
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>size</name>
                                                -= <name>i</name> + 1 -
                                                <name>prefix</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>i</name>
                                                = <name>prefix</name> + 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <if>if
                        <condition>(
                            <expr>
                                <name>size</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// should never be less than 0</comment>
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>size</name>
                                &lt;=
                                <name>prefix</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// should never be less than prefix</comment>
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>String</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lastIsDirectory</name>
                                &amp;&amp;
                                <name>keepSeparator</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>String</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// keep trailing separator</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>String</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                            - 1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// lose trailing separator</comment>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Concatenates a filename to a base path using normal command line style rules.
                * &lt;p&gt;
                * The effect is equivalent to resultant directory after changing
                * directory to the first argument, followed by changing directory to
                * the second argument.
                * &lt;p&gt;
                * The first argument is the base path, the second is the path to concatenate.
                * The returned path is always normalized via {@link #normalize(String)},
                * thus &lt;code&gt;..&lt;/code&gt; is handled.
                * &lt;p&gt;
                * If &lt;code&gt;pathToAdd&lt;/code&gt; is absolute (has an absolute prefix), then
                * it will be normalized and returned.
                * Otherwise, the paths will be joined, normalized and returned.
                * &lt;p&gt;
                * The output will be the same on both Unix and Windows except
                * for the separator character.
                * &lt;pre&gt;
                * /foo/ + bar --&gt; /foo/bar
                * /foo + bar --&gt; /foo/bar
                * /foo + /bar --&gt; /bar
                * /foo + C:/bar --&gt; C:/bar
                * /foo + C:bar --&gt; C:bar (*)
                * /foo/a/ + ../bar --&gt; foo/bar
                * /foo/ + ../../bar --&gt; null
                * /foo/ + /bar --&gt; /bar
                * /foo/.. + /bar --&gt; /bar
                * /foo + bar/c.txt --&gt; /foo/bar/c.txt
                * /foo/c.txt + bar --&gt; /foo/c.txt/bar (!)
                * &lt;/pre&gt;
                * (*) Note that the Windows relative drive prefix is unreliable when
                * used with this method.
                * (!) Note that the first parameter must be a path. If it ends with a name, then
                * the name will be built into the concatenated path. If this might be a problem,
                * use {@link #getFullPath(String)} on the base path argument.
                *
                * @param basePath the base path to attach to, always treated as a path
                * @param fullFilenameToAdd the filename (or path) to attach to the base
                * @return the concatenated path, or null if invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>concat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>basePath</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>fullFilenameToAdd</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>prefix</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getPrefixLength</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fullFilenameToAdd</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>prefix</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>prefix</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>normalize</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fullFilenameToAdd</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>basePath</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>basePath</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>normalize</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>fullFilenameToAdd</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>basePath</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>len</name>
                                                    - 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isSeparator</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>ch</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>normalize</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>basePath</name>
                                                        +
                                                        <name>fullFilenameToAdd</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>normalize</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>basePath</name>
                                                        + '/' +
                                                        <name>fullFilenameToAdd</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determines whether the {@code parent} directory contains the {@code child} element (a file or
                directory).
                * &lt;p&gt;
                * The files names are expected to be normalized.
                * &lt;/p&gt;
                *
                * Edge cases:
                * &lt;ul&gt;
                * &lt;li&gt;A {@code directory} must not be null: if null, throw IllegalArgumentException&lt;/li&gt;
                * &lt;li&gt;A directory does not contain itself: return false&lt;/li&gt;
                * &lt;li&gt;A null child file is not contained in any parent: return false&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * @param canonicalParent
                * the file to consider as the parent.
                * @param canonicalChild
                * the file to consider as the child.
                * @return true is the candidate leaf is under by the specified composite. False otherwise.
                * @throws IOException
                * if an IO error occurs while checking the files.
                * @since 2.2
                * @see FileUtils#directoryContains(File, File)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>directoryContains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>canonicalParent</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>canonicalChild</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <comment type="line">// Fail fast against NullPointerException</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>canonicalParent</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Directory must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>canonicalChild</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>IOCase</name>.<name>SYSTEM</name>.
                                        <name>checkEquals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>canonicalParent</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>canonicalChild</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name><name>IOCase</name>.<name>SYSTEM</name>.
                                    <name>checkStartsWith</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>canonicalChild</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>canonicalParent</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Converts all separators to the Unix separator of forward slash.
                *
                * @param path the path to be changed, null ignored
                * @return the updated path
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>separatorsToUnix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>path</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>path</name>.
                                        <name>indexOf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>WINDOWS_SEPARATOR</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>path</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>path</name>.
                                    <name>replace</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>WINDOWS_SEPARATOR</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>UNIX_SEPARATOR</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts all separators to the Windows separator of backslash.
                *
                * @param path the path to be changed, null ignored
                * @return the updated path
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>separatorsToWindows</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>path</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>path</name>.
                                        <name>indexOf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>UNIX_SEPARATOR</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>path</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>path</name>.
                                    <name>replace</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>UNIX_SEPARATOR</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>WINDOWS_SEPARATOR</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts all separators to the system separator.
                *
                * @param path the path to be changed, null ignored
                * @return the updated path
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>separatorsToSystem</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>path</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>path</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isSystemWindows</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>separatorsToWindows</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>path</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>separatorsToUnix</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>path</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns the length of the filename prefix, such as &lt;code&gt;C:/&lt;/code&gt; or &lt;code&gt;~/&lt;/code&gt;.
                * &lt;p&gt;
                * This method will handle a file in either Unix or Windows format.
                * &lt;p&gt;
                * The prefix length includes the first slash in the full filename
                * if applicable. Thus, it is possible that the length returned is greater
                * than the length of the input string.
                * &lt;pre&gt;
                * Windows:
                * a\b\c.txt --&gt; "" --&gt; relative
                * \a\b\c.txt --&gt; "\" --&gt; current drive absolute
                * C:a\b\c.txt --&gt; "C:" --&gt; drive relative
                * C:\a\b\c.txt --&gt; "C:\" --&gt; absolute
                * \\server\a\b\c.txt --&gt; "\\server\" --&gt; UNC
                *
                * Unix:
                * a/b/c.txt --&gt; "" --&gt; relative
                * /a/b/c.txt --&gt; "/" --&gt; absolute
                * ~/a/b/c.txt --&gt; "~/" --&gt; current user
                * ~ --&gt; "~/" --&gt; current user (slash added)
                * ~user/a/b/c.txt --&gt; "~user/" --&gt; named user
                * ~user --&gt; "~user/" --&gt; named user (slash added)
                * &lt;/pre&gt;
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                * ie. both Unix and Windows prefixes are matched regardless.
                *
                * @param filename the filename to find the prefix in, null returns -1
                * @return the length of the prefix, -1 if invalid or null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>getPrefixLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>filename</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch0</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>filename</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch0</name>
                                == ':'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                == 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>ch0</name>
                                            == '~'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>2</expr>;
                                            </return>
                                            <comment type="line">// return a length greater than the input</comment>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>isSeparator</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ch0</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ? 1 : 0
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>ch0</name>
                                            == '~'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>posUnix</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>filename</name>.
                                                                    <name>indexOf</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>UNIX_SEPARATOR</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>1</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>posWin</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>filename</name>.
                                                                    <name>indexOf</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>WINDOWS_SEPARATOR</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>1</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>posUnix</name>
                                                        == -1 &amp;&amp; <name>posWin</name> == -1
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>len</name>
                                                                + 1
                                                            </expr>
                                                            ;
                                                        </return>
                                                        <comment type="line">// return a length greater than the input
                                                        </comment>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>posUnix</name>
                                                    = <name>posUnix</name> == -1 ? <name>posWin</name> :
                                                    <name>posUnix</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>posWin</name>
                                                    = <name>posWin</name> == -1 ? <name>posUnix</name> :
                                                    <name>posWin</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>min</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>posUnix</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>posWin</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    + 1
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                        </type>
                                        <name>ch1</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>filename</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>1</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>ch1</name>
                                            == ':'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>ch0</name>
                                                    =
                                                    <call>
                                                        <name><name>Character</name>.
                                                            <name>toUpperCase</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>ch0</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>ch0</name>
                                                        &gt;= 'A' &amp;&amp; <name>ch0</name> &lt;= 'Z'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>len</name>
                                                                    == 2 ||
                                                                    <call>
                                                                        <name>isSeparator</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>filename</name>.
                                                                                            <name>charAt</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>2</expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                    == false
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <return>return <expr>2</expr>;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        <return>return <expr>3</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <return>return <expr>-1</expr>;
                                            </return>

                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>isSeparator</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>ch0</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &amp;&amp;
                                                    <call>
                                                        <name>isSeparator</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>ch1</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>posUnix</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>filename</name>.
                                                                            <name>indexOf</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>UNIX_SEPARATOR</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>2</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>posWin</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>filename</name>.
                                                                            <name>indexOf</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>WINDOWS_SEPARATOR</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>2</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>posUnix</name>
                                                                == -1 &amp;&amp; <name>posWin</name> == -1 || <name>
                                                                posUnix
                                                            </name> == 2 || <name>posWin</name> == 2
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return <expr>-1</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>posUnix</name>
                                                            = <name>posUnix</name> == -1 ? <name>posWin</name> :
                                                            <name>posUnix</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>posWin</name>
                                                            = <name>posWin</name> == -1 ? <name>posUnix</name> :
                                                            <name>posWin</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name><name>Math</name>.
                                                                    <name>min</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>posUnix</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>posWin</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            + 1
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>isSeparator</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ch0</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            ? 1 : 0
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the index of the last directory separator character.
                * &lt;p&gt;
                * This method will handle a file in either Unix or Windows format.
                * The position of the last forward or backslash is returned.
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                *
                * @param filename the filename to find the last path separator in, null returns -1
                * @return the index of the last separator character, or -1 if there
                * is no such character
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfLastSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lastUnixPos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>filename</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>UNIX_SEPARATOR</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lastWindowsPos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>filename</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>WINDOWS_SEPARATOR</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>max</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lastUnixPos</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lastWindowsPos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the index of the last extension separator character, which is a dot.
                * &lt;p&gt;
                * This method also checks that there is no directory separator after the last dot.
                * To do this it uses {@link #indexOfLastSeparator(String)} which will
                * handle a file in either Unix or Windows format.
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                *
                * @param filename the filename to find the last path separator in, null returns -1
                * @return the index of the last separator character, or -1 if there
                * is no such character
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfExtension</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>extensionPos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>filename</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>EXTENSION_SEPARATOR</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lastSeparator</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOfLastSeparator</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>lastSeparator</name>
                            &gt; <name>extensionPos</name> ? -1 :
                            <name>extensionPos</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the prefix from a full filename, such as &lt;code&gt;C:/&lt;/code&gt;
                * or &lt;code&gt;~/&lt;/code&gt;.
                * &lt;p&gt;
                * This method will handle a file in either Unix or Windows format.
                * The prefix includes the first slash in the full filename where applicable.
                * &lt;pre&gt;
                * Windows:
                * a\b\c.txt --&gt; "" --&gt; relative
                * \a\b\c.txt --&gt; "\" --&gt; current drive absolute
                * C:a\b\c.txt --&gt; "C:" --&gt; drive relative
                * C:\a\b\c.txt --&gt; "C:\" --&gt; absolute
                * \\server\a\b\c.txt --&gt; "\\server\" --&gt; UNC
                *
                * Unix:
                * a/b/c.txt --&gt; "" --&gt; relative
                * /a/b/c.txt --&gt; "/" --&gt; absolute
                * ~/a/b/c.txt --&gt; "~/" --&gt; current user
                * ~ --&gt; "~/" --&gt; current user (slash added)
                * ~user/a/b/c.txt --&gt; "~user/" --&gt; named user
                * ~user --&gt; "~user/" --&gt; named user (slash added)
                * &lt;/pre&gt;
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                * ie. both Unix and Windows prefixes are matched regardless.
                *
                * @param filename the filename to query, null returns null
                * @return the prefix of the file, null if invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getPrefix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getPrefixLength</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                &gt;
                                <call>
                                    <name><name>filename</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>filename</name>
                                        +
                                        <name>UNIX_SEPARATOR</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// we know this only happens for unix</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>filename</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>len</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the path from a full filename, which excludes the prefix.
                * &lt;p&gt;
                * This method will handle a file in either Unix or Windows format.
                * The method is entirely text based, and returns the text before and
                * including the last forward or backslash.
                * &lt;pre&gt;
                * C:\a\b\c.txt --&gt; a\b\
                * ~/a/b/c.txt --&gt; a/b/
                * a.txt --&gt; ""
                * a/b/c --&gt; a/b/
                * a/b/c/ --&gt; a/b/c/
                * &lt;/pre&gt;
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                * &lt;p&gt;
                * This method drops the prefix from the result.
                * See {@link #getFullPath(String)} for the method that retains the prefix.
                *
                * @param filename the filename to query, null returns null
                * @return the path of the file, an empty string if none exists, null if invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getPath</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>doGetPath</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the path from a full filename, which excludes the prefix, and
                * also excluding the final directory separator.
                * &lt;p&gt;
                * This method will handle a file in either Unix or Windows format.
                * The method is entirely text based, and returns the text before the
                * last forward or backslash.
                * &lt;pre&gt;
                * C:\a\b\c.txt --&gt; a\b
                * ~/a/b/c.txt --&gt; a/b
                * a.txt --&gt; ""
                * a/b/c --&gt; a/b
                * a/b/c/ --&gt; a/b/c
                * &lt;/pre&gt;
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                * &lt;p&gt;
                * This method drops the prefix from the result.
                * See {@link #getFullPathNoEndSeparator(String)} for the method that retains the prefix.
                *
                * @param filename the filename to query, null returns null
                * @return the path of the file, an empty string if none exists, null if invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getPathNoEndSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>doGetPath</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Does the work of getting the path.
                *
                * @param filename the filename
                * @param separatorAdd 0 to omit the end separator, 1 to return it
                * @return the path
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>doGetPath</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>separatorAdd</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>prefix</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getPrefixLength</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>prefix</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOfLastSeparator</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndex</name> =
                            <init>
                                <expr><name>index</name>+
                                    <name>separatorAdd</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>prefix</name>
                                &gt;=
                                <call>
                                    <name><name>filename</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                || <name>index</name> &lt; 0 || <name>prefix</name> &gt;=
                                <name>endIndex</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>filename</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>endIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the full path from a full filename, which is the prefix + path.
                * &lt;p&gt;
                * This method will handle a file in either Unix or Windows format.
                * The method is entirely text based, and returns the text before and
                * including the last forward or backslash.
                * &lt;pre&gt;
                * C:\a\b\c.txt --&gt; C:\a\b\
                * ~/a/b/c.txt --&gt; ~/a/b/
                * a.txt --&gt; ""
                * a/b/c --&gt; a/b/
                * a/b/c/ --&gt; a/b/c/
                * C: --&gt; C:
                * C:\ --&gt; C:\
                * ~ --&gt; ~/
                * ~/ --&gt; ~/
                * ~user --&gt; ~user/
                * ~user/ --&gt; ~user/
                * &lt;/pre&gt;
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                *
                * @param filename the filename to query, null returns null
                * @return the path of the file, an empty string if none exists, null if invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getFullPath</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>doGetFullPath</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the full path from a full filename, which is the prefix + path,
                * and also excluding the final directory separator.
                * &lt;p&gt;
                * This method will handle a file in either Unix or Windows format.
                * The method is entirely text based, and returns the text before the
                * last forward or backslash.
                * &lt;pre&gt;
                * C:\a\b\c.txt --&gt; C:\a\b
                * ~/a/b/c.txt --&gt; ~/a/b
                * a.txt --&gt; ""
                * a/b/c --&gt; a/b
                * a/b/c/ --&gt; a/b/c
                * C: --&gt; C:
                * C:\ --&gt; C:\
                * ~ --&gt; ~
                * ~/ --&gt; ~
                * ~user --&gt; ~user
                * ~user/ --&gt; ~user
                * &lt;/pre&gt;
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                *
                * @param filename the filename to query, null returns null
                * @return the path of the file, an empty string if none exists, null if invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getFullPathNoEndSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>doGetFullPath</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Does the work of getting the path.
                *
                * @param filename the filename
                * @param includeSeparator true to include the end separator
                * @return the path
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>doGetFullPath</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>includeSeparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>prefix</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getPrefixLength</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>prefix</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>prefix</name>
                                &gt;=
                                <call>
                                    <name><name>filename</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>includeSeparator</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>getPrefix</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>filename</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            <comment type="line">// add end slash if necessary</comment>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOfLastSeparator</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>filename</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>prefix</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr>
                                    <name>index</name>
                                    + (<name>includeSeparator</name> ? 1 : 0)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>end</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>end</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>filename</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>end</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the name minus the path from a full filename.
                * &lt;p&gt;
                * This method will handle a file in either Unix or Windows format.
                * The text after the last forward or backslash is returned.
                * &lt;pre&gt;
                * a/b/c.txt --&gt; c.txt
                * a.txt --&gt; a.txt
                * a/b/c --&gt; c
                * a/b/c/ --&gt; ""
                * &lt;/pre&gt;
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                *
                * @param filename the filename to query, null returns null
                * @return the name of the file without the path, or an empty string if none exists
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOfLastSeparator</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>filename</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                            + 1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the base name, minus the full path and extension, from a full filename.
                * &lt;p&gt;
                * This method will handle a file in either Unix or Windows format.
                * The text after the last forward or backslash and before the last dot is returned.
                * &lt;pre&gt;
                * a/b/c.txt --&gt; c
                * a.txt --&gt; a
                * a/b/c --&gt; c
                * a/b/c/ --&gt; ""
                * &lt;/pre&gt;
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                *
                * @param filename the filename to query, null returns null
                * @return the name of the file without the path, or an empty string if none exists
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getBaseName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>removeExtension</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getName</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>filename</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the extension of a filename.
                * &lt;p&gt;
                * This method returns the textual part of the filename after the last dot.
                * There must be no directory separator after the dot.
                * &lt;pre&gt;
                * foo.txt --&gt; "txt"
                * a/b/c.jpg --&gt; "jpg"
                * a/b.txt/c --&gt; ""
                * a/b/c --&gt; ""
                * &lt;/pre&gt;
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                *
                * @param filename the filename to retrieve the extension of.
                * @return the extension of the file or an empty string if none exists or &lt;code&gt;null&lt;/code&gt;
                * if the filename is &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getExtension</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOfExtension</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>filename</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                        + 1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Removes the extension from a filename.
                * &lt;p&gt;
                * This method returns the textual part of the filename before the last dot.
                * There must be no directory separator after the dot.
                * &lt;pre&gt;
                * foo.txt --&gt; foo
                * a\b\c.jpg --&gt; a\b\c
                * a\b\c --&gt; a\b\c
                * a.b\c --&gt; a.b\c
                * &lt;/pre&gt;
                * &lt;p&gt;
                * The output will be the same irrespective of the machine that the code is running on.
                *
                * @param filename the filename to query, null returns null
                * @return the filename minus the extension
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>removeExtension</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOfExtension</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>filename</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>filename</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks whether two filenames are equal exactly.
                * &lt;p&gt;
                * No processing is performed on the filenames other than comparison,
                * thus this is merely a null-safe case-sensitive equals.
                *
                * @param filename1 the first filename to query, may be null
                * @param filename2 the second filename to query, may be null
                * @return true if the filenames are equal, null equals null
                * @see IOCase#SENSITIVE
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>filename2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>IOCase</name>.
                                                <name>SENSITIVE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether two filenames are equal using the case rules of the system.
                * &lt;p&gt;
                * No processing is performed on the filenames other than comparison.
                * The check is case-sensitive on Unix and case-insensitive on Windows.
                *
                * @param filename1 the first filename to query, may be null
                * @param filename2 the second filename to query, may be null
                * @return true if the filenames are equal, null equals null
                * @see IOCase#SYSTEM
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>equalsOnSystem</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>filename2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>IOCase</name>.
                                                <name>SYSTEM</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks whether two filenames are equal after both have been normalized.
                * &lt;p&gt;
                * Both filenames are first passed to {@link #normalize(String)}.
                * The check is then performed in a case-sensitive manner.
                *
                * @param filename1 the first filename to query, may be null
                * @param filename2 the second filename to query, may be null
                * @return true if the filenames are equal, null equals null
                * @see IOCase#SENSITIVE
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>equalsNormalized</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>filename2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>IOCase</name>.
                                                <name>SENSITIVE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether two filenames are equal after both have been normalized
                * and using the case rules of the system.
                * &lt;p&gt;
                * Both filenames are first passed to {@link #normalize(String)}.
                * The check is then performed case-sensitive on Unix and
                * case-insensitive on Windows.
                *
                * @param filename1 the first filename to query, may be null
                * @param filename2 the second filename to query, may be null
                * @return true if the filenames are equal, null equals null
                * @see IOCase#SYSTEM
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>equalsNormalizedOnSystem</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>filename2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>IOCase</name>.
                                                <name>SYSTEM</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether two filenames are equal, optionally normalizing and providing
                * control over the case-sensitivity.
                *
                * @param filename1 the first filename to query, may be null
                * @param filename2 the second filename to query, may be null
                * @param normalized whether to normalize the filenames
                * @param caseSensitivity what case sensitivity rule to use, null means case-sensitive
                * @return true if the filenames are equal, null equals null
                * @since 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>normalized</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IOCase</name>
                            </type>
                            <name>caseSensitivity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>filename1</name>
                                == <name>null</name> || <name>filename2</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>filename1</name>
                                        == <name>null</name> &amp;&amp; <name>filename2</name> ==
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>normalized</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>filename1</name>
                                        =
                                        <call>
                                            <name>normalize</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>filename1</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>filename2</name>
                                        =
                                        <call>
                                            <name>normalize</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>filename2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>filename1</name>
                                            == <name>null</name> || <name>filename2</name> ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>NullPointerException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Error normalizing one or both of the file
                                                                    names"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>caseSensitivity</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>caseSensitivity</name>
                                        =
                                        <name><name>IOCase</name>.
                                            <name>SENSITIVE</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>caseSensitivity</name>.
                                    <name>checkEquals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>filename2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks whether the extension of the filename is that specified.
                * &lt;p&gt;
                * This method obtains the extension as the textual part of the filename
                * after the last dot. There must be no directory separator after the dot.
                * The extension check is case-sensitive on all platforms.
                *
                * @param filename the filename to query, null returns false
                * @param extension the extension to check for, null or empty checks for no extension
                * @return true if the filename has the specified extension
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isExtension</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>extension</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>extension</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>extension</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>indexOfExtension</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>filename</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == -1
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>fileExt</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getExtension</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>fileExt</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>extension</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the extension of the filename is one of those specified.
                * &lt;p&gt;
                * This method obtains the extension as the textual part of the filename
                * after the last dot. There must be no directory separator after the dot.
                * The extension check is case-sensitive on all platforms.
                *
                * @param filename the filename to query, null returns false
                * @param extensions the extensions to check for, null checks for no extension
                * @return true if the filename is one of the extensions
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isExtension</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>extensions</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>extensions</name>
                                == <name>null</name> ||
                                <name><name>extensions</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>indexOfExtension</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>filename</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == -1
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>fileExt</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getExtension</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>String</name>
                                </type>
                                <name>extension</name> :
                                <range>
                                    <expr>
                                        <name>extensions</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>fileExt</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>extension</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the extension of the filename is one of those specified.
                * &lt;p&gt;
                * This method obtains the extension as the textual part of the filename
                * after the last dot. There must be no directory separator after the dot.
                * The extension check is case-sensitive on all platforms.
                *
                * @param filename the filename to query, null returns false
                * @param extensions the extensions to check for, null checks for no extension
                * @return true if the filename is one of the extensions
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isExtension</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>extensions</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>extensions</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>extensions</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>indexOfExtension</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>filename</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == -1
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>fileExt</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getExtension</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>filename</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>String</name>
                                </type>
                                <name>extension</name> :
                                <range>
                                    <expr>
                                        <name>extensions</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>fileExt</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>extension</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks a filename to see if it matches the specified wildcard matcher,
                * always testing case-sensitive.
                * &lt;p&gt;
                * The wildcard matcher uses the characters '?' and '*' to represent a
                * single or multiple (zero or more) wildcard characters.
                * This is the same as often found on Dos/Unix command lines.
                * The check is case-sensitive always.
                * &lt;pre&gt;
                * wildcardMatch("c.txt", "*.txt") --&gt; true
                * wildcardMatch("c.txt", "*.jpg") --&gt; false
                * wildcardMatch("a/b/c.txt", "a/b/*") --&gt; true
                * wildcardMatch("c.txt", "*.???") --&gt; true
                * wildcardMatch("c.txt", "*.????") --&gt; false
                * &lt;/pre&gt;
                * N.B. the sequence "*?" does not work properly at present in match strings.
                *
                * @param filename the filename to match on
                * @param wildcardMatcher the wildcard string to match against
                * @return true if the filename matches the wilcard string
                * @see IOCase#SENSITIVE
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>wildcardMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>wildcardMatcher</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>wildcardMatch</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>wildcardMatcher</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>IOCase</name>.
                                                <name>SENSITIVE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks a filename to see if it matches the specified wildcard matcher
                * using the case rules of the system.
                * &lt;p&gt;
                * The wildcard matcher uses the characters '?' and '*' to represent a
                * single or multiple (zero or more) wildcard characters.
                * This is the same as often found on Dos/Unix command lines.
                * The check is case-sensitive on Unix and case-insensitive on Windows.
                * &lt;pre&gt;
                * wildcardMatch("c.txt", "*.txt") --&gt; true
                * wildcardMatch("c.txt", "*.jpg") --&gt; false
                * wildcardMatch("a/b/c.txt", "a/b/*") --&gt; true
                * wildcardMatch("c.txt", "*.???") --&gt; true
                * wildcardMatch("c.txt", "*.????") --&gt; false
                * &lt;/pre&gt;
                * N.B. the sequence "*?" does not work properly at present in match strings.
                *
                * @param filename the filename to match on
                * @param wildcardMatcher the wildcard string to match against
                * @return true if the filename matches the wilcard string
                * @see IOCase#SYSTEM
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>wildcardMatchOnSystem</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>wildcardMatcher</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>wildcardMatch</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filename</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>wildcardMatcher</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>IOCase</name>.
                                                <name>SYSTEM</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks a filename to see if it matches the specified wildcard matcher
                * allowing control over case-sensitivity.
                * &lt;p&gt;
                * The wildcard matcher uses the characters '?' and '*' to represent a
                * single or multiple (zero or more) wildcard characters.
                * N.B. the sequence "*?" does not work properly at present in match strings.
                *
                * @param filename the filename to match on
                * @param wildcardMatcher the wildcard string to match against
                * @param caseSensitivity what case sensitivity rule to use, null means case-sensitive
                * @return true if the filename matches the wilcard string
                * @since 1.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>wildcardMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>wildcardMatcher</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>IOCase</name>
                            </type>
                            <name>caseSensitivity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                == <name>null</name> &amp;&amp; <name>wildcardMatcher</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                == <name>null</name> || <name>wildcardMatcher</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>caseSensitivity</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>caseSensitivity</name>
                                        =
                                        <name><name>IOCase</name>.
                                            <name>SENSITIVE</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>wcs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>splitOnTokens</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>wildcardMatcher</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>anyChars</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>textIdx</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>wcsIdx</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Stack</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>int</name>
                                            <index>[]</index>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>backtrack</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>Stack</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>int</name>
                                                        <index>[]</index>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// loop around a backtrack stack, to handle complex * matching</comment>
                    <do>do
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>backtrack</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>array</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>backtrack</name>.
                                                                <name>pop</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>wcsIdx</name>
                                                =
                                                <name>
                                                    <name>array</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>textIdx</name>
                                                =
                                                <name>
                                                    <name>array</name>
                                                    <index>[<expr>1</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>anyChars</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// loop whilst tokens and text left to process</comment>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>wcsIdx</name>
                                        &lt;
                                        <name><name>wcs</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <block>{

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>wcs</name>
                                                    <index>[
                                                        <expr>
                                                            <name>wcsIdx</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                .
                                                <call>
                                                    <name>equals</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"?"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// ? so move to next text char</comment>
                                                <expr_stmt>
                                                    <expr><name>textIdx</name>++
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>textIdx</name>
                                                            &gt;
                                                            <call>
                                                                <name><name>filename</name>.
                                                                    <name>length</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <break>break;</break>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>anyChars</name>
                                                        = false
                                                    </expr>
                                                    ;
                                                </expr_stmt>

                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>
                                                            <name>wcs</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>wcsIdx</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        .
                                                        <call>
                                                            <name>equals</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"*"</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// set any chars status</comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>anyChars</name>
                                                                = true
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>wcsIdx</name>
                                                                    ==
                                                                    <name><name>wcs</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                    - 1
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>textIdx</name>
                                                                            =
                                                                            <call>
                                                                                <name><name>filename</name>.
                                                                                    <name>length</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>

                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <comment type="line">// matching text token</comment>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>anyChars</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <comment type="line">// any chars then try to locate
                                                                        text token
                                                                    </comment>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>textIdx</name>
                                                                            =
                                                                            <call>
                                                                                <name><name>caseSensitivity</name>.
                                                                                    <name>checkIndexOf</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>filename</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>textIdx</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>
                                                                                                <name>wcs</name>
                                                                                                <index>[
                                                                                                    <expr>
                                                                                                        <name>wcsIdx
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                    ]
                                                                                                </index>
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>textIdx</name>
                                                                                == -1
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <comment type="line">// token not
                                                                                    found
                                                                                </comment>
                                                                                <break>break;</break>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>repeat</name> =
                                                                            <init>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>
                                                                                            caseSensitivity</name>.
                                                                                            <name>checkIndexOf</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>filename
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>textIdx</name>
                                                                                                    + 1
                                                                                                </expr>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>
                                                                                                        <name>wcs</name>
                                                                                                        <index>[
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    wcsIdx
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                            ]
                                                                                                        </index>
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>repeat</name>
                                                                                &gt;= 0
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>backtrack</name>
                                                                                                .
                                                                                                <name>push</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>new
                                                                                                        <name>
                                                                                                            <name>int
                                                                                                            </name>
                                                                                                            <index>[]
                                                                                                            </index>
                                                                                                        </name>
                                                                                                        <block>{
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    wcsIdx
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                            ,
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    repeat
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                            }
                                                                                                        </block>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <comment type="line">// matching from current
                                                                        position
                                                                    </comment>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>!
                                                                                <call>
                                                                                    <name><name>caseSensitivity</name>.
                                                                                        <name>checkRegionMatches</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>filename</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>textIdx</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>
                                                                                                    <name>wcs</name>
                                                                                                    <index>[
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                wcsIdx
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                        ]
                                                                                                    </index>
                                                                                                </name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <comment type="line">// couldnt match
                                                                                    token
                                                                                </comment>
                                                                                <break>break;</break>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>

                                                        <comment type="line">// matched text token, move text index to
                                                            end of matched token
                                                        </comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>textIdx</name>
                                                                +=
                                                                <name>
                                                                    <name>wcs</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>wcsIdx</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                .
                                                                <call>
                                                                    <name>length</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>anyChars</name>
                                                                = false
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                        </else>
                                    </if>

                                    <expr_stmt>
                                        <expr><name>wcsIdx</name>++
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>

                            <comment type="line">// full match</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>wcsIdx</name>
                                        ==
                                        <name><name>wcs</name>.
                                            <name>length</name>
                                        </name>
                                        &amp;&amp; <name>textIdx</name> ==
                                        <call>
                                            <name><name>filename</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            }
                        </block>
                        while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>backtrack</name>.
                                        <name>size</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        ;
                    </do>

                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Splits a string into a number of tokens.
                * The text is split by '?' and '*'.
                * Where multiple '*' occur consecutively they are collapsed into a single '*'.
                *
                * @param text the text to split
                * @return the array of tokens, never null
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitOnTokens</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// used by wildcardMatch</comment>
                    <comment type="line">// package level so a unit test may run on this</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>text</name>.
                                        <name>indexOf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>'?'</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == -1 &amp;&amp;
                                <call>
                                    <name><name>text</name>.
                                        <name>indexOf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>'*'</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>new
                                        <name>
                                            <name>String</name>
                                            <index>[]</index>
                                        </name>
                                        <block>{
                                            <expr>
                                                <name>text</name>
                                            </expr>
                                            }
                                        </block>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>array</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>text</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ArrayList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ArrayList</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>buffer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == '?' ||
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == '*'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>buffer</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    != 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>list</name>.
                                                                    <name>add</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>buffer</name>.
                                                                                    <name>toString</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>buffer</name>.
                                                                    <name>setLength</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    == '?'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>list</name>.
                                                                    <name>add</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"?"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>list</name>.
                                                                    <name>isEmpty</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            ||
                                                            <name>i</name>
                                                            &gt; 0 &amp;&amp;
                                                            <call>
                                                                <name><name>list</name>.
                                                                    <name>get</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>list</name>.
                                                                                    <name>size</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            - 1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>equals</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"*"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            == false
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>list</name>.
                                                                            <name>add</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"*"</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>array</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>buffer</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>list</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>buffer</name>.
                                                                <name>toString</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name><name>list</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>String</name>
                                                <index>[
                                                    <expr>
                                                        <call>
                                                            <name><name>list</name>.
                                                                <name>size</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
