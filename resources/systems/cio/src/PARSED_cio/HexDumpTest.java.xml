<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\test\java\org\apache\commons\io\HexDumpTest.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>junit</name>.<name>framework</name>.
            <name>TestCase</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.<name>output</name>.
            <name>ByteArrayOutputStream</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * @version $Id: HexDumpTest.java 1302056 2012-03-18 03:03:38Z ggregory $
        */
    </comment>

    <class>
        <specifier>public</specifier>
        class <name>HexDumpTest</name>
        <super>
            <extends>extends
                <name>TestCase</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Creates new HexDumpTest
                *
                * @param name
                */
            </comment>

            <constructor>
                <specifier>public</specifier>
                <name>HexDumpTest</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>char</name>
                </type>
                <name>toHex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>hexChars</name> =
                            <init>
                                <expr>
                                    <block>{
                                        <expr>'0'</expr>, <expr>'1'</expr>, <expr>'2'</expr>, <expr>'3'</expr>, <expr>
                                            '4'</expr>, <expr>'5'</expr>, <expr>'6'</expr>, <expr>'7'</expr>,
                                        <expr>'8'</expr>, <expr>'9'</expr>, <expr>'A'</expr>, <expr>'B'</expr>, <expr>
                                            'C'</expr>, <expr>'D'</expr>, <expr>'E'</expr>,
                                        <expr>'F'</expr>
                                        }
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <return>return
                        <expr>
                            <name>
                                <name>hexChars</name>
                                <index>[
                                    <expr>
                                        <name>n</name>
                                        % 16
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * test dump method
                *
                * @exception IOException
                */
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testDump</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>testArray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[<expr>256</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>j</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>j</name>
                                &lt; 256
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>j</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>testArray</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>)
                                    <name>j</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ByteArrayOutputStream</name>
                            </type>
                            <name>stream</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ByteArrayOutputStream</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>HexDump</name>.
                                    <name>dump</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>testArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>outputArray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>16 * (73 +
                                                <call>
                                                    <name><name>HexDump</name>.<name>EOL</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                )
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>j</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>j</name>
                                &lt; 16
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>j</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>offset</name> =
                                    <init>
                                        <expr>(73 +
                                            <call>
                                                <name><name>HexDump</name>.<name>EOL</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ) *
                                            <name>j</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>)
                                    <call>
                                        <name>toHex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>j</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) ' '
                                </expr>
                                ;
                            </expr_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>k</name>
                                        &lt; 16
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>k</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>)
                                            <call>
                                                <name>toHex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>j</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>)
                                            <call>
                                                <name>toHex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>) ' '
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>k</name>
                                        &lt; 16
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>k</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>)
                                            <call>
                                                <name>toAscii</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>j</name> * 16) +
                                                            <name>k</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>HexDump</name>.<name>EOL</name>.
                                                            <name>getBytes</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>outputArray</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>offset</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>HexDump</name>.<name>EOL</name>.
                                                            <name>getBytes</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>actualOutput</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>stream</name>.
                                            <name>toByteArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"array size mismatch"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>outputArray</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>actualOutput</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>j</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>j</name>
                                &lt;
                                <name><name>outputArray</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>j</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>assertEquals</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"array[ " + <name>j</name> + "] mismatch"
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>outputArray</name>
                                                        <index>[
                                                            <expr>
                                                                <name>j</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>actualOutput</name>
                                                        <index>[
                                                            <expr>
                                                                <name>j</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// verify proper behavior with non-zero offset</comment>
                    <expr_stmt>
                        <expr>
                            <name>stream</name>
                            = new
                            <call>
                                <name>ByteArrayOutputStream</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>HexDump</name>.
                                    <name>dump</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>testArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x10000000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>outputArray</name>
                            = new
                            <name>
                                <name>byte</name>
                                <index>[
                                    <expr>16 * (73 +
                                        <call>
                                            <name><name>HexDump</name>.<name>EOL</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        )
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>j</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>j</name>
                                &lt; 16
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>j</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>offset</name> =
                                    <init>
                                        <expr>(73 +
                                            <call>
                                                <name><name>HexDump</name>.<name>EOL</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ) *
                                            <name>j</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '1'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>)
                                    <call>
                                        <name>toHex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>j</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) ' '
                                </expr>
                                ;
                            </expr_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>k</name>
                                        &lt; 16
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>k</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>)
                                            <call>
                                                <name>toHex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>j</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>)
                                            <call>
                                                <name>toHex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>) ' '
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>k</name>
                                        &lt; 16
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>k</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>)
                                            <call>
                                                <name>toAscii</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>j</name> * 16) +
                                                            <name>k</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>HexDump</name>.<name>EOL</name>.
                                                            <name>getBytes</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>outputArray</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>offset</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>HexDump</name>.<name>EOL</name>.
                                                            <name>getBytes</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>actualOutput</name>
                            =
                            <call>
                                <name><name>stream</name>.
                                    <name>toByteArray</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"array size mismatch"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>outputArray</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>actualOutput</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>j</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>j</name>
                                &lt;
                                <name><name>outputArray</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>j</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>assertEquals</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"array[ " + <name>j</name> + "] mismatch"
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>outputArray</name>
                                                        <index>[
                                                            <expr>
                                                                <name>j</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>actualOutput</name>
                                                        <index>[
                                                            <expr>
                                                                <name>j</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// verify proper behavior with negative offset</comment>
                    <expr_stmt>
                        <expr>
                            <name>stream</name>
                            = new
                            <call>
                                <name>ByteArrayOutputStream</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>HexDump</name>.
                                    <name>dump</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>testArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0xFF000000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>outputArray</name>
                            = new
                            <name>
                                <name>byte</name>
                                <index>[
                                    <expr>16 * (73 +
                                        <call>
                                            <name><name>HexDump</name>.<name>EOL</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        )
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>j</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>j</name>
                                &lt; 16
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>j</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>offset</name> =
                                    <init>
                                        <expr>(73 +
                                            <call>
                                                <name><name>HexDump</name>.<name>EOL</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ) *
                                            <name>j</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) 'F'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) 'F'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>)
                                    <call>
                                        <name>toHex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>j</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) ' '
                                </expr>
                                ;
                            </expr_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>k</name>
                                        &lt; 16
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>k</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>)
                                            <call>
                                                <name>toHex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>j</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>)
                                            <call>
                                                <name>toHex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>) ' '
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>k</name>
                                        &lt; 16
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>k</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>)
                                            <call>
                                                <name>toAscii</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>j</name> * 16) +
                                                            <name>k</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>HexDump</name>.<name>EOL</name>.
                                                            <name>getBytes</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>outputArray</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>offset</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>HexDump</name>.<name>EOL</name>.
                                                            <name>getBytes</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>actualOutput</name>
                            =
                            <call>
                                <name><name>stream</name>.
                                    <name>toByteArray</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"array size mismatch"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>outputArray</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>actualOutput</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>j</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>j</name>
                                &lt;
                                <name><name>outputArray</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>j</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>assertEquals</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"array[ " + <name>j</name> + "] mismatch"
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>outputArray</name>
                                                        <index>[
                                                            <expr>
                                                                <name>j</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>actualOutput</name>
                                                        <index>[
                                                            <expr>
                                                                <name>j</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// verify proper behavior with non-zero index</comment>
                    <expr_stmt>
                        <expr>
                            <name>stream</name>
                            = new
                            <call>
                                <name>ByteArrayOutputStream</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>HexDump</name>.
                                    <name>dump</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>testArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x10000000</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0x81</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>outputArray</name>
                            = new
                            <name>
                                <name>byte</name>
                                <index>[
                                    <expr>(8 * (73 +
                                        <call>
                                            <name><name>HexDump</name>.<name>EOL</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        )) - 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>j</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>j</name>
                                &lt; 8
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>j</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>offset</name> =
                                    <init>
                                        <expr>(73 +
                                            <call>
                                                <name><name>HexDump</name>.<name>EOL</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ) *
                                            <name>j</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '1'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '0'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>)
                                    <call>
                                        <name>toHex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>j</name>
                                                    + 8
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) '1'
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>outputArray</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>byte</name>) ' '
                                </expr>
                                ;
                            </expr_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>k</name>
                                        &lt; 16
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>k</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>0x81 + (<name>j</name> * 16) +
                                                    <name>k</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>index</name>
                                                &lt; 0x100
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>outputArray</name>
                                                            <index>[
                                                                <expr><name>offset</name>++
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        = (<name>byte</name>)
                                                        <call>
                                                            <name>toHex</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                        / 16
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>outputArray</name>
                                                            <index>[
                                                                <expr><name>offset</name>++
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        = (<name>byte</name>)
                                                        <call>
                                                            <name>toHex</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>outputArray</name>
                                                            <index>[
                                                                <expr><name>offset</name>++
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        = (<name>byte</name>) ' '
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>outputArray</name>
                                                            <index>[
                                                                <expr><name>offset</name>++
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        = (<name>byte</name>) ' '
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>outputArray</name>
                                                <index>[
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = (<name>byte</name>) ' '
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>k</name>
                                        &lt; 16
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>k</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>0x81 + (<name>j</name> * 16) +
                                                    <name>k</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>index</name>
                                                &lt; 0x100
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>outputArray</name>
                                                            <index>[
                                                                <expr><name>offset</name>++
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        = (<name>byte</name>)
                                                        <call>
                                                            <name>toAscii</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>HexDump</name>.<name>EOL</name>.
                                                            <name>getBytes</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>outputArray</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>offset</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>HexDump</name>.<name>EOL</name>.
                                                            <name>getBytes</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>actualOutput</name>
                            =
                            <call>
                                <name><name>stream</name>.
                                    <name>toByteArray</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"array size mismatch"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>outputArray</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>actualOutput</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>j</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>j</name>
                                &lt;
                                <name><name>outputArray</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>j</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>assertEquals</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"array[ " + <name>j</name> + "] mismatch"
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>outputArray</name>
                                                        <index>[
                                                            <expr>
                                                                <name>j</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>actualOutput</name>
                                                        <index>[
                                                            <expr>
                                                                <name>j</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// verify proper behavior with negative index</comment>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>HexDump</name>.
                                            <name>dump</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>testArray</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0x10000000</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>ByteArrayOutputStream</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>-1</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>fail</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"should have caught ArrayIndexOutOfBoundsException on negative
                                                    index"
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ArrayIndexOutOfBoundsException</name>
                                    </type>
                                    <name>ignored_exception</name>
                                </decl>
                            </param>
                            )
                            <block>{

                                <comment type="line">// as expected</comment>
                                }
                            </block>
                        </catch>
                    </try>

                    <comment type="line">// verify proper behavior with index that is too large</comment>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>HexDump</name>.
                                            <name>dump</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>testArray</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0x10000000</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>ByteArrayOutputStream</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>testArray</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>fail</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"should have caught ArrayIndexOutOfBoundsException on large
                                                    index"
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ArrayIndexOutOfBoundsException</name>
                                    </type>
                                    <name>ignored_exception</name>
                                </decl>
                            </param>
                            )
                            <block>{

                                <comment type="line">// as expected</comment>
                                }
                            </block>
                        </catch>
                    </try>

                    <comment type="line">// verify proper behavior with null stream</comment>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>HexDump</name>.
                                            <name>dump</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>testArray</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0x10000000</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>fail</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"should have caught IllegalArgumentException on negative index"
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalArgumentException</name>
                                    </type>
                                    <name>ignored_exception</name>
                                </decl>
                            </param>
                            )
                            <block>{

                                <comment type="line">// as expected</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>char</name>
                </type>
                <name>toAscii</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>rval</name> =
                            <init>
                                <expr>'.'</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>(<name>c</name> &gt;= 32) &amp;&amp; (<name>c</name> &lt;= 126)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>rval</name>
                                        = (<name>char</name>)
                                        <name>c</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>rval</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
