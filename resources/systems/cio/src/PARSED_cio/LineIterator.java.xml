<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\LineIterator.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>BufferedReader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Reader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An Iterator over the lines in a &lt;code&gt;Reader&lt;/code&gt;.
        * &lt;p&gt;
        * &lt;code&gt;LineIterator&lt;/code&gt; holds a reference to an open &lt;code&gt;Reader&lt;/code&gt;.
        * When you have finished with the iterator you should close the reader
        * to free internal resources. This can be done by closing the reader directly,
        * or by calling the {@link #close()} or {@link #closeQuietly(LineIterator)}
        * method on the iterator.
        * &lt;p&gt;
        * The recommended usage pattern is:
        * &lt;pre&gt;
        * LineIterator it = FileUtils.lineIterator(file, "UTF-8");
        * try {
        * while (it.hasNext()) {
        * String line = it.nextLine();
        * // do something with line
        * }
        * } finally {
        * it.close();
        * }
        * &lt;/pre&gt;
        *
        * @version $Id: LineIterator.java 1304073 2012-03-22 21:19:18Z sebb $
        * @since 1.2
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>LineIterator</name>
        <super>
            <implements>implements
                <name>
                    <name>Iterator</name>
                    <argument_list>&lt;
                        <argument>
                            <name>String</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{

            <comment type="line">// N.B. This class deliberately does not implement Iterable, see
                https://issues.apache.org/jira/browse/IO-181
            </comment>

            <comment type="javadoc">/** The reader that is being read. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>BufferedReader</name>
                    </type>
                    <name>bufferedReader</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The current line. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>cachedLine</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** A flag indicating if the iterator has been fully read. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>finished</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructs an iterator of the lines for a &lt;code&gt;Reader&lt;/code&gt;.
                *
                * @param reader the &lt;code&gt;Reader&lt;/code&gt; to read from, not null
                * @throws IllegalArgumentException if the reader is null
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>LineIterator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Reader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IllegalArgumentException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>reader</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Reader must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>reader</name>
                                <name>instanceof</name>
                                <name>BufferedReader</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>bufferedReader</name>
                                        = (<name>BufferedReader</name>)
                                        <name>reader</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>bufferedReader</name>
                                        = new
                                        <call>
                                            <name>BufferedReader</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>reader</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Indicates whether the &lt;code&gt;Reader&lt;/code&gt; has more lines.
                * If there is an &lt;code&gt;IOException&lt;/code&gt; then {@link #close()} will
                * be called on this instance.
                *
                * @return &lt;code&gt;true&lt;/code&gt; if the Reader has more lines
                * @throws IllegalStateException if an IO exception occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cachedLine</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>finished</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <try>try
                                            <block>{
                                                <while>while
                                                    <condition>(<expr>true</expr>)
                                                    </condition>
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>String</name>
                                                                </type>
                                                                <name>line</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>bufferedReader</name>.
                                                                                <name>readLine</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>line</name>
                                                                    ==
                                                                    <name>null</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>finished</name>
                                                                            = true
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <return>return <expr>false</expr>;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <call>
                                                                                <name>isValidLine</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>line</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>cachedLine</name>
                                                                                    =
                                                                                    <name>line</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <return>return <expr>true</expr>;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                            </else>
                                                        </if>
                                                        }
                                                    </block>
                                                </while>
                                                }
                                            </block>
                                            <catch>catch(
                                                <param>
                                                    <decl>
                                                        <type>
                                                            <name>IOException</name>
                                                        </type>
                                                        <name>ioe</name>
                                                    </decl>
                                                </param>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>close</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <throw>throw
                                                        <expr>new
                                                            <call>
                                                                <name>IllegalStateException</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ioe</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                    }
                                                </block>
                                            </catch>
                                        </try>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Overridable method to validate each line that is returned.
                * This implementation always returns true.
                * @param line the line that is to be validated
                * @return true if valid, false to remove from the iterator
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>isValidLine</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>line</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the next line in the wrapped &lt;code&gt;Reader&lt;/code&gt;.
                *
                * @return the next line from the input
                * @throws NoSuchElementException if there is no line to return
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>next</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextLine</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the next line in the wrapped &lt;code&gt;Reader&lt;/code&gt;.
                *
                * @return the next line from the input
                * @throws NoSuchElementException if there is no line to return
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>nextLine</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>hasNext</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchElementException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"No more lines"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>currentLine</name> =
                            <init>
                                <expr>
                                    <name>cachedLine</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>cachedLine</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>currentLine</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Closes the underlying &lt;code&gt;Reader&lt;/code&gt; quietly.
                * This method is useful if you only want to process the first few
                * lines of a larger file. If you do not close the iterator
                * then the &lt;code&gt;Reader&lt;/code&gt; remains open.
                * This method can safely be called multiple times.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>close</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>finished</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>IOUtils</name>.
                                    <name>closeQuietly</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bufferedReader</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>cachedLine</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Unsupported.
                *
                * @throws UnsupportedOperationException always
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>remove</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Remove unsupported on LineIterator"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Closes the iterator, handling null and ignoring exceptions.
                *
                * @param iterator the iterator to close
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>closeQuietly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>LineIterator</name>
                            </type>
                            <name>iterator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>iterator</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>iterator</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
