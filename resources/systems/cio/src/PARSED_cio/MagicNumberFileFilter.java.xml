<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\filefilter\MagicNumberFileFilter.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>filefilter</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>RandomAccessFile</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>IOUtils</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;
        * File filter for matching files containing a "magic number". A magic number
        * is a unique series of bytes common to all files of a specific file format.
        * For instance, all Java class files begin with the bytes
        * &lt;code&gt;0xCAFEBABE&lt;/code&gt;.
        * &lt;/p&gt;
        *
        * &lt;code&gt;&lt;pre&gt;
        * File dir = new File(".");
        * MagicNumberFileFilter javaClassFileFilter =
        * MagicNumberFileFilter(new byte[] {(byte) 0xCA, (byte) 0xFE,
        * (byte) 0xBA, (byte) 0xBE});
        * String[] javaClassFiles = dir.list(javaClassFileFilter);
        * for (String javaClassFile : javaClassFiles) {
        * System.out.println(javaClassFile);
        * }
        * &lt;/pre&gt;&lt;/code&gt;
        *
        * &lt;p&gt;
        * Sometimes, such as in the case of TAR files, the
        * magic number will be offset by a certain number of bytes in the file. In the
        * case of TAR archive files, this offset is 257 bytes.
        * &lt;/p&gt;
        *
        * &lt;code&gt;&lt;pre&gt;
        * File dir = new File(".");
        * MagicNumberFileFilter tarFileFilter =
        * MagicNumberFileFilter("ustar", 257);
        * String[] tarFiles = dir.list(tarFileFilter);
        * for (String tarFile : tarFiles) {
        * System.out.println(tarFile);
        * }
        * &lt;/pre&gt;&lt;/code&gt;
        * @since 2.0
        * @see FileFilterUtils#magicNumberFileFilter(byte[])
        * @see FileFilterUtils#magicNumberFileFilter(String)
        * @see FileFilterUtils#magicNumberFileFilter(byte[], long)
        * @see FileFilterUtils#magicNumberFileFilter(String, long)
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>MagicNumberFileFilter</name>
        <super>
            <extends>extends
                <name>AbstractFileFilter</name>
            </extends>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * The serialization version unique identifier.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-547733176983104172L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The magic number to compare against the file's bytes at the provided
                * offset.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>magicNumbers</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The offset (in bytes) within the files that the magic number's bytes
                * should appear.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>byteOffset</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Constructs a new MagicNumberFileFilter and associates it with the magic
                * number to test for in files. This constructor assumes a starting offset
                * of &lt;code&gt;0&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * It is important to note that &lt;em&gt;the array is not cloned&lt;/em&gt; and that
                * any changes to the magic number array after construction will affect the
                * behavior of this file filter.
                * &lt;/p&gt;
                *
                * &lt;code&gt;&lt;pre&gt;
                * MagicNumberFileFilter javaClassFileFilter =
                * MagicNumberFileFilter(new byte[] {(byte) 0xCA, (byte) 0xFE,
                * (byte) 0xBA, (byte) 0xBE});
                * &lt;/pre&gt;&lt;/code&gt;
                *
                * @param magicNumber the magic number to look for in the file.
                *
                * @throws IllegalArgumentException if &lt;code&gt;magicNumber&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt;, or contains no bytes.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>MagicNumberFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>magicNumber</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>magicNumber</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Constructs a new MagicNumberFileFilter and associates it with the magic
                * number to test for in files. This constructor assumes a starting offset
                * of &lt;code&gt;0&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * Example usage:
                * &lt;pre&gt;
                * {@code
                * MagicNumberFileFilter xmlFileFilter =
                * MagicNumberFileFilter("&lt;?xml");
                * }
                * &lt;/pre&gt;
                *
                * @param magicNumber the magic number to look for in the file.
                * The string is converted to bytes using the platform default charset.
                *
                * @throws IllegalArgumentException if &lt;code&gt;magicNumber&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt; or the empty String.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>MagicNumberFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>magicNumber</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>magicNumber</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Constructs a new MagicNumberFileFilter and associates it with the magic
                * number to test for in files and the byte offset location in the file to
                * to look for that magic number.
                * &lt;/p&gt;
                *
                * &lt;code&gt;&lt;pre&gt;
                * MagicNumberFileFilter tarFileFilter =
                * MagicNumberFileFilter("ustar", 257);
                * &lt;/pre&gt;&lt;/code&gt;
                *
                * @param magicNumber the magic number to look for in the file.
                * The string is converted to bytes using the platform default charset.
                * @param offset the byte offset in the file to start comparing bytes.
                *
                * @throws IllegalArgumentException if &lt;code&gt;magicNumber&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt; or the empty String, or &lt;code&gt;offset&lt;/code&gt; is
                * a negative number.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>MagicNumberFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>magicNumber</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>magicNumber</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The magic number cannot be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>magicNumber</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The magic number must contain at least one byte"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>offset</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The offset cannot be negative"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>magicNumbers</name>
                            </name>
                            =
                            <call>
                                <name><name>magicNumber</name>.
                                    <name>getBytes</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// uses the platform default charset</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>byteOffset</name>
                            </name>
                            =
                            <name>offset</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Constructs a new MagicNumberFileFilter and associates it with the magic
                * number to test for in files and the byte offset location in the file to
                * to look for that magic number.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * It is important to note that &lt;em&gt;the array is not cloned&lt;/em&gt; and that
                * any changes to the magic number array after construction will affect the
                * behavior of this file filter.
                * &lt;/p&gt;
                *
                * &lt;code&gt;&lt;pre&gt;
                * MagicNumberFileFilter tarFileFilter =
                * MagicNumberFileFilter(new byte[] {0x75, 0x73, 0x74, 0x61, 0x72}, 257);
                * &lt;/pre&gt;&lt;/code&gt;
                *
                * &lt;code&gt;&lt;pre&gt;
                * MagicNumberFileFilter javaClassFileFilter =
                * MagicNumberFileFilter(new byte[] {0xCA, 0xFE, 0xBA, 0xBE}, 0);
                * &lt;/pre&gt;&lt;/code&gt;
                *
                * @param magicNumber the magic number to look for in the file.
                * @param offset the byte offset in the file to start comparing bytes.
                *
                * @throws IllegalArgumentException if &lt;code&gt;magicNumber&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt;, or contains no bytes, or &lt;code&gt;offset&lt;/code&gt;
                * is a negative number.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>MagicNumberFileFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>magicNumber</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>magicNumber</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The magic number cannot be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>magicNumber</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The magic number must contain at least one byte"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>offset</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The offset cannot be negative"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>magicNumbers</name>
                            </name>
                            = new
                            <name>
                                <name>byte</name>
                                <index>[
                                    <expr>
                                        <name><name>magicNumber</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>magicNumber</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>magicNumbers</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>magicNumber</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>byteOffset</name>
                            </name>
                            =
                            <name>offset</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Accepts the provided file if the file contains the file filter's magic
                * number at the specified offset.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If any {@link IOException}s occur while reading the file, the file will
                * be rejected.
                * &lt;/p&gt;
                *
                * @param file the file to accept or reject.
                *
                * @return &lt;code&gt;true&lt;/code&gt; if the file contains the filter's magic number
                * at the specified offset, &lt;code&gt;false&lt;/code&gt; otherwise.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>accept</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>file</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>file</name>.
                                        <name>isFile</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &amp;&amp;
                                <call>
                                    <name><name>file</name>.
                                        <name>canRead</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>RandomAccessFile</name>
                                        </type>
                                        <name>randomAccessFile</name> =
                                        <init>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <try>try
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>byte</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>fileBytes</name> =
                                                <init>
                                                    <expr>new
                                                        <name>
                                                            <name>byte</name>
                                                            <index>[
                                                                <expr>
                                                                    <name><name>this</name>.<name>magicNumbers</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>randomAccessFile</name>
                                                = new
                                                <call>
                                                    <name>RandomAccessFile</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>file</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"r"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>randomAccessFile</name>.
                                                        <name>seek</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>byteOffset</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>read</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>randomAccessFile</name>.
                                                                <name>read</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fileBytes</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>read</name>
                                                    !=
                                                    <name><name>magicNumbers</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>Arrays</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>magicNumbers</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>fileBytes</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>IOException</name>
                                                </type>
                                                <name>ioe</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <comment type="line">// Do nothing, fall through and do not accept file
                                            </comment>
                                            }
                                        </block>
                                    </catch>
                                    <finally>finally
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>IOUtils</name>.
                                                            <name>closeQuietly</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>randomAccessFile</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a String representation of the file filter, which includes the
                * magic number bytes and byte offset.
                *
                * @return a String representation of the file filter.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>super</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"("</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>String</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>magicNumbers</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// TODO perhaps use hex if value is not printable</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>","</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>byteOffset</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>")"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
