<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\input\NullReader.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>input</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>EOFException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Reader</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A functional, light weight {@link Reader} that emulates
        * a reader of a specified size.
        * &lt;p&gt;
        * This implementation provides a light weight
        * object for testing with an {@link Reader}
        * where the contents don't matter.
        * &lt;p&gt;
        * One use case would be for testing the handling of
        * large {@link Reader} as it can emulate that
        * scenario without the overhead of actually processing
        * large numbers of characters - significantly speeding up
        * test execution times.
        * &lt;p&gt;
        * This implementation returns a space from the method that
        * reads a character and leaves the array unchanged in the read
        * methods that are passed a character array.
        * If alternative data is required the &lt;code&gt;processChar()&lt;/code&gt; and
        * &lt;code&gt;processChars()&lt;/code&gt; methods can be implemented to generate
        * data, for example:
        *
        * &lt;pre&gt;
        * public class TestReader extends NullReader {
        * public TestReader(int size) {
        * super(size);
        * }
        * protected char processChar() {
        * return ... // return required value here
        * }
        * protected void processChars(char[] chars, int offset, int length) {
        * for (int i = offset; i &lt; length; i++) {
        * chars[i] = ... // set array value here
        * }
        * }
        * }
        * &lt;/pre&gt;
        *
        * @since 1.3
        * @version $Id: NullReader.java 1304052 2012-03-22 20:55:29Z ggregory $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>NullReader</name>
        <super>
            <extends>extends
                <name>Reader</name>
            </extends>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>size</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>position</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>mark</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>readlimit</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>eof</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>throwEofException</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>markSupported</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Create a {@link Reader} that emulates a specified size
                * which supports marking and does not throw EOFException.
                *
                * @param size The size of the reader to emulate.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>NullReader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Create a {@link Reader} that emulates a specified
                * size with option settings.
                *
                * @param size The size of the reader to emulate.
                * @param markSupported Whether this instance will support
                * the &lt;code&gt;mark()&lt;/code&gt; functionality.
                * @param throwEofException Whether this implementation
                * will throw an {@link EOFException} or return -1 when the
                * end of file is reached.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>NullReader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>markSupported</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>throwEofException</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>size</name>
                            </name>
                            =
                            <name>size</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>markSupported</name>
                            </name>
                            =
                            <name>markSupported</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>throwEofException</name>
                            </name>
                            =
                            <name>throwEofException</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Return the current position.
                *
                * @return the current position.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getPosition</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>position</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return the size this {@link Reader} emulates.
                *
                * @return The size of the reader to emulate.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getSize</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>size</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Close this Reader - resets the internal state to
                * the initial values.
                *
                * @throws IOException If an error occurs.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>close</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>eof</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>position</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>mark</name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Mark the current position.
                *
                * @param readlimit The number of characters before this marked position
                * is invalid.
                * @throws UnsupportedOperationException if mark is not supported.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>mark</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>readlimit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>markSupported</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>UnsupportedOperationException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Mark not supported"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>mark</name>
                            =
                            <name>position</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>readlimit</name>
                            </name>
                            =
                            <name>readlimit</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicates whether &lt;i&gt;mark&lt;/i&gt; is supported.
                *
                * @return Whether &lt;i&gt;mark&lt;/i&gt; is supported or not.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>markSupported</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>markSupported</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Read a character.
                *
                * @return Either The character value returned by &lt;code&gt;processChar()&lt;/code&gt;
                * or &lt;code&gt;-1&lt;/code&gt; if the end of file has been reached and
                * &lt;code&gt;throwEofException&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.
                * @throws EOFException if the end of file is reached and
                * &lt;code&gt;throwEofException&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.
                * @throws IOException if trying to read past the end of file.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>read</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>eof</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Read after end of file"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>position</name>
                                ==
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>doEndOfFile</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr><name>position</name>++
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>processChar</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Read some characters into the specified array.
                *
                * @param chars The character array to read into
                * @return The number of characters read or &lt;code&gt;-1&lt;/code&gt;
                * if the end of file has been reached and
                * &lt;code&gt;throwEofException&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.
                * @throws EOFException if the end of file is reached and
                * &lt;code&gt;throwEofException&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.
                * @throws IOException if trying to read past the end of file.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>read</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>read</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>chars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>chars</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Read the specified number characters into an array.
                *
                * @param chars The character array to read into.
                * @param offset The offset to start reading characters into.
                * @param length The number of characters to read.
                * @return The number of characters read or &lt;code&gt;-1&lt;/code&gt;
                * if the end of file has been reached and
                * &lt;code&gt;throwEofException&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.
                * @throws EOFException if the end of file is reached and
                * &lt;code&gt;throwEofException&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.
                * @throws IOException if trying to read past the end of file.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>read</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>eof</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Read after end of file"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>position</name>
                                ==
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>doEndOfFile</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>position</name>
                            +=
                            <name>length</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>returnLength</name> =
                            <init>
                                <expr>
                                    <name>length</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>position</name>
                                &gt;
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>returnLength</name>
                                        = <name>length</name> -
                                        <call>(<name>int</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>position</name>
                                                        -
                                                        <name>size</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>position</name>
                                        =
                                        <name>size</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>processChars</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>chars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>returnLength</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>returnLength</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reset the stream to the point when mark was last called.
                *
                * @throws UnsupportedOperationException if mark is not supported.
                * @throws IOException If no position has been marked
                * or the read limit has been exceed since the last position was
                * marked.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>markSupported</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>UnsupportedOperationException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Mark not supported"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>mark</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"No position has been marked"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>position</name>
                                &gt; <name>mark</name> +
                                <name>readlimit</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Marked position [" + <name>mark</name> +
                                                        "] is no longer valid - passed the read limit [" +
                                                        <name>readlimit</name>
                                                        + "]"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>position</name>
                            =
                            <name>mark</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>eof</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Skip a specified number of characters.
                *
                * @param numberOfChars The number of characters to skip.
                * @return The number of characters skipped or &lt;code&gt;-1&lt;/code&gt;
                * if the end of file has been reached and
                * &lt;code&gt;throwEofException&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.
                * @throws EOFException if the end of file is reached and
                * &lt;code&gt;throwEofException&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.
                * @throws IOException if trying to read past the end of file.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>skip</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>numberOfChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>eof</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Skip after end of file"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>position</name>
                                ==
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>doEndOfFile</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>position</name>
                            +=
                            <name>numberOfChars</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>returnLength</name> =
                            <init>
                                <expr>
                                    <name>numberOfChars</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>position</name>
                                &gt;
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>returnLength</name>
                                        = <name>numberOfChars</name> - (<name>position</name> - <name>size</name>)
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>position</name>
                                        =
                                        <name>size</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>returnLength</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return a character value for the &lt;code&gt;read()&lt;/code&gt; method.
                * &lt;p&gt;
                * This implementation returns zero.
                *
                * @return This implementation always returns zero.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>int</name>
                </type>
                <name>processChar</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// do nothing - overridable by subclass</comment>
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Process the characters for the &lt;code&gt;read(char[], offset, length)&lt;/code&gt;
                * method.
                * &lt;p&gt;
                * This implementation leaves the character array unchanged.
                *
                * @param chars The character array
                * @param offset The offset to start at.
                * @param length The number of characters.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>processChars</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// do nothing - overridable by subclass</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Handle End of File.
                *
                * @return &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;throwEofException&lt;/code&gt; is
                * set to &lt;code&gt;false&lt;/code&gt;
                * @throws EOFException if &lt;code&gt;throwEofException&lt;/code&gt; is set
                * to &lt;code&gt;true&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>int</name>
                </type>
                <name>doEndOfFile</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>EOFException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>eof</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>throwEofException</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>EOFException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>-1</expr>;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
