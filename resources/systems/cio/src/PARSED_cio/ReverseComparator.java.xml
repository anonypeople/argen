<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\comparator\ReverseComparator.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>comparator</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Reverses the result of comparing two objects using
        * the delegate {@link Comparator}.
        *
        * @version $Id: ReverseComparator.java 1304052 2012-03-22 20:55:29Z ggregory $
        * @since 1.4
        */
    </comment>
    <class>class <name>ReverseComparator</name>
        <super>
            <extends>extends
                <name>AbstractFileComparator</name>
            </extends>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>File</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>delegate</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Construct an instance with the sepecified delegate {@link Comparator}.
                *
                * @param delegate The comparator to delegate to
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ReverseComparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>File</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>delegate</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Delegate comparator is missing"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>delegate</name>
                            </name>
                            =
                            <name>delegate</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Compare using the delegate Comparator, but reversing the result.
                *
                * @param file1 The first file to compare
                * @param file2 The second file to compare
                * @return the result from the delegate {@link Comparator#compare(Object, Object)}
                * reversing the value (i.e. positive becomes negative and vice versa)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>compare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>delegate</name>.
                                    <name>compare</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>file2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>file1</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// parameters switched round</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * String representation of this file comparator.
                *
                * @return String representation of this file comparator
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            + "[" +
                            <call>
                                <name><name>delegate</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            + "]"
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
