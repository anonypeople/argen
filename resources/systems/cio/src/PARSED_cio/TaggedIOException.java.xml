<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\TaggedIOException.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An {@link IOException} decorator that adds a serializable tag to the
        * wrapped exception. Both the tag and the original exception can be used
        * to determine further processing when this exception is caught.
        *
        * @since 2.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>TaggedIOException</name>
        <super>
            <extends>extends
                <name>IOExceptionWithCause</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Generated serial version UID.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-6994123481142850163L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Checks whether the given throwable is tagged with the given tag.
                * &lt;p&gt;
                * This check can only succeed if the throwable is a
                * {@link TaggedIOException} and the tag is {@link Serializable}, but
                * the argument types are intentionally more generic to make it easier
                * to use this method without type casts.
                * &lt;p&gt;
                * A typical use for this method is in a &lt;code&gt;catch&lt;/code&gt; block to
                * determine how a caught exception should be handled:
                * &lt;pre&gt;
                * Serializable tag = ...;
                * try {
                * ...;
                * } catch (Throwable t) {
                * if (TaggedIOExcepton.isTaggedWith(t, tag)) {
                * // special processing for tagged exception
                * } else {
                * // handling of other kinds of exceptions
                * }
                * }
                * &lt;/pre&gt;
                *
                * @param throwable The Throwable object to check
                * @param tag tag object
                * @return &lt;code&gt;true&lt;/code&gt; if the throwable has the specified tag,
                * otherwise &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isTaggedWith</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>tag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>tag</name>
                            !=
                            <name>null</name>
                            &amp;&amp; <name>throwable</name>
                            <name>instanceof</name>
                            <name>TaggedIOException</name>
                            &amp;&amp;
                            <call>
                                <name><name>tag</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>((<name>TaggedIOException</name>) <name>throwable</name>).
                                            <name>tag</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Throws the original {@link IOException} if the given throwable is
                * a {@link TaggedIOException} decorator the given tag. Does nothing
                * if the given throwable is of a different type or if it is tagged
                * with some other tag.
                * &lt;p&gt;
                * This method is typically used in a &lt;code&gt;catch&lt;/code&gt; block to
                * selectively rethrow tagged exceptions.
                * &lt;pre&gt;
                * Serializable tag = ...;
                * try {
                * ...;
                * } catch (Throwable t) {
                * TaggedIOExcepton.throwCauseIfTagged(t, tag);
                * // handle other kinds of exceptions
                * }
                * &lt;/pre&gt;
                *
                * @param throwable an exception
                * @param tag tag object
                * @throws IOException original exception from the tagged decorator, if any
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>throwCauseIfTaggedWith</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>tag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isTaggedWith</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>throwable</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>tag</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>((<name>TaggedIOException</name>) <name>throwable</name>).
                                        <call>
                                            <name>getCause</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * The tag of this exception.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Serializable</name>
                    </type>
                    <name>tag</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a tagged wrapper for the given exception.
                *
                * @param original the exception to be tagged
                * @param tag tag of this exception
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>TaggedIOException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOException</name>
                            </type>
                            <name>original</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Serializable</name>
                            </type>
                            <name>tag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>original</name>.
                                                    <name>getMessage</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>original</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>tag</name>
                            </name>
                            =
                            <name>tag</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the serializable tag object.
                *
                * @return tag object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Serializable</name>
                </type>
                <name>getTag</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>tag</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the wrapped exception. The only difference to the overridden
                * {@link Throwable#getCause()} method is the narrower return type.
                *
                * @return wrapped exception
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>IOException</name>
                </type>
                <name>getCause</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>IOException</name>)
                            <call>
                                <name><name>super</name>.
                                    <name>getCause</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
