<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\input\TaggedInputStream.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>input</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>UUID</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>TaggedIOException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An input stream decorator that tags potential exceptions so that the
        * stream that caused the exception can easily be identified. This is
        * done by using the {@link TaggedIOException} class to wrap all thrown
        * {@link IOException}s. See below for an example of using this class.
        * &lt;pre&gt;
        * TaggedInputStream stream = new TaggedInputStream(...);
        * try {
        * // Processing that may throw an IOException either from this stream
        * // or from some other IO activity like temporary files, etc.
        * processStream(stream);
        * } catch (IOException e) {
        * if (stream.isCauseOf(e)) {
        * // The exception was caused by this stream.
        * // Use e.getCause() to get the original exception.
        * } else {
        * // The exception was caused by something else.
        * }
        * }
        * &lt;/pre&gt;
        * &lt;p&gt;
        * Alternatively, the {@link #throwIfCauseOf(Throwable)} method can be
        * used to let higher levels of code handle the exception caused by this
        * stream while other processing errors are being taken care of at this
        * lower level.
        * &lt;pre&gt;
        * TaggedInputStream stream = new TaggedInputStream(...);
        * try {
        * processStream(stream);
        * } catch (IOException e) {
        * stream.throwIfCauseOf(e);
        * // ... or process the exception that was caused by something else
        * }
        * &lt;/pre&gt;
        *
        * @see TaggedIOException
        * @since 2.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>TaggedInputStream</name>
        <super>
            <extends>extends
                <name>ProxyInputStream</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * The unique tag associated with exceptions from stream.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Serializable</name>
                    </type>
                    <name>tag</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>UUID</name>.
                                    <name>randomUUID</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a tagging decorator for the given input stream.
                *
                * @param proxy input stream to be decorated
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>TaggedInputStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>proxy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>proxy</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Tests if the given exception was caused by this stream.
                *
                * @param exception an exception
                * @return &lt;code&gt;true&lt;/code&gt; if the exception was thrown by this stream,
                * &lt;code&gt;false&lt;/code&gt; otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isCauseOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>exception</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>TaggedIOException</name>.
                                    <name>isTaggedWith</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>exception</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tag</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Re-throws the original exception thrown by this stream. This method
                * first checks whether the given exception is a {@link TaggedIOException}
                * wrapper created by this decorator, and then unwraps and throws the
                * original wrapped exception. Returns normally if the exception was
                * not thrown by this stream.
                *
                * @param throwable an exception
                * @throws IOException original exception, if any, thrown by this stream
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>throwIfCauseOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>TaggedIOException</name>.
                                    <name>throwCauseIfTaggedWith</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tag</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Tags any IOExceptions thrown, wrapping and re-throwing.
                *
                * @param e The IOException thrown
                * @throws IOException if an I/O error occurs
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>handleIOException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IOException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>TaggedIOException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tag</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
