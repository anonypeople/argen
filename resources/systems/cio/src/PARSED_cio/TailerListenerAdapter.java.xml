<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\input\TailerListenerAdapter.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>input</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * {@link TailerListener} Adapter.
        *
        * @version $Id: TailerListenerAdapter.java 1304052 2012-03-22 20:55:29Z ggregory $
        * @since 2.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>TailerListenerAdapter</name>
        <super>
            <implements>implements
                <name>TailerListener</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * The tailer will call this method during construction,
                * giving the listener a method of stopping the tailer.
                * @param tailer the tailer.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>init</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Tailer</name>
                            </type>
                            <name>tailer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * This method is called if the tailed file is not found.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>fileNotFound</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Called if a file rotation is detected.
                *
                * This method is called before the file is reopened, and fileNotFound may
                * be called if the new file has not yet been created.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>fileRotated</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Handles a line from a Tailer.
                * @param line the line.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>handle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>line</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Handles an Exception .
                * @param ex the exception.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>handle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Exception</name>
                            </type>
                            <name>ex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
