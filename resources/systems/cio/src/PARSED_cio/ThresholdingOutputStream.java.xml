<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\output\ThresholdingOutputStream.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>output</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>


    <comment type="javadoc">/**
        * An output stream which triggers an event when a specified number of bytes of
        * data have been written to it. The event can be used, for example, to throw
        * an exception if a maximum has been reached, or to switch the underlying
        * stream type when the threshold is exceeded.
        * &lt;p&gt;
        * This class overrides all &lt;code&gt;OutputStream&lt;/code&gt; methods. However, these
        * overrides ultimately call the corresponding methods in the underlying output
        * stream implementation.
        * &lt;p&gt;
        * NOTE: This implementation may trigger the event &lt;em&gt;before&lt;/em&gt; the threshold
        * is actually reached, since it triggers when a pending write operation would
        * cause the threshold to be exceeded.
        *
        * @version $Id: ThresholdingOutputStream.java 1302748 2012-03-20 01:35:32Z ggregory $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>ThresholdingOutputStream</name>
        <super>
            <extends>extends
                <name>OutputStream</name>
            </extends>
        </super>
        <block>{

            <comment type="line">// ----------------------------------------------------------- Data members</comment>


            <comment type="javadoc">/**
                * The threshold at which the event will be triggered.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>threshold</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The number of bytes written to the output stream.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>written</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * Whether or not the configured threshold has been exceeded.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>thresholdExceeded</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="line">// ----------------------------------------------------------- Constructors</comment>


            <comment type="javadoc">/**
                * Constructs an instance of this class which will trigger an event at the
                * specified threshold.
                *
                * @param threshold The number of bytes at which to trigger an event.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ThresholdingOutputStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>threshold</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>threshold</name>
                            </name>
                            =
                            <name>threshold</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>


            <comment type="line">// --------------------------------------------------- OutputStream methods</comment>


            <comment type="javadoc">/**
                * Writes the specified byte to this output stream.
                *
                * @param b The byte to be written.
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>write</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkThreshold</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>getStream</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>write</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr><name>written</name>++
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Writes &lt;code&gt;b.length&lt;/code&gt; bytes from the specified byte array to this
                * output stream.
                *
                * @param b The array of bytes to be written.
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>write</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>
                                <name>b</name>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkThreshold</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>b</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>getStream</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>write</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>written</name>
                            +=
                            <name><name>b</name>.
                                <name>length</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified byte array starting at
                * offset &lt;code&gt;off&lt;/code&gt; to this output stream.
                *
                * @param b The byte array from which the data will be written.
                * @param off The start offset in the byte array.
                * @param len The number of bytes to write.
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>write</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>
                                <name>b</name>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkThreshold</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>len</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>getStream</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>write</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>off</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>len</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>written</name>
                            +=
                            <name>len</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Flushes this output stream and forces any buffered output bytes to be
                * written out.
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>flush</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>getStream</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>flush</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Closes this output stream and releases any system resources associated
                * with this stream.
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>close</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>flush</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>ignored</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// ignore</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>getStream</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>close</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="line">// --------------------------------------------------------- Public methods</comment>


            <comment type="javadoc">/**
                * Returns the threshold, in bytes, at which an event will be triggered.
                *
                * @return The threshold point, in bytes.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getThreshold</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>threshold</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Returns the number of bytes that have been written to this output stream.
                *
                * @return The number of bytes written.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getByteCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>written</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Determines whether or not the configured threshold has been exceeded for
                * this output stream.
                *
                * @return &lt;code&gt;true&lt;/code&gt; if the threshold has been reached;
                * &lt;code&gt;false&lt;/code&gt; otherwise.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isThresholdExceeded</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>written</name>
                            &gt;
                            <name>threshold</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="line">// ------------------------------------------------------ Protected methods</comment>


            <comment type="javadoc">/**
                * Checks to see if writing the specified number of bytes would cause the
                * configured threshold to be exceeded. If so, triggers an event to allow
                * a concrete implementation to take action on this.
                *
                * @param count The number of bytes about to be written to the underlying
                * output stream.
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>checkThreshold</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!<name>thresholdExceeded</name> &amp;&amp; <name>written</name> + <name>count</name> &gt;
                                <name>threshold</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>thresholdExceeded</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>thresholdReached</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Resets the byteCount to zero. You can call this from
                * {@link #thresholdReached()} if you want the event to be triggered again.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>resetByteCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>thresholdExceeded</name>
                            </name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>written</name>
                            </name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// ------------------------------------------------------- Abstract methods</comment>


            <comment type="javadoc">/**
                * Returns the underlying output stream, to which the corresponding
                * &lt;code&gt;OutputStream&lt;/code&gt; methods in this class will ultimately delegate.
                *
                * @return The underlying output stream.
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>OutputStream</name>
                </type>
                <name>getStream</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Indicates that the configured threshold has been reached, and that a
                * subclass should take whatever action necessary on this event. This may
                * include changing the underlying output stream.
                *
                * @exception IOException if an error occurs.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>thresholdReached</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
