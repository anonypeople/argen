<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\main\java\org\apache\commons\io\filefilter\TrueFileFilter.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>filefilter</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A file filter that always returns true.
        *
        * @since 1.0
        * @version $Id: TrueFileFilter.java 1304058 2012-03-22 21:02:43Z sebb $
        * @see FileFilterUtils#trueFileFilter()
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>TrueFileFilter</name>
        <super>
            <implements>implements <name>IOFileFilter</name>,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Singleton instance of true filter.
                * @since 1.3
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>IOFileFilter</name>
                    </type>
                    <name>TRUE</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>TrueFileFilter</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Singleton instance of true filter.
                * Please use the identical TrueFileFilter.TRUE constant.
                * The new name is more JDK 1.5 friendly as it doesn't clash with other
                * values when using static imports.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>IOFileFilter</name>
                    </type>
                    <name>INSTANCE</name> =
                    <init>
                        <expr>
                            <name>TRUE</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Restrictive consructor.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>TrueFileFilter</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns true.
                *
                * @param file the file to check (ignored)
                * @return true
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>accept</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>file</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns true.
                *
                * @param dir the directory to check (ignored)
                * @param name the filename (ignored)
                * @return true
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>accept</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>dir</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
