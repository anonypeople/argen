<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cio\src\test\java\org\apache\commons\io\output\WriterOutputStreamTest.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>io</name>.
            <name>output</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>StringWriter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Random</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>junit</name>.<name>framework</name>.
            <name>TestCase</name>
        </name>
        ;
    </import>

    <class>
        <specifier>public</specifier>
        class <name>WriterOutputStreamTest</name>
        <super>
            <extends>extends
                <name>TestCase</name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>TEST_STRING</name> =
                    <init>
                        <expr>"\u00e0 peine arriv\u00e9s nous entr\u00e2mes dans sa chambre"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>LARGE_TEST_STRING</name>
                </decl>
                ;
            </decl_stmt>

            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name>StringBuilder</name>
                        </type>
                        <name>buffer</name> =
                        <init>
                            <expr>new
                                <call>
                                    <name>StringBuilder</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr><name>i</name>&lt;100
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <call>
                                    <name><name>buffer</name>.
                                        <name>append</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>TEST_STRING</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                <expr_stmt>
                    <expr>
                        <name>LARGE_TEST_STRING</name>
                        =
                        <call>
                            <name><name>buffer</name>.
                                <name>toString</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Random</name>
                    </type>
                    <name>random</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Random</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>testWithSingleByteWrite</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>testString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>charsetName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>bytes</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>testString</name>.
                                            <name>getBytes</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>charsetName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringWriter</name>
                            </type>
                            <name>writer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringWriter</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>WriterOutputStream</name>
                            </type>
                            <name>out</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>WriterOutputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>writer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>charsetName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>byte</name>
                                </type>
                                <name>b</name> :
                                <range>
                                    <expr>
                                        <name>bytes</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>out</name>.
                                            <name>write</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>b</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>close</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>testString</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>writer</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>testWithBufferedWrite</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>testString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>charsetName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>expected</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>testString</name>.
                                            <name>getBytes</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>charsetName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringWriter</name>
                            </type>
                            <name>writer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringWriter</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>WriterOutputStream</name>
                            </type>
                            <name>out</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>WriterOutputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>writer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>charsetName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>offset</name>
                                &lt;
                                <name><name>expected</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>length</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>min</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>random</name>.
                                                                    <name>nextInt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>128</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>expected</name>.
                                                                <name>length</name>
                                                            </name>
                                                            -
                                                            <name>offset</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>out</name>.
                                            <name>write</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>expected</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>offset</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>offset</name>
                                    +=
                                    <name>length</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>close</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>testString</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>writer</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testUTF8WithSingleByteWrite</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>testWithSingleByteWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEST_STRING</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"UTF-8"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testLargeUTF8WithSingleByteWrite</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>testWithSingleByteWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>LARGE_TEST_STRING</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"UTF-8"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testUTF8WithBufferedWrite</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>testWithBufferedWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEST_STRING</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"UTF-8"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testLargeUTF8WithBufferedWrite</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>testWithBufferedWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>LARGE_TEST_STRING</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"UTF-8"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testUTF16WithSingleByteWrite</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>testWithSingleByteWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEST_STRING</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"UTF-16"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testUTF16WithBufferedWrite</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>testWithBufferedWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEST_STRING</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"UTF-16"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testUTF16BEWithSingleByteWrite</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>testWithSingleByteWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEST_STRING</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"UTF-16BE"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testUTF16BEWithBufferedWrite</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>testWithBufferedWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEST_STRING</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"UTF-16BE"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testUTF16LEWithSingleByteWrite</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>testWithSingleByteWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEST_STRING</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"UTF-16LE"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testUTF16LEWithBufferedWrite</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>testWithBufferedWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEST_STRING</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"UTF-16LE"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testFlush</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringWriter</name>
                            </type>
                            <name>writer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringWriter</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>WriterOutputStream</name>
                            </type>
                            <name>out</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>WriterOutputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>writer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"us-ascii"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>1024</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"abc".
                                            <call>
                                                <name>getBytes</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"us-ascii"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>writer</name>.
                                                    <name>getBuffer</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>length</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>flush</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"abc"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>writer</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testWriteImmediately</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringWriter</name>
                            </type>
                            <name>writer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringWriter</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>WriterOutputStream</name>
                            </type>
                            <name>out</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>WriterOutputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>writer</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"us-ascii"</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>1024</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"abc".
                                            <call>
                                                <name>getBytes</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"us-ascii"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"abc"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>writer</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
