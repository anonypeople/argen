<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\ArrayUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Array</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>builder</name>.
            <name>EqualsBuilder</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>builder</name>.
            <name>HashCodeBuilder</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>builder</name>.
            <name>ToStringBuilder</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>builder</name>.
            <name>ToStringStyle</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Operations on arrays, primitive arrays (like &lt;code&gt;int[]&lt;/code&gt;) and
        * primitive wrapper arrays (like &lt;code&gt;Integer[]&lt;/code&gt;).&lt;/p&gt;
        *
        * &lt;p&gt;This class tries to handle &lt;code&gt;null&lt;/code&gt; input gracefully.
        * An exception will not be thrown for a &lt;code&gt;null&lt;/code&gt;
        * array input. However, an Object array that contains a &lt;code&gt;null&lt;/code&gt;
        * element may throw an exception. Each method documents its behaviour.&lt;/p&gt;
        *
        * &lt;p&gt;#ThreadSafe#&lt;/p&gt;
        * @author Apache Software Foundation
        * @author Moritz Petersen
        * @author &lt;a href="mailto:fredrik@westermarck.com"&gt;Fredrik Westermarck&lt;/a&gt;
        * @author Nikolay Metchev
        * @author Matthew Hawthorne
        * @author Tim O'Brien
        * @author Pete Gieser
        * @author Gary Gregory
        * @author &lt;a href="mailto:equinus100@hotmail.com"&gt;Ashwin S&lt;/a&gt;
        * @author Maarten Coene
        * @since 2.0
        * @version $Id: ArrayUtils.java 1056988 2011-01-09 17:58:53Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>ArrayUtils</name>
        <block>{

            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;Object&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Object</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_OBJECT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Object</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;Class&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Class</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_CLASS_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Class</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;String&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_STRING_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>String</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;long&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_LONG_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>long</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;Long&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Long</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_LONG_OBJECT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Long</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;int&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_INT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;Integer&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Integer</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_INTEGER_OBJECT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Integer</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;short&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>short</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_SHORT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>short</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;Short&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Short</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_SHORT_OBJECT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Short</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;byte&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_BYTE_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>byte</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;Byte&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Byte</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_BYTE_OBJECT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Byte</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;double&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>double</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_DOUBLE_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>double</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;Double&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Double</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_DOUBLE_OBJECT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Double</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;float&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>float</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_FLOAT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>float</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;Float&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Float</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_FLOAT_OBJECT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Float</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;boolean&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_BOOLEAN_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>boolean</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;Boolean&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Boolean</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_BOOLEAN_OBJECT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Boolean</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;char&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_CHAR_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>char</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * An empty immutable &lt;code&gt;Character&lt;/code&gt; array.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Character</name>
                        <index>[]</index>
                    </type>
                    <name>EMPTY_CHARACTER_OBJECT_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Character</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The index value when an element is not found in a list or array: &lt;code&gt;-1&lt;/code&gt;.
                * This value is returned by methods in this class and can also be used in comparisons with values
                returned by
                * various method from {@link java.util.List}.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>INDEX_NOT_FOUND</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;ArrayUtils instances should NOT be constructed in standard programming.
                * Instead, the class should be used as &lt;code&gt;ArrayUtils.clone(new int[] {2})&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean instance
                * to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ArrayUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// Basic methods handling multi-dimensional arrays</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Outputs an array as a String, treating &lt;code&gt;null&lt;/code&gt; as an empty array.&lt;/p&gt;
                *
                * &lt;p&gt;Multi-dimensional arrays are handled correctly, including
                * multi-dimensional primitive arrays.&lt;/p&gt;
                *
                * &lt;p&gt;The format is that of Java source code, for example &lt;code&gt;{a,b}&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to get a toString for, may be &lt;code&gt;null&lt;/code&gt;
                * @return a String representation of the array, '{}' if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"{}"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Outputs an array as a String handling &lt;code&gt;null&lt;/code&gt;s.&lt;/p&gt;
                *
                * &lt;p&gt;Multi-dimensional arrays are handled correctly, including
                * multi-dimensional primitive arrays.&lt;/p&gt;
                *
                * &lt;p&gt;The format is that of Java source code, for example &lt;code&gt;{a,b}&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to get a toString for, may be &lt;code&gt;null&lt;/code&gt;
                * @param stringIfNull the String to return if the array is &lt;code&gt;null&lt;/code&gt;
                * @return a String representation of the array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>stringIfNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>stringIfNull</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>ToStringBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>ToStringStyle</name>.
                                                <name>SIMPLE_STYLE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Get a hashCode for an array handling multi-dimensional arrays correctly.&lt;/p&gt;
                *
                * &lt;p&gt;Multi-dimensional primitive arrays are also handled correctly by this method.&lt;/p&gt;
                *
                * @param array the array to get a hashCode for, may be &lt;code&gt;null&lt;/code&gt;
                * @return a hashCode for the array, zero if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>HashCodeBuilder</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toHashCode</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares two arrays, using equals(), handling multi-dimensional arrays
                * correctly.&lt;/p&gt;
                *
                * &lt;p&gt;Multi-dimensional primitive arrays are also handled correctly by this method.&lt;/p&gt;
                *
                * @param array1 the left hand array to compare, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the right hand array to compare, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the arrays are equal
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEquals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>EqualsBuilder</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>array2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>isEquals</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// To map</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts the given array into a {@link java.util.Map}. Each element of the array
                * must be either a {@link java.util.Map.Entry} or an Array, containing at least two
                * elements, where the first element is used as key and the second as
                * value.&lt;/p&gt;
                *
                * &lt;p&gt;This method can be used to initialize:&lt;/p&gt;
                * &lt;pre&gt;
                * // Create a Map mapping colors.
                * Map colorMap = MapUtils.toMap(new String[][] {{
                * {"RED", "#FF0000"},
                * {"GREEN", "#00FF00"},
                * {"BLUE", "#0000FF"}});
                * &lt;/pre&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array an array whose elements are either a {@link java.util.Map.Entry} or
                * an Array containing at least two elements, may be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;Map&lt;/code&gt; that was created from the array
                * @throws IllegalArgumentException if one element of this Array is
                * itself an Array containing less then two elements
                * @throws IllegalArgumentException if the array contains elements other
                * than {@link java.util.Map.Entry} and an Array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Map</name>
                </type>
                <name>toMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Map</name>
                            </type>
                            <name>map</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>HashMap</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>(<name>int</name>)
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>array</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                    * 1.5
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>object</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>array</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>object</name>
                                        <name>instanceof</name>
                                        <name><name>Map</name>.
                                            <name>Entry</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name><name>Map</name>.
                                                        <name>Entry</name>
                                                    </name>
                                                </type>
                                                <name>entry</name> =
                                                <init>
                                                    <expr>(
                                                        <name><name>Map</name>.
                                                            <name>Entry</name>
                                                        </name>
                                                        )
                                                        <name>object</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>map</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>entry</name>.
                                                                        <name>getKey</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>entry</name>.
                                                                        <name>getValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>object</name>
                                                <name>instanceof</name>
                                                <name>
                                                    <name>Object</name>
                                                    <index>[]</index>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>Object</name>
                                                            <index>[]</index>
                                                        </type>
                                                        <name>entry</name> =
                                                        <init>
                                                            <expr>(
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                )
                                                                <name>object</name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name><name>entry</name>.
                                                                <name>length</name>
                                                            </name>
                                                            &lt; 2
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <throw>throw
                                                                <expr>new
                                                                    <call>
                                                                        <name>IllegalArgumentException</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"Array element " + <name>i</name> +
                                                                                    ", '"
                                                                                    +
                                                                                    <name>object</name>
                                                                                    + "', has a length less than 2"
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </throw>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>map</name>.
                                                                <name>put</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>entry</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>entry</name>
                                                                            <index>[<expr>1</expr>]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <throw>throw
                                                    <expr>new
                                                        <call>
                                                            <name>IllegalArgumentException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"Array element " + <name>i</name> + ", '"
                                                                        +
                                                                        <name>object</name>
                                                                        + "', is neither of type Map.Entry nor an Array"
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>map</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Clone</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Shallow clones an array returning a typecast result and handling
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;The objects in the array are not cloned, thus there is no special
                * handling for multi-dimensional arrays.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array the array to shallow clone, may be &lt;code&gt;null&lt;/code&gt;
                * @return the cloned array, &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>array</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clones an array returning a typecast result and handling
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array the array to clone, may be &lt;code&gt;null&lt;/code&gt;
                * @return the cloned array, &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                    <index>[]</index>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>long</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>array</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clones an array returning a typecast result and handling
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array the array to clone, may be &lt;code&gt;null&lt;/code&gt;
                * @return the cloned array, &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>int</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>array</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clones an array returning a typecast result and handling
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array the array to clone, may be &lt;code&gt;null&lt;/code&gt;
                * @return the cloned array, &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                    <index>[]</index>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>short</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>array</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clones an array returning a typecast result and handling
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array the array to clone, may be &lt;code&gt;null&lt;/code&gt;
                * @return the cloned array, &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>char</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>array</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clones an array returning a typecast result and handling
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array the array to clone, may be &lt;code&gt;null&lt;/code&gt;
                * @return the cloned array, &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>byte</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>array</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clones an array returning a typecast result and handling
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array the array to clone, may be &lt;code&gt;null&lt;/code&gt;
                * @return the cloned array, &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>double</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>array</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clones an array returning a typecast result and handling
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array the array to clone, may be &lt;code&gt;null&lt;/code&gt;
                * @return the cloned array, &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>float</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>array</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clones an array returning a typecast result and handling
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array the array to clone, may be &lt;code&gt;null&lt;/code&gt;
                * @return the cloned array, &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                    <index>[]</index>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>boolean</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>array</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// nullToEmpty</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_OBJECT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_STRING_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_LONG_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_INT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_SHORT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_CHAR_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_BYTE_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_DOUBLE_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_FLOAT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_BOOLEAN_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Long</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_LONG_OBJECT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Integer</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Integer</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_INTEGER_OBJECT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Short</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_SHORT_OBJECT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Character</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Character</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_CHARACTER_OBJECT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Byte</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_BYTE_OBJECT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Double</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_DOUBLE_OBJECT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Float</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_FLOAT_OBJECT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Defensive programming technique to change a &lt;code&gt;null&lt;/code&gt;
                * reference to an empty one.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns an empty array for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * &lt;p&gt;As a memory optimizing technique an empty array passed in will be overridden with
                * the empty &lt;code&gt;public static&lt;/code&gt; references in this class.&lt;/p&gt;
                *
                * @param array the array to check for &lt;code&gt;null&lt;/code&gt; or empty
                * @return the same array, &lt;code&gt;public static&lt;/code&gt; empty array if &lt;code&gt;null&lt;/code&gt;
                or empty input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                    <index>[]</index>
                </type>
                <name>nullToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_BOOLEAN_OBJECT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>array</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Subarrays</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Produces a new array containing the elements between
                * the start and end indices.&lt;/p&gt;
                *
                * &lt;p&gt;The start index is inclusive, the end index exclusive.
                * Null array input produces null output.&lt;/p&gt;
                *
                * &lt;p&gt;The component type of the subarray is always the same as
                * that of the input array. Thus, if the input is an array of type
                * &lt;code&gt;Date&lt;/code&gt;, the following usage is envisaged:&lt;/p&gt;
                *
                * &lt;pre&gt;
                * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);
                * &lt;/pre&gt;
                *
                * @param array the array
                * @param startIndexInclusive the starting index. Undervalue (&amp;lt;0)
                * is promoted to 0, overvalue (&amp;gt;array.length) results
                * in an empty array.
                * @param endIndexExclusive elements up to endIndex-1 are present in the
                * returned subarray. Undervalue (&amp;lt; startIndex) produces
                * empty array, overvalue (&amp;gt;array.length) is demoted to
                * array length.
                * @return a new array containing the elements between
                * the start and end indices.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>subarray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndexInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndexExclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndexInclusive</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndexInclusive</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>endIndexExclusive</name>
                                &gt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>endIndexExclusive</name>
                                        =
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newSize</name> =
                            <init>
                                <expr>
                                    <name>endIndexExclusive</name>
                                    -
                                    <name>startIndexInclusive</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>array</name>.
                                            <name>getClass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getComponentType</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(
                                        <name>
                                            <name>Object</name>
                                            <index>[]</index>
                                        </name>
                                        )
                                        <call>
                                            <name><name>Array</name>.
                                                <name>newInstance</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>type</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>subarray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>Object</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name><name>Array</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>newSize</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startIndexInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subarray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newSize</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>subarray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Produces a new &lt;code&gt;long&lt;/code&gt; array containing the elements
                * between the start and end indices.&lt;/p&gt;
                *
                * &lt;p&gt;The start index is inclusive, the end index exclusive.
                * Null array input produces null output.&lt;/p&gt;
                *
                * @param array the array
                * @param startIndexInclusive the starting index. Undervalue (&amp;lt;0)
                * is promoted to 0, overvalue (&amp;gt;array.length) results
                * in an empty array.
                * @param endIndexExclusive elements up to endIndex-1 are present in the
                * returned subarray. Undervalue (&amp;lt; startIndex) produces
                * empty array, overvalue (&amp;gt;array.length) is demoted to
                * array length.
                * @return a new array containing the elements between
                * the start and end indices.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                    <index>[]</index>
                </type>
                <name>subarray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndexInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndexExclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndexInclusive</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndexInclusive</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>endIndexExclusive</name>
                                &gt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>endIndexExclusive</name>
                                        =
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newSize</name> =
                            <init>
                                <expr>
                                    <name>endIndexExclusive</name>
                                    -
                                    <name>startIndexInclusive</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_LONG_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                                <index>[]</index>
                            </type>
                            <name>subarray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>long</name>
                                        <index>[
                                            <expr>
                                                <name>newSize</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startIndexInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subarray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newSize</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>subarray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Produces a new &lt;code&gt;int&lt;/code&gt; array containing the elements
                * between the start and end indices.&lt;/p&gt;
                *
                * &lt;p&gt;The start index is inclusive, the end index exclusive.
                * Null array input produces null output.&lt;/p&gt;
                *
                * @param array the array
                * @param startIndexInclusive the starting index. Undervalue (&amp;lt;0)
                * is promoted to 0, overvalue (&amp;gt;array.length) results
                * in an empty array.
                * @param endIndexExclusive elements up to endIndex-1 are present in the
                * returned subarray. Undervalue (&amp;lt; startIndex) produces
                * empty array, overvalue (&amp;gt;array.length) is demoted to
                * array length.
                * @return a new array containing the elements between
                * the start and end indices.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>subarray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndexInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndexExclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndexInclusive</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndexInclusive</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>endIndexExclusive</name>
                                &gt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>endIndexExclusive</name>
                                        =
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newSize</name> =
                            <init>
                                <expr>
                                    <name>endIndexExclusive</name>
                                    -
                                    <name>startIndexInclusive</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_INT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>subarray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <name>newSize</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startIndexInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subarray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newSize</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>subarray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Produces a new &lt;code&gt;short&lt;/code&gt; array containing the elements
                * between the start and end indices.&lt;/p&gt;
                *
                * &lt;p&gt;The start index is inclusive, the end index exclusive.
                * Null array input produces null output.&lt;/p&gt;
                *
                * @param array the array
                * @param startIndexInclusive the starting index. Undervalue (&amp;lt;0)
                * is promoted to 0, overvalue (&amp;gt;array.length) results
                * in an empty array.
                * @param endIndexExclusive elements up to endIndex-1 are present in the
                * returned subarray. Undervalue (&amp;lt; startIndex) produces
                * empty array, overvalue (&amp;gt;array.length) is demoted to
                * array length.
                * @return a new array containing the elements between
                * the start and end indices.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                    <index>[]</index>
                </type>
                <name>subarray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndexInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndexExclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndexInclusive</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndexInclusive</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>endIndexExclusive</name>
                                &gt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>endIndexExclusive</name>
                                        =
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newSize</name> =
                            <init>
                                <expr>
                                    <name>endIndexExclusive</name>
                                    -
                                    <name>startIndexInclusive</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_SHORT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                                <index>[]</index>
                            </type>
                            <name>subarray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>short</name>
                                        <index>[
                                            <expr>
                                                <name>newSize</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startIndexInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subarray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newSize</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>subarray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Produces a new &lt;code&gt;char&lt;/code&gt; array containing the elements
                * between the start and end indices.&lt;/p&gt;
                *
                * &lt;p&gt;The start index is inclusive, the end index exclusive.
                * Null array input produces null output.&lt;/p&gt;
                *
                * @param array the array
                * @param startIndexInclusive the starting index. Undervalue (&amp;lt;0)
                * is promoted to 0, overvalue (&amp;gt;array.length) results
                * in an empty array.
                * @param endIndexExclusive elements up to endIndex-1 are present in the
                * returned subarray. Undervalue (&amp;lt; startIndex) produces
                * empty array, overvalue (&amp;gt;array.length) is demoted to
                * array length.
                * @return a new array containing the elements between
                * the start and end indices.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>subarray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndexInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndexExclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndexInclusive</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndexInclusive</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>endIndexExclusive</name>
                                &gt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>endIndexExclusive</name>
                                        =
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newSize</name> =
                            <init>
                                <expr>
                                    <name>endIndexExclusive</name>
                                    -
                                    <name>startIndexInclusive</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_CHAR_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>subarray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>char</name>
                                        <index>[
                                            <expr>
                                                <name>newSize</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startIndexInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subarray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newSize</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>subarray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Produces a new &lt;code&gt;byte&lt;/code&gt; array containing the elements
                * between the start and end indices.&lt;/p&gt;
                *
                * &lt;p&gt;The start index is inclusive, the end index exclusive.
                * Null array input produces null output.&lt;/p&gt;
                *
                * @param array the array
                * @param startIndexInclusive the starting index. Undervalue (&amp;lt;0)
                * is promoted to 0, overvalue (&amp;gt;array.length) results
                * in an empty array.
                * @param endIndexExclusive elements up to endIndex-1 are present in the
                * returned subarray. Undervalue (&amp;lt; startIndex) produces
                * empty array, overvalue (&amp;gt;array.length) is demoted to
                * array length.
                * @return a new array containing the elements between
                * the start and end indices.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>subarray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndexInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndexExclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndexInclusive</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndexInclusive</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>endIndexExclusive</name>
                                &gt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>endIndexExclusive</name>
                                        =
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newSize</name> =
                            <init>
                                <expr>
                                    <name>endIndexExclusive</name>
                                    -
                                    <name>startIndexInclusive</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_BYTE_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>subarray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>newSize</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startIndexInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subarray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newSize</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>subarray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Produces a new &lt;code&gt;double&lt;/code&gt; array containing the elements
                * between the start and end indices.&lt;/p&gt;
                *
                * &lt;p&gt;The start index is inclusive, the end index exclusive.
                * Null array input produces null output.&lt;/p&gt;
                *
                * @param array the array
                * @param startIndexInclusive the starting index. Undervalue (&amp;lt;0)
                * is promoted to 0, overvalue (&amp;gt;array.length) results
                * in an empty array.
                * @param endIndexExclusive elements up to endIndex-1 are present in the
                * returned subarray. Undervalue (&amp;lt; startIndex) produces
                * empty array, overvalue (&amp;gt;array.length) is demoted to
                * array length.
                * @return a new array containing the elements between
                * the start and end indices.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>subarray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndexInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndexExclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndexInclusive</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndexInclusive</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>endIndexExclusive</name>
                                &gt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>endIndexExclusive</name>
                                        =
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newSize</name> =
                            <init>
                                <expr>
                                    <name>endIndexExclusive</name>
                                    -
                                    <name>startIndexInclusive</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_DOUBLE_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>subarray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[
                                            <expr>
                                                <name>newSize</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startIndexInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subarray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newSize</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>subarray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Produces a new &lt;code&gt;float&lt;/code&gt; array containing the elements
                * between the start and end indices.&lt;/p&gt;
                *
                * &lt;p&gt;The start index is inclusive, the end index exclusive.
                * Null array input produces null output.&lt;/p&gt;
                *
                * @param array the array
                * @param startIndexInclusive the starting index. Undervalue (&amp;lt;0)
                * is promoted to 0, overvalue (&amp;gt;array.length) results
                * in an empty array.
                * @param endIndexExclusive elements up to endIndex-1 are present in the
                * returned subarray. Undervalue (&amp;lt; startIndex) produces
                * empty array, overvalue (&amp;gt;array.length) is demoted to
                * array length.
                * @return a new array containing the elements between
                * the start and end indices.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>subarray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndexInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndexExclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndexInclusive</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndexInclusive</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>endIndexExclusive</name>
                                &gt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>endIndexExclusive</name>
                                        =
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newSize</name> =
                            <init>
                                <expr>
                                    <name>endIndexExclusive</name>
                                    -
                                    <name>startIndexInclusive</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_FLOAT_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                                <index>[]</index>
                            </type>
                            <name>subarray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>float</name>
                                        <index>[
                                            <expr>
                                                <name>newSize</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startIndexInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subarray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newSize</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>subarray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Produces a new &lt;code&gt;boolean&lt;/code&gt; array containing the elements
                * between the start and end indices.&lt;/p&gt;
                *
                * &lt;p&gt;The start index is inclusive, the end index exclusive.
                * Null array input produces null output.&lt;/p&gt;
                *
                * @param array the array
                * @param startIndexInclusive the starting index. Undervalue (&amp;lt;0)
                * is promoted to 0, overvalue (&amp;gt;array.length) results
                * in an empty array.
                * @param endIndexExclusive elements up to endIndex-1 are present in the
                * returned subarray. Undervalue (&amp;lt; startIndex) produces
                * empty array, overvalue (&amp;gt;array.length) is demoted to
                * array length.
                * @return a new array containing the elements between
                * the start and end indices.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                    <index>[]</index>
                </type>
                <name>subarray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndexInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndexExclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndexInclusive</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndexInclusive</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>endIndexExclusive</name>
                                &gt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>endIndexExclusive</name>
                                        =
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newSize</name> =
                            <init>
                                <expr>
                                    <name>endIndexExclusive</name>
                                    -
                                    <name>startIndexInclusive</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_BOOLEAN_ARRAY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                                <index>[]</index>
                            </type>
                            <name>subarray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>boolean</name>
                                        <index>[
                                            <expr>
                                                <name>newSize</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startIndexInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subarray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newSize</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>subarray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Is same length</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether two arrays are the same length, treating
                * &lt;code&gt;null&lt;/code&gt; arrays as length &lt;code&gt;0&lt;/code&gt;.
                *
                * &lt;p&gt;Any multi-dimensional aspects of the arrays are ignored.&lt;/p&gt;
                *
                * @param array1 the first array, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if length of arrays matches, treating
                * &lt;code&gt;null&lt;/code&gt; as an empty array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>array1</name> == <name>null</name> &amp;&amp; <name>array2</name> != <name>
                                null
                            </name> &amp;&amp;
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array2</name> == <name>null</name> &amp;&amp; <name>array1</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array1</name> != <name>null</name> &amp;&amp; <name>array2</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether two arrays are the same length, treating
                * &lt;code&gt;null&lt;/code&gt; arrays as length &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array1 the first array, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if length of arrays matches, treating
                * &lt;code&gt;null&lt;/code&gt; as an empty array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>array1</name> == <name>null</name> &amp;&amp; <name>array2</name> != <name>
                                null
                            </name> &amp;&amp;
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array2</name> == <name>null</name> &amp;&amp; <name>array1</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array1</name> != <name>null</name> &amp;&amp; <name>array2</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether two arrays are the same length, treating
                * &lt;code&gt;null&lt;/code&gt; arrays as length &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array1 the first array, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if length of arrays matches, treating
                * &lt;code&gt;null&lt;/code&gt; as an empty array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>array1</name> == <name>null</name> &amp;&amp; <name>array2</name> != <name>
                                null
                            </name> &amp;&amp;
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array2</name> == <name>null</name> &amp;&amp; <name>array1</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array1</name> != <name>null</name> &amp;&amp; <name>array2</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether two arrays are the same length, treating
                * &lt;code&gt;null&lt;/code&gt; arrays as length &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array1 the first array, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if length of arrays matches, treating
                * &lt;code&gt;null&lt;/code&gt; as an empty array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>array1</name> == <name>null</name> &amp;&amp; <name>array2</name> != <name>
                                null
                            </name> &amp;&amp;
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array2</name> == <name>null</name> &amp;&amp; <name>array1</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array1</name> != <name>null</name> &amp;&amp; <name>array2</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether two arrays are the same length, treating
                * &lt;code&gt;null&lt;/code&gt; arrays as length &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array1 the first array, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if length of arrays matches, treating
                * &lt;code&gt;null&lt;/code&gt; as an empty array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>array1</name> == <name>null</name> &amp;&amp; <name>array2</name> != <name>
                                null
                            </name> &amp;&amp;
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array2</name> == <name>null</name> &amp;&amp; <name>array1</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array1</name> != <name>null</name> &amp;&amp; <name>array2</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether two arrays are the same length, treating
                * &lt;code&gt;null&lt;/code&gt; arrays as length &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array1 the first array, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if length of arrays matches, treating
                * &lt;code&gt;null&lt;/code&gt; as an empty array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>array1</name> == <name>null</name> &amp;&amp; <name>array2</name> != <name>
                                null
                            </name> &amp;&amp;
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array2</name> == <name>null</name> &amp;&amp; <name>array1</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array1</name> != <name>null</name> &amp;&amp; <name>array2</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether two arrays are the same length, treating
                * &lt;code&gt;null&lt;/code&gt; arrays as length &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array1 the first array, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if length of arrays matches, treating
                * &lt;code&gt;null&lt;/code&gt; as an empty array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>array1</name> == <name>null</name> &amp;&amp; <name>array2</name> != <name>
                                null
                            </name> &amp;&amp;
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array2</name> == <name>null</name> &amp;&amp; <name>array1</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array1</name> != <name>null</name> &amp;&amp; <name>array2</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether two arrays are the same length, treating
                * &lt;code&gt;null&lt;/code&gt; arrays as length &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array1 the first array, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if length of arrays matches, treating
                * &lt;code&gt;null&lt;/code&gt; as an empty array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>array1</name> == <name>null</name> &amp;&amp; <name>array2</name> != <name>
                                null
                            </name> &amp;&amp;
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array2</name> == <name>null</name> &amp;&amp; <name>array1</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array1</name> != <name>null</name> &amp;&amp; <name>array2</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether two arrays are the same length, treating
                * &lt;code&gt;null&lt;/code&gt; arrays as length &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array1 the first array, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if length of arrays matches, treating
                * &lt;code&gt;null&lt;/code&gt; as an empty array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>array1</name> == <name>null</name> &amp;&amp; <name>array2</name> != <name>
                                null
                            </name> &amp;&amp;
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array2</name> == <name>null</name> &amp;&amp; <name>array1</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0) ||
                                (<name>array1</name> != <name>null</name> &amp;&amp; <name>array2</name> != <name>null
                                </name> &amp;&amp;
                                <name><name>array1</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>array2</name>.
                                    <name>length</name>
                                </name>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Returns the length of the specified array.
                * This method can deal with &lt;code&gt;Object&lt;/code&gt; arrays and with primitive arrays.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; is returned.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.getLength(null) = 0
                * ArrayUtils.getLength([]) = 0
                * ArrayUtils.getLength([null]) = 1
                * ArrayUtils.getLength([true, false]) = 2
                * ArrayUtils.getLength([1, 2, 3]) = 3
                * ArrayUtils.getLength(["a", "b", "c"]) = 3
                * &lt;/pre&gt;
                *
                * @param array the array to retrieve the length from, may be null
                * @return The length of the array, or &lt;code&gt;0&lt;/code&gt; if the array is &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException if the object arguement is not an array.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>getLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Array</name>.
                                    <name>getLength</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether two arrays are the same type taking into account
                * multi-dimensional arrays.&lt;/p&gt;
                *
                * @param array1 the first array, must not be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array, must not be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if type of arrays matches
                * @throws IllegalArgumentException if either array is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isSameType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array1</name>
                                == <name>null</name> || <name>array2</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The Array must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>array1</name>.
                                    <name>getClass</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getName</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>array2</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Reverse</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Reverses the order of the given array.&lt;/p&gt;
                *
                * &lt;p&gt;There is no special handling for multi-dimensional arrays.&lt;/p&gt;
                *
                * &lt;p&gt;This method does nothing for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * @param array the array to reverse, may be &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <name><name>array</name>.
                                        <name>length</name>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>tmp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;
                                <name>i</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>tmp</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Reverses the order of the given array.&lt;/p&gt;
                *
                * &lt;p&gt;This method does nothing for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * @param array the array to reverse, may be &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <name><name>array</name>.
                                        <name>length</name>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>tmp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;
                                <name>i</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>tmp</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Reverses the order of the given array.&lt;/p&gt;
                *
                * &lt;p&gt;This method does nothing for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * @param array the array to reverse, may be &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <name><name>array</name>.
                                        <name>length</name>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>tmp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;
                                <name>i</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>tmp</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Reverses the order of the given array.&lt;/p&gt;
                *
                * &lt;p&gt;This method does nothing for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * @param array the array to reverse, may be &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <name><name>array</name>.
                                        <name>length</name>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>tmp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;
                                <name>i</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>tmp</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Reverses the order of the given array.&lt;/p&gt;
                *
                * &lt;p&gt;This method does nothing for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * @param array the array to reverse, may be &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <name><name>array</name>.
                                        <name>length</name>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>tmp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;
                                <name>i</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>tmp</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Reverses the order of the given array.&lt;/p&gt;
                *
                * &lt;p&gt;This method does nothing for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * @param array the array to reverse, may be &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <name><name>array</name>.
                                        <name>length</name>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>tmp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;
                                <name>i</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>tmp</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Reverses the order of the given array.&lt;/p&gt;
                *
                * &lt;p&gt;This method does nothing for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * @param array the array to reverse, may be &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <name><name>array</name>.
                                        <name>length</name>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>tmp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;
                                <name>i</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>tmp</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Reverses the order of the given array.&lt;/p&gt;
                *
                * &lt;p&gt;This method does nothing for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * @param array the array to reverse, may be &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <name><name>array</name>.
                                        <name>length</name>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>tmp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;
                                <name>i</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>tmp</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Reverses the order of the given array.&lt;/p&gt;
                *
                * &lt;p&gt;This method does nothing for a &lt;code&gt;null&lt;/code&gt; input array.&lt;/p&gt;
                *
                * @param array the array to reverse, may be &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <name><name>array</name>.
                                        <name>length</name>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>tmp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>j</name>
                                &gt;
                                <name>i</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>j</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>tmp</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>j</name>--
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="line">// IndexOf search</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>

            <comment type="line">// Object IndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given object in the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param objectToFind the object to find, may be &lt;code&gt;null&lt;/code&gt;
                * @return the index of the object within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>objectToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>objectToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given object in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex is treated as zero. A startIndex larger than the array
                * length will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param objectToFind the object to find, may be &lt;code&gt;null&lt;/code&gt;
                * @param startIndex the index to start searching at
                * @return the index of the object within the array starting at the index,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>objectToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndex</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>objectToFind</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>
                                                    <name>startIndex</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>array</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>array</name>.
                                                <name>getClass</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>getComponentType</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>isInstance</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>objectToFind</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>
                                                            <name>startIndex</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name><name>array</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>i</name>++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>objectToFind</name>.
                                                                    <name>equals</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>array</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </for>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given object within the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to travers backwords looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param objectToFind the object to find, may be &lt;code&gt;null&lt;/code&gt;
                * @return the last index of the object within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>objectToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>objectToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given object in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;). A
                startIndex larger than
                * the array length will search from the end of the array.&lt;/p&gt;
                *
                * @param array the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param objectToFind the object to find, may be &lt;code&gt;null&lt;/code&gt;
                * @param startIndex the start index to travers backwards from
                * @return the last index of the object within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>objectToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>startIndex</name>
                                        &gt;=
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>startIndex</name>
                                                =
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>objectToFind</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>
                                                    <name>startIndex</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &gt;= 0
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>--
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>array</name>.
                                                <name>getClass</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>getComponentType</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>isInstance</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>objectToFind</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>
                                                            <name>startIndex</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &gt;= 0
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>i</name>--
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>objectToFind</name>.
                                                                    <name>equals</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>array</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </for>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the object is in the given array.&lt;/p&gt;
                *
                * &lt;p&gt;The method returns &lt;code&gt;false&lt;/code&gt; if a &lt;code&gt;null&lt;/code&gt; array is
                passed in.&lt;/p&gt;
                *
                * @param array the array to search through
                * @param objectToFind the object to find
                * @return &lt;code&gt;true&lt;/code&gt; if the array contains the object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>objectToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>objectToFind</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// long IndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex is treated as zero. A startIndex larger than the array
                * length will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the index to start searching at
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndex</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value within the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to travers backwords looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the object to find
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;). A
                startIndex larger than the
                * array length will search from the end of the array.&lt;/p&gt;
                *
                * @param array the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the start index to travers backwards from
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>startIndex</name>
                                        &gt;=
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>startIndex</name>
                                                =
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the value is in the given array.&lt;/p&gt;
                *
                * &lt;p&gt;The method returns &lt;code&gt;false&lt;/code&gt; if a &lt;code&gt;null&lt;/code&gt; array is
                passed in.&lt;/p&gt;
                *
                * @param array the array to search through
                * @param valueToFind the value to find
                * @return &lt;code&gt;true&lt;/code&gt; if the array contains the object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// int IndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex is treated as zero. A startIndex larger than the array
                * length will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the index to start searching at
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndex</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value within the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to travers backwords looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the object to find
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;). A
                startIndex larger than the
                * array length will search from the end of the array.&lt;/p&gt;
                *
                * @param array the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the start index to travers backwards from
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>startIndex</name>
                                        &gt;=
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>startIndex</name>
                                                =
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the value is in the given array.&lt;/p&gt;
                *
                * &lt;p&gt;The method returns &lt;code&gt;false&lt;/code&gt; if a &lt;code&gt;null&lt;/code&gt; array is
                passed in.&lt;/p&gt;
                *
                * @param array the array to search through
                * @param valueToFind the value to find
                * @return &lt;code&gt;true&lt;/code&gt; if the array contains the object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// short IndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex is treated as zero. A startIndex larger than the array
                * length will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the index to start searching at
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndex</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value within the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to travers backwords looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the object to find
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;). A
                startIndex larger than the
                * array length will search from the end of the array.&lt;/p&gt;
                *
                * @param array the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the start index to travers backwards from
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>startIndex</name>
                                        &gt;=
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>startIndex</name>
                                                =
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the value is in the given array.&lt;/p&gt;
                *
                * &lt;p&gt;The method returns &lt;code&gt;false&lt;/code&gt; if a &lt;code&gt;null&lt;/code&gt; array is
                passed in.&lt;/p&gt;
                *
                * @param array the array to search through
                * @param valueToFind the value to find
                * @return &lt;code&gt;true&lt;/code&gt; if the array contains the object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// char IndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex is treated as zero. A startIndex larger than the array
                * length will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the index to start searching at
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndex</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value within the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to travers backwords looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the object to find
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;). A
                startIndex larger than the
                * array length will search from the end of the array.&lt;/p&gt;
                *
                * @param array the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the start index to travers backwards from
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>startIndex</name>
                                        &gt;=
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>startIndex</name>
                                                =
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the value is in the given array.&lt;/p&gt;
                *
                * &lt;p&gt;The method returns &lt;code&gt;false&lt;/code&gt; if a &lt;code&gt;null&lt;/code&gt; array is
                passed in.&lt;/p&gt;
                *
                * @param array the array to search through
                * @param valueToFind the value to find
                * @return &lt;code&gt;true&lt;/code&gt; if the array contains the object
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// byte IndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex is treated as zero. A startIndex larger than the array
                * length will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the index to start searching at
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndex</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value within the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to travers backwords looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the object to find
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;). A
                startIndex larger than the
                * array length will search from the end of the array.&lt;/p&gt;
                *
                * @param array the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the start index to travers backwards from
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>startIndex</name>
                                        &gt;=
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>startIndex</name>
                                                =
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the value is in the given array.&lt;/p&gt;
                *
                * &lt;p&gt;The method returns &lt;code&gt;false&lt;/code&gt; if a &lt;code&gt;null&lt;/code&gt; array is
                passed in.&lt;/p&gt;
                *
                * @param array the array to search through
                * @param valueToFind the value to find
                * @return &lt;code&gt;true&lt;/code&gt; if the array contains the object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// double IndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value within a given tolerance in the array.
                * This method will return the index of the first value which falls between the region
                * defined by valueToFind - tolerance and valueToFind + tolerance.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param tolerance tolerance of the search
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>tolerance</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tolerance</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex is treated as zero. A startIndex larger than the array
                * length will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the index to start searching at
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>array</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndex</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array starting at the given index.
                * This method will return the index of the first value which falls between the region
                * defined by valueToFind - tolerance and valueToFind + tolerance.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex is treated as zero. A startIndex larger than the array
                * length will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the index to start searching at
                * @param tolerance tolerance of the search
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>tolerance</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>array</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndex</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>min</name> =
                            <init>
                                <expr>
                                    <name>valueToFind</name>
                                    -
                                    <name>tolerance</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>max</name> =
                            <init>
                                <expr>
                                    <name>valueToFind</name>
                                    +
                                    <name>tolerance</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        &gt;= <name>min</name> &amp;&amp;
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        &lt;=
                                        <name>max</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value within the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to travers backwords looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the object to find
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value within a given tolerance in the array.
                * This method will return the index of the last value which falls between the region
                * defined by valueToFind - tolerance and valueToFind + tolerance.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param tolerance tolerance of the search
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>tolerance</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tolerance</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;). A
                startIndex larger than the
                * array length will search from the end of the array.&lt;/p&gt;
                *
                * @param array the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the start index to travers backwards from
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>array</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>startIndex</name>
                                        &gt;=
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>startIndex</name>
                                                =
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value in the array starting at the given index.
                * This method will return the index of the last value which falls between the region
                * defined by valueToFind - tolerance and valueToFind + tolerance.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;). A
                startIndex larger than the
                * array length will search from the end of the array.&lt;/p&gt;
                *
                * @param array the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the start index to travers backwards from
                * @param tolerance search for value within plus/minus this amount
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>tolerance</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>array</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>startIndex</name>
                                        &gt;=
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>startIndex</name>
                                                =
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>min</name> =
                            <init>
                                <expr>
                                    <name>valueToFind</name>
                                    -
                                    <name>tolerance</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>max</name> =
                            <init>
                                <expr>
                                    <name>valueToFind</name>
                                    +
                                    <name>tolerance</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        &gt;= <name>min</name> &amp;&amp;
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        &lt;=
                                        <name>max</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the value is in the given array.&lt;/p&gt;
                *
                * &lt;p&gt;The method returns &lt;code&gt;false&lt;/code&gt; if a &lt;code&gt;null&lt;/code&gt; array is
                passed in.&lt;/p&gt;
                *
                * @param array the array to search through
                * @param valueToFind the value to find
                * @return &lt;code&gt;true&lt;/code&gt; if the array contains the object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if a value falling within the given tolerance is in the
                * given array. If the array contains a value within the inclusive range
                * defined by (value - tolerance) to (value + tolerance).&lt;/p&gt;
                *
                * &lt;p&gt;The method returns &lt;code&gt;false&lt;/code&gt; if a &lt;code&gt;null&lt;/code&gt; array
                * is passed in.&lt;/p&gt;
                *
                * @param array the array to search
                * @param valueToFind the value to find
                * @param tolerance the array contains the tolerance of the search
                * @return true if value falling within tolerance is in array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>tolerance</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tolerance</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// float IndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex is treated as zero. A startIndex larger than the array
                * length will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the index to start searching at
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>array</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndex</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value within the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to travers backwords looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the object to find
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;). A
                startIndex larger than the
                * array length will search from the end of the array.&lt;/p&gt;
                *
                * @param array the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the start index to travers backwards from
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>array</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>startIndex</name>
                                        &gt;=
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>startIndex</name>
                                                =
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the value is in the given array.&lt;/p&gt;
                *
                * &lt;p&gt;The method returns &lt;code&gt;false&lt;/code&gt; if a &lt;code&gt;null&lt;/code&gt; array is
                passed in.&lt;/p&gt;
                *
                * @param array the array to search through
                * @param valueToFind the value to find
                * @return &lt;code&gt;true&lt;/code&gt; if the array contains the object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// boolean IndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex is treated as zero. A startIndex larger than the array
                * length will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;
                *
                * @param array the array to search through for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the index to start searching at
                * @return the index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                * array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>array</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startIndex</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value within the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if
                * &lt;code&gt;null&lt;/code&gt; array input.&lt;/p&gt;
                *
                * @param array the array to travers backwords looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the object to find
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index of the given value in the array starting at the given index.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) for a &lt;code&gt;null&lt;/code&gt;
                input array.&lt;/p&gt;
                *
                * &lt;p&gt;A negative startIndex will return {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;). A
                startIndex larger than
                * the array length will search from the end of the array.&lt;/p&gt;
                *
                * @param array the array to traverse for looking for the object, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueToFind the value to find
                * @param startIndex the start index to travers backwards from
                * @return the last index of the value within the array,
                * {@link #INDEX_NOT_FOUND} (&lt;code&gt;-1&lt;/code&gt;) if not found or &lt;code&gt;null&lt;/code&gt;
                array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>array</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>startIndex</name>
                                        &gt;=
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>startIndex</name>
                                                =
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>valueToFind</name>
                                        ==
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the value is in the given array.&lt;/p&gt;
                *
                * &lt;p&gt;The method returns &lt;code&gt;false&lt;/code&gt; if a &lt;code&gt;null&lt;/code&gt; array is
                passed in.&lt;/p&gt;
                *
                * @param array the array to search through
                * @param valueToFind the value to find
                * @return &lt;code&gt;true&lt;/code&gt; if the array contains the object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>valueToFind</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueToFind</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Primitive/Object array converters</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>

            <comment type="line">// Character array converters</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Characters to primitives.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Character&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;char&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                * @throws NullPointerException if array content is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Character</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_CHAR_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>char</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>charValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Character to primitives handling &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Character&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueForNull the value to insert if &lt;code&gt;null&lt;/code&gt; found
                * @return a &lt;code&gt;char&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Character</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>valueForNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_CHAR_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>char</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Character</name>
                                    </type>
                                    <name>b</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>array</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>b</name> == <name>null</name> ? <name>valueForNull</name> :
                                    <call>
                                        <name><name>b</name>.
                                            <name>charValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of primitive chars to objects.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;char&lt;/code&gt; array
                * @return a &lt;code&gt;Character&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Character</name>
                    <index>[]</index>
                </type>
                <name>toObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_CHARACTER_OBJECT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Character</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Character</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = new
                                    <call>
                                        <name>Character</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Long array converters</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Longs to primitives.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Long&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;long&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                * @throws NullPointerException if array content is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_LONG_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>long</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>long</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>longValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Long to primitives handling &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Long&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueForNull the value to insert if &lt;code&gt;null&lt;/code&gt; found
                * @return a &lt;code&gt;long&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>valueForNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_LONG_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>long</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>long</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Long</name>
                                    </type>
                                    <name>b</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>array</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>b</name> == <name>null</name> ? <name>valueForNull</name> :
                                    <call>
                                        <name><name>b</name>.
                                            <name>longValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of primitive longs to objects.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;long&lt;/code&gt; array
                * @return a &lt;code&gt;Long&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Long</name>
                    <index>[]</index>
                </type>
                <name>toObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_LONG_OBJECT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Long</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Long</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = new
                                    <call>
                                        <name>Long</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Int array converters</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Integers to primitives.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Integer&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @return an &lt;code&gt;int&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                * @throws NullPointerException if array content is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Integer</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_INT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>intValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Integer to primitives handling &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Integer&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueForNull the value to insert if &lt;code&gt;null&lt;/code&gt; found
                * @return an &lt;code&gt;int&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Integer</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>valueForNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_INT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Integer</name>
                                    </type>
                                    <name>b</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>array</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>b</name> == <name>null</name> ? <name>valueForNull</name> :
                                    <call>
                                        <name><name>b</name>.
                                            <name>intValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of primitive ints to objects.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array an &lt;code&gt;int&lt;/code&gt; array
                * @return an &lt;code&gt;Integer&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Integer</name>
                    <index>[]</index>
                </type>
                <name>toObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_INTEGER_OBJECT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Integer</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Integer</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = new
                                    <call>
                                        <name>Integer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Short array converters</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Shorts to primitives.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Short&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;byte&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                * @throws NullPointerException if array content is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_SHORT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>short</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>short</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>shortValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Short to primitives handling &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Short&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueForNull the value to insert if &lt;code&gt;null&lt;/code&gt; found
                * @return a &lt;code&gt;byte&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>valueForNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_SHORT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>short</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>short</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Short</name>
                                    </type>
                                    <name>b</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>array</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>b</name> == <name>null</name> ? <name>valueForNull</name> :
                                    <call>
                                        <name><name>b</name>.
                                            <name>shortValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of primitive shorts to objects.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;short&lt;/code&gt; array
                * @return a &lt;code&gt;Short&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Short</name>
                    <index>[]</index>
                </type>
                <name>toObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_SHORT_OBJECT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Short</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Short</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = new
                                    <call>
                                        <name>Short</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Byte array converters</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Bytes to primitives.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Byte&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;byte&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                * @throws NullPointerException if array content is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_BYTE_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>byteValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Bytes to primitives handling &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Byte&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueForNull the value to insert if &lt;code&gt;null&lt;/code&gt; found
                * @return a &lt;code&gt;byte&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>valueForNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_BYTE_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Byte</name>
                                    </type>
                                    <name>b</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>array</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>b</name> == <name>null</name> ? <name>valueForNull</name> :
                                    <call>
                                        <name><name>b</name>.
                                            <name>byteValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of primitive bytes to objects.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;byte&lt;/code&gt; array
                * @return a &lt;code&gt;Byte&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Byte</name>
                    <index>[]</index>
                </type>
                <name>toObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_BYTE_OBJECT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Byte</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Byte</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = new
                                    <call>
                                        <name>Byte</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Double array converters</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Doubles to primitives.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Double&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;double&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                * @throws NullPointerException if array content is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_DOUBLE_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>doubleValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Doubles to primitives handling &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Double&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueForNull the value to insert if &lt;code&gt;null&lt;/code&gt; found
                * @return a &lt;code&gt;double&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>valueForNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_DOUBLE_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Double</name>
                                    </type>
                                    <name>b</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>array</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>b</name> == <name>null</name> ? <name>valueForNull</name> :
                                    <call>
                                        <name><name>b</name>.
                                            <name>doubleValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of primitive doubles to objects.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;double&lt;/code&gt; array
                * @return a &lt;code&gt;Double&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Double</name>
                    <index>[]</index>
                </type>
                <name>toObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_DOUBLE_OBJECT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Double</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Double</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = new
                                    <call>
                                        <name>Double</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Float array converters</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Floats to primitives.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Float&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;float&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                * @throws NullPointerException if array content is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_FLOAT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>float</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>float</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>floatValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Floats to primitives handling &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Float&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueForNull the value to insert if &lt;code&gt;null&lt;/code&gt; found
                * @return a &lt;code&gt;float&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>valueForNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_FLOAT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>float</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>float</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Float</name>
                                    </type>
                                    <name>b</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>array</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>b</name> == <name>null</name> ? <name>valueForNull</name> :
                                    <call>
                                        <name><name>b</name>.
                                            <name>floatValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of primitive floats to objects.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;float&lt;/code&gt; array
                * @return a &lt;code&gt;Float&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Float</name>
                    <index>[]</index>
                </type>
                <name>toObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_FLOAT_OBJECT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Float</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Float</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = new
                                    <call>
                                        <name>Float</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Boolean array converters</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Booleans to primitives.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Boolean&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;boolean&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                * @throws NullPointerException if array content is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_BOOLEAN_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>boolean</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>boolean</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>booleanValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of object Booleans to primitives handling &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;Boolean&lt;/code&gt; array, may be &lt;code&gt;null&lt;/code&gt;
                * @param valueForNull the value to insert if &lt;code&gt;null&lt;/code&gt; found
                * @return a &lt;code&gt;boolean&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                    <index>[]</index>
                </type>
                <name>toPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>valueForNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_BOOLEAN_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>boolean</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>boolean</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Boolean</name>
                                    </type>
                                    <name>b</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>array</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (<name>b</name> == <name>null</name> ? <name>valueForNull</name> :
                                    <call>
                                        <name><name>b</name>.
                                            <name>booleanValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of primitive booleans to objects.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array a &lt;code&gt;boolean&lt;/code&gt; array
                * @return a &lt;code&gt;Boolean&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                    <index>[]</index>
                </type>
                <name>toObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY_BOOLEAN_OBJECT_ARRAY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Boolean</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Boolean</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>result</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = (
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    ?
                                    <name><name>Boolean</name>.
                                        <name>TRUE</name>
                                    </name>
                                    :
                                    <name><name>Boolean</name>.
                                        <name>FALSE</name>
                                    </name>
                                    )
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of Objects is empty or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is empty or &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>array</name>
                            == <name>null</name> ||
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive longs is empty or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is empty or &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>array</name>
                            == <name>null</name> ||
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive ints is empty or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is empty or &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>array</name>
                            == <name>null</name> ||
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive shorts is empty or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is empty or &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>array</name>
                            == <name>null</name> ||
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive chars is empty or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is empty or &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>array</name>
                            == <name>null</name> ||
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive bytes is empty or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is empty or &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>array</name>
                            == <name>null</name> ||
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive doubles is empty or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is empty or &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>array</name>
                            == <name>null</name> ||
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive floats is empty or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is empty or &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>array</name>
                            == <name>null</name> ||
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive booleans is empty or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is empty or &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>array</name>
                            == <name>null</name> ||
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of Objects is not empty or not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is not empty or not &lt;code&gt;null&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>array</name> != <name>null</name> &amp;&amp;
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive longs is not empty or not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is not empty or not &lt;code&gt;null&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>array</name> != <name>null</name> &amp;&amp;
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive ints is not empty or not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is not empty or not &lt;code&gt;null&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>array</name> != <name>null</name> &amp;&amp;
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive shorts is not empty or not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is not empty or not &lt;code&gt;null&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>array</name> != <name>null</name> &amp;&amp;
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive chars is not empty or not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is not empty or not &lt;code&gt;null&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>array</name> != <name>null</name> &amp;&amp;
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive bytes is not empty or not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is not empty or not &lt;code&gt;null&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>array</name> != <name>null</name> &amp;&amp;
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive doubles is not empty or not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is not empty or not &lt;code&gt;null&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>array</name> != <name>null</name> &amp;&amp;
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive floats is not empty or not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is not empty or not &lt;code&gt;null&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>array</name> != <name>null</name> &amp;&amp;
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of primitive booleans is not empty or not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param array the array to test
                * @return &lt;code&gt;true&lt;/code&gt; if the array is not empty or not &lt;code&gt;null&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>array</name> != <name>null</name> &amp;&amp;
                            <name><name>array</name>.
                                <name>length</name>
                            </name>
                            != 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;
                * &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed
                * by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always
                * a new array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.addAll(null, null) = null
                * ArrayUtils.addAll(array1, null) = cloned copy of array1
                * ArrayUtils.addAll(null, array2) = cloned copy of array2
                * ArrayUtils.addAll([], []) = []
                * ArrayUtils.addAll([null], [null]) = [null, null]
                * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
                * &lt;/pre&gt;
                *
                * @param array1 the first array whose elements are added to the new array, may be &lt;code&gt;null&lt;/code&gt;
                * @param array2 the second array whose elements are added to the new array, may be &lt;code&gt;null&lt;/code&gt;
                * @return The new array, &lt;code&gt;null&lt;/code&gt; if both arrays are &lt;code&gt;null&lt;/code&gt;.
                * The type of the new array is the type of the first array,
                * unless the first array is null, in which case the type is the same as the second array.
                * @since 2.1
                * @throws IllegalArgumentException if the array types are incompatible
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array1</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>array2</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>clone</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array1</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>joinedArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>Object</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name><name>Array</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>array1</name>.
                                                            <name>getClass</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>getComponentType</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>array1</name>.
                                                        <name>length</name>
                                                    </name>
                                                    +
                                                    <name><name>array2</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array2</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>joinedArray</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>array1</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>array2</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ArrayStoreException</name>
                                    </type>
                                    <name>ase</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// Check if problem was due to incompatible types</comment>
                                <comment type="block">/*
                                    * We do this here, rather than before the copy because:
                                    * - it would be a wasted check most of the time
                                    * - safer, in case check turns out to be too strict
                                    */
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>Class</name>
                                        </type>
                                        <name>type1</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>array1</name>.
                                                        <name>getClass</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>getComponentType</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>Class</name>
                                        </type>
                                        <name>type2</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>array2</name>.
                                                        <name>getClass</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>getComponentType</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name><name>type1</name>.
                                                    <name>isAssignableFrom</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>type2</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>IllegalArgumentException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Cannot store "+
                                                                    <call>
                                                                        <name><name>type2</name>.
                                                                            <name>getName</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    +" in an array of "+
                                                                    <call>
                                                                        <name><name>type1</name>.
                                                                            <name>getName</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>
                                        <name>ase</name>
                                    </expr>
                                    ;
                                </throw>
                                <comment type="line">// No, so rethrow original</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <return>return
                        <expr>
                            <name>joinedArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;
                * &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed
                * by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always
                * a new array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.addAll(array1, null) = cloned copy of array1
                * ArrayUtils.addAll(null, array2) = cloned copy of array2
                * ArrayUtils.addAll([], []) = []
                * &lt;/pre&gt;
                *
                * @param array1 the first array whose elements are added to the new array.
                * @param array2 the second array whose elements are added to the new array.
                * @return The new boolean[] array.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                    <index>[]</index>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array1</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>array2</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>clone</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array1</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                                <index>[]</index>
                            </type>
                            <name>joinedArray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>boolean</name>
                                        <index>[
                                            <expr>
                                                <name><name>array1</name>.
                                                    <name>length</name>
                                                </name>
                                                +
                                                <name><name>array2</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array2</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>joinedArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;
                * &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed
                * by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always
                * a new array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.addAll(array1, null) = cloned copy of array1
                * ArrayUtils.addAll(null, array2) = cloned copy of array2
                * ArrayUtils.addAll([], []) = []
                * &lt;/pre&gt;
                *
                * @param array1 the first array whose elements are added to the new array.
                * @param array2 the second array whose elements are added to the new array.
                * @return The new char[] array.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array1</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>array2</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>clone</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array1</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>joinedArray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>char</name>
                                        <index>[
                                            <expr>
                                                <name><name>array1</name>.
                                                    <name>length</name>
                                                </name>
                                                +
                                                <name><name>array2</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array2</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>joinedArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;
                * &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed
                * by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always
                * a new array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.addAll(array1, null) = cloned copy of array1
                * ArrayUtils.addAll(null, array2) = cloned copy of array2
                * ArrayUtils.addAll([], []) = []
                * &lt;/pre&gt;
                *
                * @param array1 the first array whose elements are added to the new array.
                * @param array2 the second array whose elements are added to the new array.
                * @return The new byte[] array.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array1</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>array2</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>clone</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array1</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>joinedArray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name><name>array1</name>.
                                                    <name>length</name>
                                                </name>
                                                +
                                                <name><name>array2</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array2</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>joinedArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;
                * &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed
                * by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always
                * a new array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.addAll(array1, null) = cloned copy of array1
                * ArrayUtils.addAll(null, array2) = cloned copy of array2
                * ArrayUtils.addAll([], []) = []
                * &lt;/pre&gt;
                *
                * @param array1 the first array whose elements are added to the new array.
                * @param array2 the second array whose elements are added to the new array.
                * @return The new short[] array.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                    <index>[]</index>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array1</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>array2</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>clone</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array1</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                                <index>[]</index>
                            </type>
                            <name>joinedArray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>short</name>
                                        <index>[
                                            <expr>
                                                <name><name>array1</name>.
                                                    <name>length</name>
                                                </name>
                                                +
                                                <name><name>array2</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array2</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>joinedArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;
                * &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed
                * by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always
                * a new array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.addAll(array1, null) = cloned copy of array1
                * ArrayUtils.addAll(null, array2) = cloned copy of array2
                * ArrayUtils.addAll([], []) = []
                * &lt;/pre&gt;
                *
                * @param array1 the first array whose elements are added to the new array.
                * @param array2 the second array whose elements are added to the new array.
                * @return The new int[] array.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array1</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>array2</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>clone</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array1</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>joinedArray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <name><name>array1</name>.
                                                    <name>length</name>
                                                </name>
                                                +
                                                <name><name>array2</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array2</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>joinedArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;
                * &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed
                * by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always
                * a new array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.addAll(array1, null) = cloned copy of array1
                * ArrayUtils.addAll(null, array2) = cloned copy of array2
                * ArrayUtils.addAll([], []) = []
                * &lt;/pre&gt;
                *
                * @param array1 the first array whose elements are added to the new array.
                * @param array2 the second array whose elements are added to the new array.
                * @return The new long[] array.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                    <index>[]</index>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array1</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>array2</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>clone</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array1</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                                <index>[]</index>
                            </type>
                            <name>joinedArray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>long</name>
                                        <index>[
                                            <expr>
                                                <name><name>array1</name>.
                                                    <name>length</name>
                                                </name>
                                                +
                                                <name><name>array2</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array2</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>joinedArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;
                * &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed
                * by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always
                * a new array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.addAll(array1, null) = cloned copy of array1
                * ArrayUtils.addAll(null, array2) = cloned copy of array2
                * ArrayUtils.addAll([], []) = []
                * &lt;/pre&gt;
                *
                * @param array1 the first array whose elements are added to the new array.
                * @param array2 the second array whose elements are added to the new array.
                * @return The new float[] array.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array1</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>array2</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>clone</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array1</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                                <index>[]</index>
                            </type>
                            <name>joinedArray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>float</name>
                                        <index>[
                                            <expr>
                                                <name><name>array1</name>.
                                                    <name>length</name>
                                                </name>
                                                +
                                                <name><name>array2</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array2</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>joinedArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds all the elements of the given arrays into a new array.&lt;/p&gt;
                * &lt;p&gt;The new array contains all of the element of &lt;code&gt;array1&lt;/code&gt; followed
                * by all of the elements &lt;code&gt;array2&lt;/code&gt;. When an array is returned, it is always
                * a new array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.addAll(array1, null) = cloned copy of array1
                * ArrayUtils.addAll(null, array2) = cloned copy of array2
                * ArrayUtils.addAll([], []) = []
                * &lt;/pre&gt;
                *
                * @param array1 the first array whose elements are added to the new array.
                * @param array2 the second array whose elements are added to the new array.
                * @return The new double[] array.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array1</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>array2</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>clone</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array1</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>joinedArray</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[
                                            <expr>
                                                <name><name>array1</name>.
                                                    <name>length</name>
                                                </name>
                                                +
                                                <name><name>array2</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>joinedArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array1</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array2</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>joinedArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Copies the given array and adds the given element at the end of the new array.&lt;/p&gt;
                *
                * &lt;p&gt;The new array contains the same elements of the input
                * array plus the given element in the last position. The component type of
                * the new array is the same as that of the input array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element, unless the element itself is null,
                * in which case the return type is Object[]&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, null) = [null]
                * ArrayUtils.add(null, "a") = ["a"]
                * ArrayUtils.add(["a"], null) = ["a", null]
                * ArrayUtils.add(["a"], "b") = ["a", "b"]
                * ArrayUtils.add(["a", "b"], "c") = ["a", "b", "c"]
                * &lt;/pre&gt;
                *
                * @param array the array to "add" the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the object to add, may be &lt;code&gt;null&lt;/code&gt;
                * @return A new array containing the existing elements plus the new element
                * The returned array type will be that of the input array (unless null),
                * in which case it will have the same type as the element.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>type</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>type</name>
                                        =
                                        <call>
                                            <name><name>array</name>.
                                                <name>getClass</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>element</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>type</name>
                                                =
                                                <call>
                                                    <name><name>element</name>.
                                                        <name>getClass</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>type</name>
                                                =
                                                <name><name>Object</name>.
                                                    <name>
                                                        <name/>
                                                    </name>
                                                </name>
                                                class
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>newArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>Object</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name>copyArrayGrow1</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>newArray</name>
                                <index>[
                                    <expr>
                                        <name><name>newArray</name>.
                                            <name>length</name>
                                        </name>
                                        - 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>element</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Copies the given array and adds the given element at the end of the new array.&lt;/p&gt;
                *
                * &lt;p&gt;The new array contains the same elements of the input
                * array plus the given element in the last position. The component type of
                * the new array is the same as that of the input array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, true) = [true]
                * ArrayUtils.add([true], false) = [true, false]
                * ArrayUtils.add([true, false], true) = [true, false, true]
                * &lt;/pre&gt;
                *
                * @param array the array to copy and add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the object to add at the last index of the new array
                * @return A new array containing the existing elements plus the new element
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                                <index>[]</index>
                            </type>
                            <name>newArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>boolean</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name>copyArrayGrow1</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Boolean</name>.
                                                        <name>TYPE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>newArray</name>
                                <index>[
                                    <expr>
                                        <name><name>newArray</name>.
                                            <name>length</name>
                                        </name>
                                        - 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>element</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Copies the given array and adds the given element at the end of the new array.&lt;/p&gt;
                *
                * &lt;p&gt;The new array contains the same elements of the input
                * array plus the given element in the last position. The component type of
                * the new array is the same as that of the input array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, 0) = [0]
                * ArrayUtils.add([1], 0) = [1, 0]
                * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to copy and add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the object to add at the last index of the new array
                * @return A new array containing the existing elements plus the new element
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>newArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name>copyArrayGrow1</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Byte</name>.
                                                        <name>TYPE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>newArray</name>
                                <index>[
                                    <expr>
                                        <name><name>newArray</name>.
                                            <name>length</name>
                                        </name>
                                        - 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>element</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Copies the given array and adds the given element at the end of the new array.&lt;/p&gt;
                *
                * &lt;p&gt;The new array contains the same elements of the input
                * array plus the given element in the last position. The component type of
                * the new array is the same as that of the input array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, '0') = ['0']
                * ArrayUtils.add(['1'], '0') = ['1', '0']
                * ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1']
                * &lt;/pre&gt;
                *
                * @param array the array to copy and add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the object to add at the last index of the new array
                * @return A new array containing the existing elements plus the new element
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>newArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>char</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name>copyArrayGrow1</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Character</name>.
                                                        <name>TYPE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>newArray</name>
                                <index>[
                                    <expr>
                                        <name><name>newArray</name>.
                                            <name>length</name>
                                        </name>
                                        - 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>element</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Copies the given array and adds the given element at the end of the new array.&lt;/p&gt;
                *
                * &lt;p&gt;The new array contains the same elements of the input
                * array plus the given element in the last position. The component type of
                * the new array is the same as that of the input array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, 0) = [0]
                * ArrayUtils.add([1], 0) = [1, 0]
                * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to copy and add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the object to add at the last index of the new array
                * @return A new array containing the existing elements plus the new element
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>newArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>double</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name>copyArrayGrow1</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Double</name>.
                                                        <name>TYPE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>newArray</name>
                                <index>[
                                    <expr>
                                        <name><name>newArray</name>.
                                            <name>length</name>
                                        </name>
                                        - 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>element</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Copies the given array and adds the given element at the end of the new array.&lt;/p&gt;
                *
                * &lt;p&gt;The new array contains the same elements of the input
                * array plus the given element in the last position. The component type of
                * the new array is the same as that of the input array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, 0) = [0]
                * ArrayUtils.add([1], 0) = [1, 0]
                * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to copy and add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the object to add at the last index of the new array
                * @return A new array containing the existing elements plus the new element
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>float</name>
                                <index>[]</index>
                            </type>
                            <name>newArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>float</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name>copyArrayGrow1</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Float</name>.
                                                        <name>TYPE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>newArray</name>
                                <index>[
                                    <expr>
                                        <name><name>newArray</name>.
                                            <name>length</name>
                                        </name>
                                        - 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>element</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Copies the given array and adds the given element at the end of the new array.&lt;/p&gt;
                *
                * &lt;p&gt;The new array contains the same elements of the input
                * array plus the given element in the last position. The component type of
                * the new array is the same as that of the input array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, 0) = [0]
                * ArrayUtils.add([1], 0) = [1, 0]
                * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to copy and add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the object to add at the last index of the new array
                * @return A new array containing the existing elements plus the new element
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>newArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>int</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name>copyArrayGrow1</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Integer</name>.
                                                        <name>TYPE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>newArray</name>
                                <index>[
                                    <expr>
                                        <name><name>newArray</name>.
                                            <name>length</name>
                                        </name>
                                        - 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>element</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Copies the given array and adds the given element at the end of the new array.&lt;/p&gt;
                *
                * &lt;p&gt;The new array contains the same elements of the input
                * array plus the given element in the last position. The component type of
                * the new array is the same as that of the input array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, 0) = [0]
                * ArrayUtils.add([1], 0) = [1, 0]
                * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to copy and add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the object to add at the last index of the new array
                * @return A new array containing the existing elements plus the new element
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                                <index>[]</index>
                            </type>
                            <name>newArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>long</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name>copyArrayGrow1</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Long</name>.
                                                        <name>TYPE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>newArray</name>
                                <index>[
                                    <expr>
                                        <name><name>newArray</name>.
                                            <name>length</name>
                                        </name>
                                        - 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>element</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Copies the given array and adds the given element at the end of the new array.&lt;/p&gt;
                *
                * &lt;p&gt;The new array contains the same elements of the input
                * array plus the given element in the last position. The component type of
                * the new array is the same as that of the input array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, 0) = [0]
                * ArrayUtils.add([1], 0) = [1, 0]
                * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to copy and add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the object to add at the last index of the new array
                * @return A new array containing the existing elements plus the new element
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>short</name>
                                <index>[]</index>
                            </type>
                            <name>newArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>short</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name>copyArrayGrow1</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Short</name>.
                                                        <name>TYPE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>newArray</name>
                                <index>[
                                    <expr>
                                        <name><name>newArray</name>.
                                            <name>length</name>
                                        </name>
                                        - 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>element</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newArray</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a copy of the given array of size 1 greater than the argument.
                * The last value of the array is left to the default value.
                *
                * @param array The array to copy, must not be &lt;code&gt;null&lt;/code&gt;.
                * @param newArrayComponentType If &lt;code&gt;array&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                create a
                * size 1 array of this type.
                * @return A new copy of the array of size 1 greater than the input.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>copyArrayGrow1</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>newArrayComponentType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>arrayLength</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Array</name>.
                                                        <name>getLength</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>array</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Object</name>
                                        </type>
                                        <name>newArray</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Array</name>.
                                                        <name>newInstance</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>array</name>.
                                                                        <name>getClass</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                .
                                                                <call>
                                                                    <name>getComponentType</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>arrayLength</name>
                                                                + 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newArray</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>arrayLength</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>newArray</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Array</name>.
                                    <name>newInstance</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newArrayComponentType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Inserts the specified element at the specified position in the array.
                * Shifts the element currently at that position (if any) and any subsequent
                * elements to the right (adds one to their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array plus the given element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, 0, null) = [null]
                * ArrayUtils.add(null, 0, "a") = ["a"]
                * ArrayUtils.add(["a"], 1, null) = ["a", null]
                * ArrayUtils.add(["a"], 1, "b") = ["a", "b"]
                * ArrayUtils.add(["a", "b"], 3, "c") = ["a", "b", "c"]
                * &lt;/pre&gt;
                *
                * @param array the array to add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the new object
                * @param element the object to add
                * @return A new array containing the existing elements and the new element
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt; array.length).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>clss</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>clss</name>
                                        =
                                        <call>
                                            <name><name>array</name>.
                                                <name>getClass</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>getComponentType</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>element</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>clss</name>
                                                =
                                                <call>
                                                    <name><name>element</name>.
                                                        <name>getClass</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return
                                            <expr>new
                                                <name>
                                                    <name>Object</name>
                                                    <index>[]</index>
                                                </name>
                                                <block>{
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                    }
                                                </block>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>clss</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Inserts the specified element at the specified position in the array.
                * Shifts the element currently at that position (if any) and any subsequent
                * elements to the right (adds one to their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array plus the given element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, 0, true) = [true]
                * ArrayUtils.add([true], 0, false) = [false, true]
                * ArrayUtils.add([false], 1, true) = [false, true]
                * ArrayUtils.add([true, false], 1, true) = [true, true, false]
                * &lt;/pre&gt;
                *
                * @param array the array to add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the new object
                * @param element the object to add
                * @return A new array containing the existing elements and the new element
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt; array.length).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>boolean</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>BooleanUtils</name>.
                                                    <name>toBooleanObject</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Boolean</name>.
                                                <name>TYPE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Inserts the specified element at the specified position in the array.
                * Shifts the element currently at that position (if any) and any subsequent
                * elements to the right (adds one to their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array plus the given element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add(null, 0, 'a') = ['a']
                * ArrayUtils.add(['a'], 0, 'b') = ['b', 'a']
                * ArrayUtils.add(['a', 'b'], 0, 'c') = ['c', 'a', 'b']
                * ArrayUtils.add(['a', 'b'], 1, 'k') = ['a', 'k', 'b']
                * ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c']
                * &lt;/pre&gt;
                *
                * @param array the array to add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the new object
                * @param element the object to add
                * @return A new array containing the existing elements and the new element
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt; array.length).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>char</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Character</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Character</name>.
                                                <name>TYPE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Inserts the specified element at the specified position in the array.
                * Shifts the element currently at that position (if any) and any subsequent
                * elements to the right (adds one to their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array plus the given element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add([1], 0, 2) = [2, 1]
                * ArrayUtils.add([2, 6], 2, 3) = [2, 6, 3]
                * ArrayUtils.add([2, 6], 0, 1) = [1, 2, 6]
                * ArrayUtils.add([2, 6, 3], 2, 1) = [2, 6, 1, 3]
                * &lt;/pre&gt;
                *
                * @param array the array to add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the new object
                * @param element the object to add
                * @return A new array containing the existing elements and the new element
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt; array.length).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>byte</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Byte</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Byte</name>.
                                                <name>TYPE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Inserts the specified element at the specified position in the array.
                * Shifts the element currently at that position (if any) and any subsequent
                * elements to the right (adds one to their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array plus the given element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add([1], 0, 2) = [2, 1]
                * ArrayUtils.add([2, 6], 2, 10) = [2, 6, 10]
                * ArrayUtils.add([2, 6], 0, -4) = [-4, 2, 6]
                * ArrayUtils.add([2, 6, 3], 2, 1) = [2, 6, 1, 3]
                * &lt;/pre&gt;
                *
                * @param array the array to add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the new object
                * @param element the object to add
                * @return A new array containing the existing elements and the new element
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt; array.length).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>short</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Short</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Short</name>.
                                                <name>TYPE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Inserts the specified element at the specified position in the array.
                * Shifts the element currently at that position (if any) and any subsequent
                * elements to the right (adds one to their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array plus the given element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add([1], 0, 2) = [2, 1]
                * ArrayUtils.add([2, 6], 2, 10) = [2, 6, 10]
                * ArrayUtils.add([2, 6], 0, -4) = [-4, 2, 6]
                * ArrayUtils.add([2, 6, 3], 2, 1) = [2, 6, 1, 3]
                * &lt;/pre&gt;
                *
                * @param array the array to add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the new object
                * @param element the object to add
                * @return A new array containing the existing elements and the new element
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt; array.length).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>int</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Integer</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>TYPE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Inserts the specified element at the specified position in the array.
                * Shifts the element currently at that position (if any) and any subsequent
                * elements to the right (adds one to their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array plus the given element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add([1L], 0, 2L) = [2L, 1L]
                * ArrayUtils.add([2L, 6L], 2, 10L) = [2L, 6L, 10L]
                * ArrayUtils.add([2L, 6L], 0, -4L) = [-4L, 2L, 6L]
                * ArrayUtils.add([2L, 6L, 3L], 2, 1L) = [2L, 6L, 1L, 3L]
                * &lt;/pre&gt;
                *
                * @param array the array to add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the new object
                * @param element the object to add
                * @return A new array containing the existing elements and the new element
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt; array.length).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>long</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Long</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Long</name>.
                                                <name>TYPE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Inserts the specified element at the specified position in the array.
                * Shifts the element currently at that position (if any) and any subsequent
                * elements to the right (adds one to their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array plus the given element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add([1.1f], 0, 2.2f) = [2.2f, 1.1f]
                * ArrayUtils.add([2.3f, 6.4f], 2, 10.5f) = [2.3f, 6.4f, 10.5f]
                * ArrayUtils.add([2.6f, 6.7f], 0, -4.8f) = [-4.8f, 2.6f, 6.7f]
                * ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f) = [2.9f, 6.0f, 1.0f, 0.3f]
                * &lt;/pre&gt;
                *
                * @param array the array to add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the new object
                * @param element the object to add
                * @return A new array containing the existing elements and the new element
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt; array.length).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>float</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Float</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Float</name>.
                                                <name>TYPE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Inserts the specified element at the specified position in the array.
                * Shifts the element currently at that position (if any) and any subsequent
                * elements to the right (adds one to their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array plus the given element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, a new one element array is returned
                * whose component type is the same as the element.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.add([1.1], 0, 2.2) = [2.2, 1.1]
                * ArrayUtils.add([2.3, 6.4], 2, 10.5) = [2.3, 6.4, 10.5]
                * ArrayUtils.add([2.6, 6.7], 0, -4.8) = [-4.8, 2.6, 6.7]
                * ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0) = [2.9, 6.0, 1.0, 0.3]
                * &lt;/pre&gt;
                *
                * @param array the array to add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the new object
                * @param element the object to add
                * @return A new array containing the existing elements and the new element
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt; array.length).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>double</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Double</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Double</name>.
                                                <name>TYPE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Underlying implementation of add(array, index, element) methods.
                * The last parameter is the class, which may not equal element.getClass
                * for primitives.
                *
                * @param array the array to add the element to, may be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the new object
                * @param element the object to add
                * @param clss the type of the element being added
                * @return A new array containing the existing elements and the new element
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>clss</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>IndexOutOfBoundsException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Index: " + <name>index</name> + ", Length: 0"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Object</name>
                                        </type>
                                        <name>joinedArray</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Array</name>.
                                                        <name>newInstance</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>clss</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>1</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>Array</name>.
                                                <name>set</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>joinedArray</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>joinedArray</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Array</name>.
                                            <name>getLength</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &gt; <name>length</name> || <name>index</name> &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IndexOutOfBoundsException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Index: " + <name>index</name> + ", Length: " +
                                                        <name>length</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Array</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>clss</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                    + 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Array</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt;
                                <name>length</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                        + 1
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>length</name>
                                                        -
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the element at the specified position from the specified array.
                * All subsequent elements are shifted to the left (substracts one from
                * their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, an IndexOutOfBoundsException
                * will be thrown, because in that case no valid index can be specified.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.remove(["a"], 0) = []
                * ArrayUtils.remove(["a", "b"], 0) = ["b"]
                * ArrayUtils.remove(["a", "b"], 1) = ["a"]
                * ArrayUtils.remove(["a", "b", "c"], 1) = ["a", "c"]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may not be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the element to be removed
                * @return A new array containing the existing elements except the element
                * at the specified position.
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt;= array.length), or if the array is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>Object</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Object</name>)
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the first occurrence of the specified element from the
                * specified array. All subsequent elements are shifted to the left
                * (substracts one from their indices). If the array doesn't contains
                * such an element, no elements are removed from the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the first occurrence of the specified element. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.removeElement(null, "a") = null
                * ArrayUtils.removeElement([], "a") = []
                * ArrayUtils.removeElement(["a"], "b") = ["a"]
                * ArrayUtils.removeElement(["a", "b"], "a") = ["b"]
                * ArrayUtils.removeElement(["a", "b", "a"], "a") = ["b", "a"]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the element to be removed
                * @return A new array containing the existing elements except the first
                * occurrence of the specified element.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>removeElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the element at the specified position from the specified array.
                * All subsequent elements are shifted to the left (substracts one from
                * their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, an IndexOutOfBoundsException
                * will be thrown, because in that case no valid index can be specified.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.remove([true], 0) = []
                * ArrayUtils.remove([true, false], 0) = [false]
                * ArrayUtils.remove([true, false], 1) = [true]
                * ArrayUtils.remove([true, true, false], 1) = [true, false]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may not be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the element to be removed
                * @return A new array containing the existing elements except the element
                * at the specified position.
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt;= array.length), or if the array is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                    <index>[]</index>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>boolean</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Object</name>)
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the first occurrence of the specified element from the
                * specified array. All subsequent elements are shifted to the left
                * (substracts one from their indices). If the array doesn't contains
                * such an element, no elements are removed from the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the first occurrence of the specified element. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.removeElement(null, true) = null
                * ArrayUtils.removeElement([], true) = []
                * ArrayUtils.removeElement([true], false) = [true]
                * ArrayUtils.removeElement([true, false], false) = [true]
                * ArrayUtils.removeElement([true, false, true], true) = [false, true]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the element to be removed
                * @return A new array containing the existing elements except the first
                * occurrence of the specified element.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                    <index>[]</index>
                </type>
                <name>removeElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the element at the specified position from the specified array.
                * All subsequent elements are shifted to the left (substracts one from
                * their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, an IndexOutOfBoundsException
                * will be thrown, because in that case no valid index can be specified.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.remove([1], 0) = []
                * ArrayUtils.remove([1, 0], 0) = [0]
                * ArrayUtils.remove([1, 0], 1) = [1]
                * ArrayUtils.remove([1, 0, 1], 1) = [1, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may not be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the element to be removed
                * @return A new array containing the existing elements except the element
                * at the specified position.
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt;= array.length), or if the array is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>byte</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Object</name>)
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the first occurrence of the specified element from the
                * specified array. All subsequent elements are shifted to the left
                * (substracts one from their indices). If the array doesn't contains
                * such an element, no elements are removed from the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the first occurrence of the specified element. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.removeElement(null, 1) = null
                * ArrayUtils.removeElement([], 1) = []
                * ArrayUtils.removeElement([1], 0) = [1]
                * ArrayUtils.removeElement([1, 0], 0) = [1]
                * ArrayUtils.removeElement([1, 0, 1], 1) = [0, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the element to be removed
                * @return A new array containing the existing elements except the first
                * occurrence of the specified element.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>removeElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the element at the specified position from the specified array.
                * All subsequent elements are shifted to the left (substracts one from
                * their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, an IndexOutOfBoundsException
                * will be thrown, because in that case no valid index can be specified.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.remove(['a'], 0) = []
                * ArrayUtils.remove(['a', 'b'], 0) = ['b']
                * ArrayUtils.remove(['a', 'b'], 1) = ['a']
                * ArrayUtils.remove(['a', 'b', 'c'], 1) = ['a', 'c']
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may not be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the element to be removed
                * @return A new array containing the existing elements except the element
                * at the specified position.
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt;= array.length), or if the array is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>char</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Object</name>)
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the first occurrence of the specified element from the
                * specified array. All subsequent elements are shifted to the left
                * (substracts one from their indices). If the array doesn't contains
                * such an element, no elements are removed from the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the first occurrence of the specified element. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.removeElement(null, 'a') = null
                * ArrayUtils.removeElement([], 'a') = []
                * ArrayUtils.removeElement(['a'], 'b') = ['a']
                * ArrayUtils.removeElement(['a', 'b'], 'a') = ['b']
                * ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a']
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the element to be removed
                * @return A new array containing the existing elements except the first
                * occurrence of the specified element.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>removeElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the element at the specified position from the specified array.
                * All subsequent elements are shifted to the left (substracts one from
                * their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, an IndexOutOfBoundsException
                * will be thrown, because in that case no valid index can be specified.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.remove([1.1], 0) = []
                * ArrayUtils.remove([2.5, 6.0], 0) = [6.0]
                * ArrayUtils.remove([2.5, 6.0], 1) = [2.5]
                * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may not be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the element to be removed
                * @return A new array containing the existing elements except the element
                * at the specified position.
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt;= array.length), or if the array is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>double</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Object</name>)
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the first occurrence of the specified element from the
                * specified array. All subsequent elements are shifted to the left
                * (substracts one from their indices). If the array doesn't contains
                * such an element, no elements are removed from the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the first occurrence of the specified element. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.removeElement(null, 1.1) = null
                * ArrayUtils.removeElement([], 1.1) = []
                * ArrayUtils.removeElement([1.1], 1.2) = [1.1]
                * ArrayUtils.removeElement([1.1, 2.3], 1.1) = [2.3]
                * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the element to be removed
                * @return A new array containing the existing elements except the first
                * occurrence of the specified element.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>removeElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the element at the specified position from the specified array.
                * All subsequent elements are shifted to the left (substracts one from
                * their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, an IndexOutOfBoundsException
                * will be thrown, because in that case no valid index can be specified.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.remove([1.1], 0) = []
                * ArrayUtils.remove([2.5, 6.0], 0) = [6.0]
                * ArrayUtils.remove([2.5, 6.0], 1) = [2.5]
                * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may not be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the element to be removed
                * @return A new array containing the existing elements except the element
                * at the specified position.
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt;= array.length), or if the array is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>float</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Object</name>)
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the first occurrence of the specified element from the
                * specified array. All subsequent elements are shifted to the left
                * (substracts one from their indices). If the array doesn't contains
                * such an element, no elements are removed from the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the first occurrence of the specified element. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.removeElement(null, 1.1) = null
                * ArrayUtils.removeElement([], 1.1) = []
                * ArrayUtils.removeElement([1.1], 1.2) = [1.1]
                * ArrayUtils.removeElement([1.1, 2.3], 1.1) = [2.3]
                * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the element to be removed
                * @return A new array containing the existing elements except the first
                * occurrence of the specified element.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                    <index>[]</index>
                </type>
                <name>removeElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the element at the specified position from the specified array.
                * All subsequent elements are shifted to the left (substracts one from
                * their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, an IndexOutOfBoundsException
                * will be thrown, because in that case no valid index can be specified.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.remove([1], 0) = []
                * ArrayUtils.remove([2, 6], 0) = [6]
                * ArrayUtils.remove([2, 6], 1) = [2]
                * ArrayUtils.remove([2, 6, 3], 1) = [2, 3]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may not be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the element to be removed
                * @return A new array containing the existing elements except the element
                * at the specified position.
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt;= array.length), or if the array is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>int</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Object</name>)
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the first occurrence of the specified element from the
                * specified array. All subsequent elements are shifted to the left
                * (substracts one from their indices). If the array doesn't contains
                * such an element, no elements are removed from the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the first occurrence of the specified element. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.removeElement(null, 1) = null
                * ArrayUtils.removeElement([], 1) = []
                * ArrayUtils.removeElement([1], 2) = [1]
                * ArrayUtils.removeElement([1, 3], 1) = [3]
                * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the element to be removed
                * @return A new array containing the existing elements except the first
                * occurrence of the specified element.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>removeElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the element at the specified position from the specified array.
                * All subsequent elements are shifted to the left (substracts one from
                * their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, an IndexOutOfBoundsException
                * will be thrown, because in that case no valid index can be specified.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.remove([1], 0) = []
                * ArrayUtils.remove([2, 6], 0) = [6]
                * ArrayUtils.remove([2, 6], 1) = [2]
                * ArrayUtils.remove([2, 6, 3], 1) = [2, 3]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may not be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the element to be removed
                * @return A new array containing the existing elements except the element
                * at the specified position.
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt;= array.length), or if the array is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                    <index>[]</index>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>long</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Object</name>)
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the first occurrence of the specified element from the
                * specified array. All subsequent elements are shifted to the left
                * (substracts one from their indices). If the array doesn't contains
                * such an element, no elements are removed from the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the first occurrence of the specified element. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.removeElement(null, 1) = null
                * ArrayUtils.removeElement([], 1) = []
                * ArrayUtils.removeElement([1], 2) = [1]
                * ArrayUtils.removeElement([1, 3], 1) = [3]
                * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the element to be removed
                * @return A new array containing the existing elements except the first
                * occurrence of the specified element.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                    <index>[]</index>
                </type>
                <name>removeElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the element at the specified position from the specified array.
                * All subsequent elements are shifted to the left (substracts one from
                * their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, an IndexOutOfBoundsException
                * will be thrown, because in that case no valid index can be specified.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.remove([1], 0) = []
                * ArrayUtils.remove([2, 6], 0) = [6]
                * ArrayUtils.remove([2, 6], 1) = [2]
                * ArrayUtils.remove([2, 6, 3], 1) = [2, 3]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may not be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the element to be removed
                * @return A new array containing the existing elements except the element
                * at the specified position.
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt;= array.length), or if the array is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                    <index>[]</index>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>short</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Object</name>)
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the first occurrence of the specified element from the
                * specified array. All subsequent elements are shifted to the left
                * (substracts one from their indices). If the array doesn't contains
                * such an element, no elements are removed from the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the first occurrence of the specified element. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ArrayUtils.removeElement(null, 1) = null
                * ArrayUtils.removeElement([], 1) = []
                * ArrayUtils.removeElement([1], 2) = [1]
                * ArrayUtils.removeElement([1, 3], 1) = [3]
                * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
                * &lt;/pre&gt;
                *
                * @param array the array to remove the element from, may be &lt;code&gt;null&lt;/code&gt;
                * @param element the element to be removed
                * @return A new array containing the existing elements except the first
                * occurrence of the specified element.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>short</name>
                    <index>[]</index>
                </type>
                <name>removeElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>clone</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the element at the specified position from the specified array.
                * All subsequent elements are shifted to the left (substracts one from
                * their indices).&lt;/p&gt;
                *
                * &lt;p&gt;This method returns a new array with the same elements of the input
                * array except the element on the specified position. The component
                * type of the returned array is always the same as that of the input
                * array.&lt;/p&gt;
                *
                * &lt;p&gt;If the input array is &lt;code&gt;null&lt;/code&gt;, an IndexOutOfBoundsException
                * will be thrown, because in that case no valid index can be specified.&lt;/p&gt;
                *
                * @param array the array to remove the element from, may not be &lt;code&gt;null&lt;/code&gt;
                * @param index the position of the element to be removed
                * @return A new array containing the existing elements except the element
                * at the specified position.
                * @throws IndexOutOfBoundsException if the index is out of range
                * (index &lt; 0 || index &gt;= array.length), or if the array is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getLength</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt; 0 || <name>index</name> &gt;=
                                <name>length</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IndexOutOfBoundsException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Index: " + <name>index</name> + ", Length: " +
                                                        <name>length</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Array</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>array</name>.
                                                            <name>getClass</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>getComponentType</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                    - 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt; <name>length</name> - 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>array</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                        + 1
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>length</name>
                                                        - <name>index</name> - 1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
