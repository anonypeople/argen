<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\BitField.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * &lt;p&gt;Operations on bit-mapped fields.&lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author Apache Jakarta POI
        * @author Scott Sanders (sanders at apache dot org)
        * @author Marc Johnson (mjohnson at apache dot org)
        * @author Andrew C. Oliver (acoliver at apache dot org)
        * @author Pete Gieser
        * @author Gary Gregory
        * @since 2.0
        * @version $Id: BitField.java 905636 2010-02-02 14:03:32Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>BitField</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>_mask</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>_shift_count</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a BitField instance.&lt;/p&gt;
                *
                * @param mask the mask specifying which bits apply to this
                * BitField. Bits that are set in this mask are the bits
                * that this BitField operates on
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>BitField</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>mask</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>_mask</name>
                            =
                            <name>mask</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bit_pattern</name> =
                            <init>
                                <expr>
                                    <name>mask</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>bit_pattern</name>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <while>while
                                    <condition>(
                                        <expr>(<name>bit_pattern</name> &amp; 1) == 0
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>count</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>bit_pattern</name>
                                                &gt;&gt;= 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>_shift_count</name>
                            =
                            <name>count</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Obtains the value for the specified BitField, appropriately
                * shifted right.&lt;/p&gt;
                *
                * &lt;p&gt;Many users of a BitField will want to treat the specified
                * bits as an int value, and will not want to be aware that the
                * value is stored as a BitField (and so shifted left so many
                * bits).&lt;/p&gt;
                *
                * @see #setValue(int,int)
                * @param holder the int data containing the bits we're interested
                * in
                * @return the selected bits, shifted right appropriately
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getRawValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &gt;&gt;
                            <name>_shift_count</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Obtains the value for the specified BitField, appropriately
                * shifted right, as a short.&lt;/p&gt;
                *
                * &lt;p&gt;Many users of a BitField will want to treat the specified
                * bits as an int value, and will not want to be aware that the
                * value is stored as a BitField (and so shifted left so many
                * bits).&lt;/p&gt;
                *
                * @see #setShortValue(short,short)
                * @param holder the short data containing the bits we're
                * interested in
                * @return the selected bits, shifted right appropriately
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getShortValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>short</name>)
                            <call>
                                <name>getValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Obtains the value for the specified BitField, unshifted.&lt;/p&gt;
                *
                * @param holder the int data containing the bits we're
                * interested in
                * @return the selected bits
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getRawValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>holder</name>
                            &amp;
                            <name>_mask</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Obtains the value for the specified BitField, unshifted.&lt;/p&gt;
                *
                * @param holder the short data containing the bits we're
                * interested in
                * @return the selected bits
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>getShortRawValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>short</name>)
                            <call>
                                <name>getRawValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns whether the field is set or not.&lt;/p&gt;
                *
                * &lt;p&gt;This is most commonly used for a single-bit field, which is
                * often used to represent a boolean value; the results of using
                * it for a multi-bit field is to determine whether *any* of its
                * bits are set.&lt;/p&gt;
                *
                * @param holder the int data containing the bits we're interested
                * in
                * @return &lt;code&gt;true&lt;/code&gt; if any of the bits are set,
                * else &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>holder</name> &amp; <name>_mask</name>) != 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns whether all of the bits are set or not.&lt;/p&gt;
                *
                * &lt;p&gt;This is a stricter test than {@link #isSet(int)},
                * in that all of the bits in a multi-bit set must be set
                * for this method to return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * @param holder the int data containing the bits we're
                * interested in
                * @return &lt;code&gt;true&lt;/code&gt; if all of the bits are set,
                * else &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isAllSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>holder</name> &amp; <name>_mask</name>) ==
                            <name>_mask</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Replaces the bits with new values.&lt;/p&gt;
                *
                * @see #getValue(int)
                * @param holder the int data containing the bits we're
                * interested in
                * @param value the new value for the specified bits
                * @return the value of holder with the bits from the value
                * parameter replacing the old bits
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>holder</name> &amp; ~<name>_mask</name>) | ((<name>value</name> &lt;&lt; <name>
                            _shift_count</name>) &amp; <name>_mask</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Replaces the bits with new values.&lt;/p&gt;
                *
                * @see #getShortValue(short)
                * @param holder the short data containing the bits we're
                * interested in
                * @param value the new value for the specified bits
                * @return the value of holder with the bits from the value
                * parameter replacing the old bits
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>setShortValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>short</name>)
                            <call>
                                <name>setValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clears the bits.&lt;/p&gt;
                *
                * @param holder the int data containing the bits we're
                * interested in
                * @return the value of holder with the specified bits cleared
                * (set to &lt;code&gt;0&lt;/code&gt;)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>clear</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>holder</name>
                            &amp; ~
                            <name>_mask</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clears the bits.&lt;/p&gt;
                *
                * @param holder the short data containing the bits we're
                * interested in
                * @return the value of holder with the specified bits cleared
                * (set to &lt;code&gt;0&lt;/code&gt;)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>clearShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>short</name>)
                            <call>
                                <name>clear</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clears the bits.&lt;/p&gt;
                *
                * @param holder the byte data containing the bits we're
                * interested in
                *
                * @return the value of holder with the specified bits cleared
                * (set to &lt;code&gt;0&lt;/code&gt;)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>byte</name>
                </type>
                <name>clearByte</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>byte</name>)
                            <call>
                                <name>clear</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the bits.&lt;/p&gt;
                *
                * @param holder the int data containing the bits we're
                * interested in
                * @return the value of holder with the specified bits set
                * to &lt;code&gt;1&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>set</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>holder</name>
                            |
                            <name>_mask</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the bits.&lt;/p&gt;
                *
                * @param holder the short data containing the bits we're
                * interested in
                * @return the value of holder with the specified bits set
                * to &lt;code&gt;1&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>setShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>short</name>)
                            <call>
                                <name>set</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the bits.&lt;/p&gt;
                *
                * @param holder the byte data containing the bits we're
                * interested in
                *
                * @return the value of holder with the specified bits set
                * to &lt;code&gt;1&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>byte</name>
                </type>
                <name>setByte</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>byte</name>)
                            <call>
                                <name>set</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets a boolean BitField.&lt;/p&gt;
                *
                * @param holder the int data containing the bits we're
                * interested in
                * @param flag indicating whether to set or clear the bits
                * @return the value of holder with the specified bits set or
                * cleared
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>setBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>flag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>flag</name>
                            ?
                            <call>
                                <name>set</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>clear</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets a boolean BitField.&lt;/p&gt;
                *
                * @param holder the short data containing the bits we're
                * interested in
                * @param flag indicating whether to set or clear the bits
                * @return the value of holder with the specified bits set or
                * cleared
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>short</name>
                </type>
                <name>setShortBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>flag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>flag</name>
                            ?
                            <call>
                                <name>setShort</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>clearShort</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets a boolean BitField.&lt;/p&gt;
                *
                * @param holder the byte data containing the bits we're
                * interested in
                * @param flag indicating whether to set or clear the bits
                * @return the value of holder with the specified bits set or
                * cleared
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>byte</name>
                </type>
                <name>setByteBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>holder</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>flag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>flag</name>
                            ?
                            <call>
                                <name>setByte</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>clearByte</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>holder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
