<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\BooleanUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>math</name>.
            <name>NumberUtils</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Operations on boolean primitives and Boolean objects.&lt;/p&gt;
        *
        * &lt;p&gt;This class tries to handle &lt;code&gt;null&lt;/code&gt; input gracefully.
        * An exception will not be thrown for a &lt;code&gt;null&lt;/code&gt; input.
        * Each method documents its behaviour in more detail.&lt;/p&gt;
        *
        * &lt;p&gt;#ThreadSafe#&lt;/p&gt;
        * @author Apache Software Foundation
        * @author Matthew Hawthorne
        * @author Gary Gregory
        * @since 2.0
        * @version $Id: BooleanUtils.java 1057037 2011-01-09 21:35:32Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>BooleanUtils</name>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;&lt;code&gt;BooleanUtils&lt;/code&gt; instances should NOT be constructed in standard
                programming.
                * Instead, the class should be used as &lt;code&gt;BooleanUtils.toBooleanObject(true);&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean instance
                * to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>BooleanUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// Boolean utilities</comment>
            <comment type="line">//--------------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Negates the specified boolean.&lt;/p&gt;
                *
                * &lt;p&gt;If &lt;code&gt;null&lt;/code&gt; is passed in, &lt;code&gt;null&lt;/code&gt; will be
                returned.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.negate(Boolean.TRUE) = Boolean.FALSE;
                * BooleanUtils.negate(Boolean.FALSE) = Boolean.TRUE;
                * BooleanUtils.negate(null) = null;
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to negate, may be null
                * @return the negated Boolean, or &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                </type>
                <name>negate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <call>
                                <name><name>bool</name>.
                                    <name>booleanValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ?
                            <name><name>Boolean</name>.
                                <name>FALSE</name>
                            </name>
                            :
                            <name><name>Boolean</name>.
                                <name>TRUE</name>
                            </name>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// boolean Boolean methods</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks if a &lt;code&gt;Boolean&lt;/code&gt; value is &lt;code&gt;true&lt;/code&gt;,
                * handling &lt;code&gt;null&lt;/code&gt; by returning &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.isTrue(Boolean.TRUE) = true
                * BooleanUtils.isTrue(Boolean.FALSE) = false
                * BooleanUtils.isTrue(null) = false
                * &lt;/pre&gt;
                *
                * @param bool the boolean to check, null returns &lt;code&gt;false&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; only if the input is non-null and true
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isTrue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>bool</name>.
                                    <name>booleanValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? true : false
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if a &lt;code&gt;Boolean&lt;/code&gt; value is &lt;i&gt;not&lt;/i&gt; &lt;code&gt;true&lt;/code&gt;,
                * handling &lt;code&gt;null&lt;/code&gt; by returning &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.isNotTrue(Boolean.TRUE) = false
                * BooleanUtils.isNotTrue(Boolean.FALSE) = true
                * BooleanUtils.isNotTrue(null) = true
                * &lt;/pre&gt;
                *
                * @param bool the boolean to check, null returns &lt;code&gt;true&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the input is null or false
                * @since 2.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotTrue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <call>
                                <name>isTrue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bool</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if a &lt;code&gt;Boolean&lt;/code&gt; value is &lt;code&gt;false&lt;/code&gt;,
                * handling &lt;code&gt;null&lt;/code&gt; by returning &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.isFalse(Boolean.TRUE) = false
                * BooleanUtils.isFalse(Boolean.FALSE) = true
                * BooleanUtils.isFalse(null) = false
                * &lt;/pre&gt;
                *
                * @param bool the boolean to check, null returns &lt;code&gt;false&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; only if the input is non-null and false
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isFalse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>bool</name>.
                                    <name>booleanValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? false : true
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if a &lt;code&gt;Boolean&lt;/code&gt; value is &lt;i&gt;not&lt;/i&gt; &lt;code&gt;false&lt;/code&gt;,
                * handling &lt;code&gt;null&lt;/code&gt; by returning &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.isNotFalse(Boolean.TRUE) = true
                * BooleanUtils.isNotFalse(Boolean.FALSE) = false
                * BooleanUtils.isNotFalse(null) = true
                * &lt;/pre&gt;
                *
                * @param bool the boolean to check, null returns &lt;code&gt;true&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the input is null or true
                * @since 2.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotFalse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <call>
                                <name>isFalse</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bool</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Boolean factory that avoids creating new Boolean objecs all the time.&lt;/p&gt;
                *
                * &lt;p&gt;This method was added to JDK1.4 but is available here for earlier JDKs.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBooleanObject(false) = Boolean.FALSE
                * BooleanUtils.toBooleanObject(true) = Boolean.TRUE
                * &lt;/pre&gt;
                *
                * @param bool the boolean to convert
                * @return Boolean.TRUE or Boolean.FALSE as appropriate
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                </type>
                <name>toBooleanObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>bool</name>
                            ?
                            <name><name>Boolean</name>.
                                <name>TRUE</name>
                            </name>
                            :
                            <name><name>Boolean</name>.
                                <name>FALSE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a Boolean to a boolean handling &lt;code&gt;null&lt;/code&gt;
                * by returning &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBoolean(Boolean.TRUE) = true
                * BooleanUtils.toBoolean(Boolean.FALSE) = false
                * BooleanUtils.toBoolean(null) = false
                * &lt;/pre&gt;
                *
                * @param bool the boolean to convert
                * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;,
                * &lt;code&gt;null&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>toBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>bool</name>.
                                    <name>booleanValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? true : false
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a Boolean to a boolean handling &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true
                * BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false
                * BooleanUtils.toBooleanDefaultIfNull(null, true) = true
                * &lt;/pre&gt;
                *
                * @param bool the boolean to convert
                * @param valueIfNull the boolean value to return if &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>toBooleanDefaultIfNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>valueIfNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>valueIfNull</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>bool</name>.
                                    <name>booleanValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? true : false
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Integer to Boolean methods</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts an int to a boolean using the convention that &lt;code&gt;zero&lt;/code&gt;
                * is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBoolean(0) = false
                * BooleanUtils.toBoolean(1) = true
                * BooleanUtils.toBoolean(2) = true
                * &lt;/pre&gt;
                *
                * @param value the int to convert
                * @return &lt;code&gt;true&lt;/code&gt; if non-zero, &lt;code&gt;false&lt;/code&gt;
                * if zero
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>toBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                            == 0 ? false : true
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an int to a Boolean using the convention that &lt;code&gt;zero&lt;/code&gt;
                * is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBoolean(0) = Boolean.FALSE
                * BooleanUtils.toBoolean(1) = Boolean.TRUE
                * BooleanUtils.toBoolean(2) = Boolean.TRUE
                * &lt;/pre&gt;
                *
                * @param value the int to convert
                * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,
                * &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                </type>
                <name>toBooleanObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                            == 0 ?
                            <name><name>Boolean</name>.
                                <name>FALSE</name>
                            </name>
                            :
                            <name><name>Boolean</name>.
                                <name>TRUE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an Integer to a Boolean using the convention that &lt;code&gt;zero&lt;/code&gt;
                * is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will be converted to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBoolean(new Integer(0)) = Boolean.FALSE
                * BooleanUtils.toBoolean(new Integer(1)) = Boolean.TRUE
                * BooleanUtils.toBoolean(new Integer(null)) = null
                * &lt;/pre&gt;
                *
                * @param value the Integer to convert
                * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,
                * &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                </type>
                <name>toBooleanObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>value</name>.
                                    <name>intValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            == 0 ?
                            <name><name>Boolean</name>.
                                <name>FALSE</name>
                            </name>
                            :
                            <name><name>Boolean</name>.
                                <name>TRUE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an int to a boolean specifying the conversion values.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBoolean(0, 1, 0) = false
                * BooleanUtils.toBoolean(1, 1, 0) = true
                * BooleanUtils.toBoolean(2, 1, 2) = false
                * BooleanUtils.toBoolean(2, 2, 0) = true
                * &lt;/pre&gt;
                *
                * @param value the Integer to convert
                * @param trueValue the value to match for &lt;code&gt;true&lt;/code&gt;
                * @param falseValue the value to match for &lt;code&gt;false&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;
                * @throws IllegalArgumentException if no match
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>toBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>trueValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>falseValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>trueValue</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>value</name>
                                        ==
                                        <name>falseValue</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <comment type="line">// no match</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"The Integer did not match either specified value"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an Integer to a boolean specifying the conversion values.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false
                * BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true
                * BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false
                * BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true
                * BooleanUtils.toBoolean(null, null, new Integer(0)) = true
                * &lt;/pre&gt;
                *
                * @param value the Integer to convert
                * @param trueValue the value to match for &lt;code&gt;true&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @param falseValue the value to match for &lt;code&gt;false&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;
                * @throws IllegalArgumentException if no match
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>toBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>trueValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>falseValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>trueValue</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>true</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>falseValue</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>value</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>trueValue</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>value</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>falseValue</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <comment type="line">// no match</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"The Integer did not match either specified value"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an int to a Boolean specifying the conversion values.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE
                * BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE
                * BooleanUtils.toBooleanObject(3, 1, 2, 3) = null
                * &lt;/pre&gt;
                *
                * @param value the Integer to convert
                * @param trueValue the value to match for &lt;code&gt;true&lt;/code&gt;
                * @param falseValue the value to match for &lt;code&gt;false&lt;/code&gt;
                * @param nullValue the value to to match for &lt;code&gt;null&lt;/code&gt;
                * @return Boolean.TRUE, Boolean.FALSE, or &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException if no match
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                </type>
                <name>toBooleanObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>trueValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>falseValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nullValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>trueValue</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>Boolean</name>.
                                            <name>TRUE</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>value</name>
                                        ==
                                        <name>falseValue</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name><name>Boolean</name>.
                                                    <name>FALSE</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>value</name>
                                                ==
                                                <name>nullValue</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <comment type="line">// no match</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"The Integer did not match any specified value"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an Integer to a Boolean specifying the conversion values.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) =
                Boolean.TRUE
                * BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) =
                Boolean.FALSE
                * BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null
                * &lt;/pre&gt;
                *
                * @param value the Integer to convert
                * @param trueValue the value to match for &lt;code&gt;true&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @param falseValue the value to match for &lt;code&gt;false&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @param nullValue the value to to match for &lt;code&gt;null&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @return Boolean.TRUE, Boolean.FALSE, or &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException if no match
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                </type>
                <name>toBooleanObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>trueValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>falseValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>nullValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>trueValue</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name><name>Boolean</name>.
                                                        <name>TRUE</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>falseValue</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name><name>Boolean</name>.
                                                                <name>FALSE</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>nullValue</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return
                                                                <expr>
                                                                    <name>null</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>value</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>trueValue</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name><name>Boolean</name>.
                                                    <name>TRUE</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>value</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>falseValue</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name><name>Boolean</name>.
                                                            <name>FALSE</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>value</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>nullValue</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <comment type="line">// no match</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"The Integer did not match any specified value"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// Boolean to Integer methods</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts a boolean to an int using the convention that
                * &lt;code&gt;zero&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toInteger(true) = 1
                * BooleanUtils.toInteger(false) = 0
                * &lt;/pre&gt;
                *
                * @param bool the boolean to convert
                * @return one if &lt;code&gt;true&lt;/code&gt;, zero if &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>toInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>bool</name>
                            ? 1 : 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a boolean to an Integer using the convention that
                * &lt;code&gt;zero&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toIntegerObject(true) = new Integer(1)
                * BooleanUtils.toIntegerObject(false) = new Integer(0)
                * &lt;/pre&gt;
                *
                * @param bool the boolean to convert
                * @return one if &lt;code&gt;true&lt;/code&gt;, zero if &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Integer</name>
                </type>
                <name>toIntegerObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>bool</name>
                            ?
                            <name><name>NumberUtils</name>.
                                <name>INTEGER_ONE</name>
                            </name>
                            :
                            <name><name>NumberUtils</name>.
                                <name>INTEGER_ZERO</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a Boolean to a Integer using the convention that
                * &lt;code&gt;zero&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will be converted to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toIntegerObject(Boolean.TRUE) = new Integer(1)
                * BooleanUtils.toIntegerObject(Boolean.FALSE) = new Integer(0)
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to convert
                * @return one if Boolean.TRUE, zero if Boolean.FALSE, &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Integer</name>
                </type>
                <name>toIntegerObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>bool</name>.
                                    <name>booleanValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ?
                            <name><name>NumberUtils</name>.
                                <name>INTEGER_ONE</name>
                            </name>
                            :
                            <name><name>NumberUtils</name>.
                                <name>INTEGER_ZERO</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a boolean to an int specifying the conversion values.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toInteger(true, 1, 0) = 1
                * BooleanUtils.toInteger(false, 1, 0) = 0
                * &lt;/pre&gt;
                *
                * @param bool the to convert
                * @param trueValue the value to return if &lt;code&gt;true&lt;/code&gt;
                * @param falseValue the value to return if &lt;code&gt;false&lt;/code&gt;
                * @return the appropriate value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>toInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>trueValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>falseValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>bool</name>
                            ? <name>trueValue</name> :
                            <name>falseValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a Boolean to an int specifying the conversion values.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2) = 1
                * BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0
                * BooleanUtils.toInteger(null, 1, 0, 2) = 2
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to convert
                * @param trueValue the value to return if &lt;code&gt;true&lt;/code&gt;
                * @param falseValue the value to return if &lt;code&gt;false&lt;/code&gt;
                * @param nullValue the value to return if &lt;code&gt;null&lt;/code&gt;
                * @return the appropriate value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>toInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>trueValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>falseValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nullValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>nullValue</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>bool</name>.
                                    <name>booleanValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? <name>trueValue</name> :
                            <name>falseValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a boolean to an Integer specifying the conversion values.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0)) = new Integer(1)
                * BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0)
                * &lt;/pre&gt;
                *
                * @param bool the to convert
                * @param trueValue the value to return if &lt;code&gt;true&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @param falseValue the value to return if &lt;code&gt;false&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @return the appropriate value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Integer</name>
                </type>
                <name>toIntegerObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>trueValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>falseValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>bool</name>
                            ? <name>trueValue</name> :
                            <name>falseValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a Boolean to an Integer specifying the conversion values.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2)) = new
                Integer(1)
                * BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new
                Integer(0)
                * BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2)) = new Integer(2)
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to convert
                * @param trueValue the value to return if &lt;code&gt;true&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @param falseValue the value to return if &lt;code&gt;false&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @param nullValue the value to return if &lt;code&gt;null&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @return the appropriate value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Integer</name>
                </type>
                <name>toIntegerObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>trueValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>falseValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Integer</name>
                            </type>
                            <name>nullValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>nullValue</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>bool</name>.
                                    <name>booleanValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? <name>trueValue</name> :
                            <name>falseValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// String to Boolean methods</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts a String to a Boolean.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;'true'&lt;/code&gt;, &lt;code&gt;'on'&lt;/code&gt; or &lt;code&gt;'yes'&lt;/code&gt;
                * (case insensitive) will return &lt;code&gt;true&lt;/code&gt;.
                * &lt;code&gt;'false'&lt;/code&gt;, &lt;code&gt;'off'&lt;/code&gt; or &lt;code&gt;'no'&lt;/code&gt;
                * (case insensitive) will return &lt;code&gt;false&lt;/code&gt;.
                * Otherwise, &lt;code&gt;null&lt;/code&gt; is returned.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBooleanObject(null) = null
                * BooleanUtils.toBooleanObject("true") = Boolean.TRUE
                * BooleanUtils.toBooleanObject("false") = Boolean.FALSE
                * BooleanUtils.toBooleanObject("on") = Boolean.TRUE
                * BooleanUtils.toBooleanObject("ON") = Boolean.TRUE
                * BooleanUtils.toBooleanObject("off") = Boolean.FALSE
                * BooleanUtils.toBooleanObject("oFf") = Boolean.FALSE
                * BooleanUtils.toBooleanObject("blue") = null
                * &lt;/pre&gt;
                *
                * @param str the String to check
                * @return the Boolean value of the string,
                * &lt;code&gt;null&lt;/code&gt; if no match or &lt;code&gt;null&lt;/code&gt; input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                </type>
                <name>toBooleanObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Previously used equalsIgnoreCase, which was fast for interned 'true'.
                    </comment>
                    <comment type="line">// Non interned 'true' matched 15 times slower.</comment>
                    <comment type="line">//</comment>
                    <comment type="line">// Optimisation provides same performance as before for interned 'true'.
                    </comment>
                    <comment type="line">// Similar performance for null, 'false', and other strings not length 2/3/4.
                    </comment>
                    <comment type="line">// 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == "true"
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>Boolean</name>.
                                            <name>TRUE</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <switch>switch
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>1</expr>:
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch0</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>(<name>ch0</name> == 'y' || <name>ch0</name> == 'Y') ||
                                                (<name>ch0</name> == 't' || <name>ch0</name> == 'T')
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name><name>Boolean</name>.
                                                            <name>TRUE</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <if>if
                                        <condition>(
                                            <expr>(<name>ch0</name> == 'n' || <name>ch0</name> == 'N') ||
                                                (<name>ch0</name> == 'f' || <name>ch0</name> == 'F')
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name><name>Boolean</name>.
                                                            <name>FALSE</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            <case>case <expr>2</expr>:
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch0</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch1</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>1</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>(<name>ch0</name> == 'o' || <name>ch0</name> == 'O') &amp;&amp;
                                                (<name>ch1</name> == 'n' || <name>ch1</name> == 'N')
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name><name>Boolean</name>.
                                                            <name>TRUE</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <if>if
                                        <condition>(
                                            <expr>(<name>ch0</name> == 'n' || <name>ch0</name> == 'N') &amp;&amp;
                                                (<name>ch1</name> == 'o' || <name>ch1</name> == 'O')
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name><name>Boolean</name>.
                                                            <name>FALSE</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            <case>case <expr>3</expr>:
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch0</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch1</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>1</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch2</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>2</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>(<name>ch0</name> == 'y' || <name>ch0</name> == 'Y') &amp;&amp;
                                                (<name>ch1</name> == 'e' || <name>ch1</name> == 'E') &amp;&amp;
                                                (<name>ch2</name> == 's' || <name>ch2</name> == 'S')
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name><name>Boolean</name>.
                                                            <name>TRUE</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <if>if
                                        <condition>(
                                            <expr>(<name>ch0</name> == 'o' || <name>ch0</name> == 'O') &amp;&amp;
                                                (<name>ch1</name> == 'f' || <name>ch1</name> == 'F') &amp;&amp;
                                                (<name>ch2</name> == 'f' || <name>ch2</name> == 'F')
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name><name>Boolean</name>.
                                                            <name>FALSE</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            <case>case <expr>4</expr>:
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch0</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch1</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>1</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch2</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>2</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch3</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>3</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>(<name>ch0</name> == 't' || <name>ch0</name> == 'T') &amp;&amp;
                                                (<name>ch1</name> == 'r' || <name>ch1</name> == 'R') &amp;&amp;
                                                (<name>ch2</name> == 'u' || <name>ch2</name> == 'U') &amp;&amp;
                                                (<name>ch3</name> == 'e' || <name>ch3</name> == 'E')
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name><name>Boolean</name>.
                                                            <name>TRUE</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            <case>case <expr>5</expr>:
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch0</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch1</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>1</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch2</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>2</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch3</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>3</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>char</name>
                                            </type>
                                            <name>ch4</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>4</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>(<name>ch0</name> == 'f' || <name>ch0</name> == 'F') &amp;&amp;
                                                (<name>ch1</name> == 'a' || <name>ch1</name> == 'A') &amp;&amp;
                                                (<name>ch2</name> == 'l' || <name>ch2</name> == 'L') &amp;&amp;
                                                (<name>ch3</name> == 's' || <name>ch3</name> == 'S') &amp;&amp;
                                                (<name>ch4</name> == 'e' || <name>ch4</name> == 'E')
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name><name>Boolean</name>.
                                                            <name>FALSE</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <break>break;</break>
                                    }
                                </block>
                            </case>
                            }
                        </block>
                    </switch>

                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a String to a Boolean throwing an exception if no match.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBooleanObject("true", "true", "false", "null") = Boolean.TRUE
                * BooleanUtils.toBooleanObject("false", "true", "false", "null") = Boolean.FALSE
                * BooleanUtils.toBooleanObject("null", "true", "false", "null") = null
                * &lt;/pre&gt;
                *
                * @param str the String to check
                * @param trueString the String to match for &lt;code&gt;true&lt;/code&gt;
                * (case sensitive), may be &lt;code&gt;null&lt;/code&gt;
                * @param falseString the String to match for &lt;code&gt;false&lt;/code&gt;
                * (case sensitive), may be &lt;code&gt;null&lt;/code&gt;
                * @param nullString the String to match for &lt;code&gt;null&lt;/code&gt;
                * (case sensitive), may be &lt;code&gt;null&lt;/code&gt;
                * @return the Boolean value of the string,
                * &lt;code&gt;null&lt;/code&gt; if either the String matches &lt;code&gt;nullString&lt;/code&gt;
                * or if &lt;code&gt;null&lt;/code&gt; input and &lt;code&gt;nullString&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException if the String doesn't match
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                </type>
                <name>toBooleanObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>trueString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>falseString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>nullString</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>trueString</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name><name>Boolean</name>.
                                                        <name>TRUE</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>falseString</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name><name>Boolean</name>.
                                                                <name>FALSE</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>nullString</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return
                                                                <expr>
                                                                    <name>null</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>trueString</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name><name>Boolean</name>.
                                                    <name>TRUE</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>falseString</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name><name>Boolean</name>.
                                                            <name>FALSE</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>nullString</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <comment type="line">// no match</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"The String did not match any specified value"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// String to boolean methods</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts a String to a boolean (optimised for performance).&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;'true'&lt;/code&gt;, &lt;code&gt;'on'&lt;/code&gt; or &lt;code&gt;'yes'&lt;/code&gt;
                * (case insensitive) will return &lt;code&gt;true&lt;/code&gt;. Otherwise,
                * &lt;code&gt;false&lt;/code&gt; is returned.&lt;/p&gt;
                *
                * &lt;p&gt;This method performs 4 times faster (JDK1.4) than
                * &lt;code&gt;Boolean.valueOf(String)&lt;/code&gt;. However, this method accepts
                * 'on' and 'yes' as true values.
                *
                * &lt;pre&gt;
                * BooleanUtils.toBoolean(null) = false
                * BooleanUtils.toBoolean("true") = true
                * BooleanUtils.toBoolean("TRUE") = true
                * BooleanUtils.toBoolean("tRUe") = true
                * BooleanUtils.toBoolean("on") = true
                * BooleanUtils.toBoolean("yes") = true
                * BooleanUtils.toBoolean("false") = false
                * BooleanUtils.toBoolean("x gti") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check
                * @return the boolean value of the string, &lt;code&gt;false&lt;/code&gt; if no match or the String is
                null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>toBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toBoolean</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toBooleanObject</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>str</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a String to a Boolean throwing an exception if no match found.&lt;/p&gt;
                *
                * &lt;p&gt;null is returned if there is no match.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toBoolean("true", "true", "false") = true
                * BooleanUtils.toBoolean("false", "true", "false") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check
                * @param trueString the String to match for &lt;code&gt;true&lt;/code&gt;
                * (case sensitive), may be &lt;code&gt;null&lt;/code&gt;
                * @param falseString the String to match for &lt;code&gt;false&lt;/code&gt;
                * (case sensitive), may be &lt;code&gt;null&lt;/code&gt;
                * @return the boolean value of the string
                * @throws IllegalArgumentException if the String doesn't match
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>toBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>trueString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>falseString</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>trueString</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>true</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>falseString</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>trueString</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>falseString</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <comment type="line">// no match</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"The String did not match either specified value"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// Boolean to String methods</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts a Boolean to a String returning &lt;code&gt;'true'&lt;/code&gt;,
                * &lt;code&gt;'false'&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toStringTrueFalse(Boolean.TRUE) = "true"
                * BooleanUtils.toStringTrueFalse(Boolean.FALSE) = "false"
                * BooleanUtils.toStringTrueFalse(null) = null;
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to check
                * @return &lt;code&gt;'true'&lt;/code&gt;, &lt;code&gt;'false'&lt;/code&gt;,
                * or &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toStringTrueFalse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bool</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"true"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"false"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a Boolean to a String returning &lt;code&gt;'on'&lt;/code&gt;,
                * &lt;code&gt;'off'&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toStringOnOff(Boolean.TRUE) = "on"
                * BooleanUtils.toStringOnOff(Boolean.FALSE) = "off"
                * BooleanUtils.toStringOnOff(null) = null;
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to check
                * @return &lt;code&gt;'on'&lt;/code&gt;, &lt;code&gt;'off'&lt;/code&gt;,
                * or &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toStringOnOff</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bool</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"on"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"off"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a Boolean to a String returning &lt;code&gt;'yes'&lt;/code&gt;,
                * &lt;code&gt;'no'&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toStringYesNo(Boolean.TRUE) = "yes"
                * BooleanUtils.toStringYesNo(Boolean.FALSE) = "no"
                * BooleanUtils.toStringYesNo(null) = null;
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to check
                * @return &lt;code&gt;'yes'&lt;/code&gt;, &lt;code&gt;'no'&lt;/code&gt;,
                * or &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toStringYesNo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bool</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"yes"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"no"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a Boolean to a String returning one of the input Strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toString(Boolean.TRUE, "true", "false", null) = "true"
                * BooleanUtils.toString(Boolean.FALSE, "true", "false", null) = "false"
                * BooleanUtils.toString(null, "true", "false", null) = null;
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to check
                * @param trueString the String to return if &lt;code&gt;true&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @param falseString the String to return if &lt;code&gt;false&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @param nullString the String to return if &lt;code&gt;null&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @return one of the three input Strings
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>trueString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>falseString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>nullString</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bool</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>nullString</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>bool</name>.
                                    <name>booleanValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? <name>trueString</name> :
                            <name>falseString</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// boolean to String methods</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts a boolean to a String returning &lt;code&gt;'true'&lt;/code&gt;
                * or &lt;code&gt;'false'&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toStringTrueFalse(true) = "true"
                * BooleanUtils.toStringTrueFalse(false) = "false"
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to check
                * @return &lt;code&gt;'true'&lt;/code&gt;, &lt;code&gt;'false'&lt;/code&gt;,
                * or &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toStringTrueFalse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bool</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"true"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"false"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a boolean to a String returning &lt;code&gt;'on'&lt;/code&gt;
                * or &lt;code&gt;'off'&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toStringOnOff(true) = "on"
                * BooleanUtils.toStringOnOff(false) = "off"
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to check
                * @return &lt;code&gt;'on'&lt;/code&gt;, &lt;code&gt;'off'&lt;/code&gt;,
                * or &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toStringOnOff</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bool</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"on"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"off"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a boolean to a String returning &lt;code&gt;'yes'&lt;/code&gt;
                * or &lt;code&gt;'no'&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toStringYesNo(true) = "yes"
                * BooleanUtils.toStringYesNo(false) = "no"
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to check
                * @return &lt;code&gt;'yes'&lt;/code&gt;, &lt;code&gt;'no'&lt;/code&gt;,
                * or &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toStringYesNo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bool</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"yes"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"no"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a boolean to a String returning one of the input Strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.toString(true, "true", "false") = "true"
                * BooleanUtils.toString(false, "true", "false") = "false"
                * &lt;/pre&gt;
                *
                * @param bool the Boolean to check
                * @param trueString the String to return if &lt;code&gt;true&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @param falseString the String to return if &lt;code&gt;false&lt;/code&gt;,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @return one of the two input Strings
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>bool</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>trueString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>falseString</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>bool</name>
                            ? <name>trueString</name> :
                            <name>falseString</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// xor methods</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Performs an xor on a set of booleans.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.xor(new boolean[] { true, true }) = false
                * BooleanUtils.xor(new boolean[] { false, false }) = false
                * BooleanUtils.xor(new boolean[] { true, false }) = true
                * &lt;/pre&gt;
                *
                * @param array an array of &lt;code&gt;boolean&lt;code&gt;s
                * @return &lt;code&gt;true&lt;/code&gt; if the xor is successful.
                * @throws IllegalArgumentException if &lt;code&gt;array&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException if &lt;code&gt;array&lt;/code&gt; is empty.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>xor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Validates input</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The Array must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Array is empty"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// Loops through array, comparing each item</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>trueCount</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <comment type="line">// If item is true, and trueCount is &lt; 1, increments count</comment>
                            <comment type="line">// Else, xor fails</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>trueCount</name>
                                                    &lt; 1
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr><name>trueCount</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <comment type="line">// Returns true if there was exactly 1 true item</comment>
                    <return>return
                        <expr>
                            <name>trueCount</name>
                            == 1
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Performs an xor on an array of Booleans.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) = Boolean.FALSE
                * BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE
                * BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE }) = Boolean.TRUE
                * &lt;/pre&gt;
                *
                * @param array an array of &lt;code&gt;Boolean&lt;code&gt;s
                * @return &lt;code&gt;true&lt;/code&gt; if the xor is successful.
                * @throws IllegalArgumentException if &lt;code&gt;array&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException if &lt;code&gt;array&lt;/code&gt; is empty.
                * @throws IllegalArgumentException if &lt;code&gt;array&lt;/code&gt; contains a &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Boolean</name>
                </type>
                <name>xor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The Array must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Array is empty"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                                <index>[]</index>
                            </type>
                            <name>primitive</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>primitive</name>
                                    =
                                    <call>
                                        <name><name>ArrayUtils</name>.
                                            <name>toPrimitive</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NullPointerException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The array must not contain any null elements"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    <return>return
                        <expr>
                            <call>
                                <name>xor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>primitive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ?
                            <name><name>Boolean</name>.
                                <name>TRUE</name>
                            </name>
                            :
                            <name><name>Boolean</name>.
                                <name>FALSE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
