<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\CharSet.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;A set of characters.&lt;/p&gt;
        *
        * &lt;p&gt;Instances are immutable, but instances of subclasses may not be.&lt;/p&gt;
        *
        * &lt;p&gt;#ThreadSafe#&lt;/p&gt;
        * @author Apache Software Foundation
        * @author Phil Steitz
        * @author Pete Gieser
        * @author Gary Gregory
        * @since 1.0
        * @version $Id: CharSet.java 1056988 2011-01-09 17:58:53Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CharSet</name>
        <super>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support. Lang version 2.0.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>5947847346149275958L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A CharSet defining no characters.
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharSet</name>
                    </type>
                    <name>EMPTY</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>String</name>)
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A CharSet defining ASCII alphabetic characters "a-zA-Z".
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharSet</name>
                    </type>
                    <name>ASCII_ALPHA</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"a-zA-Z"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A CharSet defining ASCII alphabetic characters "a-z".
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharSet</name>
                    </type>
                    <name>ASCII_ALPHA_LOWER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"a-z"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A CharSet defining ASCII alphabetic characters "A-Z".
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharSet</name>
                    </type>
                    <name>ASCII_ALPHA_UPPER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"A-Z"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A CharSet defining ASCII alphabetic characters "0-9".
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharSet</name>
                    </type>
                    <name>ASCII_NUMERIC</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"0-9"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A Map of the common cases used in the factory.
                * Subclasses can add more common patterns if desired
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Map</name>
                    </type>
                    <name>COMMON</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>synchronizedMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>HashMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            static
            <block>{
                <constructor_decl>
                    <name><name>COMMON</name>.
                        <name>put</name>
                    </name>
                    <parameter_list>(
                        <param>
                            <decl>
                                <type>
                                    <name>null</name>
                                </type>
                            </decl>
                        </param>
                        ,
                        <param>
                            <decl>
                                <type>
                                    <name>EMPTY</name>
                                </type>
                            </decl>
                        </param>
                        )
                    </parameter_list>
                    ;
                </constructor_decl>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>COMMON</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>""</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>COMMON</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>"a-zA-Z"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ASCII_ALPHA</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>COMMON</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>"A-Za-z"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ASCII_ALPHA</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>COMMON</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>"a-z"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ASCII_ALPHA_LOWER</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>COMMON</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>"A-Z"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ASCII_ALPHA_UPPER</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>COMMON</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>"0-9"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>ASCII_NUMERIC</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <comment type="javadoc">/** The set of CharRange objects. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Set</name>
                    </type>
                    <name>set</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>synchronizedSet</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>HashSet</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Factory method to create a new CharSet using a special syntax.&lt;/p&gt;
                *
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;null&lt;/code&gt; or empty string ("")
                * - set containing no characters&lt;/li&gt;
                * &lt;li&gt;Single character, such as "a"
                * - set containing just that character&lt;/li&gt;
                * &lt;li&gt;Multi character, such as "a-e"
                * - set containing characters from one character to the other&lt;/li&gt;
                * &lt;li&gt;Negated, such as "^a" or "^a-e"
                * - set containing all characters except those defined&lt;/li&gt;
                * &lt;li&gt;Combinations, such as "abe-g"
                * - set containing all the characters from the individual sets&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;p&gt;The matching order is:&lt;/p&gt;
                * &lt;ol&gt;
                * &lt;li&gt;Negated multi character range, such as "^a-e"
                * &lt;li&gt;Ordinary multi character range, such as "a-e"
                * &lt;li&gt;Negated single character, such as "^a"
                * &lt;li&gt;Ordinary single character, such as "a"
                * &lt;/ol&gt;
                * &lt;p&gt;Matching works left to right. Once a match is found the
                * search starts again from the next character.&lt;/p&gt;
                *
                * &lt;p&gt;If the same range is defined twice using the same syntax, only
                * one range will be kept.
                * Thus, "a-ca-c" creates only one range of "a-c".&lt;/p&gt;
                *
                * &lt;p&gt;If the start and end of a range are in the wrong order,
                * they are reversed. Thus "a-e" is the same as "e-a".
                * As a result, "a-ee-a" would create only one range,
                * as the "a-e" and "e-a" are the same.&lt;/p&gt;
                *
                * &lt;p&gt;The set of characters represented is the union of the specified ranges.&lt;/p&gt;
                *
                * &lt;p&gt;All CharSet objects returned by this method will be immutable.&lt;/p&gt;
                *
                * @param setStr the String describing the set, may be null
                * @return a CharSet instance
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>CharSet</name>
                </type>
                <name>getInstance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>setStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>set</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>COMMON</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>setStr</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>set</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(<name>CharSet</name>)
                                        <name>set</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>CharSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>setStr</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructs a new CharSet using the set syntax.
                * Each string is merged in with the set.&lt;/p&gt;
                *
                * @param setStrs Strings to merge into the initial set, may be null
                * @return a CharSet instance
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>CharSet</name>
                </type>
                <name>getInstance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>setStrs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>setStrs</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>CharSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>setStrs</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Constructs a new CharSet using the set syntax.&lt;/p&gt;
                *
                * @param setStr the String describing the set, may be null
                * @since 2.0
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>CharSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>setStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>setStr</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructs a new CharSet using the set syntax.
                * Each string is merged in with the set.&lt;/p&gt;
                *
                * @param set Strings to merge into the initial set
                * @throws NullPointerException if set is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>CharSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <name><name>set</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>add</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>set</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Add a set definition string to the &lt;code&gt;CharSet&lt;/code&gt;.&lt;/p&gt;
                *
                * @param str set definition string
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>pos</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>remainder</name> =
                                    <init>
                                        <expr>(<name>len</name> - <name>pos</name>)
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>remainder</name>
                                        &gt;= 4 &amp;&amp;
                                        <call>
                                            <name><name>str</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>pos</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == '^' &amp;&amp;
                                        <call>
                                            <name><name>str</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>pos</name>
                                                        + 2
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == '-'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// negated range</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>set</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>CharRange</name>.
                                                                        <name>isNotIn</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>str</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>pos</name>
                                                                                                + 1
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>str</name>.
                                                                                        <name>charAt</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>pos</name>
                                                                                                + 3
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>pos</name>
                                                += 4
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>remainder</name>
                                                &gt;= 3 &amp;&amp;
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>pos</name>
                                                                + 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                == '-'
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// range</comment>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>set</name>.
                                                                <name>add</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>CharRange</name>.
                                                                                <name>isIn</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>str</name>.
                                                                                                <name>charAt</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>pos</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>str</name>.
                                                                                                <name>charAt</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>pos</name>
                                                                                                        + 2
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>pos</name>
                                                        += 3
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>remainder</name>
                                                        &gt;= 2 &amp;&amp;
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>pos</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        == '^'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// negated char</comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>set</name>.
                                                                        <name>add</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>CharRange</name>.
                                                                                        <name>isNot</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        str</name>.
                                                                                                        <name>charAt
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    pos
                                                                                                                </name>
                                                                                                                + 1
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>pos</name>
                                                                += 2
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <comment type="line">// char</comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>set</name>.
                                                                        <name>add</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>CharRange</name>.
                                                                                        <name>is</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        str</name>.
                                                                                                        <name>charAt
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    pos
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>pos</name>
                                                                += 1
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the internal set as an array of CharRange objects.&lt;/p&gt;
                *
                * @return an array of immutable CharRange objects
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>CharRange</name>
                    <index>[]</index>
                </type>
                <name>getCharRanges</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>CharRange</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>set</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>CharRange</name>
                                                <index>[
                                                    <expr>
                                                        <call>
                                                            <name><name>set</name>.
                                                                <name>size</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Does the &lt;code&gt;CharSet&lt;/code&gt; contain the specified
                * character &lt;code&gt;ch&lt;/code&gt;.&lt;/p&gt;
                *
                * @param ch the character to check for
                * @return &lt;code&gt;true&lt;/code&gt; if the set contains the characters
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Iterator</name>
                                </type>
                                <name>it</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>set</name>.
                                                <name>iterator</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>CharRange</name>
                                    </type>
                                    <name>range</name> =
                                    <init>
                                        <expr>(<name>CharRange</name>)
                                            <call>
                                                <name><name>it</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>range</name>.
                                                <name>contains</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ch</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Basics</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Compares two CharSet objects, returning true if they represent
                * exactly the same set of characters defined in the same way.&lt;/p&gt;
                *
                * &lt;p&gt;The two sets &lt;code&gt;abc&lt;/code&gt; and &lt;code&gt;a-c&lt;/code&gt; are &lt;i&gt;not&lt;/i&gt;
                * equal according to this method.&lt;/p&gt;
                *
                * @param obj the object to compare to
                * @return true if equal
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                <name>instanceof</name>
                                <name>CharSet</name> == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>CharSet</name>
                            </type>
                            <name>other</name> =
                            <init>
                                <expr>(<name>CharSet</name>)
                                    <name>obj</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>set</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>other</name>.
                                                <name>set</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets a hashCode compatible with the equals method.&lt;/p&gt;
                *
                * @return a suitable hashCode
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>89 +
                            <call>
                                <name><name>set</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets a string representation of the set.&lt;/p&gt;
                *
                * @return string representation of the set
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>set</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
