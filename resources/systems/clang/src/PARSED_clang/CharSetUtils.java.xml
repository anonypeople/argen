<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\CharSetUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>text</name>.
            <name>StrBuilder</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Operations on &lt;code&gt;CharSet&lt;/code&gt;s.&lt;/p&gt;
        *
        * &lt;p&gt;This class handles &lt;code&gt;null&lt;/code&gt; input gracefully.
        * An exception will not be thrown for a &lt;code&gt;null&lt;/code&gt; input.
        * Each method documents its behaviour in more detail.&lt;/p&gt;
        *
        * &lt;p&gt;#ThreadSafe#&lt;/p&gt;
        * @see CharSet
        * @author Apache Software Foundation
        * @author Phil Steitz
        * @author Gary Gregory
        * @since 1.0
        * @version $Id: CharSetUtils.java 1057072 2011-01-10 01:55:57Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CharSetUtils</name>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;CharSetUtils instances should NOT be constructed in standard programming.
                * Instead, the class should be used as &lt;code&gt;CharSetUtils.evaluateSet(null);&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean instance
                * to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>CharSetUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// Factory</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Creates a &lt;code&gt;CharSet&lt;/code&gt; instance which allows a certain amount of
                * set logic to be performed.&lt;/p&gt;
                * &lt;p&gt;The syntax is:&lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&amp;quot;aeio&amp;quot; which implies 'a','e',..&lt;/li&gt;
                * &lt;li&gt;&amp;quot;^e&amp;quot; implies not e.&lt;/li&gt;
                * &lt;li&gt;&amp;quot;ej-m&amp;quot; implies e,j-&amp;gt;m. e,j,k,l,m.&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;pre&gt;
                * CharSetUtils.evaluateSet(null) = null
                * CharSetUtils.evaluateSet([]) = CharSet matching nothing
                * CharSetUtils.evaluateSet(["a-e"]) = CharSet matching a,b,c,d,e
                * &lt;/pre&gt;
                *
                * @param set the set, may be null
                * @return a CharSet instance, &lt;code&gt;null&lt;/code&gt; if null input
                * @deprecated Use {@link CharSet#getInstance(String[])}.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>CharSet</name>
                </type>
                <name>evaluateSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>set</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>CharSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Squeeze</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Squeezes any repetitions of a character that is mentioned in the
                * supplied set.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharSetUtils.squeeze(null, *) = null
                * CharSetUtils.squeeze("", *) = ""
                * CharSetUtils.squeeze(*, null) = *
                * CharSetUtils.squeeze(*, "") = *
                * CharSetUtils.squeeze("hello", "k-p") = "helo"
                * CharSetUtils.squeeze("hello", "a-e") = "hello"
                * &lt;/pre&gt;
                *
                * @see CharSet#getInstance(java.lang.String) for set-syntax.
                * @param str the string to squeeze, may be null
                * @param set the character set to use for manipulation, may be null
                * @return modified String, &lt;code&gt;null&lt;/code&gt; if null string input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>squeeze</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>strs</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>String</name>
                                        <index>[<expr>1</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>strs</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <name>set</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>squeeze</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>strs</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Squeezes any repetitions of a character that is mentioned in the
                * supplied set.&lt;/p&gt;
                *
                * &lt;p&gt;An example is:&lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;squeeze(&amp;quot;hello&amp;quot;, {&amp;quot;el&amp;quot;}) =&gt; &amp;quot;helo&amp;quot;&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * @see CharSet#getInstance(java.lang.String) for set-syntax.
                * @param str the string to squeeze, may be null
                * @param set the character set to use for manipulation, may be null
                * @return modified String, &lt;code&gt;null&lt;/code&gt; if null string input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>squeeze</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>CharSet</name>
                            </type>
                            <name>chars</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>CharSet</name>.
                                            <name>getInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>set</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buffer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>chrs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <name><name>chrs</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>lastChar</name> =
                            <init>
                                <expr>' '</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>' '</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>ch</name>
                                    =
                                    <name>
                                        <name>chrs</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>chars</name>.
                                                <name>contains</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ch</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>(<name>ch</name> == <name>lastChar</name>) &amp;&amp; (<name>i
                                                </name> != 0)
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>ch</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>lastChar</name>
                                    =
                                    <name>ch</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buffer</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Count</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Takes an argument in set-syntax, see evaluateSet,
                * and returns the number of characters present in the specified string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharSetUtils.count(null, *) = 0
                * CharSetUtils.count("", *) = 0
                * CharSetUtils.count(*, null) = 0
                * CharSetUtils.count(*, "") = 0
                * CharSetUtils.count("hello", "k-p") = 3
                * CharSetUtils.count("hello", "a-e") = 1
                * &lt;/pre&gt;
                *
                * @see CharSet#getInstance(java.lang.String) for set-syntax.
                * @param str String to count characters in, may be null
                * @param set String set of characters to count, may be null
                * @return character count, zero if null string input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>count</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>strs</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>String</name>
                                        <index>[<expr>1</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>strs</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <name>set</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>count</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>strs</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Takes an argument in set-syntax, see evaluateSet,
                * and returns the number of characters present in the specified string.&lt;/p&gt;
                *
                * &lt;p&gt;An example would be:&lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;count(&amp;quot;hello&amp;quot;, {&amp;quot;c-f&amp;quot;, &amp;quot;o&amp;quot;}) returns
                2.&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * @see CharSet#getInstance(java.lang.String) for set-syntax.
                * @param str String to count characters in, may be null
                * @param set String[] set of characters to count, may be null
                * @return character count, zero if null string input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>count</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>CharSet</name>
                            </type>
                            <name>chars</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>CharSet</name>.
                                            <name>getInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>set</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>chrs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <name><name>chrs</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>chars</name>.
                                                <name>contains</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>chrs</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>count</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>count</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Keep</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Takes an argument in set-syntax, see evaluateSet,
                * and keeps any of characters present in the specified string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharSetUtils.keep(null, *) = null
                * CharSetUtils.keep("", *) = ""
                * CharSetUtils.keep(*, null) = ""
                * CharSetUtils.keep(*, "") = ""
                * CharSetUtils.keep("hello", "hl") = "hll"
                * CharSetUtils.keep("hello", "le") = "ell"
                * &lt;/pre&gt;
                *
                * @see CharSet#getInstance(java.lang.String) for set-syntax.
                * @param str String to keep characters from, may be null
                * @param set String set of characters to keep, may be null
                * @return modified String, &lt;code&gt;null&lt;/code&gt; if null string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>keep</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0 ||
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>strs</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>String</name>
                                        <index>[<expr>1</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>strs</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <name>set</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>keep</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>strs</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Takes an argument in set-syntax, see evaluateSet,
                * and keeps any of characters present in the specified string.&lt;/p&gt;
                *
                * &lt;p&gt;An example would be:&lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;keep(&amp;quot;hello&amp;quot;, {&amp;quot;c-f&amp;quot;, &amp;quot;o&amp;quot;})
                * returns &amp;quot;eo&amp;quot;&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * @see CharSet#getInstance(java.lang.String) for set-syntax.
                * @param str String to keep characters from, may be null
                * @param set String[] set of characters to keep, may be null
                * @return modified String, &lt;code&gt;null&lt;/code&gt; if null string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>keep</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0 ||
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>modify</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Delete</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Takes an argument in set-syntax, see evaluateSet,
                * and deletes any of characters present in the specified string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharSetUtils.delete(null, *) = null
                * CharSetUtils.delete("", *) = ""
                * CharSetUtils.delete(*, null) = *
                * CharSetUtils.delete(*, "") = *
                * CharSetUtils.delete("hello", "hl") = "eo"
                * CharSetUtils.delete("hello", "le") = "ho"
                * &lt;/pre&gt;
                *
                * @see CharSet#getInstance(java.lang.String) for set-syntax.
                * @param str String to delete characters from, may be null
                * @param set String set of characters to delete, may be null
                * @return modified String, &lt;code&gt;null&lt;/code&gt; if null string input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>delete</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>strs</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>String</name>
                                        <index>[<expr>1</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>strs</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <name>set</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>delete</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>strs</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Takes an argument in set-syntax, see evaluateSet,
                * and deletes any of characters present in the specified string.&lt;/p&gt;
                *
                * &lt;p&gt;An example would be:&lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;delete(&amp;quot;hello&amp;quot;, {&amp;quot;c-f&amp;quot;, &amp;quot;o&amp;quot;}) returns
                * &amp;quot;hll&amp;quot;&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * @see CharSet#getInstance(java.lang.String) for set-syntax.
                * @param str String to delete characters from, may be null
                * @param set String[] set of characters to delete, may be null
                * @return modified String, &lt;code&gt;null&lt;/code&gt; if null string input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>delete</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>modify</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Implementation of delete and keep
                *
                * @param str String to modify characters within
                * @param set String[] set of characters to modify
                * @param expect whether to evaluate on match, or non-match
                * @return modified String
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>modify</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expect</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>CharSet</name>
                            </type>
                            <name>chars</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>CharSet</name>.
                                            <name>getInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>set</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buffer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>chrs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <name><name>chrs</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>chars</name>.
                                                <name>contains</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>chrs</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ==
                                        <name>expect</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>chrs</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buffer</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Translate</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Translate characters in a String.
                * This is a multi character search and replace routine.&lt;/p&gt;
                *
                * &lt;p&gt;An example is:&lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;translate(&amp;quot;hello&amp;quot;, &amp;quot;ho&amp;quot;, &amp;quot;jy&amp;quot;)
                * =&amp;gt; jelly&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;p&gt;If the length of characters to search for is greater than the
                * length of characters to replace, then the last character is
                * used.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharSetUtils.translate(null, *, *) = null
                * CharSetUtils.translate("", *, *) = ""
                * &lt;/pre&gt;
                *
                * @param str String to replace characters in, may be null
                * @param searchChars a set of characters to search for, must not be null
                * @param replaceChars a set of characters to replace, must not be null or empty (&amp;quot;&amp;quot;)
                * @return translated String, &lt;code&gt;null&lt;/code&gt; if null string input
                * @throws NullPointerException if &lt;code&gt;searchChars&lt;/code&gt; or &lt;code&gt;replaceChars&lt;/code&gt;
                * is &lt;code&gt;null&lt;/code&gt;
                * @throws ArrayIndexOutOfBoundsException if &lt;code&gt;replaceChars&lt;/code&gt; is empty (&amp;quot;&amp;quot;)
                * @deprecated Use {@link StringUtils#replaceChars(String, String, String)}.
                * Method will be removed in Commons Lang 3.0.
                * NOTE: StringUtils#replaceChars behaves differently when 'searchChars' is longer
                * than 'replaceChars'. CharSetUtils#translate will use the last char of the replacement
                * string whereas StringUtils#replaceChars will delete
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>translate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchChars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>replaceChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buffer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>chrs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>withChrs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>replaceChars</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <name><name>chrs</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>withMax</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>replaceChars</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>idx</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>searchChars</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>chrs</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>idx</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>idx</name>
                                                    &gt;
                                                    <name>withMax</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>idx</name>
                                                            =
                                                            <name>withMax</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>withChrs</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>idx</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>chrs</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buffer</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
