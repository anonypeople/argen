<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\CharUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * &lt;p&gt;Operations on char primitives and Character objects.&lt;/p&gt;
        *
        * &lt;p&gt;This class tries to handle &lt;code&gt;null&lt;/code&gt; input gracefully.
        * An exception will not be thrown for a &lt;code&gt;null&lt;/code&gt; input.
        * Each method documents its behaviour in more detail.&lt;/p&gt;
        *
        * &lt;p&gt;#ThreadSafe#&lt;/p&gt;
        * @author Apache Software Foundation
        * @since 2.1
        * @version $Id: CharUtils.java 1056988 2011-01-09 17:58:53Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CharUtils</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>CHAR_STRING</name> =
                    <init>
                        <expr>"\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007" +
                            "\b\t\n\u000b\f\r\u000e\u000f" +
                            "\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017" +
                            "\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f" +
                            "\u0020\u0021\"\u0023\u0024\u0025\u0026\u0027" +
                            "\u0028\u0029\u002a\u002b\u002c\u002d\u002e\u002f" +
                            "\u0030\u0031\u0032\u0033\u0034\u0035\u0036\u0037" +
                            "\u0038\u0039\u003a\u003b\u003c\u003d\u003e\u003f" +
                            "\u0040\u0041\u0042\u0043\u0044\u0045\u0046\u0047" +
                            "\u0048\u0049\u004a\u004b\u004c\u004d\u004e\u004f" +
                            "\u0050\u0051\u0052\u0053\u0054\u0055\u0056\u0057" +
                            "\u0058\u0059\u005a\u005b\\\u005d\u005e\u005f" +
                            "\u0060\u0061\u0062\u0063\u0064\u0065\u0066\u0067" +
                            "\u0068\u0069\u006a\u006b\u006c\u006d\u006e\u006f" +
                            "\u0070\u0071\u0072\u0073\u0074\u0075\u0076\u0077" +
                            "\u0078\u0079\u007a\u007b\u007c\u007d\u007e\u007f"
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>CHAR_STRING_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>String</name>
                                <index>[<expr>128</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Character</name>
                        <index>[]</index>
                    </type>
                    <name>CHAR_ARRAY</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>Character</name>
                                <index>[<expr>128</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;code&gt;\u000a&lt;/code&gt; linefeed LF ('\n').
                *
                * @see &lt;a href="http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#101089"&gt;JLF:
                Escape Sequences
                * for Character and String Literals&lt;/a&gt;
                * @since 2.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>LF</name> =
                    <init>
                        <expr>'\n'</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;code&gt;\u000d&lt;/code&gt; carriage return CR ('\r').
                *
                * @see &lt;a href="http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#101089"&gt;JLF:
                Escape Sequences
                * for Character and String Literals&lt;/a&gt;
                * @since 2.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>CR</name> =
                    <init>
                        <expr>'\r'</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            static
            <block>{
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>127</expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &gt;= 0
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>--
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>CHAR_STRING_ARRAY</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>
                                    <name><name>CHAR_STRING</name>.
                                        <name>substring</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>i</name>
                                                + 1
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>CHAR_ARRAY</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                = new
                                <call>
                                    <name>Character</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(<name>char</name>)
                                                <name>i</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                }
            </block>

            <comment type="javadoc">/**
                * &lt;p&gt;&lt;code&gt;CharUtils&lt;/code&gt; instances should NOT be constructed in standard
                programming.
                * Instead, the class should be used as &lt;code&gt;CharUtils.toString('c');&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean instance
                * to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>CharUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts the character to a Character.&lt;/p&gt;
                *
                * &lt;p&gt;For ASCII 7 bit characters, this uses a cache that will return the
                * same Character object each time.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toCharacterObject(' ') = ' '
                * CharUtils.toCharacterObject('A') = 'A'
                * &lt;/pre&gt;
                *
                * @param ch the character to convert
                * @return a Character of the specified character
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Character</name>
                </type>
                <name>toCharacterObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &lt;
                                <name><name>CHAR_ARRAY</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>
                                            <name>CHAR_ARRAY</name>
                                            <index>[
                                                <expr>
                                                    <name>ch</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>Character</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the String to a Character using the first character, returning
                * null for empty Strings.&lt;/p&gt;
                *
                * &lt;p&gt;For ASCII 7 bit characters, this uses a cache that will return the
                * same Character object each time.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toCharacterObject(null) = null
                * CharUtils.toCharacterObject("") = null
                * CharUtils.toCharacterObject("A") = 'A'
                * CharUtils.toCharacterObject("BA") = 'B'
                * &lt;/pre&gt;
                *
                * @param str the character to convert
                * @return the Character value of the first letter of the String
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Character</name>
                </type>
                <name>toCharacterObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>toCharacterObject</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts the Character to a char throwing an exception for &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toChar(null) = IllegalArgumentException
                * CharUtils.toChar(' ') = ' '
                * CharUtils.toChar('A') = 'A'
                * &lt;/pre&gt;
                *
                * @param ch the character to convert
                * @return the char value of the Character
                * @throws IllegalArgumentException if the Character is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                </type>
                <name>toChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Character</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The Character must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>ch</name>.
                                    <name>charValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the Character to a char handling &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toChar(null, 'X') = 'X'
                * CharUtils.toChar(' ', 'X') = ' '
                * CharUtils.toChar('A', 'X') = 'A'
                * &lt;/pre&gt;
                *
                * @param ch the character to convert
                * @param defaultValue the value to use if the Character is null
                * @return the char value of the Character or the default if null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                </type>
                <name>toChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Character</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>defaultValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>defaultValue</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>ch</name>.
                                    <name>charValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts the String to a char using the first character, throwing
                * an exception on empty Strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toChar(null) = IllegalArgumentException
                * CharUtils.toChar("") = IllegalArgumentException
                * CharUtils.toChar("A") = 'A'
                * CharUtils.toChar("BA") = 'B'
                * &lt;/pre&gt;
                *
                * @param str the character to convert
                * @return the char value of the first letter of the String
                * @throws IllegalArgumentException if the String is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                </type>
                <name>toChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The String must not be empty"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>charAt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the String to a char using the first character, defaulting
                * the value on empty Strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toChar(null, 'X') = 'X'
                * CharUtils.toChar("", 'X') = 'X'
                * CharUtils.toChar("A", 'X') = 'A'
                * CharUtils.toChar("BA", 'X') = 'B'
                * &lt;/pre&gt;
                *
                * @param str the character to convert
                * @param defaultValue the value to use if the Character is null
                * @return the char value of the first letter of the String or the default if null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                </type>
                <name>toChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>defaultValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>defaultValue</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>charAt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts the character to the Integer it represents, throwing an
                * exception if the character is not numeric.&lt;/p&gt;
                *
                * &lt;p&gt;This method coverts the char '1' to the int 1 and so on.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toIntValue('3') = 3
                * CharUtils.toIntValue('A') = IllegalArgumentException
                * &lt;/pre&gt;
                *
                * @param ch the character to convert
                * @return the int value of the character
                * @throws IllegalArgumentException if the character is not ASCII numeric
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>toIntValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isAsciiNumeric</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>ch</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The character " + <name>ch</name> + " is not in the range '0'
                                                        - '9'"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>ch</name>
                            - 48
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the character to the Integer it represents, throwing an
                * exception if the character is not numeric.&lt;/p&gt;
                *
                * &lt;p&gt;This method coverts the char '1' to the int 1 and so on.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toIntValue('3', -1) = 3
                * CharUtils.toIntValue('A', -1) = -1
                * &lt;/pre&gt;
                *
                * @param ch the character to convert
                * @param defaultValue the default value to use if the character is not numeric
                * @return the int value of the character
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>toIntValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>defaultValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isAsciiNumeric</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>ch</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>defaultValue</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>ch</name>
                            - 48
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the character to the Integer it represents, throwing an
                * exception if the character is not numeric.&lt;/p&gt;
                *
                * &lt;p&gt;This method coverts the char '1' to the int 1 and so on.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toIntValue(null) = IllegalArgumentException
                * CharUtils.toIntValue('3') = 3
                * CharUtils.toIntValue('A') = IllegalArgumentException
                * &lt;/pre&gt;
                *
                * @param ch the character to convert, not null
                * @return the int value of the character
                * @throws IllegalArgumentException if the Character is not ASCII numeric or is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>toIntValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Character</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The character must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>toIntValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ch</name>.
                                                    <name>charValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the character to the Integer it represents, throwing an
                * exception if the character is not numeric.&lt;/p&gt;
                *
                * &lt;p&gt;This method coverts the char '1' to the int 1 and so on.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toIntValue(null, -1) = -1
                * CharUtils.toIntValue('3', -1) = 3
                * CharUtils.toIntValue('A', -1) = -1
                * &lt;/pre&gt;
                *
                * @param ch the character to convert
                * @param defaultValue the default value to use if the character is not numeric
                * @return the int value of the character
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>toIntValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Character</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>defaultValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>defaultValue</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>toIntValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ch</name>.
                                                    <name>charValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>defaultValue</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts the character to a String that contains the one character.&lt;/p&gt;
                *
                * &lt;p&gt;For ASCII 7 bit characters, this uses a cache that will return the
                * same String object each time.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toString(' ') = " "
                * CharUtils.toString('A') = "A"
                * &lt;/pre&gt;
                *
                * @param ch the character to convert
                * @return a String containing the one specified character
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &lt; 128
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>
                                            <name>CHAR_STRING_ARRAY</name>
                                            <index>[
                                                <expr>
                                                    <name>ch</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>String</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>char</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>ch</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the character to a String that contains the one character.&lt;/p&gt;
                *
                * &lt;p&gt;For ASCII 7 bit characters, this uses a cache that will return the
                * same String object each time.&lt;/p&gt;
                *
                * &lt;p&gt;If &lt;code&gt;null&lt;/code&gt; is passed in, &lt;code&gt;null&lt;/code&gt; will be
                returned.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.toString(null) = null
                * CharUtils.toString(' ') = " "
                * CharUtils.toString('A') = "A"
                * &lt;/pre&gt;
                *
                * @param ch the character to convert
                * @return a String containing the one specified character
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Character</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ch</name>.
                                                    <name>charValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//--------------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts the string to the unicode format '\u0020'.&lt;/p&gt;
                *
                * &lt;p&gt;This format is the Java source code format.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.unicodeEscaped(' ') = "\u0020"
                * CharUtils.unicodeEscaped('A') = "\u0041"
                * &lt;/pre&gt;
                *
                * @param ch the character to convert
                * @return the escaped unicode string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>unicodeEscaped</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &lt; 0x10
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>"\\u000" +
                                        <call>
                                            <name><name>Integer</name>.
                                                <name>toHexString</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ch</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>ch</name>
                                        &lt; 0x100
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>"\\u00" +
                                                <call>
                                                    <name><name>Integer</name>.
                                                        <name>toHexString</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ch</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>ch</name>
                                                &lt; 0x1000
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>"\\u0" +
                                                        <call>
                                                            <name><name>Integer</name>.
                                                                <name>toHexString</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>"\\u" +
                            <call>
                                <name><name>Integer</name>.
                                    <name>toHexString</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the string to the unicode format '\u0020'.&lt;/p&gt;
                *
                * &lt;p&gt;This format is the Java source code format.&lt;/p&gt;
                *
                * &lt;p&gt;If &lt;code&gt;null&lt;/code&gt; is passed in, &lt;code&gt;null&lt;/code&gt; will be
                returned.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.unicodeEscaped(null) = null
                * CharUtils.unicodeEscaped(' ') = "\u0020"
                * CharUtils.unicodeEscaped('A') = "\u0041"
                * &lt;/pre&gt;
                *
                * @param ch the character to convert, may be null
                * @return the escaped unicode string, null if null input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>unicodeEscaped</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Character</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>unicodeEscaped</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ch</name>.
                                                    <name>charValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//--------------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether the character is ASCII 7 bit.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.isAscii('a') = true
                * CharUtils.isAscii('A') = true
                * CharUtils.isAscii('3') = true
                * CharUtils.isAscii('-') = true
                * CharUtils.isAscii('\n') = true
                * CharUtils.isAscii('&amp;copy;') = false
                * &lt;/pre&gt;
                *
                * @param ch the character to check
                * @return true if less than 128
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAscii</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ch</name>
                            &lt; 128
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether the character is ASCII 7 bit printable.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.isAsciiPrintable('a') = true
                * CharUtils.isAsciiPrintable('A') = true
                * CharUtils.isAsciiPrintable('3') = true
                * CharUtils.isAsciiPrintable('-') = true
                * CharUtils.isAsciiPrintable('\n') = false
                * CharUtils.isAsciiPrintable('&amp;copy;') = false
                * &lt;/pre&gt;
                *
                * @param ch the character to check
                * @return true if between 32 and 126 inclusive
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAsciiPrintable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ch</name>
                            &gt;= 32 &amp;&amp; <name>ch</name> &lt; 127
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether the character is ASCII 7 bit control.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.isAsciiControl('a') = false
                * CharUtils.isAsciiControl('A') = false
                * CharUtils.isAsciiControl('3') = false
                * CharUtils.isAsciiControl('-') = false
                * CharUtils.isAsciiControl('\n') = true
                * CharUtils.isAsciiControl('&amp;copy;') = false
                * &lt;/pre&gt;
                *
                * @param ch the character to check
                * @return true if less than 32 or equals 127
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAsciiControl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ch</name>
                            &lt; 32 || <name>ch</name> == 127
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether the character is ASCII 7 bit alphabetic.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.isAsciiAlpha('a') = true
                * CharUtils.isAsciiAlpha('A') = true
                * CharUtils.isAsciiAlpha('3') = false
                * CharUtils.isAsciiAlpha('-') = false
                * CharUtils.isAsciiAlpha('\n') = false
                * CharUtils.isAsciiAlpha('&amp;copy;') = false
                * &lt;/pre&gt;
                *
                * @param ch the character to check
                * @return true if between 65 and 90 or 97 and 122 inclusive
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAsciiAlpha</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>ch</name> &gt;= 'A' &amp;&amp; <name>ch</name> &lt;= 'Z') || (<name>ch</name> &gt;=
                            'a' &amp;&amp; <name>ch</name> &lt;= 'z')
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether the character is ASCII 7 bit alphabetic upper case.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.isAsciiAlphaUpper('a') = false
                * CharUtils.isAsciiAlphaUpper('A') = true
                * CharUtils.isAsciiAlphaUpper('3') = false
                * CharUtils.isAsciiAlphaUpper('-') = false
                * CharUtils.isAsciiAlphaUpper('\n') = false
                * CharUtils.isAsciiAlphaUpper('&amp;copy;') = false
                * &lt;/pre&gt;
                *
                * @param ch the character to check
                * @return true if between 65 and 90 inclusive
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAsciiAlphaUpper</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ch</name>
                            &gt;= 'A' &amp;&amp; <name>ch</name> &lt;= 'Z'
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether the character is ASCII 7 bit alphabetic lower case.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.isAsciiAlphaLower('a') = true
                * CharUtils.isAsciiAlphaLower('A') = false
                * CharUtils.isAsciiAlphaLower('3') = false
                * CharUtils.isAsciiAlphaLower('-') = false
                * CharUtils.isAsciiAlphaLower('\n') = false
                * CharUtils.isAsciiAlphaLower('&amp;copy;') = false
                * &lt;/pre&gt;
                *
                * @param ch the character to check
                * @return true if between 97 and 122 inclusive
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAsciiAlphaLower</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ch</name>
                            &gt;= 'a' &amp;&amp; <name>ch</name> &lt;= 'z'
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether the character is ASCII 7 bit numeric.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.isAsciiNumeric('a') = false
                * CharUtils.isAsciiNumeric('A') = false
                * CharUtils.isAsciiNumeric('3') = true
                * CharUtils.isAsciiNumeric('-') = false
                * CharUtils.isAsciiNumeric('\n') = false
                * CharUtils.isAsciiNumeric('&amp;copy;') = false
                * &lt;/pre&gt;
                *
                * @param ch the character to check
                * @return true if between 48 and 57 inclusive
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAsciiNumeric</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ch</name>
                            &gt;= '0' &amp;&amp; <name>ch</name> &lt;= '9'
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether the character is ASCII 7 bit numeric.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * CharUtils.isAsciiAlphanumeric('a') = true
                * CharUtils.isAsciiAlphanumeric('A') = true
                * CharUtils.isAsciiAlphanumeric('3') = true
                * CharUtils.isAsciiAlphanumeric('-') = false
                * CharUtils.isAsciiAlphanumeric('\n') = false
                * CharUtils.isAsciiAlphanumeric('&amp;copy;') = false
                * &lt;/pre&gt;
                *
                * @param ch the character to check
                * @return true if between 48 and 57 or 65 and 90 or 97 and 122 inclusive
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAsciiAlphanumeric</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>ch</name> &gt;= 'A' &amp;&amp; <name>ch</name> &lt;= 'Z') || (<name>ch</name> &gt;=
                            'a' &amp;&amp; <name>ch</name> &lt;= 'z') || (<name>ch</name> &gt;= '0' &amp;&amp; <name>
                                ch
                            </name> &lt;= '9')
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ----------------- Following code copied from Apache Harmony (Character class)
            </comment>
            <comment type="javadoc">/**
                * Indicates whether {@code ch} is a high- (or leading-) surrogate code unit
                * that is used for representing supplementary characters in UTF-16
                * encoding.
                *
                * @param ch
                * the character to test.
                * @return {@code true} if {@code ch} is a high-surrogate code unit;
                * {@code false} otherwise.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isHighSurrogate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>('\uD800' &lt;= <name>ch</name> &amp;&amp; '\uDBFF' &gt;= <name>ch</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
