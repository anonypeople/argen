<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\ClassUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Method</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Modifier</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>text</name>.
            <name>StrBuilder</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Operates on classes without using reflection.&lt;/p&gt;
        *
        * &lt;p&gt;This class handles invalid &lt;code&gt;null&lt;/code&gt; inputs as best it can.
        * Each method documents its behaviour in more detail.&lt;/p&gt;
        *
        * &lt;p&gt;The notion of a &lt;code&gt;canonical name&lt;/code&gt; includes the human
        * readable name for the type, for example &lt;code&gt;int[]&lt;/code&gt;. The
        * non-canonical method variants work with the JVM names, such as
        * &lt;code&gt;[I&lt;/code&gt;. &lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author Gary Gregory
        * @author Norm Deane
        * @author Alban Peignier
        * @author Tomasz Blachowicz
        * @since 2.0
        * @version $Id: ClassUtils.java 1057072 2011-01-10 01:55:57Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>ClassUtils</name>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;The package separator character: &lt;code&gt;'&amp;#x2e;' == {@value}&lt;/code&gt;.&lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>PACKAGE_SEPARATOR_CHAR</name> =
                    <init>
                        <expr>'.'</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;The package separator String: &lt;code&gt;"&amp;#x2e;"&lt;/code&gt;.&lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>PACKAGE_SEPARATOR</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>String</name>.
                                    <name>valueOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>PACKAGE_SEPARATOR_CHAR</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;The inner class separator character: &lt;code&gt;'$' == {@value}&lt;/code&gt;.&lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>INNER_CLASS_SEPARATOR_CHAR</name> =
                    <init>
                        <expr>'$'</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;The inner class separator String: &lt;code&gt;"$"&lt;/code&gt;.&lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>INNER_CLASS_SEPARATOR</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>String</name>.
                                    <name>valueOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>INNER_CLASS_SEPARATOR_CHAR</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Maps primitive &lt;code&gt;Class&lt;/code&gt;es to their corresponding wrapper &lt;code&gt;Class&lt;/code&gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Map</name>
                    </type>
                    <name>primitiveWrapperMap</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>HashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>primitiveWrapperMap</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Boolean</name>.
                                            <name>TYPE</name>
                                        </name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name><name>Boolean</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>primitiveWrapperMap</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Byte</name>.
                                            <name>TYPE</name>
                                        </name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name><name>Byte</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>primitiveWrapperMap</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Character</name>.
                                            <name>TYPE</name>
                                        </name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name><name>Character</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>primitiveWrapperMap</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Short</name>.
                                            <name>TYPE</name>
                                        </name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name><name>Short</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>primitiveWrapperMap</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Integer</name>.
                                            <name>TYPE</name>
                                        </name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name><name>Integer</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>primitiveWrapperMap</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Long</name>.
                                            <name>TYPE</name>
                                        </name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name><name>Long</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>primitiveWrapperMap</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Double</name>.
                                            <name>TYPE</name>
                                        </name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name><name>Double</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>primitiveWrapperMap</name>.
                                <name>put</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name><name>Float</name>.
                                            <name>TYPE</name>
                                        </name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name><name>Float</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <constructor_decl>
                    <name><name>primitiveWrapperMap</name>.
                        <name>put</name>
                    </name>
                    <parameter_list>(
                        <param>
                            <decl>
                                <type>
                                    <name><name>Void</name>.
                                        <name>TYPE</name>
                                    </name>
                                </type>
                            </decl>
                        </param>
                        ,
                        <param>
                            <decl>
                                <type>
                                    <name><name>Void</name>.
                                        <name>TYPE</name>
                                    </name>
                                </type>
                            </decl>
                        </param>
                        )
                    </parameter_list>
                    ;
                </constructor_decl>
                }
            </block>

            <comment type="javadoc">/**
                * Maps wrapper &lt;code&gt;Class&lt;/code&gt;es to their corresponding primitive types.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Map</name>
                    </type>
                    <name>wrapperPrimitiveMap</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>HashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>Iterator</name>
                            </type>
                            <name>it</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>primitiveWrapperMap</name>.
                                            <name>keySet</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>iterator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <call>
                                <name><name>it</name>.
                                    <name>hasNext</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </condition>
                    <incr/>)
                    <block>{
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>Class</name>
                                </type>
                                <name>primitiveClass</name> =
                                <init>
                                    <expr>(<name>Class</name>)
                                        <call>
                                            <name><name>it</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>Class</name>
                                </type>
                                <name>wrapperClass</name> =
                                <init>
                                    <expr>(<name>Class</name>)
                                        <call>
                                            <name><name>primitiveWrapperMap</name>.
                                                <name>get</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>primitiveClass</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <if>if
                            <condition>(
                                <expr>!
                                    <call>
                                        <name><name>primitiveClass</name>.
                                            <name>equals</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>wrapperClass</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>wrapperPrimitiveMap</name>.
                                                    <name>put</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>wrapperClass</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>primitiveClass</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </for>
                }
            </block>

            <comment type="javadoc">/**
                * Maps a primitive class name to its corresponding abbreviation used in array class names.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Map</name>
                    </type>
                    <name>abbreviationMap</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>HashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Maps an abbreviation used in array class names to corresponding primitive class name.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Map</name>
                    </type>
                    <name>reverseAbbreviationMap</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>HashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Add primitive type abbreviation to maps of abbreviations.
                *
                * @param primitive Canonical name of primitive type
                * @param abbreviation Corresponding abbreviation of primitive type
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>addAbbreviation</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>primitive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>abbreviation</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>abbreviationMap</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>primitive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>abbreviation</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>reverseAbbreviationMap</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>abbreviation</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>primitive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Feed abbreviation maps
                */
            </comment>
            static
            <block>{
                <expr_stmt>
                    <expr>
                        <call>
                            <name>addAbbreviation</name>
                            <argument_list>(
                                <argument>
                                    <expr>"int"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"I"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>addAbbreviation</name>
                            <argument_list>(
                                <argument>
                                    <expr>"boolean"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"Z"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>addAbbreviation</name>
                            <argument_list>(
                                <argument>
                                    <expr>"float"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"F"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>addAbbreviation</name>
                            <argument_list>(
                                <argument>
                                    <expr>"long"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"J"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>addAbbreviation</name>
                            <argument_list>(
                                <argument>
                                    <expr>"short"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"S"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>addAbbreviation</name>
                            <argument_list>(
                                <argument>
                                    <expr>"byte"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"B"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>addAbbreviation</name>
                            <argument_list>(
                                <argument>
                                    <expr>"double"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"D"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>addAbbreviation</name>
                            <argument_list>(
                                <argument>
                                    <expr>"char"</expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>"C"</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <comment type="javadoc">/**
                * &lt;p&gt;ClassUtils instances should NOT be constructed in standard programming.
                * Instead, the class should be used as
                * &lt;code&gt;ClassUtils.getShortClassName(cls)&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean
                * instance to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ClassUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// Short class name</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the class name minus the package name for an &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
                *
                * @param object the class to get the short name for, may be null
                * @param valueIfNull the value to return if null
                * @return the class name of the object without the package name, or the null value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getShortClassName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>valueIfNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>valueIfNull</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>getShortClassName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>object</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the class name minus the package name from a &lt;code&gt;Class&lt;/code&gt;.&lt;/p&gt;
                *
                * @param cls the class to get the short name for.
                * @return the class name without the package name or an empty string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getShortClassName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cls</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>StringUtils</name>.
                                            <name>EMPTY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>getShortClassName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>cls</name>.
                                                    <name>getName</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the class name minus the package name from a String.&lt;/p&gt;
                *
                * &lt;p&gt;The string passed in is assumed to be a class name - it is not checked.&lt;/p&gt;
                *
                * @param className the className to get the short name for
                * @return the class name of the class without the package name or an empty string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getShortClassName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>className</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>StringUtils</name>.
                                            <name>EMPTY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>className</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>StringUtils</name>.
                                            <name>EMPTY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>arrayPrefix</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Handle array encoding</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>className</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"["</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <while>while
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>className</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            == '['
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>className</name>
                                                =
                                                <call>
                                                    <name><name>className</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>1</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>arrayPrefix</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"[]"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <comment type="line">// Strip Object type encoding</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>className</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            == 'L' &amp;&amp;
                                            <call>
                                                <name><name>className</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>className</name>.
                                                                    <name>length</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            - 1
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            == ';'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>className</name>
                                                    =
                                                    <call>
                                                        <name><name>className</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>1</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>className</name>.
                                                                            <name>length</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    - 1
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>reverseAbbreviationMap</name>.
                                        <name>containsKey</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>className</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>className</name>
                                        = (<name>String</name>)
                                        <call>
                                            <name><name>reverseAbbreviationMap</name>.
                                                <name>get</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>className</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lastDotIdx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>className</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>PACKAGE_SEPARATOR_CHAR</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>innerIdx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>className</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>INNER_CLASS_SEPARATOR_CHAR</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>lastDotIdx</name>
                                                    == -1 ? 0 : <name>lastDotIdx</name> + 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>out</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>className</name>.
                                            <name>substring</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>lastDotIdx</name>
                                                    + 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>innerIdx</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>out</name>
                                        =
                                        <call>
                                            <name><name>out</name>.
                                                <name>replace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>INNER_CLASS_SEPARATOR_CHAR</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>PACKAGE_SEPARATOR_CHAR</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>out</name>
                            +
                            <name>arrayPrefix</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Package name</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the package name of an &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
                *
                * @param object the class to get the package name for, may be null
                * @param valueIfNull the value to return if null
                * @return the package name of the object, or the null value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getPackageName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>valueIfNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>valueIfNull</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>getPackageName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>object</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the package name of a &lt;code&gt;Class&lt;/code&gt;.&lt;/p&gt;
                *
                * @param cls the class to get the package name for, may be &lt;code&gt;null&lt;/code&gt;.
                * @return the package name or an empty string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getPackageName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cls</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>StringUtils</name>.
                                            <name>EMPTY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>getPackageName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>cls</name>.
                                                    <name>getName</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the package name from a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;The string passed in is assumed to be a class name - it is not checked.&lt;/p&gt;
                * &lt;p&gt;If the class is unpackaged, return an empty string.&lt;/p&gt;
                *
                * @param className the className to get the package name for, may be &lt;code&gt;null&lt;/code&gt;
                * @return the package name or an empty string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getPackageName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>className</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>className</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>StringUtils</name>.
                                            <name>EMPTY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Strip array encoding</comment>
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>className</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>0</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == '['
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>className</name>
                                    =
                                    <call>
                                        <name><name>className</name>.
                                            <name>substring</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>1</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <comment type="line">// Strip Object type encoding</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>className</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>0</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == 'L' &amp;&amp;
                                <call>
                                    <name><name>className</name>.
                                        <name>charAt</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>className</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                - 1
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == ';'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>className</name>
                                        =
                                        <call>
                                            <name><name>className</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>1</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>className</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>PACKAGE_SEPARATOR_CHAR</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>i</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>StringUtils</name>.
                                            <name>EMPTY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>className</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Superclasses/Superinterfaces</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets a &lt;code&gt;List&lt;/code&gt; of superclasses for the given class.&lt;/p&gt;
                *
                * @param cls the class to look up, may be &lt;code&gt;null&lt;/code&gt;
                * @return the &lt;code&gt;List&lt;/code&gt; of superclasses in order going up from this one
                * &lt;code&gt;null&lt;/code&gt; if null input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>List</name>
                </type>
                <name>getAllSuperclasses</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cls</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>classes</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>superclass</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>cls</name>.
                                            <name>getSuperclass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>superclass</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>classes</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>superclass</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>superclass</name>
                                    =
                                    <call>
                                        <name><name>superclass</name>.
                                            <name>getSuperclass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>classes</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets a &lt;code&gt;List&lt;/code&gt; of all interfaces implemented by the given
                * class and its superclasses.&lt;/p&gt;
                *
                * &lt;p&gt;The order is determined by looking through each interface in turn as
                * declared in the source file and following its hierarchy up. Then each
                * superclass is considered in the same way. Later duplicates are ignored,
                * so the order is maintained.&lt;/p&gt;
                *
                * @param cls the class to look up, may be &lt;code&gt;null&lt;/code&gt;
                * @return the &lt;code&gt;List&lt;/code&gt; of interfaces in order,
                * &lt;code&gt;null&lt;/code&gt; if null input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>List</name>
                </type>
                <name>getAllInterfaces</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cls</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>interfacesFound</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>getAllInterfaces</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>interfacesFound</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>interfacesFound</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the interfaces for the specified class.
                *
                * @param cls the class to look up, may be &lt;code&gt;null&lt;/code&gt;
                * @param interfacesFound the &lt;code&gt;Set&lt;/code&gt; of interfaces for the class
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>getAllInterfaces</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>interfacesFound</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <while>while
                        <condition>(
                            <expr>
                                <name>cls</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Class</name>
                                        <index>[]</index>
                                    </type>
                                    <name>interfaces</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>cls</name>.
                                                    <name>getInterfaces</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name><name>interfaces</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name><name>interfacesFound</name>.
                                                        <name>contains</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>interfaces</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>interfacesFound</name>.
                                                                <name>add</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>interfaces</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>getAllInterfaces</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>interfaces</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>interfacesFound</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <expr_stmt>
                                <expr>
                                    <name>cls</name>
                                    =
                                    <call>
                                        <name><name>cls</name>.
                                            <name>getSuperclass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="line">// Convert list</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Given a &lt;code&gt;List&lt;/code&gt; of class names, this method converts them into classes.&lt;/p&gt;
                *
                * &lt;p&gt;A new &lt;code&gt;List&lt;/code&gt; is returned. If the class name cannot be found, &lt;code&gt;null&lt;/code&gt;
                * is stored in the &lt;code&gt;List&lt;/code&gt;. If the class name in the &lt;code&gt;List&lt;/code&gt;
                is
                * &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; is stored in the output &lt;code&gt;List&lt;/code&gt;.&lt;/p&gt;
                *
                * @param classNames the classNames to change
                * @return a &lt;code&gt;List&lt;/code&gt; of Class objects corresponding to the class names,
                * &lt;code&gt;null&lt;/code&gt; if null input
                * @throws ClassCastException if classNames contains a non String entry
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>List</name>
                </type>
                <name>convertClassNamesToClasses</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>classNames</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>classNames</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>classes</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>classNames</name>.
                                                            <name>size</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Iterator</name>
                                </type>
                                <name>it</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>classNames</name>.
                                                <name>iterator</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>className</name> =
                                    <init>
                                        <expr>(<name>String</name>)
                                            <call>
                                                <name><name>it</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <try>try
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>classes</name>.
                                                    <name>add</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>Class</name>.
                                                                    <name>forName</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>className</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>Exception</name>
                                            </type>
                                            <name>ex</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>classes</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </catch>
                            </try>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>classes</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Given a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Class&lt;/code&gt; objects, this method
                converts
                * them into class names.&lt;/p&gt;
                *
                * &lt;p&gt;A new &lt;code&gt;List&lt;/code&gt; is returned. &lt;code&gt;null&lt;/code&gt; objects will
                be copied into
                * the returned list as &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param classes the classes to change
                * @return a &lt;code&gt;List&lt;/code&gt; of class names corresponding to the Class objects,
                * &lt;code&gt;null&lt;/code&gt; if null input
                * @throws ClassCastException if &lt;code&gt;classes&lt;/code&gt; contains a non-&lt;code&gt;Class&lt;/code&gt;
                entry
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>List</name>
                </type>
                <name>convertClassesToClassNames</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>classes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>classes</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>classNames</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>classes</name>.
                                                            <name>size</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Iterator</name>
                                </type>
                                <name>it</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>classes</name>.
                                                <name>iterator</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Class</name>
                                    </type>
                                    <name>cls</name> =
                                    <init>
                                        <expr>(<name>Class</name>)
                                            <call>
                                                <name><name>it</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cls</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>classNames</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>classNames</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>cls</name>.
                                                                        <name>getName</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>classNames</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Is assignable</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of Classes can be assigned to another array of Classes.&lt;/p&gt;
                *
                * &lt;p&gt;This method calls {@link #isAssignable(Class, Class) isAssignable} for each
                * Class pair in the input arrays. It can be used to check if a set of arguments
                * (the first parameter) are suitably compatible with a set of method parameter types
                * (the second parameter).&lt;/p&gt;
                *
                * &lt;p&gt;Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this
                * method takes into account widenings of primitive classes and
                * &lt;code&gt;null&lt;/code&gt;s.&lt;/p&gt;
                *
                * &lt;p&gt;Primitive widenings allow an int to be assigned to a &lt;code&gt;long&lt;/code&gt;,
                * &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;. This method returns the correct
                * result for these cases.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;Null&lt;/code&gt; may be assigned to any reference type. This method will
                * return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; is passed in and the toClass is
                * non-primitive.&lt;/p&gt;
                *
                * &lt;p&gt;Specifically, this method tests whether the type represented by the
                * specified &lt;code&gt;Class&lt;/code&gt; parameter can be converted to the type
                * represented by this &lt;code&gt;Class&lt;/code&gt; object via an identity conversion
                * widening primitive or widening reference conversion. See
                * &lt;em&gt;&lt;a href="http://java.sun.com/docs/books/jls/"&gt;The Java Language Specification&lt;/a&gt;&lt;/em&gt;,
                * sections 5.1.1, 5.1.2 and 5.1.4 for details.&lt;/p&gt;
                *
                * @param classArray the array of Classes to check, may be &lt;code&gt;null&lt;/code&gt;
                * @param toClassArray the array of Classes to try to assign into, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if assignment possible
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAssignable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>classArray</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>toClassArray</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isAssignable</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>classArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toClassArray</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if an array of Classes can be assigned to another array of Classes.&lt;/p&gt;
                *
                * &lt;p&gt;This method calls {@link #isAssignable(Class, Class) isAssignable} for each
                * Class pair in the input arrays. It can be used to check if a set of arguments
                * (the first parameter) are suitably compatible with a set of method parameter types
                * (the second parameter).&lt;/p&gt;
                *
                * &lt;p&gt;Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this
                * method takes into account widenings of primitive classes and
                * &lt;code&gt;null&lt;/code&gt;s.&lt;/p&gt;
                *
                * &lt;p&gt;Primitive widenings allow an int to be assigned to a &lt;code&gt;long&lt;/code&gt;,
                * &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt;. This method returns the correct
                * result for these cases.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;Null&lt;/code&gt; may be assigned to any reference type. This method will
                * return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; is passed in and the toClass is
                * non-primitive.&lt;/p&gt;
                *
                * &lt;p&gt;Specifically, this method tests whether the type represented by the
                * specified &lt;code&gt;Class&lt;/code&gt; parameter can be converted to the type
                * represented by this &lt;code&gt;Class&lt;/code&gt; object via an identity conversion
                * widening primitive or widening reference conversion. See
                * &lt;em&gt;&lt;a href="http://java.sun.com/docs/books/jls/"&gt;The Java Language Specification&lt;/a&gt;&lt;/em&gt;,
                * sections 5.1.1, 5.1.2 and 5.1.4 for details.&lt;/p&gt;
                *
                * @param classArray the array of Classes to check, may be &lt;code&gt;null&lt;/code&gt;
                * @param toClassArray the array of Classes to try to assign into, may be &lt;code&gt;null&lt;/code&gt;
                * @param autoboxing whether to use implicit autoboxing/unboxing between primitives and wrappers
                * @return &lt;code&gt;true&lt;/code&gt; if assignment possible
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAssignable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>classArray</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>toClassArray</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>autoboxing</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isSameLength</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>classArray</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>toClassArray</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>classArray</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>classArray</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_CLASS_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>toClassArray</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>toClassArray</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_CLASS_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>classArray</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>isAssignable</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>classArray</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>toClassArray</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>autoboxing</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if one &lt;code&gt;Class&lt;/code&gt; can be assigned to a variable of
                * another &lt;code&gt;Class&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,
                * this method takes into account widenings of primitive classes and
                * &lt;code&gt;null&lt;/code&gt;s.&lt;/p&gt;
                *
                * &lt;p&gt;Primitive widenings allow an int to be assigned to a long, float or
                * double. This method returns the correct result for these cases.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;Null&lt;/code&gt; may be assigned to any reference type. This method
                * will return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; is passed in and the
                * toClass is non-primitive.&lt;/p&gt;
                *
                * &lt;p&gt;Specifically, this method tests whether the type represented by the
                * specified &lt;code&gt;Class&lt;/code&gt; parameter can be converted to the type
                * represented by this &lt;code&gt;Class&lt;/code&gt; object via an identity conversion
                * widening primitive or widening reference conversion. See
                * &lt;em&gt;&lt;a href="http://java.sun.com/docs/books/jls/"&gt;The Java Language Specification&lt;/a&gt;&lt;/em&gt;,
                * sections 5.1.1, 5.1.2 and 5.1.4 for details.&lt;/p&gt;
                *
                * @param cls the Class to check, may be null
                * @param toClass the Class to try to assign into, returns false if null
                * @return &lt;code&gt;true&lt;/code&gt; if assignment possible
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAssignable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>toClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isAssignable</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toClass</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if one &lt;code&gt;Class&lt;/code&gt; can be assigned to a variable of
                * another &lt;code&gt;Class&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,
                * this method takes into account widenings of primitive classes and
                * &lt;code&gt;null&lt;/code&gt;s.&lt;/p&gt;
                *
                * &lt;p&gt;Primitive widenings allow an int to be assigned to a long, float or
                * double. This method returns the correct result for these cases.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;Null&lt;/code&gt; may be assigned to any reference type. This method
                * will return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;null&lt;/code&gt; is passed in and the
                * toClass is non-primitive.&lt;/p&gt;
                *
                * &lt;p&gt;Specifically, this method tests whether the type represented by the
                * specified &lt;code&gt;Class&lt;/code&gt; parameter can be converted to the type
                * represented by this &lt;code&gt;Class&lt;/code&gt; object via an identity conversion
                * widening primitive or widening reference conversion. See
                * &lt;em&gt;&lt;a href="http://java.sun.com/docs/books/jls/"&gt;The Java Language Specification&lt;/a&gt;&lt;/em&gt;,
                * sections 5.1.1, 5.1.2 and 5.1.4 for details.&lt;/p&gt;
                *
                * @param cls the Class to check, may be null
                * @param toClass the Class to try to assign into, returns false if null
                * @param autoboxing whether to use implicit autoboxing/unboxing between primitives and wrappers
                * @return &lt;code&gt;true&lt;/code&gt; if assignment possible
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAssignable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>toClass</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>autoboxing</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>toClass</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// have to check for null, as isAssignableFrom doesn't</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cls</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>!(
                                        <call>
                                            <name><name>toClass</name>.
                                                <name>isPrimitive</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        )
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">//autoboxing:</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>autoboxing</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>cls</name>.
                                                    <name>isPrimitive</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; !
                                            <call>
                                                <name><name>toClass</name>.
                                                    <name>isPrimitive</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>cls</name>
                                                    =
                                                    <call>
                                                        <name>primitiveToWrapper</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cls</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>cls</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>false</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>toClass</name>.
                                                    <name>isPrimitive</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &amp;&amp; !
                                            <call>
                                                <name><name>cls</name>.
                                                    <name>isPrimitive</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>cls</name>
                                                    =
                                                    <call>
                                                        <name>wrapperToPrimitive</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cls</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>cls</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>false</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>cls</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>toClass</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>cls</name>.
                                        <name>isPrimitive</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>toClass</name>.
                                                    <name>isPrimitive</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            == false
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>Integer</name>.<name>TYPE</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Long</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Float</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Double</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>Long</name>.<name>TYPE</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Float</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Double</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>Boolean</name>.<name>TYPE</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>Double</name>.<name>TYPE</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>Float</name>.<name>TYPE</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Double</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>Character</name>.<name>TYPE</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Integer</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Long</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Float</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Double</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>Short</name>.<name>TYPE</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Integer</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Long</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Float</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Double</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>Byte</name>.<name>TYPE</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Short</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Integer</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Long</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Float</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name><name>Double</name>.<name>TYPE</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>toClass</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// should never get here</comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>toClass</name>.
                                    <name>isAssignableFrom</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the specified primitive Class object to its corresponding
                * wrapper Class object.&lt;/p&gt;
                *
                * &lt;p&gt;NOTE: From v2.2, this method handles &lt;code&gt;Void.TYPE&lt;/code&gt;,
                * returning &lt;code&gt;Void.TYPE&lt;/code&gt;.&lt;/p&gt;
                *
                * @param cls the class to convert, may be null
                * @return the wrapper class for &lt;code&gt;cls&lt;/code&gt; or &lt;code&gt;cls&lt;/code&gt; if
                * &lt;code&gt;cls&lt;/code&gt; is not a primitive. &lt;code&gt;null&lt;/code&gt; if null input.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Class</name>
                </type>
                <name>primitiveToWrapper</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>convertedClass</name> =
                            <init>
                                <expr>
                                    <name>cls</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cls</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>cls</name>.
                                        <name>isPrimitive</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>convertedClass</name>
                                        = (<name>Class</name>)
                                        <call>
                                            <name><name>primitiveWrapperMap</name>.
                                                <name>get</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>cls</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>convertedClass</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the specified array of primitive Class objects to an array of
                * its corresponding wrapper Class objects.&lt;/p&gt;
                *
                * @param classes the class array to convert, may be null or empty
                * @return an array which contains for each given class, the wrapper class or
                * the original class if class is not a primitive. &lt;code&gt;null&lt;/code&gt; if null input.
                * Empty array if an empty array passed in.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Class</name>
                    <index>[]</index>
                </type>
                <name>primitivesToWrappers</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>classes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>classes</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>classes</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>classes</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                                <index>[]</index>
                            </type>
                            <name>convertedClasses</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Class</name>
                                        <index>[
                                            <expr>
                                                <name><name>classes</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>classes</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>convertedClasses</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <call>
                                        <name>primitiveToWrapper</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>classes</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>convertedClasses</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the specified wrapper class to its corresponding primitive
                * class.&lt;/p&gt;
                *
                * &lt;p&gt;This method is the counter part of &lt;code&gt;primitiveToWrapper()&lt;/code&gt;.
                * If the passed in class is a wrapper class for a primitive type, this
                * primitive type will be returned (e.g. &lt;code&gt;Integer.TYPE&lt;/code&gt; for
                * &lt;code&gt;Integer.class&lt;/code&gt;). For other classes, or if the parameter is
                * &lt;b&gt;null&lt;/b&gt;, the return value is &lt;b&gt;null&lt;/b&gt;.&lt;/p&gt;
                *
                * @param cls the class to convert, may be &lt;b&gt;null&lt;/b&gt;
                * @return the corresponding primitive type if &lt;code&gt;cls&lt;/code&gt; is a
                * wrapper class, &lt;b&gt;null&lt;/b&gt; otherwise
                * @see #primitiveToWrapper(Class)
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Class</name>
                </type>
                <name>wrapperToPrimitive</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>Class</name>)
                            <call>
                                <name><name>wrapperPrimitiveMap</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts the specified array of wrapper Class objects to an array of
                * its corresponding primitive Class objects.&lt;/p&gt;
                *
                * &lt;p&gt;This method invokes &lt;code&gt;wrapperToPrimitive()&lt;/code&gt; for each element
                * of the passed in array.&lt;/p&gt;
                *
                * @param classes the class array to convert, may be null or empty
                * @return an array which contains for each given class, the primitive class or
                * &lt;b&gt;null&lt;/b&gt; if the original class is not a wrapper class. &lt;code&gt;null&lt;/code&gt; if
                null input.
                * Empty array if an empty array passed in.
                * @see #wrapperToPrimitive(Class)
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Class</name>
                    <index>[]</index>
                </type>
                <name>wrappersToPrimitives</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>classes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>classes</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>classes</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>classes</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                                <index>[]</index>
                            </type>
                            <name>convertedClasses</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Class</name>
                                        <index>[
                                            <expr>
                                                <name><name>classes</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>classes</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>convertedClasses</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <call>
                                        <name>wrapperToPrimitive</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>classes</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>convertedClasses</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Inner class</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Is the specified class an inner class or static nested class.&lt;/p&gt;
                *
                * @param cls the class to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the class is an inner or static nested class,
                * false if not or &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isInnerClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cls</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>cls</name>.
                                    <name>getName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>indexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>INNER_CLASS_SEPARATOR_CHAR</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &gt;= 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Class loading</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns the class represented by &lt;code&gt;className&lt;/code&gt; using the
                * &lt;code&gt;classLoader&lt;/code&gt;. This implementation supports the syntaxes
                * "&lt;code&gt;java.util.Map.Entry[]&lt;/code&gt;", "&lt;code&gt;java.util.Map$Entry[]&lt;/code&gt;",
                * "&lt;code&gt;[Ljava.util.Map.Entry;&lt;/code&gt;", and "&lt;code&gt;[Ljava.util.Map$Entry;&lt;/code&gt;".
                *
                * @param classLoader the class loader to use to load the class
                * @param className the class name
                * @param initialize whether the class must be initialized
                * @return the class represented by &lt;code&gt;className&lt;/code&gt; using the &lt;code&gt;classLoader&lt;/code&gt;
                * @throws ClassNotFoundException if the class is not found
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Class</name>
                </type>
                <name>getClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ClassLoader</name>
                            </type>
                            <name>classLoader</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>initialize</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Class</name>
                                    </type>
                                    <name>clazz</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>abbreviationMap</name>.
                                                <name>containsKey</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>className</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>clsName</name> =
                                                <init>
                                                    <expr>"[" +
                                                        <call>
                                                            <name><name>abbreviationMap</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>className</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>clazz</name>
                                                =
                                                <call>
                                                    <name><name>Class</name>.
                                                        <name>forName</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>clsName</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>initialize</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>classLoader</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>getComponentType</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>clazz</name>
                                                =
                                                <call>
                                                    <name><name>Class</name>.
                                                        <name>forName</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>toCanonicalName</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>className</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>initialize</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>classLoader</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <return>return
                                <expr>
                                    <name>clazz</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ClassNotFoundException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// allow path separators (.) as inner class name separators
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>lastDotIndex</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>className</name>.
                                                        <name>lastIndexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>PACKAGE_SEPARATOR_CHAR</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>lastDotIndex</name>
                                            != -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <try>try
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>getClass</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>classLoader</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>className</name>.
                                                                                    <name>substring</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>0</expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>lastDotIndex</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            +
                                                                            <name>INNER_CLASS_SEPARATOR_CHAR</name>
                                                                            +
                                                                            <call>
                                                                                <name><name>className</name>.
                                                                                    <name>substring</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>lastDotIndex</name>
                                                                                            + 1
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>initialize</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>ClassNotFoundException</name>
                                                            </type>
                                                            <name>ex2</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <throw>throw
                                    <expr>
                                        <name>ex</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the (initialized) class represented by &lt;code&gt;className&lt;/code&gt;
                * using the &lt;code&gt;classLoader&lt;/code&gt;. This implementation supports
                * the syntaxes "&lt;code&gt;java.util.Map.Entry[]&lt;/code&gt;",
                * "&lt;code&gt;java.util.Map$Entry[]&lt;/code&gt;", "&lt;code&gt;[Ljava.util.Map.Entry;&lt;/code&gt;",
                * and "&lt;code&gt;[Ljava.util.Map$Entry;&lt;/code&gt;".
                *
                * @param classLoader the class loader to use to load the class
                * @param className the class name
                * @return the class represented by &lt;code&gt;className&lt;/code&gt; using the &lt;code&gt;classLoader&lt;/code&gt;
                * @throws ClassNotFoundException if the class is not found
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Class</name>
                </type>
                <name>getClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ClassLoader</name>
                            </type>
                            <name>classLoader</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getClass</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>classLoader</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>className</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the (initialized) class represented by &lt;code&gt;className&lt;/code&gt;
                * using the current thread's context class loader. This implementation
                * supports the syntaxes "&lt;code&gt;java.util.Map.Entry[]&lt;/code&gt;",
                * "&lt;code&gt;java.util.Map$Entry[]&lt;/code&gt;", "&lt;code&gt;[Ljava.util.Map.Entry;&lt;/code&gt;",
                * and "&lt;code&gt;[Ljava.util.Map$Entry;&lt;/code&gt;".
                *
                * @param className the class name
                * @return the class represented by &lt;code&gt;className&lt;/code&gt; using the current thread's context
                class loader
                * @throws ClassNotFoundException if the class is not found
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Class</name>
                </type>
                <name>getClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getClass</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>className</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the class represented by &lt;code&gt;className&lt;/code&gt; using the
                * current thread's context class loader. This implementation supports the
                * syntaxes "&lt;code&gt;java.util.Map.Entry[]&lt;/code&gt;", "&lt;code&gt;java.util.Map$Entry[]&lt;/code&gt;",
                * "&lt;code&gt;[Ljava.util.Map.Entry;&lt;/code&gt;", and "&lt;code&gt;[Ljava.util.Map$Entry;&lt;/code&gt;".
                *
                * @param className the class name
                * @param initialize whether the class must be initialized
                * @return the class represented by &lt;code&gt;className&lt;/code&gt; using the current thread's context
                class loader
                * @throws ClassNotFoundException if the class is not found
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Class</name>
                </type>
                <name>getClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>initialize</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ClassLoader</name>
                            </type>
                            <name>contextCL</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Thread</name>.
                                            <name>currentThread</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getContextClassLoader</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ClassLoader</name>
                            </type>
                            <name>loader</name> =
                            <init>
                                <expr>
                                    <name>contextCL</name>
                                    == <name>null</name> ?
                                    <name><name>ClassUtils</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class.
                                    <call>
                                        <name>getClassLoader</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    :
                                    <name>contextCL</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>getClass</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>loader</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>className</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>initialize</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Public method</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Returns the desired Method much like &lt;code&gt;Class.getMethod&lt;/code&gt;, however
                * it ensures that the returned Method is from a public class or interface and not
                * from an anonymous inner class. This means that the Method is invokable and
                * doesn't fall foul of Java bug
                * &lt;a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957"&gt;4071957&lt;/a&gt;).
                *
                * &lt;code&gt;&lt;pre&gt;Set set = Collections.unmodifiableSet(...);
                * Method method = ClassUtils.getPublicMethod(set.getClass(), "isEmpty", new Class[0]);
                * Object result = method.invoke(set, new Object[]);&lt;/pre&gt;&lt;/code&gt;
                * &lt;/p&gt;
                *
                * @param cls the class to check, not null
                * @param methodName the name of the method
                * @param parameterTypes the list of parameters
                * @return the method
                * @throws NullPointerException if the class is null
                * @throws SecurityException if a a security violation occured
                * @throws NoSuchMethodException if the method is not found in the given class
                * or if the metothod doen't conform with the requirements
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Method</name>
                </type>
                <name>getPublicMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>
                                <name>parameterTypes</name>
                                <index>[]</index>
                            </name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>SecurityException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>declaredMethod</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>cls</name>.
                                            <name>getMethod</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>methodName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>parameterTypes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Modifier</name>.
                                        <name>isPublic</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>declaredMethod</name>.
                                                        <name>getDeclaringClass</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>getModifiers</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>declaredMethod</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>candidateClasses</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>candidateClasses</name>.
                                    <name>addAll</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getAllInterfaces</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>candidateClasses</name>.
                                    <name>addAll</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getAllSuperclasses</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Iterator</name>
                                </type>
                                <name>it</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>candidateClasses</name>.
                                                <name>iterator</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Class</name>
                                    </type>
                                    <name>candidateClass</name> =
                                    <init>
                                        <expr>(<name>Class</name>)
                                            <call>
                                                <name><name>it</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>Modifier</name>.
                                                <name>isPublic</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>candidateClass</name>.
                                                                <name>getModifiers</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Method</name>
                                    </type>
                                    <name>candidateMethod</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <try>try
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>candidateMethod</name>
                                            =
                                            <call>
                                                <name><name>candidateClass</name>.
                                                    <name>getMethod</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>methodName</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>parameterTypes</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>NoSuchMethodException</name>
                                            </type>
                                            <name>ex</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </catch>
                            </try>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>Modifier</name>.
                                                <name>isPublic</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>candidateMethod</name>.
                                                                <name>getDeclaringClass</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>getModifiers</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>candidateMethod</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <throw>throw
                        <expr>new
                            <call>
                                <name>NoSuchMethodException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Can't find a public method for " +
                                            <name>methodName</name>
                                            + " " +
                                            <call>
                                                <name><name>ArrayUtils</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>parameterTypes</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Converts a class name to a JLS style class name.
                *
                * @param className the class name
                * @return the converted name
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toCanonicalName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>className</name>
                            =
                            <call>
                                <name><name>StringUtils</name>.
                                    <name>deleteWhitespace</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>className</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>className</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"className"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>className</name>.
                                                <name>endsWith</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"[]"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>StrBuilder</name>
                                                </type>
                                                <name>classNameBuffer</name> =
                                                <init>
                                                    <expr>new
                                                        <call>
                                                            <name>StrBuilder</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <while>while
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>className</name>.
                                                            <name>endsWith</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"[]"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>className</name>
                                                        =
                                                        <call>
                                                            <name><name>className</name>.
                                                                <name>substring</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>className</name>.
                                                                                <name>length</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        - 2
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>classNameBuffer</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"["</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </while>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>abbreviation</name> =
                                                <init>
                                                    <expr>(<name>String</name>)
                                                        <call>
                                                            <name><name>abbreviationMap</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>className</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>abbreviation</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>classNameBuffer</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>abbreviation</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>classNameBuffer</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"L"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>append</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>className</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>append</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>";"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>className</name>
                                                =
                                                <call>
                                                    <name><name>classNameBuffer</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>className</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts an array of &lt;code&gt;Object&lt;/code&gt; in to an array of &lt;code&gt;Class&lt;/code&gt;
                objects.
                * If any of these objects is null, a null element will be inserted into the array.&lt;/p&gt;
                *
                * &lt;p&gt;This method returns &lt;code&gt;null&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; input
                array.&lt;/p&gt;
                *
                * @param array an &lt;code&gt;Object&lt;/code&gt; array
                * @return a &lt;code&gt;Class&lt;/code&gt; array, &lt;code&gt;null&lt;/code&gt; if null array input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Class</name>
                    <index>[]</index>
                </type>
                <name>toClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>array</name>.
                                            <name>length</name>
                                        </name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name><name>ArrayUtils</name>.
                                                    <name>EMPTY_CLASS_ARRAY</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                                <index>[]</index>
                            </type>
                            <name>classes</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Class</name>
                                        <index>[
                                            <expr>
                                                <name><name>array</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>classes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    == <name>null</name> ? <name>null</name> :
                                    <name>
                                        <name>array</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>classes</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Short canonical name</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the canonical name minus the package name for an &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
                *
                * @param object the class to get the short name for, may be null
                * @param valueIfNull the value to return if null
                * @return the canonical name of the object without the package name, or the null value
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getShortCanonicalName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>valueIfNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>valueIfNull</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>getShortCanonicalName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>object</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the canonical name minus the package name from a &lt;code&gt;Class&lt;/code&gt;.&lt;/p&gt;
                *
                * @param cls the class to get the short name for.
                * @return the canonical name without the package name or an empty string
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getShortCanonicalName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cls</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>StringUtils</name>.
                                            <name>EMPTY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>getShortCanonicalName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>cls</name>.
                                                    <name>getName</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the canonical name minus the package name from a String.&lt;/p&gt;
                *
                * &lt;p&gt;The string passed in is assumed to be a canonical name - it is not checked.&lt;/p&gt;
                *
                * @param canonicalName the class name to get the short name for
                * @return the canonical name of the class without the package name or an empty string
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getShortCanonicalName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>canonicalName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>ClassUtils</name>.
                                    <name>getShortClassName</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getCanonicalName</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>canonicalName</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Package name</comment>
            <comment type="line">// ----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the package name from the canonical name of an &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
                *
                * @param object the class to get the package name for, may be null
                * @param valueIfNull the value to return if null
                * @return the package name of the object, or the null value
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getPackageCanonicalName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>valueIfNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>valueIfNull</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>getPackageCanonicalName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>object</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the package name from the canonical name of a &lt;code&gt;Class&lt;/code&gt;.&lt;/p&gt;
                *
                * @param cls the class to get the package name for, may be &lt;code&gt;null&lt;/code&gt;.
                * @return the package name or an empty string
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getPackageCanonicalName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cls</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>StringUtils</name>.
                                            <name>EMPTY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>getPackageCanonicalName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>cls</name>.
                                                    <name>getName</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the package name from the canonical name. &lt;/p&gt;
                *
                * &lt;p&gt;The string passed in is assumed to be a canonical name - it is not checked.&lt;/p&gt;
                * &lt;p&gt;If the class is unpackaged, return an empty string.&lt;/p&gt;
                *
                * @param canonicalName the canonical name to get the package name for, may be &lt;code&gt;null&lt;/code&gt;
                * @return the package name or an empty string
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getPackageCanonicalName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>canonicalName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>ClassUtils</name>.
                                    <name>getPackageName</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getCanonicalName</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>canonicalName</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a given name of class into canonical format.
                * If name of class is not a name of array class it returns
                * unchanged name.&lt;/p&gt;
                * &lt;p&gt;Example:
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;getCanonicalName("[I") = "int[]"&lt;/code&gt;&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;getCanonicalName("[Ljava.lang.String;") = "java.lang.String[]"&lt;/code&gt;&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;getCanonicalName("java.lang.String") = "java.lang.String"&lt;/code&gt;&lt;/li&gt;
                * &lt;/ul&gt;
                * &lt;/p&gt;
                *
                * @param className the name of class
                * @return canonical form of class name
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getCanonicalName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>className</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>className</name>
                            =
                            <call>
                                <name><name>StringUtils</name>.
                                    <name>deleteWhitespace</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>className</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>className</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>dim</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>className</name>.
                                                    <name>startsWith</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"["</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>dim</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>className</name>
                                                =
                                                <call>
                                                    <name><name>className</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>1</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>dim</name>
                                            &lt; 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>className</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>className</name>.
                                                                <name>startsWith</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"L"</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>className</name>
                                                                =
                                                                <call>
                                                                    <name><name>className</name>.
                                                                        <name>substring</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>1</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>className</name>.
                                                                                        <name>endsWith</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>";"</expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                                ?
                                                                                <call>
                                                                                    <name><name>className</name>.
                                                                                        <name>length</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                                - 1
                                                                                :
                                                                                <call>
                                                                                    <name><name>className</name>.
                                                                                        <name>length</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name><name>className</name>.
                                                                            <name>length</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    &gt; 0
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>className</name>
                                                                            = (<name>String</name>)
                                                                            <call>
                                                                                <name><name>
                                                                                    reverseAbbreviationMap</name>.
                                                                                    <name>get</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    className</name>.
                                                                                                    <name>substring
                                                                                                    </name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr>0</expr>
                                                                                                    </argument>
                                                                                                    ,
                                                                                                    <argument>
                                                                                                        <expr>1</expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>StrBuilder</name>
                                                    </type>
                                                    <name>canonicalClassNameBuffer</name> =
                                                    <init>
                                                        <expr>new
                                                            <call>
                                                                <name>StrBuilder</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>className</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <for>for (
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name> =
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr>
                                                        <name>i</name>
                                                        &lt;
                                                        <name>dim</name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>canonicalClassNameBuffer</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"[]"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </for>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>canonicalClassNameBuffer</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
