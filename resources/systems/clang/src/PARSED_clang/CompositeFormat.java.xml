<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\text\CompositeFormat.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>text</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>text</name>.
            <name>FieldPosition</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>text</name>.
            <name>Format</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>text</name>.
            <name>ParseException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>text</name>.
            <name>ParsePosition</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Formats using one formatter and parses using a different formatter. An
        * example of use for this would be a webapp where data is taken in one way and
        * stored in a database another way.
        *
        * @author Apache Software Foundation
        * @author Archimedes Trajano
        * @version $Id: CompositeFormat.java 905636 2010-02-02 14:03:32Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CompositeFormat</name>
        <super>
            <extends>extends
                <name>Format</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-4329119827877627683L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The parser to use. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Format</name>
                    </type>
                    <name>parser</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The formatter to use. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Format</name>
                    </type>
                    <name>formatter</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Create a format that points its parseObject method to one implementation
                * and its format method to another.
                *
                * @param parser implementation
                * @param formatter implementation
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>CompositeFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Format</name>
                            </type>
                            <name>parser</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Format</name>
                            </type>
                            <name>formatter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>parser</name>
                            </name>
                            =
                            <name>parser</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>formatter</name>
                            </name>
                            =
                            <name>formatter</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Uses the formatter Format instance.
                *
                * @param obj the object to format
                * @param toAppendTo the {@link StringBuffer} to append to
                * @param pos the FieldPosition to use (or ignore).
                * @return &lt;code&gt;toAppendTo&lt;/code&gt;
                * @see Format#format(Object, StringBuffer, FieldPosition)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StringBuffer</name>
                </type>
                <name>format</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>toAppendTo</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>FieldPosition</name>
                            </type>
                            <name>pos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>formatter</name>.
                                    <name>format</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>obj</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toAppendTo</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Uses the parser Format instance.
                *
                * @param source the String source
                * @param pos the ParsePosition containing the position to parse from, will
                * be updated according to parsing success (index) or failure
                * (error index)
                * @return the parsed Object
                * @see Format#parseObject(String, ParsePosition)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>parseObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ParsePosition</name>
                            </type>
                            <name>pos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>parser</name>.
                                    <name>parseObject</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>source</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Provides access to the parser Format implementation.
                *
                * @return parser Format implementation
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Format</name>
                </type>
                <name>getParser</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>parser</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Provides access to the parser Format implementation.
                *
                * @return formatter Format implementation
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Format</name>
                </type>
                <name>getFormatter</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>formatter</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Utility method to parse and then reformat a String.
                *
                * @param input String to reformat
                * @return A reformatted String
                * @throws ParseException thrown by parseObject(String) call
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>reformat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ParseException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>format</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>parseObject</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>input</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
