<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\reflect\ConstructorUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>reflect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Constructor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationTargetException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Modifier</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>ArrayUtils</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>ClassUtils</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt; Utility reflection methods focussed on constructors, modelled after
        * {@link MethodUtils}. &lt;/p&gt;
        *
        * &lt;h3&gt;Known Limitations&lt;/h3&gt; &lt;h4&gt;Accessing Public Constructors In A Default
        * Access Superclass&lt;/h4&gt; &lt;p&gt;There is an issue when invoking public constructors
        * contained in a default access superclass. Reflection locates these
        * constructors fine and correctly assigns them as public. However, an
        * &lt;code&gt;IllegalAccessException&lt;/code&gt; is thrown if the constructors is
        * invoked.&lt;/p&gt;
        *
        * &lt;p&gt;&lt;code&gt;ConstructorUtils&lt;/code&gt; contains a workaround for this situation. It
        * will attempt to call &lt;code&gt;setAccessible&lt;/code&gt; on this constructor. If this
        * call succeeds, then the method can be invoked as normal. This call will only
        * succeed when the application has sufficient security privilages. If this call
        * fails then a warning will be logged and the method may fail.&lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author Craig R. McClanahan
        * @author Ralph Schaer
        * @author Chris Audley
        * @author Rey Francois
        * @author Gregor Rayman
        * @author Jan Sorensen
        * @author Robert Burrell Donkin
        * @author Rodney Waldhoff
        * @since 2.5
        * @version $Id: ConstructorUtils.java 1056863 2011-01-09 02:00:25Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>ConstructorUtils</name>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;ConstructorUtils instances should NOT be constructed in standard
                * programming. Instead, the class should be used as
                * &lt;code&gt;ConstructorUtils.invokeConstructor(cls, args)&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean
                * instance to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ConstructorUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns new instance of &lt;code&gt;klazz&lt;/code&gt; created using the actual
                * arguments &lt;code&gt;args&lt;/code&gt;. The formal parameter types are inferred from
                * the actual values of &lt;code&gt;args&lt;/code&gt;. See
                * {@link #invokeExactConstructor(Class, Object[], Class[])} for more
                * details.&lt;/p&gt;
                *
                * &lt;p&gt;The signatures should be assignment compatible.&lt;/p&gt;
                *
                * @param cls the class to be constructed.
                * @param arg the actual argument
                * @return new instance of &lt;code&gt;klazz&lt;/code&gt;
                *
                * @throws NoSuchMethodException If the constructor cannot be found
                * @throws IllegalAccessException If an error occurs accessing the constructor
                * @throws InvocationTargetException If an error occurs invoking the constructor
                * @throws InstantiationException If an error occurs instantiating the class
                *
                * @see #invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>arg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InstantiationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>invokeConstructor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Object</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>arg</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns new instance of &lt;code&gt;klazz&lt;/code&gt; created using the actual
                * arguments &lt;code&gt;args&lt;/code&gt;. The formal parameter types are inferred from
                * the actual values of &lt;code&gt;args&lt;/code&gt;. See
                * {@link #invokeExactConstructor(Class, Object[], Class[])} for more
                * details.&lt;/p&gt;
                * &lt;p&gt;The signatures should be assignment compatible.&lt;/p&gt;
                *
                * @param cls the class to be constructed.
                * @param args actual argument array
                * @return new instance of &lt;code&gt;klazz&lt;/code&gt;
                *
                * @throws NoSuchMethodException If the constructor cannot be found
                * @throws IllegalAccessException If an error occurs accessing the
                * constructor
                * @throws InvocationTargetException If an error occurs invoking the
                * constructor
                * @throws InstantiationException If an error occurs instantiating the class
                *
                * @see #invokeConstructor(java.lang.Class, java.lang.Object[],
                * java.lang.Class[])
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InstantiationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>null</name>
                                ==
                                <name>args</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>
                                <name>parameterTypes</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Class</name>
                                        <index>[
                                            <expr>
                                                <name><name>args</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>args</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>parameterTypes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>args</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>invokeConstructor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parameterTypes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns new instance of &lt;code&gt;klazz&lt;/code&gt; created using constructor
                * with signature &lt;code&gt;parameterTypes&lt;/code&gt; and actual arguments
                * &lt;code&gt;args&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;The signatures should be assignment compatible.&lt;/p&gt;
                *
                * @param cls the class to be constructed.
                * @param args actual argument array
                * @param parameterTypes parameter types array
                * @return new instance of &lt;code&gt;klazz&lt;/code&gt;
                *
                * @throws NoSuchMethodException if matching constructor cannot be found
                * @throws IllegalAccessException thrown on the constructor's invocation
                * @throws InvocationTargetException thrown on the constructor's invocation
                * @throws InstantiationException thrown on the constructor's invocation
                * @see Constructor#newInstance
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InstantiationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>parameterTypes</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>parameterTypes</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_CLASS_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>args</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Constructor</name>
                            </type>
                            <name>ctor</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getMatchingAccessibleConstructor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cls</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>parameterTypes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>null</name>
                                ==
                                <name>ctor</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchMethodException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"No such accessible constructor on object: "
                                                        +
                                                        <call>
                                                            <name><name>cls</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>ctor</name>.
                                    <name>newInstance</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns new instance of &lt;code&gt;klazz&lt;/code&gt; created using the actual
                * arguments &lt;code&gt;args&lt;/code&gt;. The formal parameter types are inferred from
                * the actual values of &lt;code&gt;args&lt;/code&gt;. See
                * {@link #invokeExactConstructor(Class, Object[], Class[])} for more
                * details.&lt;/p&gt;
                *
                * &lt;p&gt;The signatures should match exactly.&lt;/p&gt;
                *
                * @param cls the class to be constructed.
                * @param arg the actual argument
                * @return new instance of &lt;code&gt;klazz&lt;/code&gt;
                *
                * @throws NoSuchMethodException If the constructor cannot be found
                * @throws IllegalAccessException If an error occurs accessing the constructor
                * @throws InvocationTargetException If an error occurs invoking the constructor
                * @throws InstantiationException If an error occurs instantiating the class
                *
                * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeExactConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>arg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InstantiationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>invokeExactConstructor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Object</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>arg</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns new instance of &lt;code&gt;klazz&lt;/code&gt; created using the actual
                * arguments &lt;code&gt;args&lt;/code&gt;. The formal parameter types are inferred from
                * the actual values of &lt;code&gt;args&lt;/code&gt;. See
                * {@link #invokeExactConstructor(Class, Object[], Class[])} for more
                * details.&lt;/p&gt;
                *
                * &lt;p&gt;The signatures should match exactly.&lt;/p&gt;
                *
                * @param cls the class to be constructed.
                * @param args actual argument array
                * @return new instance of &lt;code&gt;klazz&lt;/code&gt;
                *
                * @throws NoSuchMethodException If the constructor cannot be found
                * @throws IllegalAccessException If an error occurs accessing the
                * constructor
                * @throws InvocationTargetException If an error occurs invoking the
                * constructor
                * @throws InstantiationException If an error occurs instantiating the class
                *
                * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[],
                * java.lang.Class[])
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeExactConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InstantiationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>null</name>
                                ==
                                <name>args</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>arguments</name> =
                            <init>
                                <expr>
                                    <name><name>args</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>
                                <name>parameterTypes</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Class</name>
                                        <index>[
                                            <expr>
                                                <name>arguments</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>arguments</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>parameterTypes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>args</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>invokeExactConstructor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parameterTypes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns new instance of &lt;code&gt;klazz&lt;/code&gt; created using constructor
                * with signature &lt;code&gt;parameterTypes&lt;/code&gt; and actual arguments
                * &lt;code&gt;args&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;The signatures should match exactly.&lt;/p&gt;
                *
                * @param cls the class to be constructed.
                * @param args actual argument array
                * @param parameterTypes parameter types array
                * @return new instance of &lt;code&gt;klazz&lt;/code&gt;
                *
                * @throws NoSuchMethodException if matching constructor cannot be found
                * @throws IllegalAccessException thrown on the constructor's invocation
                * @throws InvocationTargetException thrown on the constructor's invocation
                * @throws InstantiationException thrown on the constructor's invocation
                * @see Constructor#newInstance
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeExactConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InstantiationException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>args</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>parameterTypes</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>parameterTypes</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_CLASS_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Constructor</name>
                            </type>
                            <name>ctor</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getAccessibleConstructor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cls</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>parameterTypes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>null</name>
                                ==
                                <name>ctor</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchMethodException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"No such accessible constructor on object: "
                                                        +
                                                        <call>
                                                            <name><name>cls</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>ctor</name>.
                                    <name>newInstance</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a constructor with single argument.
                * @param cls the class to be constructed
                * @param parameterType The constructor parameter type
                * @return null if matching accessible constructor can not be found.
                * @see Class#getConstructor
                * @see #getAccessibleConstructor(java.lang.reflect.Constructor)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Constructor</name>
                </type>
                <name>getAccessibleConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>parameterType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getAccessibleConstructor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Class</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>parameterType</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a constructor given a class and signature.
                * @param cls the class to be constructed
                * @param parameterTypes the parameter array
                * @return null if matching accessible constructor can not be found
                * @see Class#getConstructor
                * @see #getAccessibleConstructor(java.lang.reflect.Constructor)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Constructor</name>
                </type>
                <name>getAccessibleConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>getAccessibleConstructor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>cls</name>.
                                                            <name>getConstructor</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>parameterTypes</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NoSuchMethodException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return
                                    <expr>(<name>null</name>)
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns accessible version of the given constructor.
                * @param ctor prototype constructor object.
                * @return &lt;code&gt;null&lt;/code&gt; if accessible constructor can not be found.
                * @see java.lang.SecurityManager
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Constructor</name>
                </type>
                <name>getAccessibleConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Constructor</name>
                            </type>
                            <name>ctor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MemberUtils</name>.
                                    <name>isAccessible</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ctor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>Modifier</name>.
                                    <name>isPublic</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ctor</name>.
                                                    <name>getDeclaringClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getModifiers</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ? <name>ctor</name> :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Find an accessible constructor with compatible parameters. Compatible
                * parameters mean that every method parameter is assignable from the given
                * parameters. In other words, it finds constructor that will take the
                * parameters given.&lt;/p&gt;
                *
                * &lt;p&gt;First it checks if there is constructor matching the exact signature.
                * If no such, all the constructors of the class are tested if their
                * signatures are assignment compatible with the parameter types. The first
                * matching constructor is returned.&lt;/p&gt;
                *
                * @param cls find constructor for this class
                * @param parameterTypes find method with compatible parameters
                * @return a valid Constructor object. If there's no matching constructor,
                * returns &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Constructor</name>
                </type>
                <name>getMatchingAccessibleConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// see if we can find the constructor directly</comment>
                    <comment type="line">// most of the time this works and it's much faster</comment>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Constructor</name>
                                    </type>
                                    <name>ctor</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>cls</name>.
                                                    <name>getConstructor</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>parameterTypes</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>MemberUtils</name>.
                                            <name>setAccessibleWorkaround</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>ctor</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>ctor</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NoSuchMethodException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="block">/* SWALLOW */</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Constructor</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// search through all constructors</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Constructor</name>
                                <index>[]</index>
                            </type>
                            <name>ctors</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>cls</name>.
                                            <name>getConstructors</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// return best match:</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>ctors</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{

                            <comment type="line">// compare parameters</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>ClassUtils</name>.
                                                <name>isAssignable</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>parameterTypes</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>ctors</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        .
                                                        <call>
                                                            <name>getParameterTypes</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// get accessible version of constructor</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Constructor</name>
                                                </type>
                                                <name>ctor</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getAccessibleConstructor</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>ctors</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>ctor</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>MemberUtils</name>.
                                                                    <name>setAccessibleWorkaround</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ctor</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>result</name>
                                                                ==
                                                                <name>null</name>
                                                                ||
                                                                <call>
                                                                    <name><name>MemberUtils</name>.
                                                                        <name>compareParameterTypes</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>ctor</name>.
                                                                                        <name>getParameterTypes</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>
                                                                                        <name>result</name>
                                                                                        .
                                                                                        <name>getParameterTypes</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>parameterTypes</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                &lt; 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>result</name>
                                                                        =
                                                                        <name>ctor</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
