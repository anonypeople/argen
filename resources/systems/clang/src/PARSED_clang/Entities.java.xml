<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\Entities.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>StringWriter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Writer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>TreeMap</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;
        * Provides HTML and XML entity utilities.
        * &lt;/p&gt;
        *
        * @see &lt;a href="http://hotwired.lycos.com/webmonkey/reference/special_characters/"&gt;ISO Entities&lt;/a&gt;
        * @see &lt;a href="http://www.w3.org/TR/REC-html32#latin1"&gt;HTML 3.2 Character Entities for ISO Latin-1&lt;/a&gt;
        * @see &lt;a href="http://www.w3.org/TR/REC-html40/sgml/entities.html"&gt;HTML 4.0 Character entity references&lt;/a&gt;
        * @see &lt;a href="http://www.w3.org/TR/html401/charset.html#h-5.3"&gt;HTML 4.01 Character References&lt;/a&gt;
        * @see &lt;a href="http://www.w3.org/TR/html401/charset.html#code-position"&gt;HTML 4.01 Code positions&lt;/a&gt;
        *
        * @author &lt;a href="mailto:alex@purpletech.com"&gt;Alexander Day Chaffee&lt;/a&gt;
        * @author &lt;a href="mailto:ggregory@seagullsw.com"&gt;Gary Gregory&lt;/a&gt;
        * @since 2.0
        * @version $Id: Entities.java 1057037 2011-01-09 21:35:32Z niallp $
        */
    </comment>
    <class>class <name>Entities</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                        <index>[]</index>
                    </type>
                    <name>BASIC_ARRAY</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <block>{<expr>"quot"</expr>, <expr>"34"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// " - double-quote</comment>
                                <expr>
                                    <block>{<expr>"amp"</expr>, <expr>"38"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// &amp; - ampersand</comment>
                                <expr>
                                    <block>{<expr>"lt"</expr>, <expr>"60"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// &lt; - less-than</comment>
                                <expr>
                                    <block>{<expr>"gt"</expr>, <expr>"62"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// &gt; - greater-than</comment>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                        <index>[]</index>
                    </type>
                    <name>APOS_ARRAY</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <block>{<expr>"apos"</expr>, <expr>"39"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// XML apostrophe</comment>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// package scoped for testing</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                        <index>[]</index>
                    </type>
                    <name>ISO8859_1_ARRAY</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <block>{<expr>"nbsp"</expr>, <expr>"160"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// non-breaking space</comment>
                                <expr>
                                    <block>{<expr>"iexcl"</expr>, <expr>"161"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// inverted exclamation mark</comment>
                                <expr>
                                    <block>{<expr>"cent"</expr>, <expr>"162"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// cent sign</comment>
                                <expr>
                                    <block>{<expr>"pound"</expr>, <expr>"163"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// pound sign</comment>
                                <expr>
                                    <block>{<expr>"curren"</expr>, <expr>"164"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// currency sign</comment>
                                <expr>
                                    <block>{<expr>"yen"</expr>, <expr>"165"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// yen sign = yuan sign</comment>
                                <expr>
                                    <block>{<expr>"brvbar"</expr>, <expr>"166"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// broken bar = broken vertical bar</comment>
                                <expr>
                                    <block>{<expr>"sect"</expr>, <expr>"167"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// section sign</comment>
                                <expr>
                                    <block>{<expr>"uml"</expr>, <expr>"168"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// diaeresis = spacing diaeresis</comment>
                                <expr>
                                    <block>{<expr>"copy"</expr>, <expr>"169"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// © - copyright sign</comment>
                                <expr>
                                    <block>{<expr>"ordf"</expr>, <expr>"170"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// feminine ordinal indicator</comment>
                                <expr>
                                    <block>{<expr>"laquo"</expr>, <expr>"171"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// left-pointing double angle quotation mark = left pointing
                                    guillemet
                                </comment>
                                <expr>
                                    <block>{<expr>"not"</expr>, <expr>"172"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// not sign</comment>
                                <expr>
                                    <block>{<expr>"shy"</expr>, <expr>"173"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// soft hyphen = discretionary hyphen</comment>
                                <expr>
                                    <block>{<expr>"reg"</expr>, <expr>"174"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ® - registered trademark sign</comment>
                                <expr>
                                    <block>{<expr>"macr"</expr>, <expr>"175"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// macron = spacing macron = overline = APL overbar</comment>
                                <expr>
                                    <block>{<expr>"deg"</expr>, <expr>"176"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// degree sign</comment>
                                <expr>
                                    <block>{<expr>"plusmn"</expr>, <expr>"177"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// plus-minus sign = plus-or-minus sign</comment>
                                <expr>
                                    <block>{<expr>"sup2"</expr>, <expr>"178"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// superscript two = superscript digit two = squared</comment>
                                <expr>
                                    <block>{<expr>"sup3"</expr>, <expr>"179"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// superscript three = superscript digit three = cubed</comment>
                                <expr>
                                    <block>{<expr>"acute"</expr>, <expr>"180"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// acute accent = spacing acute</comment>
                                <expr>
                                    <block>{<expr>"micro"</expr>, <expr>"181"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// micro sign</comment>
                                <expr>
                                    <block>{<expr>"para"</expr>, <expr>"182"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// pilcrow sign = paragraph sign</comment>
                                <expr>
                                    <block>{<expr>"middot"</expr>, <expr>"183"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// middle dot = Georgian comma = Greek middle dot</comment>
                                <expr>
                                    <block>{<expr>"cedil"</expr>, <expr>"184"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// cedilla = spacing cedilla</comment>
                                <expr>
                                    <block>{<expr>"sup1"</expr>, <expr>"185"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// superscript one = superscript digit one</comment>
                                <expr>
                                    <block>{<expr>"ordm"</expr>, <expr>"186"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// masculine ordinal indicator</comment>
                                <expr>
                                    <block>{<expr>"raquo"</expr>, <expr>"187"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// right-pointing double angle quotation mark = right pointing
                                    guillemet
                                </comment>
                                <expr>
                                    <block>{<expr>"frac14"</expr>, <expr>"188"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// vulgar fraction one quarter = fraction one quarter</comment>
                                <expr>
                                    <block>{<expr>"frac12"</expr>, <expr>"189"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// vulgar fraction one half = fraction one half</comment>
                                <expr>
                                    <block>{<expr>"frac34"</expr>, <expr>"190"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// vulgar fraction three quarters = fraction three quarters
                                </comment>
                                <expr>
                                    <block>{<expr>"iquest"</expr>, <expr>"191"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// inverted question mark = turned question mark</comment>
                                <expr>
                                    <block>{<expr>"Agrave"</expr>, <expr>"192"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// À - uppercase A, grave accent</comment>
                                <expr>
                                    <block>{<expr>"Aacute"</expr>, <expr>"193"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Á - uppercase A, acute accent</comment>
                                <expr>
                                    <block>{<expr>"Acirc"</expr>, <expr>"194"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Â - uppercase A, circumflex accent</comment>
                                <expr>
                                    <block>{<expr>"Atilde"</expr>, <expr>"195"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ã - uppercase A, tilde</comment>
                                <expr>
                                    <block>{<expr>"Auml"</expr>, <expr>"196"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ä - uppercase A, umlaut</comment>
                                <expr>
                                    <block>{<expr>"Aring"</expr>, <expr>"197"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Å - uppercase A, ring</comment>
                                <expr>
                                    <block>{<expr>"AElig"</expr>, <expr>"198"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Æ - uppercase AE</comment>
                                <expr>
                                    <block>{<expr>"Ccedil"</expr>, <expr>"199"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ç - uppercase C, cedilla</comment>
                                <expr>
                                    <block>{<expr>"Egrave"</expr>, <expr>"200"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// È - uppercase E, grave accent</comment>
                                <expr>
                                    <block>{<expr>"Eacute"</expr>, <expr>"201"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// É - uppercase E, acute accent</comment>
                                <expr>
                                    <block>{<expr>"Ecirc"</expr>, <expr>"202"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ê - uppercase E, circumflex accent</comment>
                                <expr>
                                    <block>{<expr>"Euml"</expr>, <expr>"203"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ë - uppercase E, umlaut</comment>
                                <expr>
                                    <block>{<expr>"Igrave"</expr>, <expr>"204"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ì - uppercase I, grave accent</comment>
                                <expr>
                                    <block>{<expr>"Iacute"</expr>, <expr>"205"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Í - uppercase I, acute accent</comment>
                                <expr>
                                    <block>{<expr>"Icirc"</expr>, <expr>"206"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Î - uppercase I, circumflex accent</comment>
                                <expr>
                                    <block>{<expr>"Iuml"</expr>, <expr>"207"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ï - uppercase I, umlaut</comment>
                                <expr>
                                    <block>{<expr>"ETH"</expr>, <expr>"208"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ð - uppercase Eth, Icelandic</comment>
                                <expr>
                                    <block>{<expr>"Ntilde"</expr>, <expr>"209"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ñ - uppercase N, tilde</comment>
                                <expr>
                                    <block>{<expr>"Ograve"</expr>, <expr>"210"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ò - uppercase O, grave accent</comment>
                                <expr>
                                    <block>{<expr>"Oacute"</expr>, <expr>"211"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ó - uppercase O, acute accent</comment>
                                <expr>
                                    <block>{<expr>"Ocirc"</expr>, <expr>"212"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ô - uppercase O, circumflex accent</comment>
                                <expr>
                                    <block>{<expr>"Otilde"</expr>, <expr>"213"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Õ - uppercase O, tilde</comment>
                                <expr>
                                    <block>{<expr>"Ouml"</expr>, <expr>"214"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ö - uppercase O, umlaut</comment>
                                <expr>
                                    <block>{<expr>"times"</expr>, <expr>"215"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// multiplication sign</comment>
                                <expr>
                                    <block>{<expr>"Oslash"</expr>, <expr>"216"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ø - uppercase O, slash</comment>
                                <expr>
                                    <block>{<expr>"Ugrave"</expr>, <expr>"217"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ù - uppercase U, grave accent</comment>
                                <expr>
                                    <block>{<expr>"Uacute"</expr>, <expr>"218"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ú - uppercase U, acute accent</comment>
                                <expr>
                                    <block>{<expr>"Ucirc"</expr>, <expr>"219"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Û - uppercase U, circumflex accent</comment>
                                <expr>
                                    <block>{<expr>"Uuml"</expr>, <expr>"220"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ü - uppercase U, umlaut</comment>
                                <expr>
                                    <block>{<expr>"Yacute"</expr>, <expr>"221"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Ý - uppercase Y, acute accent</comment>
                                <expr>
                                    <block>{<expr>"THORN"</expr>, <expr>"222"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// Þ - uppercase THORN, Icelandic</comment>
                                <expr>
                                    <block>{<expr>"szlig"</expr>, <expr>"223"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ß - lowercase sharps, German</comment>
                                <expr>
                                    <block>{<expr>"agrave"</expr>, <expr>"224"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// à - lowercase a, grave accent</comment>
                                <expr>
                                    <block>{<expr>"aacute"</expr>, <expr>"225"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// á - lowercase a, acute accent</comment>
                                <expr>
                                    <block>{<expr>"acirc"</expr>, <expr>"226"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// â - lowercase a, circumflex accent</comment>
                                <expr>
                                    <block>{<expr>"atilde"</expr>, <expr>"227"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ã - lowercase a, tilde</comment>
                                <expr>
                                    <block>{<expr>"auml"</expr>, <expr>"228"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ä - lowercase a, umlaut</comment>
                                <expr>
                                    <block>{<expr>"aring"</expr>, <expr>"229"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// å - lowercase a, ring</comment>
                                <expr>
                                    <block>{<expr>"aelig"</expr>, <expr>"230"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// æ - lowercase ae</comment>
                                <expr>
                                    <block>{<expr>"ccedil"</expr>, <expr>"231"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ç - lowercase c, cedilla</comment>
                                <expr>
                                    <block>{<expr>"egrave"</expr>, <expr>"232"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// è - lowercase e, grave accent</comment>
                                <expr>
                                    <block>{<expr>"eacute"</expr>, <expr>"233"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// é - lowercase e, acute accent</comment>
                                <expr>
                                    <block>{<expr>"ecirc"</expr>, <expr>"234"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ê - lowercase e, circumflex accent</comment>
                                <expr>
                                    <block>{<expr>"euml"</expr>, <expr>"235"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ë - lowercase e, umlaut</comment>
                                <expr>
                                    <block>{<expr>"igrave"</expr>, <expr>"236"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ì - lowercase i, grave accent</comment>
                                <expr>
                                    <block>{<expr>"iacute"</expr>, <expr>"237"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// í - lowercase i, acute accent</comment>
                                <expr>
                                    <block>{<expr>"icirc"</expr>, <expr>"238"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// î - lowercase i, circumflex accent</comment>
                                <expr>
                                    <block>{<expr>"iuml"</expr>, <expr>"239"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ï - lowercase i, umlaut</comment>
                                <expr>
                                    <block>{<expr>"eth"</expr>, <expr>"240"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ð - lowercase eth, Icelandic</comment>
                                <expr>
                                    <block>{<expr>"ntilde"</expr>, <expr>"241"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ñ - lowercase n, tilde</comment>
                                <expr>
                                    <block>{<expr>"ograve"</expr>, <expr>"242"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ò - lowercase o, grave accent</comment>
                                <expr>
                                    <block>{<expr>"oacute"</expr>, <expr>"243"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ó - lowercase o, acute accent</comment>
                                <expr>
                                    <block>{<expr>"ocirc"</expr>, <expr>"244"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ô - lowercase o, circumflex accent</comment>
                                <expr>
                                    <block>{<expr>"otilde"</expr>, <expr>"245"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// õ - lowercase o, tilde</comment>
                                <expr>
                                    <block>{<expr>"ouml"</expr>, <expr>"246"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ö - lowercase o, umlaut</comment>
                                <expr>
                                    <block>{<expr>"divide"</expr>, <expr>"247"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// division sign</comment>
                                <expr>
                                    <block>{<expr>"oslash"</expr>, <expr>"248"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ø - lowercase o, slash</comment>
                                <expr>
                                    <block>{<expr>"ugrave"</expr>, <expr>"249"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ù - lowercase u, grave accent</comment>
                                <expr>
                                    <block>{<expr>"uacute"</expr>, <expr>"250"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ú - lowercase u, acute accent</comment>
                                <expr>
                                    <block>{<expr>"ucirc"</expr>, <expr>"251"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// û - lowercase u, circumflex accent</comment>
                                <expr>
                                    <block>{<expr>"uuml"</expr>, <expr>"252"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ü - lowercase u, umlaut</comment>
                                <expr>
                                    <block>{<expr>"yacute"</expr>, <expr>"253"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ý - lowercase y, acute accent</comment>
                                <expr>
                                    <block>{<expr>"thorn"</expr>, <expr>"254"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// þ - lowercase thorn, Icelandic</comment>
                                <expr>
                                    <block>{<expr>"yuml"</expr>, <expr>"255"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// ÿ - lowercase y, umlaut</comment>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// http://www.w3.org/TR/REC-html40/sgml/entities.html</comment>
            <comment type="line">// package scoped for testing</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                        <index>[]</index>
                        <index>[]</index>
                    </type>
                    <name>HTML40_ARRAY</name> =
                    <init>
                        <expr>
                            <block>{
                                <comment type="line">// &lt;!-- Latin Extended-B --&gt;</comment>
                                <expr>
                                    <block>{<expr>"fnof"</expr>, <expr>"402"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// latin small f with hook = function= florin, U+0192 ISOtech --&gt;</comment>
                                <comment type="line">// &lt;!-- Greek --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Alpha"</expr>, <expr>"913"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter alpha, U+0391 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Beta"</expr>, <expr>"914"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter beta, U+0392 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Gamma"</expr>, <expr>"915"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter gamma,U+0393 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Delta"</expr>, <expr>"916"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter delta,U+0394 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Epsilon"</expr>, <expr>"917"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter epsilon, U+0395 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Zeta"</expr>, <expr>"918"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter zeta, U+0396 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Eta"</expr>, <expr>"919"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter eta, U+0397 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Theta"</expr>, <expr>"920"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter theta,U+0398 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Iota"</expr>, <expr>"921"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter iota, U+0399 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Kappa"</expr>, <expr>"922"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter kappa, U+039A --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Lambda"</expr>, <expr>"923"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter lambda,U+039B ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Mu"</expr>, <expr>"924"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter mu, U+039C --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Nu"</expr>, <expr>"925"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter nu, U+039D --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Xi"</expr>, <expr>"926"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter xi, U+039E ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Omicron"</expr>, <expr>"927"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter omicron, U+039F --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Pi"</expr>, <expr>"928"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter pi, U+03A0 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Rho"</expr>, <expr>"929"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter rho, U+03A1 --&gt;</comment>
                                <comment type="line">// &lt;!-- there is no Sigmaf, and no U+03A2 character either --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Sigma"</expr>, <expr>"931"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter sigma,U+03A3 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Tau"</expr>, <expr>"932"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter tau, U+03A4 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Upsilon"</expr>, <expr>"933"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter upsilon,U+03A5 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Phi"</expr>, <expr>"934"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter phi,U+03A6 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Chi"</expr>, <expr>"935"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter chi, U+03A7 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Psi"</expr>, <expr>"936"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter psi,U+03A8 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Omega"</expr>, <expr>"937"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek capital letter omega,U+03A9 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"alpha"</expr>, <expr>"945"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter alpha,U+03B1 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"beta"</expr>, <expr>"946"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter beta, U+03B2 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"gamma"</expr>, <expr>"947"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter gamma,U+03B3 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"delta"</expr>, <expr>"948"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter delta,U+03B4 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"epsilon"</expr>, <expr>"949"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter epsilon,U+03B5 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"zeta"</expr>, <expr>"950"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter zeta, U+03B6 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"eta"</expr>, <expr>"951"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter eta, U+03B7 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"theta"</expr>, <expr>"952"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter theta,U+03B8 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"iota"</expr>, <expr>"953"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter iota, U+03B9 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"kappa"</expr>, <expr>"954"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter kappa,U+03BA ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"lambda"</expr>, <expr>"955"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter lambda,U+03BB ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"mu"</expr>, <expr>"956"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter mu, U+03BC ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"nu"</expr>, <expr>"957"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter nu, U+03BD ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"xi"</expr>, <expr>"958"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter xi, U+03BE ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"omicron"</expr>, <expr>"959"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter omicron, U+03BF NEW --&gt;</comment>
                                <expr>
                                    <block>{<expr>"pi"</expr>, <expr>"960"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter pi, U+03C0 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"rho"</expr>, <expr>"961"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter rho, U+03C1 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"sigmaf"</expr>, <expr>"962"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter final sigma,U+03C2 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"sigma"</expr>, <expr>"963"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter sigma,U+03C3 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"tau"</expr>, <expr>"964"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter tau, U+03C4 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"upsilon"</expr>, <expr>"965"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter upsilon,U+03C5 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"phi"</expr>, <expr>"966"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter phi, U+03C6 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"chi"</expr>, <expr>"967"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter chi, U+03C7 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"psi"</expr>, <expr>"968"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter psi, U+03C8 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"omega"</expr>, <expr>"969"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter omega,U+03C9 ISOgrk3 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"thetasym"</expr>, <expr>"977"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek small letter theta symbol,U+03D1 NEW --&gt;</comment>
                                <expr>
                                    <block>{<expr>"upsih"</expr>, <expr>"978"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek upsilon with hook symbol,U+03D2 NEW --&gt;</comment>
                                <expr>
                                    <block>{<expr>"piv"</expr>, <expr>"982"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greek pi symbol, U+03D6 ISOgrk3 --&gt;</comment>
                                <comment type="line">// &lt;!-- General Punctuation --&gt;</comment>
                                <expr>
                                    <block>{<expr>"bull"</expr>, <expr>"8226"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// bullet = black small circle,U+2022 ISOpub --&gt;</comment>
                                <comment type="line">// &lt;!-- bullet is NOT the same as bullet operator, U+2219
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"hellip"</expr>, <expr>"8230"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// horizontal ellipsis = three dot leader,U+2026 ISOpub
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"prime"</expr>, <expr>"8242"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// prime = minutes = feet, U+2032 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Prime"</expr>, <expr>"8243"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// double prime = seconds = inches,U+2033 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"oline"</expr>, <expr>"8254"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// overline = spacing overscore,U+203E NEW --&gt;</comment>
                                <expr>
                                    <block>{<expr>"frasl"</expr>, <expr>"8260"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// fraction slash, U+2044 NEW --&gt;</comment>
                                <comment type="line">// &lt;!-- Letterlike Symbols --&gt;</comment>
                                <expr>
                                    <block>{<expr>"weierp"</expr>, <expr>"8472"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// script capital P = power set= Weierstrass p, U+2118 ISOamso --&gt;</comment>
                                <expr>
                                    <block>{<expr>"image"</expr>, <expr>"8465"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// blackletter capital I = imaginary part,U+2111 ISOamso
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"real"</expr>, <expr>"8476"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// blackletter capital R = real part symbol,U+211C ISOamso
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"trade"</expr>, <expr>"8482"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// trade mark sign, U+2122 ISOnum --&gt;</comment>
                                <expr>
                                    <block>{<expr>"alefsym"</expr>, <expr>"8501"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// alef symbol = first transfinite cardinal,U+2135 NEW
                                    --&gt;</comment>
                                <comment type="line">// &lt;!-- alef symbol is NOT the same as hebrew letter alef,U+05D0
                                    although the
                                </comment>
                                <comment type="line">// same glyph could be used to depict both characters
                                    --&gt;</comment>
                                <comment type="line">// &lt;!-- Arrows --&gt;</comment>
                                <expr>
                                    <block>{<expr>"larr"</expr>, <expr>"8592"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// leftwards arrow, U+2190 ISOnum --&gt;</comment>
                                <expr>
                                    <block>{<expr>"uarr"</expr>, <expr>"8593"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// upwards arrow, U+2191 ISOnum--&gt;</comment>
                                <expr>
                                    <block>{<expr>"rarr"</expr>, <expr>"8594"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// rightwards arrow, U+2192 ISOnum --&gt;</comment>
                                <expr>
                                    <block>{<expr>"darr"</expr>, <expr>"8595"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// downwards arrow, U+2193 ISOnum --&gt;</comment>
                                <expr>
                                    <block>{<expr>"harr"</expr>, <expr>"8596"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// left right arrow, U+2194 ISOamsa --&gt;</comment>
                                <expr>
                                    <block>{<expr>"crarr"</expr>, <expr>"8629"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// downwards arrow with corner leftwards= carriage return, U+21B5
                                    NEW --&gt;</comment>
                                <expr>
                                    <block>{<expr>"lArr"</expr>, <expr>"8656"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// leftwards double arrow, U+21D0 ISOtech --&gt;</comment>
                                <comment type="line">// &lt;!-- ISO 10646 does not say that lArr is the same as the 'is
                                    implied by'
                                </comment>
                                <comment type="line">// arrow but also does not have any other character for that
                                    function.
                                </comment>
                                <comment type="line">// So ? lArr canbe used for 'is implied by' as ISOtech suggests --&gt;</comment>
                                <expr>
                                    <block>{<expr>"uArr"</expr>, <expr>"8657"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// upwards double arrow, U+21D1 ISOamsa --&gt;</comment>
                                <expr>
                                    <block>{<expr>"rArr"</expr>, <expr>"8658"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// rightwards double arrow,U+21D2 ISOtech --&gt;</comment>
                                <comment type="line">// &lt;!-- ISO 10646 does not say this is the 'implies' character
                                    but does not
                                </comment>
                                <comment type="line">// have another character with this function so ?rArr can be used
                                    for
                                </comment>
                                <comment type="line">// 'implies' as ISOtech suggests --&gt;</comment>
                                <expr>
                                    <block>{<expr>"dArr"</expr>, <expr>"8659"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// downwards double arrow, U+21D3 ISOamsa --&gt;</comment>
                                <expr>
                                    <block>{<expr>"hArr"</expr>, <expr>"8660"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// left right double arrow,U+21D4 ISOamsa --&gt;</comment>
                                <comment type="line">// &lt;!-- Mathematical Operators --&gt;</comment>
                                <expr>
                                    <block>{<expr>"forall"</expr>, <expr>"8704"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// for all, U+2200 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"part"</expr>, <expr>"8706"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// partial differential, U+2202 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"exist"</expr>, <expr>"8707"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// there exists, U+2203 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"empty"</expr>, <expr>"8709"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// empty set = null set = diameter,U+2205 ISOamso --&gt;</comment>
                                <expr>
                                    <block>{<expr>"nabla"</expr>, <expr>"8711"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// nabla = backward difference,U+2207 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"isin"</expr>, <expr>"8712"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// element of, U+2208 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"notin"</expr>, <expr>"8713"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// not an element of, U+2209 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"ni"</expr>, <expr>"8715"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// contains as member, U+220B ISOtech --&gt;</comment>
                                <comment type="line">// &lt;!-- should there be a more memorable name than 'ni'?
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"prod"</expr>, <expr>"8719"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// n-ary product = product sign,U+220F ISOamsb --&gt;</comment>
                                <comment type="line">// &lt;!-- prod is NOT the same character as U+03A0 'greek capital
                                    letter pi'
                                </comment>
                                <comment type="line">// though the same glyph might be used for both --&gt;</comment>
                                <expr>
                                    <block>{<expr>"sum"</expr>, <expr>"8721"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// n-ary summation, U+2211 ISOamsb --&gt;</comment>
                                <comment type="line">// &lt;!-- sum is NOT the same character as U+03A3 'greek capital
                                    letter sigma'
                                </comment>
                                <comment type="line">// though the same glyph might be used for both --&gt;</comment>
                                <expr>
                                    <block>{<expr>"minus"</expr>, <expr>"8722"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// minus sign, U+2212 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"lowast"</expr>, <expr>"8727"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// asterisk operator, U+2217 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"radic"</expr>, <expr>"8730"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// square root = radical sign,U+221A ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"prop"</expr>, <expr>"8733"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// proportional to, U+221D ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"infin"</expr>, <expr>"8734"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// infinity, U+221E ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"ang"</expr>, <expr>"8736"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// angle, U+2220 ISOamso --&gt;</comment>
                                <expr>
                                    <block>{<expr>"and"</expr>, <expr>"8743"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// logical and = wedge, U+2227 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"or"</expr>, <expr>"8744"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// logical or = vee, U+2228 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"cap"</expr>, <expr>"8745"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// intersection = cap, U+2229 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"cup"</expr>, <expr>"8746"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// union = cup, U+222A ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"int"</expr>, <expr>"8747"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// integral, U+222B ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"there4"</expr>, <expr>"8756"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// therefore, U+2234 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"sim"</expr>, <expr>"8764"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// tilde operator = varies with = similar to,U+223C ISOtech
                                    --&gt;</comment>
                                <comment type="line">// &lt;!-- tilde operator is NOT the same character as the tilde,
                                    U+007E,although
                                </comment>
                                <comment type="line">// the same glyph might be used to represent both --&gt;</comment>
                                <expr>
                                    <block>{<expr>"cong"</expr>, <expr>"8773"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// approximately equal to, U+2245 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"asymp"</expr>, <expr>"8776"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// almost equal to = asymptotic to,U+2248 ISOamsr --&gt;</comment>
                                <expr>
                                    <block>{<expr>"ne"</expr>, <expr>"8800"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// not equal to, U+2260 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"equiv"</expr>, <expr>"8801"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// identical to, U+2261 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"le"</expr>, <expr>"8804"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// less-than or equal to, U+2264 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"ge"</expr>, <expr>"8805"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// greater-than or equal to,U+2265 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"sub"</expr>, <expr>"8834"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// subset of, U+2282 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"sup"</expr>, <expr>"8835"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// superset of, U+2283 ISOtech --&gt;</comment>
                                <comment type="line">// &lt;!-- note that nsup, 'not a superset of, U+2283' is not
                                    covered by the
                                </comment>
                                <comment type="line">// Symbol font encoding and is not included. Should it be, for
                                    symmetry?
                                </comment>
                                <comment type="line">// It is in ISOamsn --&gt; &lt;!ENTITY nsub", "8836"},</comment>
                                <comment type="line">// not a subset of, U+2284 ISOamsn --&gt;</comment>
                                <expr>
                                    <block>{<expr>"sube"</expr>, <expr>"8838"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// subset of or equal to, U+2286 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"supe"</expr>, <expr>"8839"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// superset of or equal to,U+2287 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"oplus"</expr>, <expr>"8853"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// circled plus = direct sum,U+2295 ISOamsb --&gt;</comment>
                                <expr>
                                    <block>{<expr>"otimes"</expr>, <expr>"8855"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// circled times = vector product,U+2297 ISOamsb --&gt;</comment>
                                <expr>
                                    <block>{<expr>"perp"</expr>, <expr>"8869"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// up tack = orthogonal to = perpendicular,U+22A5 ISOtech
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"sdot"</expr>, <expr>"8901"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// dot operator, U+22C5 ISOamsb --&gt;</comment>
                                <comment type="line">// &lt;!-- dot operator is NOT the same character as U+00B7 middle
                                    dot --&gt;</comment>
                                <comment type="line">// &lt;!-- Miscellaneous Technical --&gt;</comment>
                                <expr>
                                    <block>{<expr>"lceil"</expr>, <expr>"8968"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// left ceiling = apl upstile,U+2308 ISOamsc --&gt;</comment>
                                <expr>
                                    <block>{<expr>"rceil"</expr>, <expr>"8969"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// right ceiling, U+2309 ISOamsc --&gt;</comment>
                                <expr>
                                    <block>{<expr>"lfloor"</expr>, <expr>"8970"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// left floor = apl downstile,U+230A ISOamsc --&gt;</comment>
                                <expr>
                                    <block>{<expr>"rfloor"</expr>, <expr>"8971"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// right floor, U+230B ISOamsc --&gt;</comment>
                                <expr>
                                    <block>{<expr>"lang"</expr>, <expr>"9001"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// left-pointing angle bracket = bra,U+2329 ISOtech
                                    --&gt;</comment>
                                <comment type="line">// &lt;!-- lang is NOT the same character as U+003C 'less than' or
                                    U+2039 'single left-pointing angle quotation
                                </comment>
                                <comment type="line">// mark' --&gt;</comment>
                                <expr>
                                    <block>{<expr>"rang"</expr>, <expr>"9002"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// right-pointing angle bracket = ket,U+232A ISOtech
                                    --&gt;</comment>
                                <comment type="line">// &lt;!-- rang is NOT the same character as U+003E 'greater than'
                                    or U+203A
                                </comment>
                                <comment type="line">// 'single right-pointing angle quotation mark' --&gt;</comment>
                                <comment type="line">// &lt;!-- Geometric Shapes --&gt;</comment>
                                <expr>
                                    <block>{<expr>"loz"</expr>, <expr>"9674"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// lozenge, U+25CA ISOpub --&gt;</comment>
                                <comment type="line">// &lt;!-- Miscellaneous Symbols --&gt;</comment>
                                <expr>
                                    <block>{<expr>"spades"</expr>, <expr>"9824"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// black spade suit, U+2660 ISOpub --&gt;</comment>
                                <comment type="line">// &lt;!-- black here seems to mean filled as opposed to hollow --&gt;</comment>
                                <expr>
                                    <block>{<expr>"clubs"</expr>, <expr>"9827"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// black club suit = shamrock,U+2663 ISOpub --&gt;</comment>
                                <expr>
                                    <block>{<expr>"hearts"</expr>, <expr>"9829"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// black heart suit = valentine,U+2665 ISOpub --&gt;</comment>
                                <expr>
                                    <block>{<expr>"diams"</expr>, <expr>"9830"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// black diamond suit, U+2666 ISOpub --&gt;</comment>

                                <comment type="line">// &lt;!-- Latin Extended-A --&gt;</comment>
                                <expr>
                                    <block>{<expr>"OElig"</expr>, <expr>"338"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// -- latin capital ligature OE,U+0152 ISOlat2 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"oelig"</expr>, <expr>"339"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// -- latin small ligature oe, U+0153 ISOlat2 --&gt;</comment>
                                <comment type="line">// &lt;!-- ligature is a misnomer, this is a separate character in
                                    some languages --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Scaron"</expr>, <expr>"352"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// -- latin capital letter S with caron,U+0160 ISOlat2
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"scaron"</expr>, <expr>"353"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// -- latin small letter s with caron,U+0161 ISOlat2
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Yuml"</expr>, <expr>"376"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// -- latin capital letter Y with diaeresis,U+0178 ISOlat2
                                    --&gt;</comment>
                                <comment type="line">// &lt;!-- Spacing Modifier Letters --&gt;</comment>
                                <expr>
                                    <block>{<expr>"circ"</expr>, <expr>"710"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// -- modifier letter circumflex accent,U+02C6 ISOpub
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"tilde"</expr>, <expr>"732"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// small tilde, U+02DC ISOdia --&gt;</comment>
                                <comment type="line">// &lt;!-- General Punctuation --&gt;</comment>
                                <expr>
                                    <block>{<expr>"ensp"</expr>, <expr>"8194"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// en space, U+2002 ISOpub --&gt;</comment>
                                <expr>
                                    <block>{<expr>"emsp"</expr>, <expr>"8195"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// em space, U+2003 ISOpub --&gt;</comment>
                                <expr>
                                    <block>{<expr>"thinsp"</expr>, <expr>"8201"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// thin space, U+2009 ISOpub --&gt;</comment>
                                <expr>
                                    <block>{<expr>"zwnj"</expr>, <expr>"8204"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// zero width non-joiner,U+200C NEW RFC 2070 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"zwj"</expr>, <expr>"8205"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// zero width joiner, U+200D NEW RFC 2070 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"lrm"</expr>, <expr>"8206"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// left-to-right mark, U+200E NEW RFC 2070 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"rlm"</expr>, <expr>"8207"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// right-to-left mark, U+200F NEW RFC 2070 --&gt;</comment>
                                <expr>
                                    <block>{<expr>"ndash"</expr>, <expr>"8211"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// en dash, U+2013 ISOpub --&gt;</comment>
                                <expr>
                                    <block>{<expr>"mdash"</expr>, <expr>"8212"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// em dash, U+2014 ISOpub --&gt;</comment>
                                <expr>
                                    <block>{<expr>"lsquo"</expr>, <expr>"8216"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// left single quotation mark,U+2018 ISOnum --&gt;</comment>
                                <expr>
                                    <block>{<expr>"rsquo"</expr>, <expr>"8217"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// right single quotation mark,U+2019 ISOnum --&gt;</comment>
                                <expr>
                                    <block>{<expr>"sbquo"</expr>, <expr>"8218"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// single low-9 quotation mark, U+201A NEW --&gt;</comment>
                                <expr>
                                    <block>{<expr>"ldquo"</expr>, <expr>"8220"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// left double quotation mark,U+201C ISOnum --&gt;</comment>
                                <expr>
                                    <block>{<expr>"rdquo"</expr>, <expr>"8221"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// right double quotation mark,U+201D ISOnum --&gt;</comment>
                                <expr>
                                    <block>{<expr>"bdquo"</expr>, <expr>"8222"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// double low-9 quotation mark, U+201E NEW --&gt;</comment>
                                <expr>
                                    <block>{<expr>"dagger"</expr>, <expr>"8224"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// dagger, U+2020 ISOpub --&gt;</comment>
                                <expr>
                                    <block>{<expr>"Dagger"</expr>, <expr>"8225"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// double dagger, U+2021 ISOpub --&gt;</comment>
                                <expr>
                                    <block>{<expr>"permil"</expr>, <expr>"8240"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// per mille sign, U+2030 ISOtech --&gt;</comment>
                                <expr>
                                    <block>{<expr>"lsaquo"</expr>, <expr>"8249"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// single left-pointing angle quotation mark,U+2039 ISO proposed --&gt;</comment>
                                <comment type="line">// &lt;!-- lsaquo is proposed but not yet ISO standardized
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"rsaquo"</expr>, <expr>"8250"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// single right-pointing angle quotation mark,U+203A ISO proposed
                                    --&gt;</comment>
                                <comment type="line">// &lt;!-- rsaquo is proposed but not yet ISO standardized
                                    --&gt;</comment>
                                <expr>
                                    <block>{<expr>"euro"</expr>, <expr>"8364"</expr>}
                                    </block>
                                </expr>
                                ,
                                <comment type="line">// -- euro sign, U+20AC NEW --&gt;</comment>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The set of entities supported by standard XML.
                * &lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Entities</name>
                    </type>
                    <name>XML</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The set of entities supported by HTML 3.2.
                * &lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Entities</name>
                    </type>
                    <name>HTML32</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The set of entities supported by HTML 4.0.
                * &lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Entities</name>
                    </type>
                    <name>HTML40</name>
                </decl>
                ;
            </decl_stmt>

            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name>Entities</name>
                        </type>
                        <name>xml</name> =
                        <init>
                            <expr>new
                                <call>
                                    <name>Entities</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <constructor_decl>
                    <name><name>xml</name>.
                        <name>addEntities</name>
                    </name>
                    <parameter_list>(
                        <param>
                            <decl>
                                <type>
                                    <name>BASIC_ARRAY</name>
                                </type>
                            </decl>
                        </param>
                        )
                    </parameter_list>
                    ;
                </constructor_decl>
                <constructor_decl>
                    <name><name>xml</name>.
                        <name>addEntities</name>
                    </name>
                    <parameter_list>(
                        <param>
                            <decl>
                                <type>
                                    <name>APOS_ARRAY</name>
                                </type>
                            </decl>
                        </param>
                        )
                    </parameter_list>
                    ;
                </constructor_decl>
                <expr_stmt>
                    <expr>
                        <name>XML</name>
                        =
                        <name>xml</name>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name>Entities</name>
                        </type>
                        <name>html32</name> =
                        <init>
                            <expr>new
                                <call>
                                    <name>Entities</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <constructor_decl>
                    <name><name>html32</name>.
                        <name>addEntities</name>
                    </name>
                    <parameter_list>(
                        <param>
                            <decl>
                                <type>
                                    <name>BASIC_ARRAY</name>
                                </type>
                            </decl>
                        </param>
                        )
                    </parameter_list>
                    ;
                </constructor_decl>
                <constructor_decl>
                    <name><name>html32</name>.
                        <name>addEntities</name>
                    </name>
                    <parameter_list>(
                        <param>
                            <decl>
                                <type>
                                    <name>ISO8859_1_ARRAY</name>
                                </type>
                            </decl>
                        </param>
                        )
                    </parameter_list>
                    ;
                </constructor_decl>
                <expr_stmt>
                    <expr>
                        <name>HTML32</name>
                        =
                        <name>html32</name>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name>Entities</name>
                        </type>
                        <name>html40</name> =
                        <init>
                            <expr>new
                                <call>
                                    <name>Entities</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <constructor_decl>
                    <name>fillWithHtml40Entities</name>
                    <parameter_list>(
                        <param>
                            <decl>
                                <type>
                                    <name>html40</name>
                                </type>
                            </decl>
                        </param>
                        )
                    </parameter_list>
                    ;
                </constructor_decl>
                <expr_stmt>
                    <expr>
                        <name>HTML40</name>
                        =
                        <name>html40</name>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Fills the specified entities instance with HTML 40 entities.
                * &lt;/p&gt;
                *
                * @param entities
                * the instance to be filled.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>fillWithHtml40Entities</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Entities</name>
                            </type>
                            <name>entities</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>entities</name>.
                                    <name>addEntities</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>BASIC_ARRAY</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>entities</name>.
                                    <name>addEntities</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ISO8859_1_ARRAY</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>entities</name>.
                                    <name>addEntities</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>HTML40_ARRAY</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <class type="interface">
                <specifier>static</specifier>
                interface <name>EntityMap</name>
                <block>{
                    <comment type="javadoc">/**
                        * &lt;p&gt;
                        * Add an entry to this entity map.
                        * &lt;/p&gt;
                        *
                        * @param name
                        * the entity name
                        * @param value
                        * the entity value
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <name>void</name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>name</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>

                    <comment type="javadoc">/**
                        * &lt;p&gt;
                        * Returns the name of the entity identified by the specified value.
                        * &lt;/p&gt;
                        *
                        * @param value
                        * the value to locate
                        * @return entity name associated with the specified value
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <name>String</name>
                        </type>
                        <name>name</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>

                    <comment type="javadoc">/**
                        * &lt;p&gt;
                        * Returns the value of the entity identified by the specified name.
                        * &lt;/p&gt;
                        *
                        * @param name
                        * the name to locate
                        * @return entity value associated with the specified name
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>value</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>name</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>
                    }
                </block>
            </class>

            <class>
                <specifier>static</specifier>
                class <name>PrimitiveEntityMap</name>
                <super>
                    <implements>implements
                        <name>EntityMap</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>Map</name>
                            </type>
                            <name>mapNameToValue</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>HashMap</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>IntHashMap</name>
                            </type>
                            <name>mapValueToName</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>IntHashMap</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <comment type="line">// TODO not thread-safe as there is a window between changing the two maps
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>name</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>mapNameToValue</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Integer</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>value</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>mapValueToName</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>name</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>String</name>)
                                    <call>
                                        <name><name>mapValueToName</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>value</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>name</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>value</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>mapNameToValue</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>name</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>value</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>-1</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>((<name>Integer</name>) <name>value</name>).
                                    <call>
                                        <name>intValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <specifier>static</specifier>
                <specifier>abstract</specifier> class <name>MapIntMap</name>
                <super>
                    <implements>implements <name>Entities</name>.
                        <name>EntityMap</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <specifier>final</specifier>
                                <name>Map</name>
                            </type>
                            <name>mapNameToValue</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <specifier>final</specifier>
                                <name>Map</name>
                            </type>
                            <name>mapValueToName</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Construct a new instance with specified maps.
                        *
                        * @param nameToValue name to value map
                        * @param valueToName value to namee map
                        */
                    </comment>
                    <constructor>
                        <name>MapIntMap</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Map</name>
                                    </type>
                                    <name>nameToValue</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Map</name>
                                    </type>
                                    <name>valueToName</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>mapNameToValue</name>
                                    =
                                    <name>nameToValue</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>mapValueToName</name>
                                    =
                                    <name>valueToName</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>name</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>mapNameToValue</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Integer</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>value</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>mapValueToName</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Integer</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>value</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>name</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>String</name>)
                                    <call>
                                        <name><name>mapValueToName</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Integer</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>value</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>value</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>name</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>value</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>mapNameToValue</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>name</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>value</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>-1</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>((<name>Integer</name>) <name>value</name>).
                                    <call>
                                        <name>intValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <specifier>static</specifier>
                class <name>HashEntityMap</name>
                <super>
                    <extends>extends
                        <name>MapIntMap</name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/**
                        * Constructs a new instance of &lt;code&gt;HashEntityMap&lt;/code&gt;.
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>HashEntityMap</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>HashMap</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>HashMap</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>

            <class>
                <specifier>static</specifier>
                class <name>TreeEntityMap</name>
                <super>
                    <extends>extends
                        <name>MapIntMap</name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/**
                        * Constructs a new instance of &lt;code&gt;TreeEntityMap&lt;/code&gt;.
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>TreeEntityMap</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>TreeMap</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>TreeMap</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>

            <class>
                <specifier>static</specifier>
                class <name>LookupEntityMap</name>
                <super>
                    <extends>extends
                        <name>PrimitiveEntityMap</name>
                    </extends>
                </super>
                <block>{
                    <comment type="line">// TODO this class is not thread-safe</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>lookupTable</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>LOOKUP_TABLE_SIZE</name> =
                            <init>
                                <expr>256</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>name</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>value</name>
                                        &lt;
                                        <name>LOOKUP_TABLE_SIZE</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>lookupTable</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                <index>[
                                                    <expr>
                                                        <name>value</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>name</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * &lt;p&gt;
                        * Returns the lookup table for this entity map. The lookup table is created if it has not been
                        previously.
                        * &lt;/p&gt;
                        *
                        * @return the lookup table
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>String</name>
                            <index>[]</index>
                        </type>
                        <name>lookupTable</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>lookupTable</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>createLookupTable</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>lookupTable</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * &lt;p&gt;
                        * Creates an entity lookup table of LOOKUP_TABLE_SIZE elements, initialized with entity names.
                        * &lt;/p&gt;
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>createLookupTable</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>lookupTable</name>
                                    = new
                                    <name>
                                        <name>String</name>
                                        <index>[
                                            <expr>
                                                <name>LOOKUP_TABLE_SIZE</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>LOOKUP_TABLE_SIZE</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>++
                                        <name>i</name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>lookupTable</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <call>
                                                <name><name>super</name>.
                                                    <name>name</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <specifier>static</specifier>
                class <name>ArrayEntityMap</name>
                <super>
                    <implements>implements
                        <name>EntityMap</name>
                    </implements>
                </super>
                <block>{
                    <comment type="line">// TODO this class is not thread-safe</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>growBy</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>names</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>protected</specifier>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>values</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Constructs a new instance of &lt;code&gt;ArrayEntityMap&lt;/code&gt;.
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>ArrayEntityMap</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>growBy</name>
                                    </name>
                                    = 100
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>names</name>
                                    = new
                                    <name>
                                        <name>String</name>
                                        <index>[
                                            <expr>
                                                <name>growBy</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>values</name>
                                    = new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <name>growBy</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Constructs a new instance of &lt;code&gt;ArrayEntityMap&lt;/code&gt; specifying the size by
                        which the array should
                        * grow.
                        *
                        * @param growBy
                        * array will be initialized to and will grow by this amount
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>ArrayEntityMap</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>growBy</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>growBy</name>
                                    </name>
                                    =
                                    <name>growBy</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>names</name>
                                    = new
                                    <name>
                                        <name>String</name>
                                        <index>[
                                            <expr>
                                                <name>growBy</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>values</name>
                                    = new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <name>growBy</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>name</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>ensureCapacity</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                    + 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>names</name>
                                        <index>[
                                            <expr>
                                                <name>size</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>name</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>values</name>
                                        <index>[
                                            <expr>
                                                <name>size</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>value</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>size</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Verifies the capacity of the entity array, adjusting the size if necessary.
                        *
                        * @param capacity
                        * size the array should be
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>protected</specifier>
                            <name>void</name>
                        </type>
                        <name>ensureCapacity</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>capacity</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>capacity</name>
                                        &gt;
                                        <name><name>names</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>newSize</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Math</name>.
                                                                <name>max</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>capacity</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>size</name>
                                                                        +
                                                                        <name>growBy</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>newNames</name> =
                                                <init>
                                                    <expr>new
                                                        <name>
                                                            <name>String</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>newSize</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>names</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newNames</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>size</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>names</name>
                                                =
                                                <name>newNames</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>newValues</name> =
                                                <init>
                                                    <expr>new
                                                        <name>
                                                            <name>int</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>newSize</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>arraycopy</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>values</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newValues</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>size</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>values</name>
                                                =
                                                <name>newValues</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>name</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>size</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>++
                                        <name>i</name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>values</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ==
                                                <name>value</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>
                                                            <name>names</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>value</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>name</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>size</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>++
                                        <name>i</name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>names</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                .
                                                <call>
                                                    <name>equals</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>name</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>
                                                            <name>values</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return <expr>-1</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <specifier>static</specifier>
                class <name>BinaryEntityMap</name>
                <super>
                    <extends>extends
                        <name>ArrayEntityMap</name>
                    </extends>
                </super>
                <block>{

                    <comment type="line">// TODO - not thread-safe, because parent is not. Also references size.
                    </comment>

                    <comment type="javadoc">/**
                        * Constructs a new instance of &lt;code&gt;BinaryEntityMap&lt;/code&gt;.
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>BinaryEntityMap</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Constructs a new instance of &lt;code&gt;ArrayEntityMap&lt;/code&gt; specifying the size by
                        which the underlying array
                        * should grow.
                        *
                        * @param growBy
                        * array will be initialized to and will grow by this amount
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>BinaryEntityMap</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>growBy</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>growBy</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Performs a binary search of the entity array for the specified key. This method is based on
                        code in
                        * {@link java.util.Arrays}.
                        *
                        * @param key
                        * the key to be found
                        * @return the index of the entity array matching the specified key
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>int</name>
                        </type>
                        <name>binarySearch</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>key</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>low</name> =
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>high</name> =
                                    <init>
                                        <expr>
                                            <name>size</name>
                                            - 1
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <while>while
                                <condition>(
                                    <expr>
                                        <name>low</name>
                                        &lt;=
                                        <name>high</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>mid</name> =
                                            <init>
                                                <expr>(<name>low</name> + <name>high</name>) &gt;&gt;&gt; 1
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>midVal</name> =
                                            <init>
                                                <expr>
                                                    <name>
                                                        <name>values</name>
                                                        <index>[
                                                            <expr>
                                                                <name>mid</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>midVal</name>
                                                &lt;
                                                <name>key</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>low</name>
                                                        = <name>mid</name> + 1
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>midVal</name>
                                                        &gt;
                                                        <name>key</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>high</name>
                                                                = <name>mid</name> - 1
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>mid</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        <comment type="line">// key found</comment>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </while>
                            <return>return
                                <expr>-(<name>low</name> + 1)
                                </expr>
                                ;
                            </return>
                            <comment type="line">// key not found.</comment>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>name</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>ensureCapacity</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                    + 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>insertAt</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>binarySearch</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>insertAt</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return;</return>
                                        <comment type="line">// note: this means you can't insert the same value twice
                                        </comment>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>insertAt</name>
                                    = -(<name>insertAt</name> + 1)
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// binarySearch returns it negative and off-by-one</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>values</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>insertAt</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>values</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>insertAt</name>
                                                    + 1
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                    -
                                                    <name>insertAt</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>values</name>
                                        <index>[
                                            <expr>
                                                <name>insertAt</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>value</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>names</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>insertAt</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>names</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>insertAt</name>
                                                    + 1
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                    -
                                                    <name>insertAt</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>names</name>
                                        <index>[
                                            <expr>
                                                <name>insertAt</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>name</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>size</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * {@inheritDoc}
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>name</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>binarySearch</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>index</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>
                                        <name>names</name>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>EntityMap</name>
                    </type>
                    <name>map</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Default constructor.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>Entities</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>map</name>
                            = new
                            <call>
                                <name><name>Entities</name>.
                                    <name>LookupEntityMap</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * package scoped constructor for testing.
                *
                * @param emap entity map.
                */
            </comment>
            <constructor>
                <name>Entities</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>EntityMap</name>
                            </type>
                            <name>emap</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>map</name>
                            =
                            <name>emap</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Adds entities to this entity.
                * &lt;/p&gt;
                *
                * @param entityArray
                * array of entities to be added
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addEntities</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>entityArray</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>entityArray</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>addEntity</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>entityArray</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Integer</name>.
                                                            <name>parseInt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>entityArray</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                        <index>[<expr>1</expr>]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Add an entity to this entity.
                * &lt;/p&gt;
                *
                * @param name
                * name of the entity
                * @param value
                * vale of the entity
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>map</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Returns the name of the entity identified by the specified value.
                * &lt;/p&gt;
                *
                * @param value
                * the value to locate
                * @return entity name associated with the specified value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>entityName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>map</name>.
                                    <name>name</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Returns the value of the entity identified by the specified name.
                * &lt;/p&gt;
                *
                * @param name
                * the name to locate
                * @return entity value associated with the specified name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>entityValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>map</name>.
                                    <name>value</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Escapes the characters in a &lt;code&gt;String&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * For example, if you have called addEntity(&amp;quot;foo&amp;quot;, 0xA1), escape(&amp;quot;\u00A1&amp;quot;)
                will return
                * &amp;quot;&amp;amp;foo;&amp;quot;
                * &lt;/p&gt;
                *
                * @param str
                * The &lt;code&gt;String&lt;/code&gt; to escape.
                * @return A new escaped &lt;code&gt;String&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>escape</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringWriter</name>
                            </type>
                            <name>stringWriter</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>createStringWriter</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>str</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>escape</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>stringWriter</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>str</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// This should never happen because ALL the StringWriter methods
                                    called by #escape(Writer, String) do not
                                </comment>
                                <comment type="line">// throw IOExceptions.</comment>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>UnhandledException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    <return>return
                        <expr>
                            <call>
                                <name><name>stringWriter</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Escapes the characters in the &lt;code&gt;String&lt;/code&gt; passed and writes the result to the &lt;code&gt;Writer&lt;/code&gt;
                * passed.
                * &lt;/p&gt;
                *
                * @param writer
                * The &lt;code&gt;Writer&lt;/code&gt; to write the results of the escaping to. Assumed to be a non-null
                value.
                * @param str
                * The &lt;code&gt;String&lt;/code&gt; to escape. Assumed to be a non-null value.
                * @throws IOException
                * when &lt;code&gt;Writer&lt;/code&gt; passed throws the exception from calls to the {@link
                Writer#write(int)}
                * methods.
                *
                * @see #escape(String)
                * @see Writer
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>escape</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Writer</name>
                            </type>
                            <name>writer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>entityName</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>entityName</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>c</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>entityName</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>c</name>
                                                    &gt; 0x7F
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"&amp;#"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>Integer</name>.
                                                                                    <name>toString</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>c</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>10</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>';'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>writer</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'&amp;'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>writer</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>entityName</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>writer</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>';'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Unescapes the entities in a &lt;code&gt;String&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * For example, if you have called addEntity(&amp;quot;foo&amp;quot;, 0xA1), unescape(&amp;quot;&amp;amp;foo;&amp;quot;)
                will return
                * &amp;quot;\u00A1&amp;quot;
                * &lt;/p&gt;
                *
                * @param str
                * The &lt;code&gt;String&lt;/code&gt; to escape.
                * @return A new escaped &lt;code&gt;String&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>unescape</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>firstAmp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'&amp;'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>firstAmp</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>StringWriter</name>
                                        </type>
                                        <name>stringWriter</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>createStringWriter</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>str</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>doUnescape</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>stringWriter</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>str</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>firstAmp</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>IOException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <comment type="line">// This should never happen because ALL the
                                                StringWriter methods called by #escape(Writer, String)
                                            </comment>
                                            <comment type="line">// do not throw IOExceptions.</comment>
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>UnhandledException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>stringWriter</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Make the StringWriter 10% larger than the source String to avoid growing the writer
                *
                * @param str The source string
                * @return A newly created StringWriter
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>StringWriter</name>
                </type>
                <name>createStringWriter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>StringWriter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>(<name>int</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>length</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            + (
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>length</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            * 0.1)
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Unescapes the escaped entities in the &lt;code&gt;String&lt;/code&gt; passed and writes the result to
                the
                * &lt;code&gt;Writer&lt;/code&gt; passed.
                * &lt;/p&gt;
                *
                * @param writer
                * The &lt;code&gt;Writer&lt;/code&gt; to write the results to; assumed to be non-null.
                * @param str
                * The source &lt;code&gt;String&lt;/code&gt; to unescape; assumed to be non-null.
                * @throws IOException
                * when &lt;code&gt;Writer&lt;/code&gt; passed throws the exception from calls to the {@link
                Writer#write(int)}
                * methods.
                *
                * @see #escape(String)
                * @see Writer
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>unescape</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Writer</name>
                            </type>
                            <name>writer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>firstAmp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'&amp;'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>firstAmp</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>writer</name>.
                                                <name>write</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>str</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>doUnescape</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>writer</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>str</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>firstAmp</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Underlying unescape method that allows the optimisation of not starting from the 0 index again.
                *
                * @param writer
                * The &lt;code&gt;Writer&lt;/code&gt; to write the results to; assumed to be non-null.
                * @param str
                * The source &lt;code&gt;String&lt;/code&gt; to unescape; assumed to be non-null.
                * @param firstAmp
                * The &lt;code&gt;int&lt;/code&gt; index of the first ampersand in the source String.
                * @throws IOException
                * when &lt;code&gt;Writer&lt;/code&gt; passed throws the exception from calls to the {@link
                Writer#write(int)}
                * methods.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>doUnescape</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Writer</name>
                            </type>
                            <name>writer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>firstAmp</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>writer</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>firstAmp</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>firstAmp</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>c</name>
                                        == '&amp;'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>nextIdx</name> =
                                                <init>
                                                    <expr>
                                                        <name>i</name>
                                                        + 1
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>semiColonIdx</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>indexOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>';'</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>nextIdx</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>semiColonIdx</name>
                                                    == -1
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>amphersandIdx</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>indexOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>'&amp;'</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                        + 1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>amphersandIdx</name>
                                                    != -1 &amp;&amp; <name>amphersandIdx</name> &lt;
                                                    <name>semiColonIdx</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// Then the text looks like &amp;...&amp;...;
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>entityContent</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>substring</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>nextIdx</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>semiColonIdx</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>entityValue</name> =
                                                <init>
                                                    <expr>-1</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>entityContentLen</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>entityContent</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>entityContentLen</name>
                                                    &gt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <call>
                                                                    <name><name>entityContent</name>.
                                                                        <name>charAt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>0</expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                == '#'
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <comment type="line">// escaped value content is an
                                                                    integer (decimal or
                                                                </comment>
                                                                <comment type="line">// hexidecimal)</comment>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>entityContentLen</name>
                                                                            &gt; 1
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <decl_stmt>
                                                                                <decl>
                                                                                    <type>
                                                                                        <name>char</name>
                                                                                    </type>
                                                                                    <name>isHexChar</name> =
                                                                                    <init>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    entityContent</name>
                                                                                                    .
                                                                                                    <name>charAt</name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr>1</expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </init>
                                                                                </decl>
                                                                                ;
                                                                            </decl_stmt>
                                                                            <try>try
                                                                                <block>{
                                                                                    <switch>switch
                                                                                        <condition>(
                                                                                            <expr>
                                                                                                <name>isHexChar</name>
                                                                                            </expr>
                                                                                            )
                                                                                        </condition>
                                                                                        <block>{
                                                                                            <case>case <expr>'X'</expr> :
                                                                                            </case>
                                                                                            <case>case <expr>'x'</expr> :
                                                                                                <block>{
                                                                                                    <expr_stmt>
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                entityValue
                                                                                                            </name>
                                                                                                            =
                                                                                                            <call>
                                                                                                                <name>
                                                                                                                    <name>
                                                                                                                        Integer</name>
                                                                                                                    .
                                                                                                                    <name>
                                                                                                                        parseInt
                                                                                                                    </name>
                                                                                                                </name>
                                                                                                                <argument_list>
                                                                                                                    (
                                                                                                                    <argument>
                                                                                                                        <expr>
                                                                                                                            <call>
                                                                                                                                <name>
                                                                                                                                    <name>
                                                                                                                                        entityContent</name>
                                                                                                                                    .
                                                                                                                                    <name>
                                                                                                                                        substring
                                                                                                                                    </name>
                                                                                                                                </name>
                                                                                                                                <argument_list>
                                                                                                                                    (
                                                                                                                                    <argument>
                                                                                                                                        <expr>
                                                                                                                                            2
                                                                                                                                        </expr>
                                                                                                                                    </argument>
                                                                                                                                    )
                                                                                                                                </argument_list>
                                                                                                                            </call>
                                                                                                                        </expr>
                                                                                                                    </argument>
                                                                                                                    ,
                                                                                                                    <argument>
                                                                                                                        <expr>
                                                                                                                            16
                                                                                                                        </expr>
                                                                                                                    </argument>
                                                                                                                    )
                                                                                                                </argument_list>
                                                                                                            </call>
                                                                                                        </expr>
                                                                                                        ;
                                                                                                    </expr_stmt>
                                                                                                    <break>break;
                                                                                                    </break>
                                                                                                    }
                                                                                                </block>
                                                                                            </case>
                                                                                            <default>default :
                                                                                                <block>{
                                                                                                    <expr_stmt>
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                entityValue
                                                                                                            </name>
                                                                                                            =
                                                                                                            <call>
                                                                                                                <name>
                                                                                                                    <name>
                                                                                                                        Integer</name>
                                                                                                                    .
                                                                                                                    <name>
                                                                                                                        parseInt
                                                                                                                    </name>
                                                                                                                </name>
                                                                                                                <argument_list>
                                                                                                                    (
                                                                                                                    <argument>
                                                                                                                        <expr>
                                                                                                                            <call>
                                                                                                                                <name>
                                                                                                                                    <name>
                                                                                                                                        entityContent</name>
                                                                                                                                    .
                                                                                                                                    <name>
                                                                                                                                        substring
                                                                                                                                    </name>
                                                                                                                                </name>
                                                                                                                                <argument_list>
                                                                                                                                    (
                                                                                                                                    <argument>
                                                                                                                                        <expr>
                                                                                                                                            1
                                                                                                                                        </expr>
                                                                                                                                    </argument>
                                                                                                                                    )
                                                                                                                                </argument_list>
                                                                                                                            </call>
                                                                                                                        </expr>
                                                                                                                    </argument>
                                                                                                                    ,
                                                                                                                    <argument>
                                                                                                                        <expr>
                                                                                                                            10
                                                                                                                        </expr>
                                                                                                                    </argument>
                                                                                                                    )
                                                                                                                </argument_list>
                                                                                                            </call>
                                                                                                        </expr>
                                                                                                        ;
                                                                                                    </expr_stmt>
                                                                                                    }
                                                                                                </block>
                                                                                            </default>
                                                                                            }
                                                                                        </block>
                                                                                    </switch>
                                                                                    <if>if
                                                                                        <condition>(
                                                                                            <expr>
                                                                                                <name>entityValue</name>
                                                                                                &gt; 0xFFFF
                                                                                            </expr>
                                                                                            )
                                                                                        </condition>
                                                                                        <then>
                                                                                            <block>{
                                                                                                <expr_stmt>
                                                                                                    <expr>
                                                                                                        <name>
                                                                                                            entityValue
                                                                                                        </name>
                                                                                                        = -1
                                                                                                    </expr>
                                                                                                    ;
                                                                                                </expr_stmt>
                                                                                                }
                                                                                            </block>
                                                                                        </then>
                                                                                    </if>
                                                                                    }
                                                                                </block>
                                                                                <catch>catch (
                                                                                    <param>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>
                                                                                                    NumberFormatException
                                                                                                </name>
                                                                                            </type>
                                                                                            <name>e</name>
                                                                                        </decl>
                                                                                    </param>
                                                                                    )
                                                                                    <block>{
                                                                                        <expr_stmt>
                                                                                            <expr>
                                                                                                <name>entityValue</name>
                                                                                                = -1
                                                                                            </expr>
                                                                                            ;
                                                                                        </expr_stmt>
                                                                                        }
                                                                                    </block>
                                                                                </catch>
                                                                            </try>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <block>{
                                                                <comment type="line">// escaped value content is an
                                                                    entity name
                                                                </comment>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>entityValue</name>
                                                                        =
                                                                        <call>
                                                                            <name><name>this</name>.
                                                                                <name>entityValue</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>entityContent</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </else>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>entityValue</name>
                                                    == -1
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>'&amp;'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>entityContent</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>';'</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>writer</name>.
                                                                    <name>write</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>entityValue</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>i</name>
                                                =
                                                <name>semiColonIdx</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// move index up to the semi-colon</comment>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>writer</name>.
                                                        <name>write</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>c</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
