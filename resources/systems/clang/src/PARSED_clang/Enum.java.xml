<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\enum\Enum.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>
                <name/>
            </name>
        </name>
        enum;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationTargetException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Method</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>WeakHashMap</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>ClassUtils</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>StringUtils</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Abstract superclass for type-safe enums.&lt;/p&gt;
        *
        * &lt;p&gt;One feature of the C programming language lacking in Java is enumerations. The
        * C implementation based on ints was poor and open to abuse. The original Java
        * recommendation and most of the JDK also uses int constants. It has been recognised
        * however that a more robust type-safe class-based solution can be designed. This
        * class follows the basic Java type-safe enumeration pattern.&lt;/p&gt;
        *
        * &lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt;Due to the way in which Java ClassLoaders work, comparing
        * Enum objects should always be done using &lt;code&gt;equals()&lt;/code&gt;, not &lt;code&gt;==&lt;/code&gt;.
        * The equals() method will try == first so in most cases the effect is the same.&lt;/p&gt;
        *
        * &lt;p&gt;Of course, if you actually want (or don't mind) Enums in different class
        * loaders being non-equal, then you can use &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;
        *
        * &lt;h4&gt;Simple Enums&lt;/h4&gt;
        *
        * &lt;p&gt;To use this class, it must be subclassed. For example:&lt;/p&gt;
        *
        * &lt;pre&gt;
        * public final class ColorEnum extends Enum {
        * public static final ColorEnum RED = new ColorEnum("Red");
        * public static final ColorEnum GREEN = new ColorEnum("Green");
        * public static final ColorEnum BLUE = new ColorEnum("Blue");
        *
        * private ColorEnum(String color) {
        * super(color);
        * }
        *
        * public static ColorEnum getEnum(String color) {
        * return (ColorEnum) getEnum(ColorEnum.class, color);
        * }
        *
        * public static Map getEnumMap() {
        * return getEnumMap(ColorEnum.class);
        * }
        *
        * public static List getEnumList() {
        * return getEnumList(ColorEnum.class);
        * }
        *
        * public static Iterator iterator() {
        * return iterator(ColorEnum.class);
        * }
        * }
        * &lt;/pre&gt;
        *
        * &lt;p&gt;As shown, each enum has a name. This can be accessed using &lt;code&gt;getName&lt;/code&gt;.&lt;/p&gt;
        *
        * &lt;p&gt;The &lt;code&gt;getEnum&lt;/code&gt; and &lt;code&gt;iterator&lt;/code&gt; methods are recommended.
        * Unfortunately, Java restrictions require these to be coded as shown in each subclass.
        * An alternative choice is to use the {@link EnumUtils} class.&lt;/p&gt;
        *
        * &lt;h4&gt;Subclassed Enums&lt;/h4&gt;
        * &lt;p&gt;A hierarchy of Enum classes can be built. In this case, the superclass is
        * unaffected by the addition of subclasses (as per normal Java). The subclasses
        * may add additional Enum constants &lt;em&gt;of the type of the superclass&lt;/em&gt;. The
        * query methods on the subclass will return all of the Enum constants from the
        * superclass and subclass.&lt;/p&gt;
        *
        * &lt;pre&gt;
        * public final class ExtraColorEnum extends ColorEnum {
        * // NOTE: Color enum declared above is final, change that to get this
        * // example to compile.
        * public static final ColorEnum YELLOW = new ExtraColorEnum("Yellow");
        *
        * private ExtraColorEnum(String color) {
        * super(color);
        * }
        *
        * public static ColorEnum getEnum(String color) {
        * return (ColorEnum) getEnum(ExtraColorEnum.class, color);
        * }
        *
        * public static Map getEnumMap() {
        * return getEnumMap(ExtraColorEnum.class);
        * }
        *
        * public static List getEnumList() {
        * return getEnumList(ExtraColorEnum.class);
        * }
        *
        * public static Iterator iterator() {
        * return iterator(ExtraColorEnum.class);
        * }
        * }
        * &lt;/pre&gt;
        *
        * &lt;p&gt;This example will return RED, GREEN, BLUE, YELLOW from the List and iterator
        * methods in that order. The RED, GREEN and BLUE instances will be the same (==)
        * as those from the superclass ColorEnum. Note that YELLOW is declared as a
        * ColorEnum and not an ExtraColorEnum.&lt;/p&gt;
        *
        * &lt;h4&gt;Functional Enums&lt;/h4&gt;
        *
        * &lt;p&gt;The enums can have functionality by defining subclasses and
        * overriding the &lt;code&gt;getEnumClass()&lt;/code&gt; method:&lt;/p&gt;
        *
        * &lt;pre&gt;
        * public static final OperationEnum PLUS = new PlusOperation();
        * private static final class PlusOperation extends OperationEnum {
        * private PlusOperation() {
        * super("Plus");
        * }
        * public int eval(int a, int b) {
        * return a + b;
        * }
        * }
        * public static final OperationEnum MINUS = new MinusOperation();
        * private static final class MinusOperation extends OperationEnum {
        * private MinusOperation() {
        * super("Minus");
        * }
        * public int eval(int a, int b) {
        * return a - b;
        * }
        * }
        *
        * private OperationEnum(String color) {
        * super(color);
        * }
        *
        * public final Class getEnumClass() { // NOTE: new method!
        * return OperationEnum.class;
        * }
        *
        * public abstract double eval(double a, double b);
        *
        * public static OperationEnum getEnum(String name) {
        * return (OperationEnum) getEnum(OperationEnum.class, name);
        * }
        *
        * public static Map getEnumMap() {
        * return getEnumMap(OperationEnum.class);
        * }
        *
        * public static List getEnumList() {
        * return getEnumList(OperationEnum.class);
        * }
        *
        * public static Iterator iterator() {
        * return iterator(OperationEnum.class);
        * }
        * }
        * &lt;/pre&gt;
        * &lt;p&gt;The code above will work on JDK 1.2. If JDK1.3 and later is used,
        * the subclasses may be defined as anonymous.&lt;/p&gt;
        *
        * &lt;h4&gt;Nested class Enums&lt;/h4&gt;
        *
        * &lt;p&gt;Care must be taken with class loading when defining a static nested class
        * for enums. The static nested class can be loaded without the surrounding outer
        * class being loaded. This can result in an empty list/map/iterator being returned.
        * One solution is to define a static block that references the outer class where
        * the constants are defined. For example:&lt;/p&gt;
        *
        * &lt;pre&gt;
        * public final class Outer {
        * public static final BWEnum BLACK = new BWEnum("Black");
        * public static final BWEnum WHITE = new BWEnum("White");
        *
        * // static nested enum class
        * public static final class BWEnum extends Enum {
        *
        * static {
        * // explicitly reference BWEnum class to force constants to load
        * Object obj = Outer.BLACK;
        * }
        *
        * // ... other methods omitted
        * }
        * }
        * &lt;/pre&gt;
        *
        * &lt;p&gt;Although the above solves the problem, it is not recommended. The best solution
        * is to define the constants in the enum class, and hold references in the outer class:
        *
        * &lt;pre&gt;
        * public final class Outer {
        * public static final BWEnum BLACK = BWEnum.BLACK;
        * public static final BWEnum WHITE = BWEnum.WHITE;
        *
        * // static nested enum class
        * public static final class BWEnum extends Enum {
        * // only define constants in enum classes - private if desired
        * private static final BWEnum BLACK = new BWEnum("Black");
        * private static final BWEnum WHITE = new BWEnum("White");
        *
        * // ... other methods omitted
        * }
        * }
        * &lt;/pre&gt;
        *
        * &lt;p&gt;For more details, see the 'Nested' test cases.
        *
        * @deprecated Replaced by {@link org.apache.commons.lang.enums.Enum org.apache.commons.lang.enums.Enum}
        * and will be removed in version 3.0. All classes in this package are deprecated and repackaged to
        * {@link org.apache.commons.lang.enums} since &lt;code&gt;enum&lt;/code&gt; is a Java 1.5 keyword.
        * @see org.apache.commons.lang.enums.Enum
        * @author Apache Avalon project
        * @author Apache Software Foundation
        * @author Chris Webb
        * @author Mike Bowler
        * @since 1.0
        * @version $Id: Enum.java 912394 2010-02-21 20:16:22Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>Enum</name>
        <super>
            <implements>implements <name>Comparable</name>,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support. Lang version 1.0.1 serial compatibility.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-487045951170455942L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// After discussion, the default size for HashMaps is used, as the</comment>
            <comment type="line">// sizing algorithm changes across the JDK versions</comment>
            <comment type="javadoc">/**
                * An empty &lt;code&gt;Map&lt;/code&gt;, as JDK1.2 didn't have an empty map.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Map</name>
                    </type>
                    <name>EMPTY_MAP</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>unmodifiableMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>HashMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;code&gt;Map&lt;/code&gt;, key of class name, value of &lt;code&gt;Entry&lt;/code&gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>Map</name>
                    </type>
                    <name>cEnumClasses</name>
                    <comment type="line">// LANG-334: To avoid exposing a mutating map,</comment>
                    <comment type="line">// we copy it each time we add to it. This is cheaper than</comment>
                    <comment type="line">// using a synchronized map since we are almost entirely reads</comment>
                    =
                    <init>
                        <expr>new
                            <call>
                                <name>WeakHashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The string representation of the Enum.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>iName</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The hashcode representation of the Enum.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>iHashCode</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The toString representation of the Enum.
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>transient</name>
                        <name>String</name>
                    </type>
                    <name>iToString</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;Enable the iterator to retain the source code order.&lt;/p&gt;
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class <name>Entry</name>
                <block>{
                    <comment type="javadoc">/**
                        * Map of Enum name to Enum.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Map</name>
                            </type>
                            <name>map</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>HashMap</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="javadoc">/**
                        * Map of Enum name to Enum.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Map</name>
                            </type>
                            <name>unmodifiableMap</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Collections</name>.
                                            <name>unmodifiableMap</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>map</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="javadoc">/**
                        * List of Enums in source code order.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>List</name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>25</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="javadoc">/**
                        * Map of Enum name to Enum.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>List</name>
                            </type>
                            <name>unmodifiableList</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Collections</name>.
                                            <name>unmodifiableList</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>list</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * &lt;p&gt;Restrictive constructor.&lt;/p&gt;
                        */
                    </comment>
                    <constructor>
                        <specifier>protected</specifier>
                        <name>Entry</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructor to add a new named item to the enumeration.&lt;/p&gt;
                *
                * @param name the name of the enum object,
                * must not be empty or &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException if the name is &lt;code&gt;null&lt;/code&gt;
                * or an empty string
                * @throws IllegalArgumentException if the getEnumClass() method returns
                * a null or invalid Class
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>Enum</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>init</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>iName</name>
                            =
                            <name>name</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>iHashCode</name>
                            = 7 +
                            <call>
                                <name>getEnumClass</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>hashCode</name>
                                <argument_list>()</argument_list>
                            </call>
                            + 3 *
                            <call>
                                <name><name>name</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// cannot create toString here as subclasses may want to include other data
                    </comment>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Initializes the enumeration.
                *
                * @param name the enum name
                * @throws IllegalArgumentException if the name is null or empty or duplicate
                * @throws IllegalArgumentException if the enumClass is null or invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>init</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>name</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The Enum name must not be empty or null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>enumClass</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getEnumClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>enumClass</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"getEnumClass() must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>ok</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>cls</name>
                                != <name>null</name> &amp;&amp; <name>cls</name> !=
                                <name><name>Enum</name>.
                                    <name>
                                        <name/>
                                    </name>
                                </name>
                                class &amp;&amp; <name>cls</name> !=
                                <name><name>ValuedEnum</name>.
                                    <name>
                                        <name/>
                                    </name>
                                </name>
                                class
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cls</name>
                                        ==
                                        <name>enumClass</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ok</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>cls</name>
                                    =
                                    <call>
                                        <name><name>cls</name>.
                                            <name>getSuperclass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ok</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"getEnumClass() must return a superclass of this class"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>entry</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <synchronized>synchronized(
                        <expr>
                            <name><name>Enum</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            class
                        </expr>
                        )
                        <block>{
                            <comment type="line">// LANG-334</comment>
                            <comment type="line">// create entry</comment>
                            <expr_stmt>
                                <expr>
                                    <name>entry</name>
                                    = (<name>Entry</name>)
                                    <call>
                                        <name><name>cEnumClasses</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>enumClass</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>entry</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>entry</name>
                                                =
                                                <call>
                                                    <name>createEntry</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>enumClass</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Map</name>
                                                </type>
                                                <name>myMap</name> =
                                                <init>
                                                    <expr>new
                                                        <call>
                                                            <name>WeakHashMap</name>
                                                            <argument_list>( )</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <comment type="line">// we avoid the (Map) constructor to achieve JDK 1.2
                                            support
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>myMap</name>.
                                                        <name>putAll</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>cEnumClasses</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>myMap</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>enumClass</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>entry</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>cEnumClasses</name>
                                                =
                                                <name>myMap</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </synchronized>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>entry</name>.<name>map</name>.
                                        <name>containsKey</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>name</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The Enum name must be unique, '" + <name>name</name> + "' has
                                                        already been added"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>entry</name>.<name>map</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>entry</name>.<name>list</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Handle the deserialization of the class to ensure that multiple
                * copies are not wastefully created, or illegal enum types created.&lt;/p&gt;
                *
                * @return the resolved object
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>Object</name>
                </type>
                <name>readResolve</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>entry</name> =
                            <init>
                                <expr>(<name>Entry</name>)
                                    <call>
                                        <name><name>cEnumClasses</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>getEnumClass</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>entry</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>entry</name>.<name>map</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//--------------------------------------------------------------------------------
            </comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets an &lt;code&gt;Enum&lt;/code&gt; object by class and name.&lt;/p&gt;
                *
                * @param enumClass the class of the Enum to get, must not
                * be &lt;code&gt;null&lt;/code&gt;
                * @param name the name of the &lt;code&gt;Enum&lt;/code&gt; to get,
                * may be &lt;code&gt;null&lt;/code&gt;
                * @return the enum object, or &lt;code&gt;null&lt;/code&gt; if the enum does not exist
                * @throws IllegalArgumentException if the enum class
                * is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>Enum</name>
                </type>
                <name>getEnum</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>enumClass</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>entry</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getEntry</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>enumClass</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>entry</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>Enum</name>)
                            <call>
                                <name><name>entry</name>.<name>map</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the &lt;code&gt;Map&lt;/code&gt; of &lt;code&gt;Enum&lt;/code&gt; objects by
                * name using the &lt;code&gt;Enum&lt;/code&gt; class.&lt;/p&gt;
                *
                * &lt;p&gt;If the requested class has no enum objects an empty
                * &lt;code&gt;Map&lt;/code&gt; is returned.&lt;/p&gt;
                *
                * @param enumClass the class of the &lt;code&gt;Enum&lt;/code&gt; to get,
                * must not be &lt;code&gt;null&lt;/code&gt;
                * @return the enum object Map
                * @throws IllegalArgumentException if the enum class is &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException if the enum class is not a subclass of Enum
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>Map</name>
                </type>
                <name>getEnumMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>enumClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>entry</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getEntry</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>enumClass</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>entry</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY_MAP</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name><name>entry</name>.
                                <name>unmodifiableMap</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Enum&lt;/code&gt; objects using the
                * &lt;code&gt;Enum&lt;/code&gt; class.&lt;/p&gt;
                *
                * &lt;p&gt;The list is in the order that the objects were created (source code order).
                * If the requested class has no enum objects an empty &lt;code&gt;List&lt;/code&gt; is
                * returned.&lt;/p&gt;
                *
                * @param enumClass the class of the &lt;code&gt;Enum&lt;/code&gt; to get,
                * must not be &lt;code&gt;null&lt;/code&gt;
                * @return the enum object Map
                * @throws IllegalArgumentException if the enum class is &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException if the enum class is not a subclass of Enum
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>List</name>
                </type>
                <name>getEnumList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>enumClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>entry</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getEntry</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>enumClass</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>entry</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>Collections</name>.
                                            <name>EMPTY_LIST</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name><name>entry</name>.
                                <name>unmodifiableList</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets an &lt;code&gt;Iterator&lt;/code&gt; over the &lt;code&gt;Enum&lt;/code&gt; objects in
                * an &lt;code&gt;Enum&lt;/code&gt; class.&lt;/p&gt;
                *
                * &lt;p&gt;The &lt;code&gt;Iterator&lt;/code&gt; is in the order that the objects were
                * created (source code order). If the requested class has no enum
                * objects an empty &lt;code&gt;Iterator&lt;/code&gt; is returned.&lt;/p&gt;
                *
                * @param enumClass the class of the &lt;code&gt;Enum&lt;/code&gt; to get,
                * must not be &lt;code&gt;null&lt;/code&gt;
                * @return an iterator of the Enum objects
                * @throws IllegalArgumentException if the enum class is &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException if the enum class is not a subclass of Enum
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>Iterator</name>
                </type>
                <name>iterator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>enumClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Enum</name>.
                                    <name>getEnumList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>enumClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>iterator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets an &lt;code&gt;Entry&lt;/code&gt; from the map of Enums.&lt;/p&gt;
                *
                * @param enumClass the class of the &lt;code&gt;Enum&lt;/code&gt; to get
                * @return the enum entry
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Entry</name>
                </type>
                <name>getEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>enumClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>enumClass</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The Enum Class must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Enum</name>.
                                    <name>
                                        <name/>
                                    </name>
                                </name>
                                class.
                                <call>
                                    <name>isAssignableFrom</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>enumClass</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The Class must be a subclass of Enum"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>entry</name> =
                            <init>
                                <expr>(<name>Entry</name>)
                                    <call>
                                        <name><name>cEnumClasses</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>enumClass</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>entry</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <comment type="line">// LANG-76 - try to force class initialization for JDK
                                            1.5+
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Class</name>.
                                                        <name>forName</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>enumClass</name>.
                                                                        <name>getName</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>enumClass</name>.
                                                                        <name>getClassLoader</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>entry</name>
                                                = (<name>Entry</name>)
                                                <call>
                                                    <name><name>cEnumClasses</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>enumClass</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Exception</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <comment type="line">// Ignore</comment>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>entry</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates an &lt;code&gt;Entry&lt;/code&gt; for storing the Enums.&lt;/p&gt;
                *
                * &lt;p&gt;This accounts for subclassed Enums.&lt;/p&gt;
                *
                * @param enumClass the class of the &lt;code&gt;Enum&lt;/code&gt; to get
                * @return the enum entry
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Entry</name>
                </type>
                <name>createEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>enumClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>entry</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Entry</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>enumClass</name>.
                                            <name>getSuperclass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>cls</name>
                                != <name>null</name> &amp;&amp; <name>cls</name> !=
                                <name><name>Enum</name>.
                                    <name>
                                        <name/>
                                    </name>
                                </name>
                                class &amp;&amp; <name>cls</name> !=
                                <name><name>ValuedEnum</name>.
                                    <name>
                                        <name/>
                                    </name>
                                </name>
                                class
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Entry</name>
                                    </type>
                                    <name>loopEntry</name> =
                                    <init>
                                        <expr>(<name>Entry</name>)
                                            <call>
                                                <name><name>cEnumClasses</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cls</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>loopEntry</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>entry</name>.<name>list</name>.
                                                        <name>addAll</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>loopEntry</name>.
                                                                    <name>list</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>entry</name>.<name>map</name>.
                                                        <name>putAll</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>loopEntry</name>.
                                                                    <name>map</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                        <comment type="line">// stop here, as this will already have had superclasses
                                            added
                                        </comment>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>cls</name>
                                    =
                                    <call>
                                        <name><name>cls</name>.
                                            <name>getSuperclass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>entry</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Retrieve the name of this Enum item, set in the constructor.&lt;/p&gt;
                *
                * @return the &lt;code&gt;String&lt;/code&gt; name of this Enum item
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>getName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>iName</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Retrieves the Class of this Enum item, set in the constructor.&lt;/p&gt;
                *
                * &lt;p&gt;This is normally the same as &lt;code&gt;getClass()&lt;/code&gt;, but for
                * advanced Enums may be different. If overridden, it must return a
                * constant value.&lt;/p&gt;
                *
                * @return the &lt;code&gt;Class&lt;/code&gt; of the enum
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Class</name>
                </type>
                <name>getEnumClass</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getClass</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests for equality.&lt;/p&gt;
                *
                * &lt;p&gt;Two Enum objects are considered equal
                * if they have the same class names and the same names.
                * Identity is tested for first, so this method usually runs fast.&lt;/p&gt;
                *
                * &lt;p&gt;If the parameter is in a different class loader than this instance,
                * reflection is used to compare the names.&lt;/p&gt;
                *
                * @param other the other object to compare for equality
                * @return &lt;code&gt;true&lt;/code&gt; if the Enums are equal
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>other</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>other</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>other</name>.
                                                        <name>getClass</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                ==
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getClass</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// Ok to do a class cast to Enum here since the
                                                    test above
                                                </comment>
                                                <comment type="line">// guarantee both</comment>
                                                <comment type="line">// classes are in the same class loader.</comment>
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>iName</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>((<name>Enum</name>) <name>other</name>).
                                                                        <name>iName</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <comment type="line">// This and other are in different class loaders,
                                                    we must check indirectly
                                                </comment>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>other</name>.
                                                                    <name>getClass</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>getName</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>equals</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>this</name>.
                                                                                    <name>getClass</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            .
                                                                            <call>
                                                                                <name>getName</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            == false
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>iName</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name>getNameInOtherClassLoader</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>other</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns a suitable hashCode for the enumeration.&lt;/p&gt;
                *
                * @return a hashcode based on the name
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>iHashCode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests for order.&lt;/p&gt;
                *
                * &lt;p&gt;The default ordering is alphabetic by name, but this
                * can be overridden by subclasses.&lt;/p&gt;
                *
                * &lt;p&gt;If the parameter is in a different class loader than this instance,
                * reflection is used to compare the names.&lt;/p&gt;
                *
                * @see java.lang.Comparable#compareTo(Object)
                * @param other the other object to compare to
                * @return -ve if this is less than the other object, +ve if greater
                * than, &lt;code&gt;0&lt;/code&gt; of equal
                * @throws ClassCastException if other is not an Enum
                * @throws NullPointerException if other is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>compareTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>other</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>other</name>.
                                        <name>getClass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <call>
                                    <name><name>this</name>.
                                        <name>getClass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>other</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>equals</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>getClass</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>getName</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>iName</name>.
                                                            <name>compareTo</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name>getNameInOtherClassLoader</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>other</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ClassCastException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Different enum class '" +
                                                        <call>
                                                            <name><name>ClassUtils</name>.
                                                                <name>getShortClassName</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>other</name>.
                                                                                <name>getClass</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        + "'"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>iName</name>.
                                    <name>compareTo</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>((<name>Enum</name>) <name>other</name>).
                                            <name>iName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Use reflection to return an objects class name.&lt;/p&gt;
                *
                * @param other The object to determine the class name for
                * @return The class name
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>String</name>
                </type>
                <name>getNameInOtherClassLoader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Method</name>
                                    </type>
                                    <name>mth</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>other</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getMethod</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"getName"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>name</name> =
                                    <init>
                                        <expr>(<name>String</name>)
                                            <call>
                                                <name><name>mth</name>.
                                                    <name>invoke</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>other</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <name>name</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NoSuchMethodException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// ignore - should never happen</comment>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalAccessException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// ignore - should never happen</comment>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InvocationTargetException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// ignore - should never happen</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalStateException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"This should not happen"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Human readable description of this Enum item.&lt;/p&gt;
                *
                * @return String in the form &lt;code&gt;type[name]&lt;/code&gt;, for example:
                * &lt;code&gt;Color[Red]&lt;/code&gt;. Note that the package name is stripped from
                * the type name.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>iToString</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>shortName</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>ClassUtils</name>.
                                                        <name>getShortClassName</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getEnumClass</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>iToString</name>
                                        = <name>shortName</name> + "[" +
                                        <call>
                                            <name>getName</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        + "]"
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>iToString</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
