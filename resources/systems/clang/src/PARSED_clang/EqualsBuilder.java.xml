<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\builder\EqualsBuilder.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>builder</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>AccessibleObject</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Field</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Modifier</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>ArrayUtils</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Assists in implementing {@link Object#equals(Object)} methods.&lt;/p&gt;
        *
        * &lt;p&gt; This class provides methods to build a good equals method for any
        * class. It follows rules laid out in
        * &lt;a href="http://java.sun.com/docs/books/effective/index.html"&gt;Effective Java&lt;/a&gt;
        * , by Joshua Bloch. In particular the rule for comparing &lt;code&gt;doubles&lt;/code&gt;,
        * &lt;code&gt;floats&lt;/code&gt;, and arrays can be tricky. Also, making sure that
        * &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; are consistent can be
        * difficult.&lt;/p&gt;
        *
        * &lt;p&gt;Two Objects that compare as equals must generate the same hash code,
        * but two Objects with the same hash code do not have to be equal.&lt;/p&gt;
        *
        * &lt;p&gt;All relevant fields should be included in the calculation of equals.
        * Derived fields may be ignored. In particular, any field used in
        * generating a hash code must be used in the equals method, and vice
        * versa.&lt;/p&gt;
        *
        * &lt;p&gt;Typical use for the code is as follows:&lt;/p&gt;
        * &lt;pre&gt;
        * public boolean equals(Object obj) {
        * if (obj == null) { return false; }
        * if (obj == this) { return true; }
        * if (obj.getClass() != getClass()) {
        * return false;
        * }
        * MyClass rhs = (MyClass) obj;
        * return new EqualsBuilder()
        * .appendSuper(super.equals(obj))
        * .append(field1, rhs.field1)
        * .append(field2, rhs.field2)
        * .append(field3, rhs.field3)
        * .isEquals();
        * }
        * &lt;/pre&gt;
        *
        * &lt;p&gt; Alternatively, there is a method that uses reflection to determine
        * the fields to test. Because these fields are usually private, the method,
        * &lt;code&gt;reflectionEquals&lt;/code&gt;, uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to
        * change the visibility of the fields. This will fail under a security
        * manager, unless the appropriate permissions are set up correctly. It is
        * also slower than testing explicitly.&lt;/p&gt;
        *
        * &lt;p&gt; A typical invocation for this method would look like:&lt;/p&gt;
        * &lt;pre&gt;
        * public boolean equals(Object obj) {
        * return EqualsBuilder.reflectionEquals(this, obj);
        * }
        * &lt;/pre&gt;
        *
        * @author Apache Software Foundation
        * @author &lt;a href="mailto:steve.downey@netfolio.com"&gt;Steve Downey&lt;/a&gt;
        * @author Gary Gregory
        * @author Pete Gieser
        * @author Arun Mammen Thomas
        * @since 1.0
        * @version $Id: EqualsBuilder.java 905707 2010-02-02 16:59:59Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>EqualsBuilder</name>
        <block>{

            <comment type="javadoc">/**
                * If the fields tested are equals.
                * The default value is &lt;code&gt;true&lt;/code&gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>isEquals</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructor for EqualsBuilder.&lt;/p&gt;
                *
                * &lt;p&gt;Starts off assuming that equals is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                * @see Object#equals(Object)
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>EqualsBuilder</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// do nothing for now.</comment>
                    }
                </block>
            </constructor>

            <comment type="line">//-------------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;This method uses reflection to determine if the two &lt;code&gt;Object&lt;/code&gt;s
                * are equal.&lt;/p&gt;
                *
                * &lt;p&gt;It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private
                * fields. This means that it will throw a security exception if run under
                * a security manager, if the permissions are not set up correctly. It is also
                * not as efficient as testing explicitly.&lt;/p&gt;
                *
                * &lt;p&gt;Transient members will be not be tested, as they are likely derived
                * fields, and not part of the value of the Object.&lt;/p&gt;
                *
                * &lt;p&gt;Static fields will not be tested. Superclass fields will be included.&lt;/p&gt;
                *
                * @param lhs &lt;code&gt;this&lt;/code&gt; object
                * @param rhs the other object
                * @return &lt;code&gt;true&lt;/code&gt; if the two Objects have tested equals.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>reflectionEquals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>reflectionEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lhs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rhs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;This method uses reflection to determine if the two &lt;code&gt;Object&lt;/code&gt;s
                * are equal.&lt;/p&gt;
                *
                * &lt;p&gt;It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private
                * fields. This means that it will throw a security exception if run under
                * a security manager, if the permissions are not set up correctly. It is also
                * not as efficient as testing explicitly.&lt;/p&gt;
                *
                * &lt;p&gt;Transient members will be not be tested, as they are likely derived
                * fields, and not part of the value of the Object.&lt;/p&gt;
                *
                * &lt;p&gt;Static fields will not be tested. Superclass fields will be included.&lt;/p&gt;
                *
                * @param lhs &lt;code&gt;this&lt;/code&gt; object
                * @param rhs the other object
                * @param excludeFields Collection of String field names to exclude from testing
                * @return &lt;code&gt;true&lt;/code&gt; if the two Objects have tested equals.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>reflectionEquals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <comment type="block">/*String*/</comment>
                            <name>excludeFields</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>reflectionEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lhs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rhs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ReflectionToStringBuilder</name>.
                                                    <name>toNoNullStringArray</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>excludeFields</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;This method uses reflection to determine if the two &lt;code&gt;Object&lt;/code&gt;s
                * are equal.&lt;/p&gt;
                *
                * &lt;p&gt;It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private
                * fields. This means that it will throw a security exception if run under
                * a security manager, if the permissions are not set up correctly. It is also
                * not as efficient as testing explicitly.&lt;/p&gt;
                *
                * &lt;p&gt;Transient members will be not be tested, as they are likely derived
                * fields, and not part of the value of the Object.&lt;/p&gt;
                *
                * &lt;p&gt;Static fields will not be tested. Superclass fields will be included.&lt;/p&gt;
                *
                * @param lhs &lt;code&gt;this&lt;/code&gt; object
                * @param rhs the other object
                * @param excludeFields array of field names to exclude from testing
                * @return &lt;code&gt;true&lt;/code&gt; if the two Objects have tested equals.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>reflectionEquals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>excludeFields</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>reflectionEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lhs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rhs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>excludeFields</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;This method uses reflection to determine if the two &lt;code&gt;Object&lt;/code&gt;s
                * are equal.&lt;/p&gt;
                *
                * &lt;p&gt;It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private
                * fields. This means that it will throw a security exception if run under
                * a security manager, if the permissions are not set up correctly. It is also
                * not as efficient as testing explicitly.&lt;/p&gt;
                *
                * &lt;p&gt;If the TestTransients parameter is set to &lt;code&gt;true&lt;/code&gt;, transient
                * members will be tested, otherwise they are ignored, as they are likely
                * derived fields, and not part of the value of the &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;Static fields will not be tested. Superclass fields will be included.&lt;/p&gt;
                *
                * @param lhs &lt;code&gt;this&lt;/code&gt; object
                * @param rhs the other object
                * @param testTransients whether to include transient fields
                * @return &lt;code&gt;true&lt;/code&gt; if the two Objects have tested equals.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>reflectionEquals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>testTransients</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>reflectionEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lhs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rhs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>testTransients</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;This method uses reflection to determine if the two &lt;code&gt;Object&lt;/code&gt;s
                * are equal.&lt;/p&gt;
                *
                * &lt;p&gt;It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private
                * fields. This means that it will throw a security exception if run under
                * a security manager, if the permissions are not set up correctly. It is also
                * not as efficient as testing explicitly.&lt;/p&gt;
                *
                * &lt;p&gt;If the testTransients parameter is set to &lt;code&gt;true&lt;/code&gt;, transient
                * members will be tested, otherwise they are ignored, as they are likely
                * derived fields, and not part of the value of the &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;Static fields will not be included. Superclass fields will be appended
                * up to and including the specified superclass. A null superclass is treated
                * as java.lang.Object.&lt;/p&gt;
                *
                * @param lhs &lt;code&gt;this&lt;/code&gt; object
                * @param rhs the other object
                * @param testTransients whether to include transient fields
                * @param reflectUpToClass the superclass to reflect up to (inclusive),
                * may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the two Objects have tested equals.
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>reflectionEquals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>testTransients</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>reflectUpToClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>reflectionEquals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lhs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rhs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>testTransients</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>reflectUpToClass</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;This method uses reflection to determine if the two &lt;code&gt;Object&lt;/code&gt;s
                * are equal.&lt;/p&gt;
                *
                * &lt;p&gt;It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private
                * fields. This means that it will throw a security exception if run under
                * a security manager, if the permissions are not set up correctly. It is also
                * not as efficient as testing explicitly.&lt;/p&gt;
                *
                * &lt;p&gt;If the testTransients parameter is set to &lt;code&gt;true&lt;/code&gt;, transient
                * members will be tested, otherwise they are ignored, as they are likely
                * derived fields, and not part of the value of the &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;Static fields will not be included. Superclass fields will be appended
                * up to and including the specified superclass. A null superclass is treated
                * as java.lang.Object.&lt;/p&gt;
                *
                * @param lhs &lt;code&gt;this&lt;/code&gt; object
                * @param rhs the other object
                * @param testTransients whether to include transient fields
                * @param reflectUpToClass the superclass to reflect up to (inclusive),
                * may be &lt;code&gt;null&lt;/code&gt;
                * @param excludeFields array of field names to exclude from testing
                * @return &lt;code&gt;true&lt;/code&gt; if the two Objects have tested equals.
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>reflectionEquals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>testTransients</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>reflectUpToClass</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>excludeFields</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// Find the leaf class since there may be transients in the leaf</comment>
                    <comment type="line">// class or in classes between the leaf and root.</comment>
                    <comment type="line">// If we are not testing transients or a subclass has no ivars,</comment>
                    <comment type="line">// then a subclass can test equals to a superclass.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>lhsClass</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>lhs</name>.
                                            <name>getClass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>rhsClass</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>rhs</name>.
                                            <name>getClass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>testClass</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>lhsClass</name>.
                                        <name>isInstance</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>rhs</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>testClass</name>
                                        =
                                        <name>lhsClass</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name><name>rhsClass</name>.
                                                    <name>isInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>lhs</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// rhsClass is a subclass of lhsClass</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>testClass</name>
                                                    =
                                                    <name>rhsClass</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>rhsClass</name>.
                                                <name>isInstance</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>lhs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>testClass</name>
                                                =
                                                <name>rhsClass</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <call>
                                                        <name><name>lhsClass</name>.
                                                            <name>isInstance</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>rhs</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// lhsClass is a subclass of rhsClass</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>testClass</name>
                                                            =
                                                            <name>lhsClass</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// The two classes are not related.</comment>
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>EqualsBuilder</name>
                            </type>
                            <name>equalsBuilder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>EqualsBuilder</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>reflectionAppend</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>lhs</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>rhs</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>testClass</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>equalsBuilder</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>testTransients</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>excludeFields</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>testClass</name>.
                                                <name>getSuperclass</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        != <name>null</name> &amp;&amp; <name>testClass</name> !=
                                        <name>reflectUpToClass</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>testClass</name>
                                            =
                                            <call>
                                                <name><name>testClass</name>.
                                                    <name>getSuperclass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>reflectionAppend</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>lhs</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>rhs</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>testClass</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>equalsBuilder</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>testTransients</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>excludeFields</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalArgumentException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// In this case, we tried to test a subclass vs. a superclass and
                                </comment>
                                <comment type="line">// the subclass has ivars or the ivars are transient and</comment>
                                <comment type="line">// we are testing transients.</comment>
                                <comment type="line">// If a subclass has ivars that we are trying to test them, we get
                                    an
                                </comment>
                                <comment type="line">// exception and we know that the objects are not equal.</comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    <return>return
                        <expr>
                            <call>
                                <name><name>equalsBuilder</name>.
                                    <name>isEquals</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Appends the fields and values defined by the given object of the
                * given Class.&lt;/p&gt;
                *
                * @param lhs the left hand object
                * @param rhs the right hand object
                * @param clazz the class to append details of
                * @param builder the builder to append to
                * @param useTransients whether to test transient fields
                * @param excludeFields array of field names to exclude from testing
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>reflectionAppend</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>clazz</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>EqualsBuilder</name>
                            </type>
                            <name>builder</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>useTransients</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>excludeFields</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Field</name>
                                <index>[]</index>
                            </type>
                            <name>fields</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>clazz</name>.
                                            <name>getDeclaredFields</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>AccessibleObject</name>.
                                    <name>setAccessible</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fields</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>fields</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp;
                                <name><name>builder</name>.
                                    <name>isEquals</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Field</name>
                                    </type>
                                    <name>f</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>fields</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>ArrayUtils</name>.
                                                <name>contains</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>excludeFields</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>f</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp; (
                                        <call>
                                            <name><name>f</name>.
                                                <name>getName</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>indexOf</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'$'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == -1)
                                        &amp;&amp; (<name>useTransients</name> || !
                                        <call>
                                            <name><name>Modifier</name>.
                                                <name>isTransient</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>f</name>.
                                                                <name>getModifiers</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                        &amp;&amp; (!
                                        <call>
                                            <name><name>Modifier</name>.
                                                <name>isStatic</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>f</name>.
                                                                <name>getModifiers</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <try>try
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>builder</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>f</name>.
                                                                                <name>get</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>lhs</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>f</name>.
                                                                                <name>get</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>rhs</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                            <catch>catch (
                                                <param>
                                                    <decl>
                                                        <type>
                                                            <name>IllegalAccessException</name>
                                                        </type>
                                                        <name>e</name>
                                                    </decl>
                                                </param>
                                                )
                                                <block>{
                                                    <comment type="line">//this can't happen. Would get a Security
                                                        exception instead
                                                    </comment>
                                                    <comment type="line">//throw a runtime exception in case the
                                                        impossible happens.
                                                    </comment>
                                                    <throw>throw
                                                        <expr>new
                                                            <call>
                                                                <name>InternalError</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"Unexpected IllegalAccessException"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                    }
                                                </block>
                                            </catch>
                                        </try>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="line">//-------------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds the result of &lt;code&gt;super.equals()&lt;/code&gt; to this builder.&lt;/p&gt;
                *
                * @param superEquals the result of calling &lt;code&gt;super.equals()&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>appendSuper</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>superEquals</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>isEquals</name>
                            =
                            <name>superEquals</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-------------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Test if two &lt;code&gt;Object&lt;/code&gt;s are equal using their
                * &lt;code&gt;equals&lt;/code&gt; method.&lt;/p&gt;
                *
                * @param lhs the left hand object
                * @param rhs the right hand object
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>lhsClass</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>lhs</name>.
                                            <name>getClass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>lhsClass</name>.
                                        <name>isArray</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// The simple case, not an array, just test the element</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>isEquals</name>
                                        =
                                        <call>
                                            <name><name>lhs</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>rhs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>lhs</name>.
                                                <name>getClass</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        !=
                                        <call>
                                            <name><name>rhs</name>.
                                                <name>getClass</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// Here when we compare different dimensions, for example:
                                            a boolean[][] to a boolean[]
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>setEquals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>false</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <comment type="line">// 'Switch' on type of array, to dispatch to the correct handler
                                </comment>
                                <comment type="line">// This handles multi dimensional arrays of the same depth
                                </comment>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>lhs</name>
                                                <name>instanceof</name>
                                                <name>
                                                    <name>long</name>
                                                    <index>[]</index>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>append</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>(
                                                                        <name>
                                                                            <name>long</name>
                                                                            <index>[]</index>
                                                                        </name>
                                                                        )
                                                                        <name>lhs</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>(
                                                                        <name>
                                                                            <name>long</name>
                                                                            <index>[]</index>
                                                                        </name>
                                                                        )
                                                                        <name>rhs</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>lhs</name>
                                                        <name>instanceof</name>
                                                        <name>
                                                            <name>int</name>
                                                            <index>[]</index>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>append</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(
                                                                                <name>
                                                                                    <name>int</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                )
                                                                                <name>lhs</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>(
                                                                                <name>
                                                                                    <name>int</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                                )
                                                                                <name>rhs</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>lhs</name>
                                                                <name>instanceof</name>
                                                                <name>
                                                                    <name>short</name>
                                                                    <index>[]</index>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>append</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>(
                                                                                        <name>
                                                                                            <name>short</name>
                                                                                            <index>[]</index>
                                                                                        </name>
                                                                                        )
                                                                                        <name>lhs</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>(
                                                                                        <name>
                                                                                            <name>short</name>
                                                                                            <index>[]</index>
                                                                                        </name>
                                                                                        )
                                                                                        <name>rhs</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>lhs</name>
                                                                        <name>instanceof</name>
                                                                        <name>
                                                                            <name>char</name>
                                                                            <index>[]</index>
                                                                        </name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>append</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>(
                                                                                                <name>
                                                                                                    <name>char</name>
                                                                                                    <index>[]</index>
                                                                                                </name>
                                                                                                )
                                                                                                <name>lhs</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>(
                                                                                                <name>
                                                                                                    <name>char</name>
                                                                                                    <index>[]</index>
                                                                                                </name>
                                                                                                )
                                                                                                <name>rhs</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                                <else>else
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>lhs</name>
                                                                                <name>instanceof</name>
                                                                                <name>
                                                                                    <name>byte</name>
                                                                                    <index>[]</index>
                                                                                </name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>append</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>(
                                                                                                        <name>
                                                                                                            <name>byte
                                                                                                            </name>
                                                                                                            <index>[]
                                                                                                            </index>
                                                                                                        </name>
                                                                                                        )
                                                                                                        <name>lhs</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>(
                                                                                                        <name>
                                                                                                            <name>byte
                                                                                                            </name>
                                                                                                            <index>[]
                                                                                                            </index>
                                                                                                        </name>
                                                                                                        )
                                                                                                        <name>rhs</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                        <else>else
                                                                            <if>if
                                                                                <condition>(
                                                                                    <expr>
                                                                                        <name>lhs</name>
                                                                                        <name>instanceof</name>
                                                                                        <name>
                                                                                            <name>double</name>
                                                                                            <index>[]</index>
                                                                                        </name>
                                                                                    </expr>
                                                                                    )
                                                                                </condition>
                                                                                <then>
                                                                                    <block>{
                                                                                        <expr_stmt>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name>append</name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>(
                                                                                                                <name>
                                                                                                                    <name>
                                                                                                                        double
                                                                                                                    </name>
                                                                                                                    <index>
                                                                                                                        []
                                                                                                                    </index>
                                                                                                                </name>
                                                                                                                )
                                                                                                                <name>
                                                                                                                    lhs
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        ,
                                                                                                        <argument>
                                                                                                            <expr>(
                                                                                                                <name>
                                                                                                                    <name>
                                                                                                                        double
                                                                                                                    </name>
                                                                                                                    <index>
                                                                                                                        []
                                                                                                                    </index>
                                                                                                                </name>
                                                                                                                )
                                                                                                                <name>
                                                                                                                    rhs
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                            ;
                                                                                        </expr_stmt>
                                                                                        }
                                                                                    </block>
                                                                                </then>
                                                                                <else>else
                                                                                    <if>if
                                                                                        <condition>(
                                                                                            <expr>
                                                                                                <name>lhs</name>
                                                                                                <name>instanceof</name>
                                                                                                <name>
                                                                                                    <name>float</name>
                                                                                                    <index>[]</index>
                                                                                                </name>
                                                                                            </expr>
                                                                                            )
                                                                                        </condition>
                                                                                        <then>
                                                                                            <block>{
                                                                                                <expr_stmt>
                                                                                                    <expr>
                                                                                                        <call>
                                                                                                            <name>
                                                                                                                append
                                                                                                            </name>
                                                                                                            <argument_list>
                                                                                                                (
                                                                                                                <argument>
                                                                                                                    <expr>
                                                                                                                        (
                                                                                                                        <name>
                                                                                                                            <name>
                                                                                                                                float
                                                                                                                            </name>
                                                                                                                            <index>
                                                                                                                                []
                                                                                                                            </index>
                                                                                                                        </name>
                                                                                                                        )
                                                                                                                        <name>
                                                                                                                            lhs
                                                                                                                        </name>
                                                                                                                    </expr>
                                                                                                                </argument>
                                                                                                                ,
                                                                                                                <argument>
                                                                                                                    <expr>
                                                                                                                        (
                                                                                                                        <name>
                                                                                                                            <name>
                                                                                                                                float
                                                                                                                            </name>
                                                                                                                            <index>
                                                                                                                                []
                                                                                                                            </index>
                                                                                                                        </name>
                                                                                                                        )
                                                                                                                        <name>
                                                                                                                            rhs
                                                                                                                        </name>
                                                                                                                    </expr>
                                                                                                                </argument>
                                                                                                                )
                                                                                                            </argument_list>
                                                                                                        </call>
                                                                                                    </expr>
                                                                                                    ;
                                                                                                </expr_stmt>
                                                                                                }
                                                                                            </block>
                                                                                        </then>
                                                                                        <else>else
                                                                                            <if>if
                                                                                                <condition>(
                                                                                                    <expr>
                                                                                                        <name>lhs</name>
                                                                                                        <name>
                                                                                                            instanceof
                                                                                                        </name>
                                                                                                        <name>
                                                                                                            <name>
                                                                                                                boolean
                                                                                                            </name>
                                                                                                            <index>[]
                                                                                                            </index>
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                    )
                                                                                                </condition>
                                                                                                <then>
                                                                                                    <block>{
                                                                                                        <expr_stmt>
                                                                                                            <expr>
                                                                                                                <call>
                                                                                                                    <name>
                                                                                                                        append
                                                                                                                    </name>
                                                                                                                    <argument_list>
                                                                                                                        (
                                                                                                                        <argument>
                                                                                                                            <expr>
                                                                                                                                (
                                                                                                                                <name>
                                                                                                                                    <name>
                                                                                                                                        boolean
                                                                                                                                    </name>
                                                                                                                                    <index>
                                                                                                                                        []
                                                                                                                                    </index>
                                                                                                                                </name>
                                                                                                                                )
                                                                                                                                <name>
                                                                                                                                    lhs
                                                                                                                                </name>
                                                                                                                            </expr>
                                                                                                                        </argument>
                                                                                                                        ,
                                                                                                                        <argument>
                                                                                                                            <expr>
                                                                                                                                (
                                                                                                                                <name>
                                                                                                                                    <name>
                                                                                                                                        boolean
                                                                                                                                    </name>
                                                                                                                                    <index>
                                                                                                                                        []
                                                                                                                                    </index>
                                                                                                                                </name>
                                                                                                                                )
                                                                                                                                <name>
                                                                                                                                    rhs
                                                                                                                                </name>
                                                                                                                            </expr>
                                                                                                                        </argument>
                                                                                                                        )
                                                                                                                    </argument_list>
                                                                                                                </call>
                                                                                                            </expr>
                                                                                                            ;
                                                                                                        </expr_stmt>
                                                                                                        }
                                                                                                    </block>
                                                                                                </then>
                                                                                                <else>else
                                                                                                    <block>{
                                                                                                        <comment
                                                                                                                type="line">
                                                                                                            // Not an
                                                                                                            array of
                                                                                                            primitives
                                                                                                        </comment>
                                                                                                        <expr_stmt>
                                                                                                            <expr>
                                                                                                                <call>
                                                                                                                    <name>
                                                                                                                        append
                                                                                                                    </name>
                                                                                                                    <argument_list>
                                                                                                                        (
                                                                                                                        <argument>
                                                                                                                            <expr>
                                                                                                                                (
                                                                                                                                <name>
                                                                                                                                    <name>
                                                                                                                                        Object
                                                                                                                                    </name>
                                                                                                                                    <index>
                                                                                                                                        []
                                                                                                                                    </index>
                                                                                                                                </name>
                                                                                                                                )
                                                                                                                                <name>
                                                                                                                                    lhs
                                                                                                                                </name>
                                                                                                                            </expr>
                                                                                                                        </argument>
                                                                                                                        ,
                                                                                                                        <argument>
                                                                                                                            <expr>
                                                                                                                                (
                                                                                                                                <name>
                                                                                                                                    <name>
                                                                                                                                        Object
                                                                                                                                    </name>
                                                                                                                                    <index>
                                                                                                                                        []
                                                                                                                                    </index>
                                                                                                                                </name>
                                                                                                                                )
                                                                                                                                <name>
                                                                                                                                    rhs
                                                                                                                                </name>
                                                                                                                            </expr>
                                                                                                                        </argument>
                                                                                                                        )
                                                                                                                    </argument_list>
                                                                                                                </call>
                                                                                                            </expr>
                                                                                                            ;
                                                                                                        </expr_stmt>
                                                                                                        }
                                                                                                    </block>
                                                                                                </else>
                                                                                            </if>
                                                                                        </else>
                                                                                    </if>
                                                                                </else>
                                                                            </if>
                                                                        </else>
                                                                    </if>
                                                                </else>
                                                            </if>
                                                        </else>
                                                    </if>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Test if two &lt;code&gt;long&lt;/code&gt; s are equal.
                * &lt;/p&gt;
                *
                * @param lhs
                * the left hand &lt;code&gt;long&lt;/code&gt;
                * @param rhs
                * the right hand &lt;code&gt;long&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>isEquals</name>
                            = (<name>lhs</name> == <name>rhs</name>)
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Test if two &lt;code&gt;int&lt;/code&gt;s are equal.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;int&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;int&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>isEquals</name>
                            = (<name>lhs</name> == <name>rhs</name>)
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Test if two &lt;code&gt;short&lt;/code&gt;s are equal.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;short&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;short&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>isEquals</name>
                            = (<name>lhs</name> == <name>rhs</name>)
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Test if two &lt;code&gt;char&lt;/code&gt;s are equal.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;char&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;char&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>isEquals</name>
                            = (<name>lhs</name> == <name>rhs</name>)
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Test if two &lt;code&gt;byte&lt;/code&gt;s are equal.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;byte&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;byte&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>isEquals</name>
                            = (<name>lhs</name> == <name>rhs</name>)
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Test if two &lt;code&gt;double&lt;/code&gt;s are equal by testing that the
                * pattern of bits returned by &lt;code&gt;doubleToLong&lt;/code&gt; are equal.&lt;/p&gt;
                *
                * &lt;p&gt;This handles NaNs, Infinities, and &lt;code&gt;-0.0&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;It is compatible with the hash code generated by
                * &lt;code&gt;HashCodeBuilder&lt;/code&gt;.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;double&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;double&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Double</name>.
                                                    <name>doubleToLongBits</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>lhs</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Double</name>.
                                                    <name>doubleToLongBits</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>rhs</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Test if two &lt;code&gt;float&lt;/code&gt;s are equal byt testing that the
                * pattern of bits returned by doubleToLong are equal.&lt;/p&gt;
                *
                * &lt;p&gt;This handles NaNs, Infinities, and &lt;code&gt;-0.0&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;It is compatible with the hash code generated by
                * &lt;code&gt;HashCodeBuilder&lt;/code&gt;.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;float&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;float&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Float</name>.
                                                    <name>floatToIntBits</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>lhs</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Float</name>.
                                                    <name>floatToIntBits</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>rhs</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Test if two &lt;code&gt;booleans&lt;/code&gt;s are equal.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;boolean&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;boolean&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>isEquals</name>
                            = (<name>lhs</name> == <name>rhs</name>)
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Performs a deep comparison of two &lt;code&gt;Object&lt;/code&gt; arrays.&lt;/p&gt;
                *
                * &lt;p&gt;This also will be called for the top level of
                * multi-dimensional, ragged, and multi-typed arrays.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;Object[]&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;Object[]&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>rhs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp;
                                <name>isEquals</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>lhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>rhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Deep comparison of array of &lt;code&gt;long&lt;/code&gt;. Length and all
                * values are compared.&lt;/p&gt;
                *
                * &lt;p&gt;The method {@link #append(long, long)} is used.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;long[]&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;long[]&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>long</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>rhs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp;
                                <name>isEquals</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>lhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>rhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Deep comparison of array of &lt;code&gt;int&lt;/code&gt;. Length and all
                * values are compared.&lt;/p&gt;
                *
                * &lt;p&gt;The method {@link #append(int, int)} is used.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;int[]&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;int[]&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>rhs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp;
                                <name>isEquals</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>lhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>rhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Deep comparison of array of &lt;code&gt;short&lt;/code&gt;. Length and all
                * values are compared.&lt;/p&gt;
                *
                * &lt;p&gt;The method {@link #append(short, short)} is used.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;short[]&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;short[]&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>short</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>rhs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp;
                                <name>isEquals</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>lhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>rhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Deep comparison of array of &lt;code&gt;char&lt;/code&gt;. Length and all
                * values are compared.&lt;/p&gt;
                *
                * &lt;p&gt;The method {@link #append(char, char)} is used.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;char[]&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;char[]&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>rhs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp;
                                <name>isEquals</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>lhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>rhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Deep comparison of array of &lt;code&gt;byte&lt;/code&gt;. Length and all
                * values are compared.&lt;/p&gt;
                *
                * &lt;p&gt;The method {@link #append(byte, byte)} is used.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;byte[]&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;byte[]&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>rhs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp;
                                <name>isEquals</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>lhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>rhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Deep comparison of array of &lt;code&gt;double&lt;/code&gt;. Length and all
                * values are compared.&lt;/p&gt;
                *
                * &lt;p&gt;The method {@link #append(double, double)} is used.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;double[]&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;double[]&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>rhs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp;
                                <name>isEquals</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>lhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>rhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Deep comparison of array of &lt;code&gt;float&lt;/code&gt;. Length and all
                * values are compared.&lt;/p&gt;
                *
                * &lt;p&gt;The method {@link #append(float, float)} is used.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;float[]&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;float[]&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>float</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>rhs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp;
                                <name>isEquals</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>lhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>rhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Deep comparison of array of &lt;code&gt;boolean&lt;/code&gt;. Length and all
                * values are compared.&lt;/p&gt;
                *
                * &lt;p&gt;The method {@link #append(boolean, boolean)} is used.&lt;/p&gt;
                *
                * @param lhs the left hand &lt;code&gt;boolean[]&lt;/code&gt;
                * @param rhs the right hand &lt;code&gt;boolean[]&lt;/code&gt;
                * @return EqualsBuilder - used to chain calls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EqualsBuilder</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>boolean</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>isEquals</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                ==
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                == <name>null</name> || <name>rhs</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                !=
                                <name><name>rhs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>setEquals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>lhs</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp;
                                <name>isEquals</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>lhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>rhs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the fields that have been checked
                * are all equal.&lt;/p&gt;
                *
                * @return boolean
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEquals</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>isEquals</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the &lt;code&gt;isEquals&lt;/code&gt; value.
                *
                * @param isEquals The value to set.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>setEquals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isEquals</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>isEquals</name>
                            </name>
                            =
                            <name>isEquals</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reset the EqualsBuilder so you can use the same object again
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>isEquals</name>
                            </name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
