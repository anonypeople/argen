<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\math\Fraction.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>math</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>text</name>.
            <name>StrBuilder</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;&lt;code&gt;Fraction&lt;/code&gt; is a &lt;code&gt;Number&lt;/code&gt; implementation that
        * stores fractions accurately.&lt;/p&gt;
        *
        * &lt;p&gt;This class is immutable, and interoperable with most methods that accept
        * a &lt;code&gt;Number&lt;/code&gt;.&lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author Travis Reeder
        * @author Tim O'Brien
        * @author Pete Gieser
        * @author C. Scott Ananian
        * @since 2.0
        * @version $Id: Fraction.java 1057072 2011-01-10 01:55:57Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>Fraction</name>
        <super>
            <extends>extends
                <name>Number</name>
            </extends>
            <implements>implements
                <name>Comparable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support. Lang version 2.0.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>65382027393090L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 0.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>ZERO</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 1.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>ONE</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 1/2.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>ONE_HALF</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 1/3.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>ONE_THIRD</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>3</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 2/3.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>TWO_THIRDS</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>3</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 1/4.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>ONE_QUARTER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>4</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 2/4.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>TWO_QUARTERS</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>4</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 3/4.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>THREE_QUARTERS</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>3</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>4</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 1/5.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>ONE_FIFTH</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>5</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 2/5.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>TWO_FIFTHS</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>5</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 3/5.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>THREE_FIFTHS</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>3</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>5</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;code&gt;Fraction&lt;/code&gt; representation of 4/5.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Fraction</name>
                    </type>
                    <name>FOUR_FIFTHS</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>4</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>5</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * The numerator number part of the fraction (the three in three sevenths).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>numerator</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The denominator number part of the fraction (the seven in three sevenths).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>denominator</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Cached output hashCode (class is immutable).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>hashCode</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Cached output toString (class is immutable).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>String</name>
                    </type>
                    <name>toString</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Cached output toProperString (class is immutable).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>String</name>
                    </type>
                    <name>toProperString</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructs a &lt;code&gt;Fraction&lt;/code&gt; instance with the 2 parts
                * of a fraction Y/Z.&lt;/p&gt;
                *
                * @param numerator the numerator, for example the three in 'three sevenths'
                * @param denominator the denominator, for example the seven in 'three sevenths'
                */
            </comment>
            <constructor>
                <specifier>private</specifier>
                <name>Fraction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numerator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>denominator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>numerator</name>
                            </name>
                            =
                            <name>numerator</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>denominator</name>
                            </name>
                            =
                            <name>denominator</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a &lt;code&gt;Fraction&lt;/code&gt; instance with the 2 parts
                * of a fraction Y/Z.&lt;/p&gt;
                *
                * &lt;p&gt;Any negative signs are resolved to be on the numerator.&lt;/p&gt;
                *
                * @param numerator the numerator, for example the three in 'three sevenths'
                * @param denominator the denominator, for example the seven in 'three sevenths'
                * @return a new fraction instance
                * @throws ArithmeticException if the denomiator is &lt;code&gt;zero&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Fraction</name>
                </type>
                <name>getFraction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numerator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>denominator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>denominator</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The denominator must not be zero"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>denominator</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr><name>numerator</name>==
                                            <name><name>Integer</name>.
                                                <name>MIN_VALUE</name>
                                            </name>
                                            ||
                                            <name>denominator</name>==
                                            <name><name>Integer</name>.
                                                <name>MIN_VALUE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>ArithmeticException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"overflow: can't negate"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>numerator</name>
                                        = -
                                        <name>numerator</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>denominator</name>
                                        = -
                                        <name>denominator</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>numerator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>denominator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a &lt;code&gt;Fraction&lt;/code&gt; instance with the 3 parts
                * of a fraction X Y/Z.&lt;/p&gt;
                *
                * &lt;p&gt;The negative sign must be passed in on the whole number part.&lt;/p&gt;
                *
                * @param whole the whole number, for example the one in 'one and three sevenths'
                * @param numerator the numerator, for example the three in 'one and three sevenths'
                * @param denominator the denominator, for example the seven in 'one and three sevenths'
                * @return a new fraction instance
                * @throws ArithmeticException if the denomiator is &lt;code&gt;zero&lt;/code&gt;
                * @throws ArithmeticException if the denominator is negative
                * @throws ArithmeticException if the numerator is negative
                * @throws ArithmeticException if the resulting numerator exceeds
                * &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Fraction</name>
                </type>
                <name>getFraction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>whole</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numerator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>denominator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>denominator</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The denominator must not be zero"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>denominator</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The denominator must not be negative"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>numerator</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The numerator must not be negative"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>numeratorValue</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>whole</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>numeratorValue</name>
                                        = <name>whole</name> * (<name>long</name>)<name>denominator</name> -
                                        <name>numerator</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>numeratorValue</name>
                                        = <name>whole</name> * (<name>long</name>)<name>denominator</name> +
                                        <name>numerator</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>numeratorValue</name>
                                &lt;
                                <name><name>Integer</name>.
                                    <name>MIN_VALUE</name>
                                </name>
                                ||
                                <name>numeratorValue</name>
                                &gt;
                                <name><name>Integer</name>.
                                    <name>MAX_VALUE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Numerator too large to represent as an Integer."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>int</name>)
                                            <name>numeratorValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>denominator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a reduced &lt;code&gt;Fraction&lt;/code&gt; instance with the 2 parts
                * of a fraction Y/Z.&lt;/p&gt;
                *
                * &lt;p&gt;For example, if the input parameters represent 2/4, then the created
                * fraction will be 1/2.&lt;/p&gt;
                *
                * &lt;p&gt;Any negative signs are resolved to be on the numerator.&lt;/p&gt;
                *
                * @param numerator the numerator, for example the three in 'three sevenths'
                * @param denominator the denominator, for example the seven in 'three sevenths'
                * @return a new fraction instance, with the numerator and denominator reduced
                * @throws ArithmeticException if the denominator is &lt;code&gt;zero&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Fraction</name>
                </type>
                <name>getReducedFraction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numerator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>denominator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>denominator</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The denominator must not be zero"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr><name>numerator</name>==0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>ZERO</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// normalize zero.</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// allow 2^k/-2^31 as a valid fraction (where k&gt;0)</comment>
                    <if>if
                        <condition>(
                            <expr><name>denominator</name>==
                                <name><name>Integer</name>.
                                    <name>MIN_VALUE</name>
                                </name>
                                &amp;&amp; (<name>numerator</name>&amp;1)==0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>numerator</name>/=2
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>denominator</name>/=2
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>denominator</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr><name>numerator</name>==
                                            <name><name>Integer</name>.
                                                <name>MIN_VALUE</name>
                                            </name>
                                            ||
                                            <name>denominator</name>==
                                            <name><name>Integer</name>.
                                                <name>MIN_VALUE</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>ArithmeticException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"overflow: can't negate"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>numerator</name>
                                        = -
                                        <name>numerator</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>denominator</name>
                                        = -
                                        <name>denominator</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// simplify fraction.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>gcd</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>greatestCommonDivisor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>numerator</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>denominator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>numerator</name>
                            /=
                            <name>gcd</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>denominator</name>
                            /=
                            <name>gcd</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>numerator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>denominator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a &lt;code&gt;Fraction&lt;/code&gt; instance from a &lt;code&gt;double&lt;/code&gt;
                value.&lt;/p&gt;
                *
                * &lt;p&gt;This method uses the &lt;a href="http://archives.math.utk.edu/articles/atuyl/confrac/"&gt;
                * continued fraction algorithm&lt;/a&gt;, computing a maximum of
                * 25 convergents and bounding the denominator by 10,000.&lt;/p&gt;
                *
                * @param value the double value to convert
                * @return a new fraction instance that is close to the value
                * @throws ArithmeticException if &lt;code&gt;|value| &gt; Integer.MAX_VALUE&lt;/code&gt;
                * or &lt;code&gt;value = NaN&lt;/code&gt;
                * @throws ArithmeticException if the calculated denominator is &lt;code&gt;zero&lt;/code&gt;
                * @throws ArithmeticException if the the algorithm does not converge
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Fraction</name>
                </type>
                <name>getFraction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sign</name> =
                            <init>
                                <expr>(<name>value</name> &lt; 0 ? -1 : 1)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>abs</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                &gt;
                                <name><name>Integer</name>.
                                    <name>MAX_VALUE</name>
                                </name>
                                ||
                                <call>
                                    <name><name>Double</name>.
                                        <name>isNaN</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>value</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The value must not be greater than Integer.MAX_VALUE or
                                                        NaN"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>wholeNumber</name> =
                            <init>
                                <expr>(<name>int</name>)
                                    <name>value</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            -=
                            <name>wholeNumber</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numer0</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// the pre-previous</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>denom0</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// the pre-previous</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numer1</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// the previous</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>denom1</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// the previous</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numer2</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// the current, setup in calculation</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>denom2</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// the current, setup in calculation</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>a1</name> =
                            <init>
                                <expr>(<name>int</name>)
                                    <name>value</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>a2</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x1</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x2</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y1</name> =
                            <init>
                                <expr>
                                    <name>value</name>
                                    -
                                    <name>a1</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>y2</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>delta1</name>, <name>delta2</name> =
                            <init>
                                <expr>
                                    <name><name>Double</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>fraction</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// System.out.println("---");</comment>
                    <do>do
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>delta1</name>
                                    =
                                    <name>delta2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>a2</name>
                                    =
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x1</name>
                                                    /
                                                    <name>y1</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>x2</name>
                                    =
                                    <name>y1</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>y2</name>
                                    = <name>x1</name> - <name>a2</name> *
                                    <name>y1</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>numer2</name>
                                    = <name>a1</name> * <name>numer1</name> +
                                    <name>numer0</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>denom2</name>
                                    = <name>a1</name> * <name>denom1</name> +
                                    <name>denom0</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fraction</name>
                                    = (<name>double</name>) <name>numer2</name> / (<name>double</name>)
                                    <name>denom2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>delta2</name>
                                    =
                                    <call>
                                        <name><name>Math</name>.
                                            <name>abs</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                    -
                                                    <name>fraction</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// System.out.println(numer2 + " " + denom2 + " " + fraction + " " +
                                delta2 + " " + y1);
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <name>a1</name>
                                    =
                                    <name>a2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>x1</name>
                                    =
                                    <name>x2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>y1</name>
                                    =
                                    <name>y2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>numer0</name>
                                    =
                                    <name>numer1</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>denom0</name>
                                    =
                                    <name>denom1</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>numer1</name>
                                    =
                                    <name>numer2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>denom1</name>
                                    =
                                    <name>denom2</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// System.out.println("&gt;&gt;" + delta1 +" "+ delta2+" "+(delta1 &gt;
                                delta2)+" "+i+" "+denom2);
                            </comment>
                            }
                        </block>
                        while
                        <condition>(
                            <expr>(<name>delta1</name> &gt; <name>delta2</name>) &amp;&amp; (<name>denom2</name> &lt;=
                                10000) &amp;&amp; (<name>denom2</name> &gt; 0) &amp;&amp; (<name>i</name> &lt; 25)
                            </expr>
                            )
                        </condition>
                        ;
                    </do>
                    <if>if
                        <condition>(
                            <expr>
                                <name>i</name>
                                == 25
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Unable to convert double to fraction"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>getReducedFraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>numer0</name> + <name>wholeNumber</name> * <name>denom0</name>) *
                                            <name>sign</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>denom0</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a Fraction from a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;The formats accepted are:&lt;/p&gt;
                *
                * &lt;ol&gt;
                * &lt;li&gt;&lt;code&gt;double&lt;/code&gt; String containing a dot&lt;/li&gt;
                * &lt;li&gt;'X Y/Z'&lt;/li&gt;
                * &lt;li&gt;'Y/Z'&lt;/li&gt;
                * &lt;li&gt;'X' (a simple whole number)&lt;/li&gt;
                * &lt;/ol&gt;
                * and a .&lt;/p&gt;
                *
                * @param str the string to parse, must not be &lt;code&gt;null&lt;/code&gt;
                * @return the new &lt;code&gt;Fraction&lt;/code&gt; instance
                * @throws IllegalArgumentException if the string is &lt;code&gt;null&lt;/code&gt;
                * @throws NumberFormatException if the number format is invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Fraction</name>
                </type>
                <name>getFraction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The string must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// parse double format</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'.'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pos</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>getFraction</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Double</name>.
                                                                <name>parseDouble</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>str</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// parse X Y/Z format</comment>
                    <expr_stmt>
                        <expr>
                            <name>pos</name>
                            =
                            <call>
                                <name><name>str</name>.
                                    <name>indexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>' '</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pos</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>whole</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Integer</name>.
                                                        <name>parseInt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>str</name>.
                                                                        <name>substring</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>0</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>pos</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>str</name>
                                        =
                                        <call>
                                            <name><name>str</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>pos</name>
                                                        + 1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>pos</name>
                                        =
                                        <call>
                                            <name><name>str</name>.
                                                <name>indexOf</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'/'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>pos</name>
                                            &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>NumberFormatException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"The fraction could not be parsed as the format X
                                                                    Y/Z"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>numer</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>Integer</name>.
                                                                    <name>parseInt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>str</name>.
                                                                                    <name>substring</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>0</expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>pos</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>denom</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>Integer</name>.
                                                                    <name>parseInt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>str</name>.
                                                                                    <name>substring</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>pos</name>
                                                                                            + 1
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>getFraction</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>whole</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>numer</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>denom</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// parse Y/Z format</comment>
                    <expr_stmt>
                        <expr>
                            <name>pos</name>
                            =
                            <call>
                                <name><name>str</name>.
                                    <name>indexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'/'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pos</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// simple whole number</comment>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>getFraction</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Integer</name>.
                                                                <name>parseInt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>str</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>1</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>numer</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Integer</name>.
                                                        <name>parseInt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>str</name>.
                                                                        <name>substring</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>0</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>pos</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>denom</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Integer</name>.
                                                        <name>parseInt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>str</name>.
                                                                        <name>substring</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>pos</name>
                                                                                + 1
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>getFraction</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>numer</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>denom</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// Accessors</comment>
            <comment type="line">//-------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the numerator part of the fraction.&lt;/p&gt;
                *
                * &lt;p&gt;This method may return a value greater than the denominator, an
                * improper fraction, such as the seven in 7/4.&lt;/p&gt;
                *
                * @return the numerator fraction part
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getNumerator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>numerator</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the denominator part of the fraction.&lt;/p&gt;
                *
                * @return the denominator fraction part
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getDenominator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>denominator</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the proper numerator, always positive.&lt;/p&gt;
                *
                * &lt;p&gt;An improper fraction 7/4 can be resolved into a proper one, 1 3/4.
                * This method returns the 3 from the proper fraction.&lt;/p&gt;
                *
                * &lt;p&gt;If the fraction is negative such as -7/4, it can be resolved into
                * -1 3/4, so this method returns the positive proper numerator, 3.&lt;/p&gt;
                *
                * @return the numerator fraction part of a proper fraction, always positive
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getProperNumerator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>abs</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>numerator</name>
                                            %
                                            <name>denominator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the proper whole part of the fraction.&lt;/p&gt;
                *
                * &lt;p&gt;An improper fraction 7/4 can be resolved into a proper one, 1 3/4.
                * This method returns the 1 from the proper fraction.&lt;/p&gt;
                *
                * &lt;p&gt;If the fraction is negative such as -7/4, it can be resolved into
                * -1 3/4, so this method returns the positive whole part -1.&lt;/p&gt;
                *
                * @return the whole fraction part of a proper fraction, that includes the sign
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getProperWhole</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>numerator</name>
                            /
                            <name>denominator</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Number methods</comment>
            <comment type="line">//-------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the fraction as an &lt;code&gt;int&lt;/code&gt;. This returns the whole number
                * part of the fraction.&lt;/p&gt;
                *
                * @return the whole number fraction part
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>intValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>numerator</name>
                            /
                            <name>denominator</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the fraction as a &lt;code&gt;long&lt;/code&gt;. This returns the whole number
                * part of the fraction.&lt;/p&gt;
                *
                * @return the whole number fraction part
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>longValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>long</name>) <name>numerator</name> /
                            <name>denominator</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the fraction as a &lt;code&gt;float&lt;/code&gt;. This calculates the fraction
                * as the numerator divided by denominator.&lt;/p&gt;
                *
                * @return the fraction as a &lt;code&gt;float&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>float</name>
                </type>
                <name>floatValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>float</name>) <name>numerator</name>) / ((<name>float</name>) <name>
                            denominator</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the fraction as a &lt;code&gt;double&lt;/code&gt;. This calculates the fraction
                * as the numerator divided by denominator.&lt;/p&gt;
                *
                * @return the fraction as a &lt;code&gt;double&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>doubleValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>double</name>) <name>numerator</name>) / ((<name>double</name>) <name>
                            denominator</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Calculations</comment>
            <comment type="line">//-------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Reduce the fraction to the smallest values for the numerator and
                * denominator, returning the result.&lt;/p&gt;
                *
                * &lt;p&gt;For example, if this fraction represents 2/4, then the result
                * will be 1/2.&lt;/p&gt;
                *
                * @return a new reduced fraction instance, or this if no simplification possible
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Fraction</name>
                </type>
                <name>reduce</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>numerator</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ZERO</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ? <name>this</name> :
                                        <name>ZERO</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>gcd</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>greatestCommonDivisor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>abs</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>numerator</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>denominator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>gcd</name>
                                == 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Fraction</name>.
                                    <name>getFraction</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>numerator</name>
                                            /
                                            <name>gcd</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>denominator</name>
                                            /
                                            <name>gcd</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets a fraction that is the inverse (1/fraction) of this one.&lt;/p&gt;
                *
                * &lt;p&gt;The returned fraction is not reduced.&lt;/p&gt;
                *
                * @return a new fraction instance with the numerator and denominator
                * inverted.
                * @throws ArithmeticException if the fraction represents zero.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Fraction</name>
                </type>
                <name>invert</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>numerator</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Unable to invert zero."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr><name>numerator</name>==
                                <name><name>Integer</name>.
                                    <name>MIN_VALUE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"overflow: can't negate numerator"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr><name>numerator</name>&lt;0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>Fraction</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>-
                                                        <name>denominator</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>-
                                                        <name>numerator</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>Fraction</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>denominator</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>numerator</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets a fraction that is the negative (-fraction) of this one.&lt;/p&gt;
                *
                * &lt;p&gt;The returned fraction is not reduced.&lt;/p&gt;
                *
                * @return a new fraction instance with the opposite signed numerator
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Fraction</name>
                </type>
                <name>negate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// the positive range is one smaller than the negative range of an int.
                    </comment>
                    <if>if
                        <condition>(
                            <expr><name>numerator</name>==
                                <name><name>Integer</name>.
                                    <name>MIN_VALUE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"overflow: too large to negate"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>-
                                            <name>numerator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>denominator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets a fraction that is the positive equivalent of this one.&lt;/p&gt;
                * &lt;p&gt;More precisely: &lt;code&gt;(fraction &gt;= 0 ? this : -fraction)&lt;/code&gt;&lt;/p&gt;
                *
                * &lt;p&gt;The returned fraction is not reduced.&lt;/p&gt;
                *
                * @return &lt;code&gt;this&lt;/code&gt; if it is positive, or a new positive fraction
                * instance with the opposite signed numerator
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Fraction</name>
                </type>
                <name>abs</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>numerator</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>negate</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets a fraction that is raised to the passed in power.&lt;/p&gt;
                *
                * &lt;p&gt;The returned fraction is in reduced form.&lt;/p&gt;
                *
                * @param power the power to raise the fraction to
                * @return &lt;code&gt;this&lt;/code&gt; if the power is one, &lt;code&gt;ONE&lt;/code&gt; if the power
                * is zero (even if the fraction equals ZERO) or a new fraction instance
                * raised to the appropriate power
                * @throws ArithmeticException if the resulting numerator or denominator exceeds
                * &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Fraction</name>
                </type>
                <name>pow</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>power</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>power</name>
                                == 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>power</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>ONE</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>power</name>
                                                &lt; 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr><name>power</name>==
                                                            <name><name>Integer</name>.
                                                                <name>MIN_VALUE</name>
                                                            </name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <comment type="line">// MIN_VALUE can't be negated.
                                                            </comment>
                                                            <return>return
                                                                <expr>
                                                                    <call>
                                                                        <name><name>this</name>.
                                                                            <name>invert</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    .
                                                                    <call>
                                                                        <name>pow</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>2</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                    .
                                                                    <call>
                                                                        <name>pow</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>-(<name>power</name>/2)
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>invert</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>pow</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>-
                                                                        <name>power</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>Fraction</name>
                                                        </type>
                                                        <name>f</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>multiplyBy</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>this</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>(<name>power</name> % 2) == 0
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <comment type="line">// if even...</comment>
                                                            <return>return
                                                                <expr>
                                                                    <call>
                                                                        <name><name>f</name>.
                                                                            <name>pow</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr><name>power</name>/2
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <comment type="line">// if odd...</comment>
                                                            <return>return
                                                                <expr>
                                                                    <call>
                                                                        <name><name>f</name>.
                                                                            <name>pow</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr><name>power</name>/2
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                    .
                                                                    <call>
                                                                        <name>multiplyBy</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>this</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the greatest common divisor of the absolute value of
                * two numbers, using the "binary gcd" method which avoids
                * division and modulo operations. See Knuth 4.5.2 algorithm B.
                * This algorithm is due to Josef Stein (1961).&lt;/p&gt;
                *
                * @param u a non-zero number
                * @param v a non-zero number
                * @return the greatest common divisor, never zero
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>greatestCommonDivisor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>u</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>v</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">//if either op. is abs 0 or 1, return 1:</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Math</name>.
                                        <name>abs</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>u</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &lt;= 1 ||
                                <call>
                                    <name><name>Math</name>.
                                        <name>abs</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>v</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &lt;= 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// keep u and v negative, as negative integers range down to</comment>
                    <comment type="line">// -2^31, while positive numbers can only be as large as 2^31-1</comment>
                    <comment type="line">// (i.e. we can't necessarily negate a negative number without</comment>
                    <comment type="line">// overflow)</comment>
                    <if>if
                        <condition>(
                            <expr><name>u</name>&gt;0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>u</name>=-
                                        <name>u</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// make u negative</comment>
                    <if>if
                        <condition>(
                            <expr><name>v</name>&gt;0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr><name>v</name>=-
                                        <name>v</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// make v negative</comment>
                    <comment type="line">// B1. [Find power of 2]</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>k</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>u</name>&amp;1)==0 &amp;&amp; (<name>v</name>&amp;1)==0 &amp;&amp; <name>
                                k</name>&lt;31
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">// while u and v are both even...</comment>
                            <expr_stmt>
                                <expr><name>u</name>/=2
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>v</name>/=2
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>k</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// cast out twos.</comment>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr><name>k</name>==31
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"overflow: gcd is 2^31"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// B2. Initialize: u and v have been divided by 2^k and at least</comment>
                    <comment type="line">// one is odd.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>t</name> =
                            <init>
                                <expr>((<name>u</name>&amp;1)==1) ? <name>v</name> : -(<name>u</name>/2)
                                </expr>
                            </init>
                        </decl>
                        <comment type="block">/*B3*/</comment>;
                    </decl_stmt>
                    <comment type="line">// t negative: u was odd, v may be even (t replaces v)</comment>
                    <comment type="line">// t positive: u was even, v is odd (t replaces u)</comment>
                    <do>do
                        <block>{
                            <comment type="block">/* assert u&lt;0 &amp;&amp; v&lt;0; */</comment>
                            <comment type="line">// B4/B3: cast out twos from t.</comment>
                            <while>while
                                <condition>(
                                    <expr>(<name>t</name>&amp;1)==0
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <comment type="line">// while t is even..</comment>
                                    <expr_stmt>
                                        <expr><name>t</name>/=2
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <comment type="line">// cast out twos</comment>
                                    }
                                </block>
                            </while>
                            <comment type="line">// B5 [reset max(u,v)]</comment>
                            <if>if
                                <condition>(
                                    <expr><name>t</name>&gt;0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>u</name>
                                                = -
                                                <name>t</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>v</name>
                                                =
                                                <name>t</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <comment type="line">// B6/B3. at this point both u and v should be odd.</comment>
                            <expr_stmt>
                                <expr>
                                    <name>t</name>
                                    = (<name>v</name> - <name>u</name>)/2
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// |u| larger: t positive (replace u)</comment>
                            <comment type="line">// |v| larger: t negative (replace v)</comment>
                            }
                        </block>
                        while
                        <condition>(
                            <expr><name>t</name>!=0
                            </expr>
                            )
                        </condition>
                        ;
                    </do>
                    <return>return
                        <expr>-<name>u</name>*(1&lt;&lt;<name>k</name>)
                        </expr>
                        ;
                    </return>
                    <comment type="line">// gcd is u*2^k</comment>
                    }
                </block>
            </function>

            <comment type="line">// Arithmetic</comment>
            <comment type="line">//-------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * Multiply two integers, checking for overflow.
                *
                * @param x a factor
                * @param y a factor
                * @return the product &lt;code&gt;x*y&lt;/code&gt;
                * @throws ArithmeticException if the result can not be represented as
                * an int
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>mulAndCheck</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>m</name> =
                            <init>
                                <expr>((<name>long</name>)<name>x</name>)*((<name>long</name>)<name>y</name>)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>m</name>
                                &lt;
                                <name><name>Integer</name>.
                                    <name>MIN_VALUE</name>
                                </name>
                                ||
                                <name>m</name>
                                &gt;
                                <name><name>Integer</name>.
                                    <name>MAX_VALUE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"overflow: mul"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>int</name>)
                            <name>m</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Multiply two non-negative integers, checking for overflow.
                *
                * @param x a non-negative factor
                * @param y a non-negative factor
                * @return the product &lt;code&gt;x*y&lt;/code&gt;
                * @throws ArithmeticException if the result can not be represented as
                * an int
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>mulPosAndCheck</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="block">/* assert x&gt;=0 &amp;&amp; y&gt;=0; */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>m</name> =
                            <init>
                                <expr>((<name>long</name>)<name>x</name>)*((<name>long</name>)<name>y</name>)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>m</name>
                                &gt;
                                <name><name>Integer</name>.
                                    <name>MAX_VALUE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"overflow: mulPos"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>int</name>)
                            <name>m</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Add two integers, checking for overflow.
                *
                * @param x an addend
                * @param y an addend
                * @return the sum &lt;code&gt;x+y&lt;/code&gt;
                * @throws ArithmeticException if the result can not be represented as
                * an int
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>addAndCheck</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>s</name> =
                            <init>
                                <expr>(<name>long</name>)<name>x</name>+(<name>long</name>)
                                    <name>y</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>s</name>
                                &lt;
                                <name><name>Integer</name>.
                                    <name>MIN_VALUE</name>
                                </name>
                                ||
                                <name>s</name>
                                &gt;
                                <name><name>Integer</name>.
                                    <name>MAX_VALUE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"overflow: add"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>int</name>)
                            <name>s</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Subtract two integers, checking for overflow.
                *
                * @param x the minuend
                * @param y the subtrahend
                * @return the difference &lt;code&gt;x-y&lt;/code&gt;
                * @throws ArithmeticException if the result can not be represented as
                * an int
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>subAndCheck</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>s</name> =
                            <init>
                                <expr>(<name>long</name>)<name>x</name>-(<name>long</name>)
                                    <name>y</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>s</name>
                                &lt;
                                <name><name>Integer</name>.
                                    <name>MIN_VALUE</name>
                                </name>
                                ||
                                <name>s</name>
                                &gt;
                                <name><name>Integer</name>.
                                    <name>MAX_VALUE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"overflow: add"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>int</name>)
                            <name>s</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Adds the value of this fraction to another, returning the result in reduced form.
                * The algorithm follows Knuth, 4.5.1.&lt;/p&gt;
                *
                * @param fraction the fraction to add, must not be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;Fraction&lt;/code&gt; instance with the resulting values
                * @throws IllegalArgumentException if the fraction is &lt;code&gt;null&lt;/code&gt;
                * @throws ArithmeticException if the resulting numerator or denominator exceeds
                * &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Fraction</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Fraction</name>
                            </type>
                            <name>fraction</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>addSub</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fraction</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    <comment type="block">/* add */</comment>)
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Subtracts the value of another fraction from the value of this one,
                * returning the result in reduced form.&lt;/p&gt;
                *
                * @param fraction the fraction to subtract, must not be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;Fraction&lt;/code&gt; instance with the resulting values
                * @throws IllegalArgumentException if the fraction is &lt;code&gt;null&lt;/code&gt;
                * @throws ArithmeticException if the resulting numerator or denominator
                * cannot be represented in an &lt;code&gt;int&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Fraction</name>
                </type>
                <name>subtract</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Fraction</name>
                            </type>
                            <name>fraction</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>addSub</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fraction</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    <comment type="block">/* subtract */</comment>)
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Implement add and subtract using algorithm described in Knuth 4.5.1.
                *
                * @param fraction the fraction to subtract, must not be &lt;code&gt;null&lt;/code&gt;
                * @param isAdd true to add, false to subtract
                * @return a &lt;code&gt;Fraction&lt;/code&gt; instance with the resulting values
                * @throws IllegalArgumentException if the fraction is &lt;code&gt;null&lt;/code&gt;
                * @throws ArithmeticException if the resulting numerator or denominator
                * cannot be represented in an &lt;code&gt;int&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Fraction</name>
                </type>
                <name>addSub</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Fraction</name>
                            </type>
                            <name>fraction</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isAdd</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fraction</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The fraction must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// zero is identity for addition.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>numerator</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>isAdd</name>
                                        ? <name>fraction</name> :
                                        <call>
                                            <name><name>fraction</name>.
                                                <name>negate</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fraction</name>.
                                    <name>numerator</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// if denominators are randomly distributed, d1 will be 1 about 61%</comment>
                    <comment type="line">// of the time.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>d1</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>greatestCommonDivisor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>denominator</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>fraction</name>.
                                                        <name>denominator</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr><name>d1</name>==1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// result is ( (u*v' +/- u'v) / u'v')</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>uvp</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>mulAndCheck</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>numerator</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>fraction</name>.
                                                                    <name>denominator</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>upv</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>mulAndCheck</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>fraction</name>.
                                                                    <name>numerator</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>denominator</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>Fraction</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>isAdd</name>
                                                        ?
                                                        <call>
                                                            <name>addAndCheck</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>uvp</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>upv</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        :
                                                        <call>
                                                            <name>subAndCheck</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>uvp</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>upv</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>mulPosAndCheck</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>denominator</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>fraction</name>.
                                                                            <name>denominator</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// the quantity 't' requires 65 bits of precision; see knuth 4.5.1</comment>
                    <comment type="line">// exercise 7. we're going to use a BigInteger.</comment>
                    <comment type="line">// t = u(v'/d1) +/- v(u'/d1)</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>uvp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>BigInteger</name>.
                                            <name>valueOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>numerator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>multiply</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>BigInteger</name>.
                                                            <name>valueOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>fraction</name>.
                                                                        <name>denominator</name>
                                                                    </name>
                                                                    /
                                                                    <name>d1</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>upv</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>BigInteger</name>.
                                            <name>valueOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>fraction</name>.
                                                        <name>numerator</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>multiply</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>BigInteger</name>.
                                                            <name>valueOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr><name>denominator</name>/
                                                                    <name>d1</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>t</name> =
                            <init>
                                <expr>
                                    <name>isAdd</name>
                                    ?
                                    <call>
                                        <name><name>uvp</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>upv</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    :
                                    <call>
                                        <name><name>uvp</name>.
                                            <name>subtract</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>upv</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// but d2 doesn't need extra precision because</comment>
                    <comment type="line">// d2 = gcd(t,d1) = gcd(t mod d1, d1)</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>tmodd1</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>t</name>.
                                            <name>mod</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>BigInteger</name>.
                                                            <name>valueOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>d1</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>intValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>d2</name> =
                            <init>
                                <expr>(<name>tmodd1</name>==0)?<name>d1</name>:
                                    <call>
                                        <name>greatestCommonDivisor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>tmodd1</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>d1</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// result is (t/d2) / (u'/d1)(v'/d2)</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>w</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>t</name>.
                                            <name>divide</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>BigInteger</name>.
                                                            <name>valueOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>d2</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>w</name>.
                                        <name>bitLength</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; 31
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"overflow: numerator too large after multiply"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>Fraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>w</name>.
                                                    <name>intValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>mulPosAndCheck</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>denominator</name>/
                                                            <name>d1</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>fraction</name>.
                                                                <name>denominator</name>
                                                            </name>
                                                            /
                                                            <name>d2</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Multiplies the value of this fraction by another, returning the
                * result in reduced form.&lt;/p&gt;
                *
                * @param fraction the fraction to multiply by, must not be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;Fraction&lt;/code&gt; instance with the resulting values
                * @throws IllegalArgumentException if the fraction is &lt;code&gt;null&lt;/code&gt;
                * @throws ArithmeticException if the resulting numerator or denominator exceeds
                * &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Fraction</name>
                </type>
                <name>multiplyBy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Fraction</name>
                            </type>
                            <name>fraction</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fraction</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The fraction must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>numerator</name>
                                == 0 ||
                                <name><name>fraction</name>.
                                    <name>numerator</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>ZERO</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// knuth 4.5.1</comment>
                    <comment type="line">// make sure we don't overflow unless the result *must* overflow.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>d1</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>greatestCommonDivisor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>numerator</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>fraction</name>.
                                                        <name>denominator</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>d2</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>greatestCommonDivisor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>fraction</name>.
                                                        <name>numerator</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>denominator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>getReducedFraction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>mulAndCheck</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>numerator</name>/
                                                            <name>d1</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>fraction</name>.
                                                                <name>numerator</name>
                                                            </name>
                                                            /
                                                            <name>d2</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>mulPosAndCheck</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>denominator</name>/
                                                            <name>d2</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>fraction</name>.
                                                                <name>denominator</name>
                                                            </name>
                                                            /
                                                            <name>d1</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Divide the value of this fraction by another.&lt;/p&gt;
                *
                * @param fraction the fraction to divide by, must not be &lt;code&gt;null&lt;/code&gt;
                * @return a &lt;code&gt;Fraction&lt;/code&gt; instance with the resulting values
                * @throws IllegalArgumentException if the fraction is &lt;code&gt;null&lt;/code&gt;
                * @throws ArithmeticException if the fraction to divide by is zero
                * @throws ArithmeticException if the resulting numerator or denominator exceeds
                * &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Fraction</name>
                </type>
                <name>divideBy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Fraction</name>
                            </type>
                            <name>fraction</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>fraction</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The fraction must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>fraction</name>.
                                    <name>numerator</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The fraction to divide by must not be zero"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>multiplyBy</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>fraction</name>.
                                                    <name>invert</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Basics</comment>
            <comment type="line">//-------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares this fraction to another object to test if they are equal.&lt;/p&gt;.
                *
                * &lt;p&gt;To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.&lt;/p&gt;
                *
                * @param obj the reference object with which to compare
                * @return &lt;code&gt;true&lt;/code&gt; if this object is equal
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                <name>instanceof</name>
                                <name>Fraction</name> == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Fraction</name>
                            </type>
                            <name>other</name> =
                            <init>
                                <expr>(<name>Fraction</name>)
                                    <name>obj</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(
                            <call>
                                <name>getNumerator</name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <call>
                                <name><name>other</name>.
                                    <name>getNumerator</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name>getDenominator</name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <call>
                                <name><name>other</name>.
                                    <name>getDenominator</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets a hashCode for the fraction.&lt;/p&gt;
                *
                * @return a hash code value for this object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>hashCode</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// hashcode update should be atomic.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>hashCode</name>
                                        = 37 * (37 * 17 +
                                        <call>
                                            <name>getNumerator</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ) +
                                        <call>
                                            <name>getDenominator</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>hashCode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares this object to another based on size.&lt;/p&gt;
                *
                * &lt;p&gt;Note: this class has a natural ordering that is inconsistent
                * with equals, because, for example, equals treats 1/2 and 2/4 as
                * different, whereas compareTo treats them as equal.
                *
                * @param object the object to compare to
                * @return -1 if this is less, 0 if equal, +1 if greater
                * @throws ClassCastException if the object is not a &lt;code&gt;Fraction&lt;/code&gt;
                * @throws NullPointerException if the object is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>compareTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Fraction</name>
                            </type>
                            <name>other</name> =
                            <init>
                                <expr>(<name>Fraction</name>)
                                    <name>object</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr><name>this</name>==
                                <name>other</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>numerator</name>
                                ==
                                <name><name>other</name>.
                                    <name>numerator</name>
                                </name>
                                &amp;&amp; <name>denominator</name> ==
                                <name><name>other</name>.
                                    <name>denominator</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// otherwise see which is less</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>first</name> =
                            <init>
                                <expr>(<name>long</name>) <name>numerator</name> * (<name>long</name>)
                                    <name><name>other</name>.
                                        <name>denominator</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>second</name> =
                            <init>
                                <expr>(<name>long</name>)
                                    <name><name>other</name>.
                                        <name>numerator</name>
                                    </name>
                                    * (<name>long</name>)
                                    <name>denominator</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>first</name>
                                ==
                                <name>second</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>first</name>
                                        &lt;
                                        <name>second</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>-1</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return <expr>1</expr>;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the fraction as a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;The format used is '&lt;i&gt;numerator&lt;/i&gt;/&lt;i&gt;denominator&lt;/i&gt;' always.
                *
                * @return a &lt;code&gt;String&lt;/code&gt; form of the fraction
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>toString</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>toString</name>
                                        = new
                                        <call>
                                            <name>StrBuilder</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>32</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>getNumerator</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'/'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>getDenominator</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>toString</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>toString</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the fraction as a proper &lt;code&gt;String&lt;/code&gt; in the format X Y/Z.&lt;/p&gt;
                *
                * &lt;p&gt;The format used in '&lt;i&gt;wholeNumber&lt;/i&gt; &lt;i&gt;numerator&lt;/i&gt;/&lt;i&gt;denominator&lt;/i&gt;'.
                * If the whole number is zero it will be ommitted. If the numerator is zero,
                * only the whole number is returned.&lt;/p&gt;
                *
                * @return a &lt;code&gt;String&lt;/code&gt; form of the fraction
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toProperString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>toProperString</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>numerator</name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>toProperString</name>
                                                    = "0"
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>numerator</name>
                                                    ==
                                                    <name>denominator</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>toProperString</name>
                                                            = "1"
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>numerator</name>
                                                            == -1 *
                                                            <name>denominator</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>toProperString</name>
                                                                    = "-1"
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>(<name>numerator</name>&gt;0?-<name>
                                                                    numerator</name>:<name>numerator</name>) &lt; -
                                                                    <name>denominator</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <comment type="line">// note that we do the
                                                                        magnitude comparison test above with
                                                                    </comment>
                                                                    <comment type="line">// NEGATIVE (not positive)
                                                                        numbers, since negative numbers
                                                                    </comment>
                                                                    <comment type="line">// have a larger range.
                                                                        otherwise numerator==Integer.MIN_VALUE
                                                                    </comment>
                                                                    <comment type="line">// is handled incorrectly.
                                                                    </comment>
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>int</name>
                                                                            </type>
                                                                            <name>properNumerator</name> =
                                                                            <init>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name>getProperNumerator</name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>properNumerator</name>
                                                                                == 0
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>toProperString</name>
                                                                                        =
                                                                                        <call>
                                                                                            <name><name>Integer</name>.
                                                                                                <name>toString</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <call>
                                                                                                            <name>
                                                                                                                getProperWhole
                                                                                                            </name>
                                                                                                            <argument_list>
                                                                                                                ()
                                                                                                            </argument_list>
                                                                                                        </call>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                        <else>else
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>toProperString</name>
                                                                                        = new
                                                                                        <call>
                                                                                            <name>StrBuilder</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>32</expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        .
                                                                                        <call>
                                                                                            <name>append</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <call>
                                                                                                            <name>
                                                                                                                getProperWhole
                                                                                                            </name>
                                                                                                            <argument_list>
                                                                                                                ()
                                                                                                            </argument_list>
                                                                                                        </call>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        .
                                                                                        <call>
                                                                                            <name>append</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>' '</expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        .
                                                                                        <call>
                                                                                            <name>append</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>
                                                                                                            properNumerator
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        .
                                                                                        <call>
                                                                                            <name>append</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>'/'</expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        .
                                                                                        <call>
                                                                                            <name>append</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <call>
                                                                                                            <name>
                                                                                                                getDenominator
                                                                                                            </name>
                                                                                                            <argument_list>
                                                                                                                ()
                                                                                                            </argument_list>
                                                                                                        </call>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        .
                                                                                        <call>
                                                                                            <name>toString</name>
                                                                                            <argument_list>()
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </else>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>toProperString</name>
                                                                            = new
                                                                            <call>
                                                                                <name>StrBuilder</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>32</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            .
                                                                            <call>
                                                                                <name>append</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name>getNumerator
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            .
                                                                            <call>
                                                                                <name>append</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>'/'</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            .
                                                                            <call>
                                                                                <name>append</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name>getDenominator
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            .
                                                                            <call>
                                                                                <name>toString</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>toProperString</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
