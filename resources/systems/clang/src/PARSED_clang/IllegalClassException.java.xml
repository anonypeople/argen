<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\IllegalClassException.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * &lt;p&gt;Thrown when an object is an instance of an unexpected type (a class or interface).
        * This exception supplements the standard &lt;code&gt;IllegalArgumentException&lt;/code&gt;
        * by providing a more semantically rich description of the problem.&lt;/p&gt;
        *
        * &lt;p&gt;&lt;code&gt;IllegalClassException&lt;/code&gt; represents the case where a method takes
        * in a genericly typed parameter like Object (typically because it has to due to some
        * other interface it implements), but this implementation only actually accepts a specific
        * type, for example String. This exception would be used in place of
        * &lt;code&gt;IllegalArgumentException&lt;/code&gt;, yet it still extends it.&lt;/p&gt;
        *
        * &lt;pre&gt;
        * public void foo(Object obj) {
        * if (obj instanceof String == false) {
        * throw new IllegalClassException(String.class, obj);
        * }
        * // do something with the string
        * }
        * &lt;/pre&gt;
        *
        * @author Apache Software Foundation
        * @author Matthew Hawthorne
        * @author Gary Gregory
        * @since 2.0
        * @version $Id: IllegalClassException.java 905636 2010-02-02 14:03:32Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>IllegalClassException</name>
        <super>
            <extends>extends
                <name>IllegalArgumentException</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>8063272569377254819L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;Instantiates with the expected type, and actual object.&lt;/p&gt;
                *
                * @param expected the expected type
                * @param actual the actual object
                * @since 2.1
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>IllegalClassException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>actual</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Expected: "
                                            +
                                            <call>
                                                <name>safeGetClassName</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>expected</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            + ", actual: "
                                            + (<name>actual</name> == <name>null</name> ? "null" :
                                            <call>
                                                <name><name>actual</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            )
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Instantiates with the expected and actual types.&lt;/p&gt;
                *
                * @param expected the expected type
                * @param actual the actual type
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>IllegalClassException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>actual</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Expected: "
                                            +
                                            <call>
                                                <name>safeGetClassName</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>expected</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            + ", actual: "
                                            +
                                            <call>
                                                <name>safeGetClassName</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>actual</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Instantiates with the specified message.&lt;/p&gt;
                *
                * @param message the exception message
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>IllegalClassException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>message</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the class name or &lt;code&gt;null&lt;/code&gt; if the class is
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param cls a &lt;code&gt;Class&lt;/code&gt;
                * @return the name of &lt;code&gt;cls&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if if &lt;code&gt;cls&lt;/code&gt;
                is &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>safeGetClassName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>cls</name>
                            == <name>null</name> ? <name>null</name> :
                            <call>
                                <name><name>cls</name>.
                                    <name>getName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
