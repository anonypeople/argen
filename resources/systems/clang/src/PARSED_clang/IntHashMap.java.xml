<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\IntHashMap.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <comment type="block">/*
        * Note: originally released under the GNU LGPL v2.1,
        * but rereleased by the original author under the ASF license (above).
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * &lt;p&gt;A hash map that uses primitive ints for the key rather than objects.&lt;/p&gt;
        *
        * &lt;p&gt;Note that this class is for internal optimization purposes only, and may
        * not be supported in future releases of Apache Commons Lang. Utilities of
        * this sort may be included in future releases of Apache Commons Collections.&lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author Justin Couch
        * @author Alex Chaffee (alex@apache.org)
        * @since 2.0
        * @version $Revision: 905857 $
        * @see java.util.HashMap
        */
    </comment>
    <class>class <name>IntHashMap</name>
        <block>{

            <comment type="javadoc">/**
                * The hash table data.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>Entry</name>
                    </type>
                    <name>
                        <name>table</name>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The total number of entries in the hash table.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>count</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The table is rehashed when its size exceeds this threshold. (The
                * value of this field is (int)(capacity * loadFactor).)
                *
                * @serial
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>threshold</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The load factor for the hashtable.
                *
                * @serial
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>float</name>
                    </type>
                    <name>loadFactor</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;Innerclass that acts as a datastructure to create a new entry in the
                * table.&lt;/p&gt;
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class <name>Entry</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>key</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// TODO not read; seems to be always same as hash</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>next</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * &lt;p&gt;Create a new entry with the given values.&lt;/p&gt;
                        *
                        * @param hash The code used to hash the object with
                        * @param key The key used to enter this in the table
                        * @param value The value for this key
                        * @param next A reference to the next entry in the table
                        */
                    </comment>
                    <constructor>
                        <specifier>protected</specifier>
                        <name>Entry</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>hash</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>key</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Entry</name>
                                    </type>
                                    <name>next</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>hash</name>
                                    </name>
                                    =
                                    <name>hash</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>key</name>
                                    </name>
                                    =
                                    <name>key</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>value</name>
                                    </name>
                                    =
                                    <name>value</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>next</name>
                                    </name>
                                    =
                                    <name>next</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructs a new, empty hashtable with a default capacity and load
                * factor, which is &lt;code&gt;20&lt;/code&gt; and &lt;code&gt;0.75&lt;/code&gt; respectively.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>IntHashMap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>20</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0.75f</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructs a new, empty hashtable with the specified initial capacity
                * and default load factor, which is &lt;code&gt;0.75&lt;/code&gt;.&lt;/p&gt;
                *
                * @param initialCapacity the initial capacity of the hashtable.
                * @throws IllegalArgumentException if the initial capacity is less
                * than zero.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>IntHashMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>initialCapacity</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>initialCapacity</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0.75f</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructs a new, empty hashtable with the specified initial
                * capacity and the specified load factor.&lt;/p&gt;
                *
                * @param initialCapacity the initial capacity of the hashtable.
                * @param loadFactor the load factor of the hashtable.
                * @throws IllegalArgumentException if the initial capacity is less
                * than zero, or if the load factor is nonpositive.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>IntHashMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>initialCapacity</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>loadFactor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>initialCapacity</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Illegal Capacity: " +
                                                        <name>initialCapacity</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>loadFactor</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Illegal Load: " +
                                                        <name>loadFactor</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>initialCapacity</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>initialCapacity</name>
                                        = 1
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>loadFactor</name>
                            </name>
                            =
                            <name>loadFactor</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>table</name>
                            = new
                            <name>
                                <name>Entry</name>
                                <index>[
                                    <expr>
                                        <name>initialCapacity</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>threshold</name>
                            =
                            <call>(<name>int</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>initialCapacity</name>
                                            *
                                            <name>loadFactor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the number of keys in this hashtable.&lt;/p&gt;
                *
                * @return the number of keys in this hashtable.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>count</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests if this hashtable maps no keys to values.&lt;/p&gt;
                *
                * @return &lt;code&gt;true&lt;/code&gt; if this hashtable maps no keys to values;
                * &lt;code&gt;false&lt;/code&gt; otherwise.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>count</name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests if some key maps into the specified value in this hashtable.
                * This operation is more expensive than the &lt;code&gt;containsKey&lt;/code&gt;
                * method.&lt;/p&gt;
                *
                * &lt;p&gt;Note that this method is identical in functionality to containsValue,
                * (which is part of the Map interface in the collections framework).&lt;/p&gt;
                *
                * @param value a value to search for.
                * @return &lt;code&gt;true&lt;/code&gt; if and only if some key maps to the
                * &lt;code&gt;value&lt;/code&gt; argument in this hashtable as
                * determined by the &lt;tt&gt;equals&lt;/tt&gt; method;
                * &lt;code&gt;false&lt;/code&gt; otherwise.
                * @throws NullPointerException if the value is &lt;code&gt;null&lt;/code&gt;.
                * @see #containsKey(int)
                * @see #containsValue(Object)
                * @see java.util.Map
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>
                                <name>tab</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <name>table</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name><name>tab</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>-- &gt; 0
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>Entry</name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>
                                                <name>
                                                    <name>tab</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>e</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>e</name>
                                        =
                                        <name><name>e</name>.
                                            <name>next</name>
                                        </name>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>e</name>.<name>value</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>value</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>true</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if this HashMap maps one or more keys
                * to this value.&lt;/p&gt;
                *
                * &lt;p&gt;Note that this method is identical in functionality to contains
                * (which predates the Map interface).&lt;/p&gt;
                *
                * @param value value whose presence in this HashMap is to be tested.
                * @return boolean &lt;code&gt;true&lt;/code&gt; if the value is contained
                * @see java.util.Map
                * @since JDK1.2
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>contains</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests if the specified object is a key in this hashtable.&lt;/p&gt;
                *
                * @param key possible key.
                * @return &lt;code&gt;true&lt;/code&gt; if and only if the specified object is a
                * key in this hashtable, as determined by the &lt;tt&gt;equals&lt;/tt&gt;
                * method; &lt;code&gt;false&lt;/code&gt; otherwise.
                * @see #contains(Object)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>
                                <name>tab</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <name>table</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name> =
                            <init>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>(<name>hash</name> &amp; 0x7FFFFFFF) %
                                    <name><name>tab</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Entry</name>
                                </type>
                                <name>e</name> =
                                <init>
                                    <expr>
                                        <name>
                                            <name>tab</name>
                                            <index>[
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>e</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>e</name>
                                =
                                <name><name>e</name>.
                                    <name>next</name>
                                </name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>e</name>.
                                            <name>hash</name>
                                        </name>
                                        ==
                                        <name>hash</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the value to which the specified key is mapped in this map.&lt;/p&gt;
                *
                * @param key a key in the hashtable.
                * @return the value to which the key is mapped in this hashtable;
                * &lt;code&gt;null&lt;/code&gt; if the key is not mapped to any value in
                * this hashtable.
                * @see #put(int, Object)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>
                                <name>tab</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <name>table</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name> =
                            <init>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>(<name>hash</name> &amp; 0x7FFFFFFF) %
                                    <name><name>tab</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Entry</name>
                                </type>
                                <name>e</name> =
                                <init>
                                    <expr>
                                        <name>
                                            <name>tab</name>
                                            <index>[
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>e</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>e</name>
                                =
                                <name><name>e</name>.
                                    <name>next</name>
                                </name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>e</name>.
                                            <name>hash</name>
                                        </name>
                                        ==
                                        <name>hash</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name><name>e</name>.
                                                    <name>value</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Increases the capacity of and internally reorganizes this
                * hashtable, in order to accommodate and access its entries more
                * efficiently.&lt;/p&gt;
                *
                * &lt;p&gt;This method is called automatically when the number of keys
                * in the hashtable exceeds this hashtable's capacity and load
                * factor.&lt;/p&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>rehash</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>oldCapacity</name> =
                            <init>
                                <expr>
                                    <name><name>table</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>
                                <name>oldMap</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <name>table</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newCapacity</name> =
                            <init>
                                <expr>
                                    <name>oldCapacity</name>
                                    * 2 + 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>
                                <name>newMap</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Entry</name>
                                        <index>[
                                            <expr>
                                                <name>newCapacity</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>threshold</name>
                            =
                            <call>(<name>int</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newCapacity</name>
                                            *
                                            <name>loadFactor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>table</name>
                            =
                            <name>newMap</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>oldCapacity</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>-- &gt; 0
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>Entry</name>
                                        </type>
                                        <name>old</name> =
                                        <init>
                                            <expr>
                                                <name>
                                                    <name>oldMap</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>old</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr/>)
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>Entry</name>
                                            </type>
                                            <name>e</name> =
                                            <init>
                                                <expr>
                                                    <name>old</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>old</name>
                                            =
                                            <name><name>old</name>.
                                                <name>next</name>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>

                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>index</name> =
                                            <init>
                                                <expr>(
                                                    <name><name>e</name>.
                                                        <name>hash</name>
                                                    </name>
                                                    &amp; 0x7FFFFFFF) %
                                                    <name>newCapacity</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name><name>e</name>.
                                                <name>next</name>
                                            </name>
                                            =
                                            <name>
                                                <name>newMap</name>
                                                <index>[
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>newMap</name>
                                                <index>[
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <name>e</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Maps the specified &lt;code&gt;key&lt;/code&gt; to the specified
                * &lt;code&gt;value&lt;/code&gt; in this hashtable. The key cannot be
                * &lt;code&gt;null&lt;/code&gt;. &lt;/p&gt;
                *
                * &lt;p&gt;The value can be retrieved by calling the &lt;code&gt;get&lt;/code&gt; method
                * with a key that is equal to the original key.&lt;/p&gt;
                *
                * @param key the hashtable key.
                * @param value the value.
                * @return the previous value of the specified key in this hashtable,
                * or &lt;code&gt;null&lt;/code&gt; if it did not have one.
                * @throws NullPointerException if the key is &lt;code&gt;null&lt;/code&gt;.
                * @see #get(int)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Makes sure the key is not already in the hashtable.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>
                                <name>tab</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <name>table</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name> =
                            <init>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>(<name>hash</name> &amp; 0x7FFFFFFF) %
                                    <name><name>tab</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Entry</name>
                                </type>
                                <name>e</name> =
                                <init>
                                    <expr>
                                        <name>
                                            <name>tab</name>
                                            <index>[
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>e</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>e</name>
                                =
                                <name><name>e</name>.
                                    <name>next</name>
                                </name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>e</name>.
                                            <name>hash</name>
                                        </name>
                                        ==
                                        <name>hash</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Object</name>
                                                </type>
                                                <name>old</name> =
                                                <init>
                                                    <expr>
                                                        <name><name>e</name>.
                                                            <name>value</name>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>e</name>.
                                                    <name>value</name>
                                                </name>
                                                =
                                                <name>value</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <name>old</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <if>if
                        <condition>(
                            <expr>
                                <name>count</name>
                                &gt;=
                                <name>threshold</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Rehash the table if the threshold is exceeded</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>rehash</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>tab</name>
                                        =
                                        <name>table</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>index</name>
                                        = (<name>hash</name> &amp; 0x7FFFFFFF) %
                                        <name><name>tab</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Creates the new entry.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Entry</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>hash</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>tab</name>
                                                        <index>[
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>tab</name>
                                <index>[
                                    <expr>
                                        <name>index</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>e</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr><name>count</name>++
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes the key (and its corresponding value) from this
                * hashtable.&lt;/p&gt;
                *
                * &lt;p&gt;This method does nothing if the key is not present in the
                * hashtable.&lt;/p&gt;
                *
                * @param key the key that needs to be removed.
                * @return the value to which the key had been mapped in this hashtable,
                * or &lt;code&gt;null&lt;/code&gt; if the key did not have a mapping.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>
                                <name>tab</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <name>table</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name> =
                            <init>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>(<name>hash</name> &amp; 0x7FFFFFFF) %
                                    <name><name>tab</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Entry</name>
                                </type>
                                <name>e</name> =
                                <init>
                                    <expr>
                                        <name>
                                            <name>tab</name>
                                            <index>[
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                </init>
                                , <name>prev</name> =
                                <init>
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>e</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>prev</name>
                                =
                                <name>e</name>
                            </expr>
                            ,
                            <expr>
                                <name>e</name>
                                =
                                <name><name>e</name>.
                                    <name>next</name>
                                </name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>e</name>.
                                            <name>hash</name>
                                        </name>
                                        ==
                                        <name>hash</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>prev</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>prev</name>.
                                                                <name>next</name>
                                                            </name>
                                                            =
                                                            <name><name>e</name>.
                                                                <name>next</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>tab</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            =
                                                            <name><name>e</name>.
                                                                <name>next</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        <expr_stmt>
                                            <expr><name>count</name>--
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Object</name>
                                                </type>
                                                <name>oldValue</name> =
                                                <init>
                                                    <expr>
                                                        <name><name>e</name>.
                                                            <name>value</name>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>e</name>.
                                                    <name>value</name>
                                                </name>
                                                =
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <name>oldValue</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Clears this hashtable so that it contains no keys.&lt;/p&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Entry</name>
                            </type>
                            <name>
                                <name>tab</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>
                                    <name>table</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>index</name> =
                                <init>
                                    <expr>
                                        <name><name>tab</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>--<name>index</name> &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>tab</name>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>count</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
