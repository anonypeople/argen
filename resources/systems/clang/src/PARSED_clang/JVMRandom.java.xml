<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\math\JVMRandom.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one
        * or more contributor license agreements. See the NOTICE file
        * distributed with this work for additional information
        * regarding copyright ownership. The ASF licenses this file
        * to you under the Apache License, Version 2.0 (the
        * "License"); you may not use this file except in compliance
        * with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing,
        * software distributed under the License is distributed on an
        * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        * KIND, either express or implied. See the License for the
        * specific language governing permissions and limitations
        * under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>math</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Random</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;&lt;code&gt;JVMRandom&lt;/code&gt; is a wrapper that supports all possible
        * Random methods via the {@link java.lang.Math#random()} method
        * and its system-wide {@link Random} object.&lt;/p&gt;
        * &lt;p&gt;
        * It does this to allow for a Random class in which the seed is
        * shared between all members of the class - a better name would
        * have been SharedSeedRandom.
        * &lt;p&gt;
        * &lt;b&gt;N.B.&lt;/b&gt; the current implementation overrides the methods
        * {@link Random#nextInt(int)} and {@link Random#nextLong()}
        * to produce positive numbers ranging from 0 (inclusive)
        * to MAX_VALUE (exclusive).
        *
        * @since 2.0
        * @version $Id: JVMRandom.java 911986 2010-02-19 21:19:05Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>JVMRandom</name>
        <super>
            <extends>extends
                <name>Random</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>1L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Random</name>
                    </type>
                    <name>SHARED_RANDOM</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Random</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Ensures that only the parent constructor can call reseed.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>constructed</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructs a new instance.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>JVMRandom</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>constructed</name>
                            </name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Unsupported in 2.0.
                *
                * @param seed ignored
                * @throws UnsupportedOperationException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>void</name>
                </type>
                <name>setSeed</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>seed</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>constructed</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>UnsupportedOperationException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Unsupported in 2.0.
                *
                * @return Nothing, this method always throws an UnsupportedOperationException.
                * @throws UnsupportedOperationException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>synchronized</specifier>
                    <name>double</name>
                </type>
                <name>nextGaussian</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Unsupported in 2.0.
                *
                * @param byteArray ignored
                * @throws UnsupportedOperationException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>nextBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>byteArray</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed int value
                * from the Math.random() sequence.&lt;/p&gt;
                * Identical to &lt;code&gt;nextInt(Integer.MAX_VALUE)&lt;/code&gt;
                * &lt;p&gt;
                * &lt;b&gt;N.B. All values are &gt;= 0.&lt;b&gt;
                * &lt;/p&gt;
                * @return the random int
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>nextInt</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns a pseudorandom, uniformly distributed int value between
                * &lt;code&gt;0&lt;/code&gt; (inclusive) and the specified value (exclusive), from
                * the Math.random() sequence.&lt;/p&gt;
                *
                * @param n the specified exclusive max-value
                * @return the random int
                * @throws IllegalArgumentException when &lt;code&gt;n &amp;lt;= 0&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>nextInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>SHARED_RANDOM</name>.
                                    <name>nextInt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed long value
                * from the Math.random() sequence.&lt;/p&gt;
                * Identical to &lt;code&gt;nextLong(Long.MAX_VALUE)&lt;/code&gt;
                * &lt;p&gt;
                * &lt;b&gt;N.B. All values are &gt;= 0.&lt;b&gt;
                * &lt;/p&gt;
                * @return the random long
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>nextLong</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Long</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * &lt;p&gt;Returns a pseudorandom, uniformly distributed long value between
                * &lt;code&gt;0&lt;/code&gt; (inclusive) and the specified value (exclusive), from
                * the Math.random() sequence.&lt;/p&gt;
                *
                * @param n the specified exclusive max-value
                * @return the random long
                * @throws IllegalArgumentException when &lt;code&gt;n &amp;lt;= 0&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>nextLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>n</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Upper bound for nextInt must be positive"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// Code adapted from Harmony Random#nextInt(int)</comment>
                    <if>if
                        <condition>(
                            <expr>(<name>n</name> &amp; -<name>n</name>) ==
                                <name>n</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// n is power of 2</comment>
                                <comment type="line">// dropping lower order bits improves behaviour for low values of
                                    n
                                </comment>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>next63bits</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt;&gt; 63
                                        <comment type="line">// drop all the bits</comment>
                                        -
                                        <call>
                                            <name>bitsRequired</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr><name>n</name>-1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// except the ones we need</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// Not a power of two</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>val</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>bits</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <do>do
                        <block>{
                            <comment type="line">// reject some values to improve distribution</comment>
                            <expr_stmt>
                                <expr>
                                    <name>bits</name>
                                    =
                                    <call>
                                        <name>next63bits</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>val</name>
                                    = <name>bits</name> %
                                    <name>n</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        while
                        <condition>(
                            <expr>
                                <name>bits</name>
                                - <name>val</name> + (<name>n</name> - 1) &lt; 0
                            </expr>
                            )
                        </condition>
                        ;
                    </do>
                    <return>return
                        <expr>
                            <name>val</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed boolean value
                * from the Math.random() sequence.&lt;/p&gt;
                *
                * @return the random boolean
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>nextBoolean</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>SHARED_RANDOM</name>.
                                    <name>nextBoolean</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed float value
                * between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; from the Math.random()
                * sequence.&lt;/p&gt;
                *
                * @return the random float
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>float</name>
                </type>
                <name>nextFloat</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>SHARED_RANDOM</name>.
                                    <name>nextFloat</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Synonymous to the Math.random() call.&lt;/p&gt;
                *
                * @return the random double
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>nextDouble</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>SHARED_RANDOM</name>.
                                    <name>nextDouble</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Get the next unsigned random long
                * @return unsigned random long
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>next63bits</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// drop the sign bit to leave 63 random bits</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>SHARED_RANDOM</name>.
                                    <name>nextLong</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &amp; 0x7fffffffffffffffL
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Count the number of bits required to represent a long number.
                *
                * @param num long number
                * @return number of bits required
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>bitsRequired</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>num</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Derived from Hacker's Delight, Figure 5-9</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>y</name>=
                            <init>
                                <expr>
                                    <name>num</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// for checking right bits</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>=
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// number of leading zeros found</comment>
                    <while>while
                        <condition>(<expr>true</expr>)
                        </condition>
                        <block>{
                            <comment type="line">// 64 = number of bits in a long</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>num</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>64-
                                                <name>n</name>
                                            </expr>
                                            ;
                                        </return>
                                        <comment type="line">// no leading zeroes left</comment>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>y</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>n</name>
                                            </expr>
                                            ;
                                        </return>
                                        <comment type="line">// no bits left to check</comment>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr><name>n</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>num</name>=<name>num</name> &lt;&lt; 1
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// check leading bits</comment>
                            <expr_stmt>
                                <expr><name>y</name>=<name>y</name> &gt;&gt; 1
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// check trailing bits</comment>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
