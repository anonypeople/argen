<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\reflect\MethodUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>reflect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationTargetException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Method</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Modifier</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>ArrayUtils</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>ClassUtils</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt; Utility reflection methods focused on methods, originally from Commons BeanUtils.
        * Differences from the BeanUtils version may be noted, especially where similar functionality
        * already existed within Lang.
        * &lt;/p&gt;
        *
        * &lt;h3&gt;Known Limitations&lt;/h3&gt;
        * &lt;h4&gt;Accessing Public Methods In A Default Access Superclass&lt;/h4&gt;
        * &lt;p&gt;There is an issue when invoking public methods contained in a default access superclass on JREs prior
        to 1.4.
        * Reflection locates these methods fine and correctly assigns them as public.
        * However, an &lt;code&gt;IllegalAccessException&lt;/code&gt; is thrown if the method is invoked.&lt;/p&gt;
        *
        * &lt;p&gt;&lt;code&gt;MethodUtils&lt;/code&gt; contains a workaround for this situation.
        * It will attempt to call &lt;code&gt;setAccessible&lt;/code&gt; on this method.
        * If this call succeeds, then the method can be invoked as normal.
        * This call will only succeed when the application has sufficient security privileges.
        * If this call fails then the method may fail.&lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author Craig R. McClanahan
        * @author Ralph Schaer
        * @author Chris Audley
        * @author Rey Fran&amp;#231;ois
        * @author Gregor Ra&amp;#253;man
        * @author Jan Sorensen
        * @author Robert Burrell Donkin
        * @author Matt Benson
        * @since 2.5
        * @version $Id: MethodUtils.java 911986 2010-02-19 21:19:05Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>MethodUtils</name>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;MethodUtils instances should NOT be constructed in standard programming.
                * Instead, the class should be used as
                * &lt;code&gt;MethodUtils.getAccessibleMethod(method)&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean
                * instance to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>MethodUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a named method whose parameter type matches the object type.&lt;/p&gt;
                *
                * &lt;p&gt;This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String,
                Class[])}.&lt;/p&gt;
                *
                * &lt;p&gt;This method supports calls to methods taking primitive parameters
                * via passing in wrapping classes. So, for example, a &lt;code&gt;Boolean&lt;/code&gt; object
                * would match a &lt;code&gt;boolean&lt;/code&gt; primitive.&lt;/p&gt;
                *
                * &lt;p&gt; This is a convenient wrapper for
                * {@link #invokeMethod(Object object, String methodName, Object[] args)}.
                * &lt;/p&gt;
                *
                * @param object invoke method on this object
                * @param methodName get method with this name
                * @param arg use this argument
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the method invoked
                * @throws IllegalAccessException if the requested method is not accessible via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>arg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>invokeMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>methodName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Object</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>arg</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a named method whose parameter type matches the object type.&lt;/p&gt;
                *
                * &lt;p&gt;This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String,
                Class[])}.&lt;/p&gt;
                *
                * &lt;p&gt;This method supports calls to methods taking primitive parameters
                * via passing in wrapping classes. So, for example, a &lt;code&gt;Boolean&lt;/code&gt; object
                * would match a &lt;code&gt;boolean&lt;/code&gt; primitive.&lt;/p&gt;
                *
                * &lt;p&gt; This is a convenient wrapper for
                * {@link #invokeMethod(Object object,String methodName, Object[] args, Class[] parameterTypes)}.
                * &lt;/p&gt;
                *
                * @param object invoke method on this object
                * @param methodName get method with this name
                * @param args use these arguments - treat null as empty array
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the method invoked
                * @throws IllegalAccessException if the requested method is not accessible via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>args</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>arguments</name> =
                            <init>
                                <expr>
                                    <name><name>args</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                                <index>[]</index>
                            </type>
                            <name>parameterTypes</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Class</name>
                                        <index>[
                                            <expr>
                                                <name>arguments</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>arguments</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>parameterTypes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>args</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>invokeMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>methodName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parameterTypes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a named method whose parameter type matches the object type.&lt;/p&gt;
                *
                * &lt;p&gt;This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String,
                Class[])}.&lt;/p&gt;
                *
                * &lt;p&gt;This method supports calls to methods taking primitive parameters
                * via passing in wrapping classes. So, for example, a &lt;code&gt;Boolean&lt;/code&gt; object
                * would match a &lt;code&gt;boolean&lt;/code&gt; primitive.&lt;/p&gt;
                *
                * @param object invoke method on this object
                * @param methodName get method with this name
                * @param args use these arguments - treat null as empty array
                * @param parameterTypes match these parameters - treat null as empty array
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the method invoked
                * @throws IllegalAccessException if the requested method is not accessible via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>parameterTypes</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>parameterTypes</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_CLASS_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>args</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>method</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getMatchingAccessibleMethod</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>object</name>.
                                                            <name>getClass</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>methodName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>parameterTypes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>method</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchMethodException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"No such accessible method: "
                                                        + <name>methodName</name> + "() on object: "
                                                        +
                                                        <call>
                                                            <name><name>object</name>.
                                                                <name>getClass</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>getName</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>invoke</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a method whose parameter type matches exactly the object
                * type.&lt;/p&gt;
                *
                * &lt;p&gt; This is a convenient wrapper for
                * {@link #invokeExactMethod(Object object,String methodName,Object [] args)}.
                * &lt;/p&gt;
                *
                * @param object invoke method on this object
                * @param methodName get method with this name
                * @param arg use this argument
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the
                * method invoked
                * @throws IllegalAccessException if the requested method is not accessible
                * via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeExactMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>arg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>invokeExactMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>methodName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Object</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>arg</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a method whose parameter types match exactly the object
                * types.&lt;/p&gt;
                *
                * &lt;p&gt; This uses reflection to invoke the method obtained from a call to
                * &lt;code&gt;getAccessibleMethod()&lt;/code&gt;.&lt;/p&gt;
                *
                * @param object invoke method on this object
                * @param methodName get method with this name
                * @param args use these arguments - treat null as empty array
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the
                * method invoked
                * @throws IllegalAccessException if the requested method is not accessible
                * via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeExactMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>args</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>arguments</name> =
                            <init>
                                <expr>
                                    <name><name>args</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                                <index>[]</index>
                            </type>
                            <name>parameterTypes</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Class</name>
                                        <index>[
                                            <expr>
                                                <name>arguments</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>arguments</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>parameterTypes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>args</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>invokeExactMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>methodName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parameterTypes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a method whose parameter types match exactly the parameter
                * types given.&lt;/p&gt;
                *
                * &lt;p&gt;This uses reflection to invoke the method obtained from a call to
                * &lt;code&gt;getAccessibleMethod()&lt;/code&gt;.&lt;/p&gt;
                *
                * @param object invoke method on this object
                * @param methodName get method with this name
                * @param args use these arguments - treat null as empty array
                * @param parameterTypes match these parameters - treat null as empty array
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the
                * method invoked
                * @throws IllegalAccessException if the requested method is not accessible
                * via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeExactMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>args</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>parameterTypes</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>parameterTypes</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_CLASS_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>method</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getAccessibleMethod</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>object</name>.
                                                            <name>getClass</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>methodName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>parameterTypes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>method</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchMethodException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"No such accessible method: "
                                                        + <name>methodName</name> + "() on object: "
                                                        +
                                                        <call>
                                                            <name><name>object</name>.
                                                                <name>getClass</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>getName</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>invoke</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a static method whose parameter types match exactly the parameter
                * types given.&lt;/p&gt;
                *
                * &lt;p&gt;This uses reflection to invoke the method obtained from a call to
                * {@link #getAccessibleMethod(Class, String, Class[])}.&lt;/p&gt;
                *
                * @param cls invoke static method on this class
                * @param methodName get method with this name
                * @param args use these arguments - treat null as empty array
                * @param parameterTypes match these parameters - treat null as empty array
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the
                * method invoked
                * @throws IllegalAccessException if the requested method is not accessible
                * via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeExactStaticMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>args</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>parameterTypes</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>parameterTypes</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_CLASS_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>method</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getAccessibleMethod</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cls</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>methodName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>parameterTypes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>method</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchMethodException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"No such accessible method: "
                                                        + <name>methodName</name> + "() on class: " +
                                                        <call>
                                                            <name><name>cls</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>invoke</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a named static method whose parameter type matches the object type.&lt;/p&gt;
                *
                * &lt;p&gt;This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String,
                Class[])}.&lt;/p&gt;
                *
                * &lt;p&gt;This method supports calls to methods taking primitive parameters
                * via passing in wrapping classes. So, for example, a &lt;code&gt;Boolean&lt;/code&gt; class
                * would match a &lt;code&gt;boolean&lt;/code&gt; primitive.&lt;/p&gt;
                *
                * &lt;p&gt; This is a convenient wrapper for
                * {@link #invokeStaticMethod(Class objectClass,String methodName,Object [] args)}.
                * &lt;/p&gt;
                *
                * @param cls invoke static method on this class
                * @param methodName get method with this name
                * @param arg use this argument
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the
                * method invoked
                * @throws IllegalAccessException if the requested method is not accessible
                * via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeStaticMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>arg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>invokeStaticMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>methodName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Object</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>arg</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a named static method whose parameter type matches the object type.&lt;/p&gt;
                *
                * &lt;p&gt;This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String,
                Class[])}.&lt;/p&gt;
                *
                * &lt;p&gt;This method supports calls to methods taking primitive parameters
                * via passing in wrapping classes. So, for example, a &lt;code&gt;Boolean&lt;/code&gt; class
                * would match a &lt;code&gt;boolean&lt;/code&gt; primitive.&lt;/p&gt;
                *
                * &lt;p&gt; This is a convenient wrapper for
                * {@link #invokeStaticMethod(Class objectClass,String methodName,Object [] args,Class[]
                parameterTypes)}.
                * &lt;/p&gt;
                *
                * @param cls invoke static method on this class
                * @param methodName get method with this name
                * @param args use these arguments - treat null as empty array
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the
                * method invoked
                * @throws IllegalAccessException if the requested method is not accessible
                * via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeStaticMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>args</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>arguments</name> =
                            <init>
                                <expr>
                                    <name><name>args</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                                <index>[]</index>
                            </type>
                            <name>parameterTypes</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Class</name>
                                        <index>[
                                            <expr>
                                                <name>arguments</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>arguments</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>parameterTypes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>args</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>invokeStaticMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>methodName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parameterTypes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a named static method whose parameter type matches the object type.&lt;/p&gt;
                *
                * &lt;p&gt;This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String,
                Class[])}.&lt;/p&gt;
                *
                * &lt;p&gt;This method supports calls to methods taking primitive parameters
                * via passing in wrapping classes. So, for example, a &lt;code&gt;Boolean&lt;/code&gt; class
                * would match a &lt;code&gt;boolean&lt;/code&gt; primitive.&lt;/p&gt;
                *
                *
                * @param cls invoke static method on this class
                * @param methodName get method with this name
                * @param args use these arguments - treat null as empty array
                * @param parameterTypes match these parameters - treat null as empty array
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the
                * method invoked
                * @throws IllegalAccessException if the requested method is not accessible
                * via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeStaticMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>parameterTypes</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>parameterTypes</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_CLASS_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>args</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>method</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getMatchingAccessibleMethod</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cls</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>methodName</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>parameterTypes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>method</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchMethodException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"No such accessible method: "
                                                        + <name>methodName</name> + "() on class: " +
                                                        <call>
                                                            <name><name>cls</name>.
                                                                <name>getName</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>invoke</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a static method whose parameter type matches exactly the object
                * type.&lt;/p&gt;
                *
                * &lt;p&gt; This is a convenient wrapper for
                * {@link #invokeExactStaticMethod(Class objectClass,String methodName,Object [] args)}.
                * &lt;/p&gt;
                *
                * @param cls invoke static method on this class
                * @param methodName get method with this name
                * @param arg use this argument
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the
                * method invoked
                * @throws IllegalAccessException if the requested method is not accessible
                * via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeExactStaticMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>arg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>invokeExactStaticMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>methodName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Object</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>arg</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Invoke a static method whose parameter types match exactly the object
                * types.&lt;/p&gt;
                *
                * &lt;p&gt; This uses reflection to invoke the method obtained from a call to
                * {@link #getAccessibleMethod(Class, String, Class[])}.&lt;/p&gt;
                *
                * @param cls invoke static method on this class
                * @param methodName get method with this name
                * @param args use these arguments - treat null as empty array
                * @return The value returned by the invoked method
                *
                * @throws NoSuchMethodException if there is no such accessible method
                * @throws InvocationTargetException wraps an exception thrown by the
                * method invoked
                * @throws IllegalAccessException if the requested method is not accessible
                * via reflection
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeExactStaticMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NoSuchMethodException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>args</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>args</name>
                                        =
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_OBJECT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>arguments</name> =
                            <init>
                                <expr>
                                    <name><name>args</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                                <index>[]</index>
                            </type>
                            <name>parameterTypes</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Class</name>
                                        <index>[
                                            <expr>
                                                <name>arguments</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>arguments</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>parameterTypes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>args</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>invokeExactStaticMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>methodName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parameterTypes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Return an accessible method (that is, one that can be invoked via
                * reflection) with given name and a single parameter. If no such method
                * can be found, return &lt;code&gt;null&lt;/code&gt;.
                * Basically, a convenience wrapper that constructs a &lt;code&gt;Class&lt;/code&gt;
                * array for you.&lt;/p&gt;
                *
                * @param cls get method from this class
                * @param methodName get method with this name
                * @param parameterType taking this type of parameter
                * @return The accessible method
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Method</name>
                </type>
                <name>getAccessibleMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>parameterType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getAccessibleMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>methodName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>Class</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>parameterType</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Return an accessible method (that is, one that can be invoked via
                * reflection) with given name and parameters. If no such method
                * can be found, return &lt;code&gt;null&lt;/code&gt;.
                * This is just a convenient wrapper for
                * {@link #getAccessibleMethod(Method method)}.&lt;/p&gt;
                *
                * @param cls get method from this class
                * @param methodName get method with this name
                * @param parameterTypes with these parameters types
                * @return The accessible method
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Method</name>
                </type>
                <name>getAccessibleMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>getAccessibleMethod</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>cls</name>.
                                                            <name>getMethod</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>methodName</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>parameterTypes</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NoSuchMethodException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return
                                    <expr>(<name>null</name>)
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Return an accessible method (that is, one that can be invoked via
                * reflection) that implements the specified Method. If no such method
                * can be found, return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param method The method that we wish to call
                * @return The accessible method
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Method</name>
                </type>
                <name>getAccessibleMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>method</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>MemberUtils</name>.
                                        <name>isAccessible</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>method</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// If the declaring class is public, we are done</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>method</name>.
                                            <name>getDeclaringClass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Modifier</name>.
                                        <name>isPublic</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>cls</name>.
                                                        <name>getModifiers</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>method</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>method</name>.
                                            <name>getName</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                                <index>[]</index>
                            </type>
                            <name>parameterTypes</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>method</name>.
                                            <name>getParameterTypes</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Check the implemented interfaces and subinterfaces</comment>
                    <expr_stmt>
                        <expr>
                            <name>method</name>
                            =
                            <call>
                                <name>getAccessibleMethodFromInterfaceNest</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cls</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>methodName</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parameterTypes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Check the superclass chain</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>method</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>method</name>
                                        =
                                        <call>
                                            <name>getAccessibleMethodFromSuperclass</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>cls</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>methodName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>parameterTypes</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>method</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Return an accessible method (that is, one that can be invoked via
                * reflection) by scanning through the superclasses. If no such method
                * can be found, return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param cls Class to be checked
                * @param methodName Method name of the method we wish to call
                * @param parameterTypes The parameter type signatures
                * @return the accessible method or &lt;code&gt;null&lt;/code&gt; if not found
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Method</name>
                </type>
                <name>getAccessibleMethodFromSuperclass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>parentClass</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>cls</name>.
                                            <name>getSuperclass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>parentClass</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>Modifier</name>.
                                                <name>isPublic</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>parentClass</name>.
                                                                <name>getModifiers</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <try>try
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>parentClass</name>.
                                                                <name>getMethod</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>methodName</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>parameterTypes</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                            <catch>catch (
                                                <param>
                                                    <decl>
                                                        <type>
                                                            <name>NoSuchMethodException</name>
                                                        </type>
                                                        <name>e</name>
                                                    </decl>
                                                </param>
                                                )
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </catch>
                                        </try>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>parentClass</name>
                                    =
                                    <call>
                                        <name><name>parentClass</name>.
                                            <name>getSuperclass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Return an accessible method (that is, one that can be invoked via
                * reflection) that implements the specified method, by scanning through
                * all implemented interfaces and subinterfaces. If no such method
                * can be found, return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt; There isn't any good reason why this method must be private.
                * It is because there doesn't seem any reason why other classes should
                * call this rather than the higher level methods.&lt;/p&gt;
                *
                * @param cls Parent class for the interfaces to be checked
                * @param methodName Method name of the method we wish to call
                * @param parameterTypes The parameter type signatures
                * @return the accessible method or &lt;code&gt;null&lt;/code&gt; if not found
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Method</name>
                </type>
                <name>getAccessibleMethodFromInterfaceNest</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>method</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Search up the superclass chain</comment>
                    <for>for (<init>;</init>
                        <condition>
                            <expr>
                                <name>cls</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>cls</name>
                                =
                                <call>
                                    <name><name>cls</name>.
                                        <name>getSuperclass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{

                            <comment type="line">// Check the implemented interfaces of the parent class</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Class</name>
                                        <index>[]</index>
                                    </type>
                                    <name>interfaces</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>cls</name>.
                                                    <name>getInterfaces</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name><name>interfaces</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <comment type="line">// Is this interface public?</comment>
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name><name>Modifier</name>.
                                                        <name>isPublic</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>interfaces</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                .
                                                                <call>
                                                                    <name>getModifiers</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <continue>continue;</continue>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <comment type="line">// Does the method exist on this interface?</comment>
                                    <try>try
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>method</name>
                                                    =
                                                    <name>
                                                        <name>interfaces</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    .
                                                    <call>
                                                        <name>getDeclaredMethod</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>methodName</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>parameterTypes</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                        <catch>catch (
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>NoSuchMethodException</name>
                                                    </type>
                                                    <name>e</name>
                                                </decl>
                                            </param>
                                            )
                                            <block>{
                                                <comment type="block">/*
                                                    * Swallow, if no method is found after the loop then this
                                                    * method returns null.
                                                    */
                                                </comment>
                                                }
                                            </block>
                                        </catch>
                                    </try>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>method</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <break>break;</break>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <comment type="line">// Recursively check our parent interfaces</comment>
                                    <expr_stmt>
                                        <expr>
                                            <name>method</name>
                                            =
                                            <call>
                                                <name>getAccessibleMethodFromInterfaceNest</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>interfaces</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>methodName</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>parameterTypes</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>method</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <break>break;</break>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>method</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Find an accessible method that matches the given name and has compatible parameters.
                * Compatible parameters mean that every method parameter is assignable from
                * the given parameters.
                * In other words, it finds a method with the given name
                * that will take the parameters given.&lt;p&gt;
                *
                * &lt;p&gt;This method is used by
                * {@link
                * #invokeMethod(Object object, String methodName, Object[] args, Class[] parameterTypes)}.
                *
                * &lt;p&gt;This method can match primitive parameter by passing in wrapper classes.
                * For example, a &lt;code&gt;Boolean&lt;/code&gt; will match a primitive &lt;code&gt;boolean&lt;/code&gt;
                * parameter.
                *
                * @param cls find method in this class
                * @param methodName find method with this name
                * @param parameterTypes find method with most compatible parameters
                * @return The accessible method
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Method</name>
                </type>
                <name>getMatchingAccessibleMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>cls</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Method</name>
                                    </type>
                                    <name>method</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>cls</name>.
                                                    <name>getMethod</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>methodName</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>parameterTypes</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>MemberUtils</name>.
                                            <name>setAccessibleWorkaround</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>method</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>method</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NoSuchMethodException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="block">/* SWALLOW */</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <comment type="line">// search through all methods</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>bestMatch</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                                <index>[]</index>
                            </type>
                            <name>methods</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>cls</name>.
                                            <name>getMethods</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                                , <name>size</name> =
                                <init>
                                    <expr>
                                        <name><name>methods</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>size</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>methods</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        .
                                        <call>
                                            <name>getName</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>methodName</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// compare parameters</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>ClassUtils</name>.
                                                            <name>isAssignable</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>parameterTypes</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>methods</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    .
                                                                    <call>
                                                                        <name>getParameterTypes</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>true</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// get accessible version of method</comment>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>Method</name>
                                                            </type>
                                                            <name>accessibleMethod</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name>getAccessibleMethod</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>methods</name>
                                                                                        <index>[
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                            ]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>accessibleMethod</name>
                                                                !=
                                                                <name>null</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>bestMatch</name>
                                                                            ==
                                                                            <name>null</name>
                                                                            ||
                                                                            <call>
                                                                                <name><name>MemberUtils</name>.
                                                                                    <name>compareParameterTypes</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    accessibleMethod</name>
                                                                                                    .
                                                                                                    <name>
                                                                                                        getParameterTypes
                                                                                                    </name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    bestMatch</name>.
                                                                                                    <name>
                                                                                                        getParameterTypes
                                                                                                    </name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>parameterTypes</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            &lt; 0
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>bestMatch</name>
                                                                                    =
                                                                                    <name>accessibleMethod</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <name>bestMatch</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>MemberUtils</name>.
                                                <name>setAccessibleWorkaround</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>bestMatch</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>bestMatch</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
