<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\mutable\Mutable.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>mutable</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * Provides mutable access to a value.
        * &lt;p&gt;
        * &lt;code&gt;Mutable&lt;/code&gt; is used as a generic interface to the implementations in this package.
        * &lt;p&gt;
        * A typical use case would be to enable a primitive or string to be passed to a method and allow that method to
        * effectively change the value of the primitive/string. Another use case is to store a frequently changing
        primitive in
        * a collection (for example a total in a map) without needing to create new Integer/Long wrapper objects.
        *
        * @author Apache Software Foundation
        * @author Matthew Hawthorne
        * @since 2.1
        * @version $Id: Mutable.java 905636 2010-02-02 14:03:32Z niallp $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>Mutable</name>
        <block>{

            <comment type="javadoc">/**
                * Gets the value of this mutable.
                *
                * @return the stored value
                */
            </comment>
            <function_decl>
                <type>
                    <name>Object</name>
                </type>
                <name>getValue</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the value of this mutable.
                *
                * @param value
                * the value to store
                * @throws NullPointerException
                * if the object is null and null is invalid
                * @throws ClassCastException
                * if the type is invalid
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
