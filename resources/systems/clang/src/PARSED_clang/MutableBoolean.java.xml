<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\mutable\MutableBoolean.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>mutable</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>BooleanUtils</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A mutable &lt;code&gt;boolean&lt;/code&gt; wrapper.
        *
        * @see Boolean
        * @since 2.2
        * @author Apache Software Foundation
        * @version $Id: MutableBoolean.java 905707 2010-02-02 16:59:59Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>MutableBoolean</name>
        <super>
            <implements>implements <name>Mutable</name>, <name>Serializable</name>,
                <name>Comparable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-4830728138360036487L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The mutable value. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>value</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructs a new MutableBoolean with the default value of false.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>MutableBoolean</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a new MutableBoolean with the specified value.
                *
                * @param value the initial value to store
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>MutableBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>value</name>
                            </name>
                            =
                            <name>value</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a new MutableBoolean with the specified value.
                *
                * @param value the initial value to store, not null
                * @throws NullPointerException if the object is null
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>MutableBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>value</name>
                            </name>
                            =
                            <call>
                                <name><name>value</name>.
                                    <name>booleanValue</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the value as a Boolean instance.
                *
                * @return the value as a Boolean, never null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>BooleanUtils</name>.
                                    <name>toBooleanObject</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>value</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the value.
                *
                * @param value the value to set
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>value</name>
                            </name>
                            =
                            <name>value</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the value from any Boolean instance.
                *
                * @param value the value to set, not null
                * @throws NullPointerException if the object is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>((<name>Boolean</name>) <name>value</name>).
                                            <call>
                                                <name>booleanValue</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks if the current value is &lt;code&gt;true&lt;/code&gt;.
                *
                * @return &lt;code&gt;true&lt;/code&gt; if the current value is &lt;code&gt;true&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isTrue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                            == true
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if the current value is &lt;code&gt;false&lt;/code&gt;.
                *
                * @return &lt;code&gt;true&lt;/code&gt; if the current value is &lt;code&gt;false&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFalse</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                            == false
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns the value of this MutableBoolean as a boolean.
                *
                * @return the boolean value represented by this object.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>booleanValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets this mutable as an instance of Boolean.
                *
                * @return a Boolean instance containing the value from this mutable, never null
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Boolean</name>
                </type>
                <name>toBoolean</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>BooleanUtils</name>.
                                    <name>toBooleanObject</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>value</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Compares this object to the specified object. The result is &lt;code&gt;true&lt;/code&gt; if and only
                if the argument is
                * not &lt;code&gt;null&lt;/code&gt; and is an &lt;code&gt;MutableBoolean&lt;/code&gt; object that
                contains the same
                * &lt;code&gt;boolean&lt;/code&gt; value as this object.
                *
                * @param obj the object to compare with, null returns false
                * @return &lt;code&gt;true&lt;/code&gt; if the objects are the same; &lt;code&gt;false&lt;/code&gt;
                otherwise.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                <name>instanceof</name>
                                <name>MutableBoolean</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>value</name>
                                        == ((<name>MutableBoolean</name>) <name>obj</name>).
                                        <call>
                                            <name>booleanValue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a suitable hash code for this mutable.
                *
                * @return the hash code returned by &lt;code&gt;Boolean.TRUE&lt;/code&gt; or &lt;code&gt;Boolean.FALSE&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                            ?
                            <call>
                                <name><name>Boolean</name>.<name>TRUE</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <call>
                                <name><name>Boolean</name>.<name>FALSE</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Compares this mutable to another in ascending order.
                *
                * @param obj the other mutable to compare to, not null
                * @return negative if this is less, zero if equal, positive if greater
                * where false is less than true
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>compareTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>MutableBoolean</name>
                            </type>
                            <name>other</name> =
                            <init>
                                <expr>(<name>MutableBoolean</name>)
                                    <name>obj</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>anotherVal</name> =
                            <init>
                                <expr>
                                    <name><name>other</name>.
                                        <name>value</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>value</name>
                            == <name>anotherVal</name> ? 0 : (<name>value</name> ? 1 : -1)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns the String value of this mutable.
                *
                * @return the mutable value as a string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>String</name>.
                                    <name>valueOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
