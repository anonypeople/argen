<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\exception\Nestable.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>exception</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>PrintStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>PrintWriter</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An interface to be implemented by {@link java.lang.Throwable}
        * extensions which would like to be able to nest root exceptions
        * inside themselves.
        *
        * @author Daniel L. Rall
        * @author &lt;a href="mailto:knielsen@apache.org"&gt;Kasper Nielsen&lt;/a&gt;
        * @author &lt;a href="mailto:steven@caswell.name"&gt;Steven Caswell&lt;/a&gt;
        * @author Pete Gieser
        * @since 1.0
        * @version $Id: Nestable.java 512889 2007-02-28 18:18:20Z dlr $
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>Nestable</name>
        <block>{

            <comment type="javadoc">/**
                * Returns the reference to the exception or error that caused the
                * exception implementing the &lt;code&gt;Nestable&lt;/code&gt; to be thrown.
                *
                * @return throwable that caused the original exception
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Throwable</name>
                </type>
                <name>getCause</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the error message of this and any nested
                * &lt;code&gt;Throwable&lt;/code&gt;.
                *
                * @return the error message
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getMessage</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the error message of the &lt;code&gt;Throwable&lt;/code&gt; in the chain
                * of &lt;code&gt;Throwable&lt;/code&gt;s at the specified index, numbered from 0.
                *
                * @param index the index of the &lt;code&gt;Throwable&lt;/code&gt; in the chain of
                * &lt;code&gt;Throwable&lt;/code&gt;s
                * @return the error message, or null if the &lt;code&gt;Throwable&lt;/code&gt; at the
                * specified index in the chain does not contain a message
                * @throws IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt; argument is
                * negative or not less than the count of &lt;code&gt;Throwable&lt;/code&gt;s in the
                * chain
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getMessage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the error message of this and any nested &lt;code&gt;Throwable&lt;/code&gt;s
                * in an array of Strings, one element for each message. Any
                * &lt;code&gt;Throwable&lt;/code&gt; not containing a message is represented in the
                * array by a null. This has the effect of cause the length of the returned
                * array to be equal to the result of the {@link #getThrowableCount()}
                * operation.
                *
                * @return the error messages
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getMessages</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the &lt;code&gt;Throwable&lt;/code&gt; in the chain of
                * &lt;code&gt;Throwable&lt;/code&gt;s at the specified index, numbered from 0.
                *
                * @param index the index, numbered from 0, of the &lt;code&gt;Throwable&lt;/code&gt; in
                * the chain of &lt;code&gt;Throwable&lt;/code&gt;s
                * @return the &lt;code&gt;Throwable&lt;/code&gt;
                * @throws IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt; argument is
                * negative or not less than the count of &lt;code&gt;Throwable&lt;/code&gt;s in the
                * chain
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Throwable</name>
                </type>
                <name>getThrowable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the number of nested &lt;code&gt;Throwable&lt;/code&gt;s represented by
                * this &lt;code&gt;Nestable&lt;/code&gt;, including this &lt;code&gt;Nestable&lt;/code&gt;.
                *
                * @return the throwable count
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getThrowableCount</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns this &lt;code&gt;Nestable&lt;/code&gt; and any nested &lt;code&gt;Throwable&lt;/code&gt;s
                * in an array of &lt;code&gt;Throwable&lt;/code&gt;s, one element for each
                * &lt;code&gt;Throwable&lt;/code&gt;.
                *
                * @return the &lt;code&gt;Throwable&lt;/code&gt;s
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>Throwable</name>
                    <index>[]</index>
                </type>
                <name>getThrowables</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the index, numbered from 0, of the first occurrence of the
                * specified type, or a subclass, in the chain of &lt;code&gt;Throwable&lt;/code&gt;s.
                * The method returns -1 if the specified type is not found in the chain.
                * &lt;p&gt;
                * NOTE: From v2.1, we have clarified the &lt;code&gt;Nestable&lt;/code&gt; interface
                * such that this method matches subclasses.
                * If you want to NOT match subclasses, please use
                * {@link ExceptionUtils#indexOfThrowable(Throwable, Class)}
                * (which is avaiable in all versions of lang).
                *
                * @param type the type to find, subclasses match, null returns -1
                * @return index of the first occurrence of the type in the chain, or -1 if
                * the type is not found
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>indexOfThrowable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the index, numbered from 0, of the first &lt;code&gt;Throwable&lt;/code&gt;
                * that matches the specified type, or a subclass, in the chain of &lt;code&gt;Throwable&lt;/code&gt;s
                * with an index greater than or equal to the specified index.
                * The method returns -1 if the specified type is not found in the chain.
                * &lt;p&gt;
                * NOTE: From v2.1, we have clarified the &lt;code&gt;Nestable&lt;/code&gt; interface
                * such that this method matches subclasses.
                * If you want to NOT match subclasses, please use
                * {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}
                * (which is avaiable in all versions of lang).
                *
                * @param type the type to find, subclasses match, null returns -1
                * @param fromIndex the index, numbered from 0, of the starting position in
                * the chain to be searched
                * @return index of the first occurrence of the type in the chain, or -1 if
                * the type is not found
                * @throws IndexOutOfBoundsException if the &lt;code&gt;fromIndex&lt;/code&gt; argument
                * is negative or not less than the count of &lt;code&gt;Throwable&lt;/code&gt;s in the
                * chain
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>indexOfThrowable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>fromIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Prints the stack trace of this exception to the specified print
                * writer. Includes information from the exception, if any,
                * which caused this exception.
                *
                * @param out &lt;code&gt;PrintWriter&lt;/code&gt; to use for output.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printStackTrace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PrintWriter</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Prints the stack trace of this exception to the specified print
                * stream. Includes information from the exception, if any,
                * which caused this exception.
                *
                * @param out &lt;code&gt;PrintStream&lt;/code&gt; to use for output.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printStackTrace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PrintStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Prints the stack trace for this exception only--root cause not
                * included--using the provided writer. Used by
                * {@link org.apache.commons.lang.exception.NestableDelegate} to write
                * individual stack traces to a buffer. The implementation of
                * this method should call
                * &lt;code&gt;super.printStackTrace(out);&lt;/code&gt; in most cases.
                *
                * @param out The writer to use.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printPartialStackTrace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PrintWriter</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
