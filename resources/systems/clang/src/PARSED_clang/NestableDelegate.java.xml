<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\exception\NestableDelegate.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>exception</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>PrintStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>PrintWriter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>StringWriter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;A shared implementation of the nestable exception functionality.&lt;/p&gt;
        * &lt;p&gt;
        * The code is shared between
        * {@link org.apache.commons.lang.exception.NestableError NestableError},
        * {@link org.apache.commons.lang.exception.NestableException NestableException} and
        * {@link org.apache.commons.lang.exception.NestableRuntimeException NestableRuntimeException}.
        * &lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author &lt;a href="mailto:Rafal.Krzewski@e-point.pl"&gt;Rafal Krzewski&lt;/a&gt;
        * @author Daniel L. Rall
        * @author &lt;a href="mailto:knielsen@apache.org"&gt;Kasper Nielsen&lt;/a&gt;
        * @author &lt;a href="mailto:steven@caswell.name"&gt;Steven Caswell&lt;/a&gt;
        * @author Sean C. Sullivan
        * @since 1.0
        * @version $Id: NestableDelegate.java 905636 2010-02-02 14:03:32Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>NestableDelegate</name>
        <super>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>1L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructor error message.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>MUST_BE_THROWABLE</name> =
                    <init>
                        <expr>"The Nestable implementation passed to the NestableDelegate(Nestable) "
                            + "constructor must extend java.lang.Throwable"
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Holds the reference to the exception or error that we're
                * wrapping (which must be a {@link
                * org.apache.commons.lang.exception.Nestable} implementation).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Throwable</name>
                    </type>
                    <name>nestable</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Whether to print the stack trace top-down.
                * This public flag may be set by calling code, typically in initialisation.
                * This exists for backwards compatability, setting it to false will return
                * the library to v1.0 behaviour (but will affect all users of the library
                * in the classloader).
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <name>boolean</name>
                    </type>
                    <name>topDown</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Whether to trim the repeated stack trace.
                * This public flag may be set by calling code, typically in initialisation.
                * This exists for backwards compatability, setting it to false will return
                * the library to v1.0 behaviour (but will affect all users of the library
                * in the classloader).
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <name>boolean</name>
                    </type>
                    <name>trimStackFrames</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Whether to match subclasses via indexOf.
                * This public flag may be set by calling code, typically in initialisation.
                * This exists for backwards compatability, setting it to false will return
                * the library to v2.0 behaviour (but will affect all users of the library
                * in the classloader).
                * @since 2.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <name>boolean</name>
                    </type>
                    <name>matchSubclasses</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructs a new &lt;code&gt;NestableDelegate&lt;/code&gt; instance to manage the
                * specified &lt;code&gt;Nestable&lt;/code&gt;.
                *
                * @param nestable the Nestable implementation (&lt;i&gt;must&lt;/i&gt; extend
                * {@link java.lang.Throwable})
                * @since 2.0
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>NestableDelegate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Nestable</name>
                            </type>
                            <name>nestable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>nestable</name>
                                <name>instanceof</name>
                                <name>Throwable</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>nestable</name>
                                        </name>
                                        = (<name>Throwable</name>)
                                        <name>nestable</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>MUST_BE_THROWABLE</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the error message of the &lt;code&gt;Throwable&lt;/code&gt; in the chain of &lt;code&gt;Throwable&lt;/code&gt;s
                at the
                * specified index, numbered from 0.
                *
                * @param index
                * the index of the &lt;code&gt;Throwable&lt;/code&gt; in the chain of &lt;code&gt;Throwable&lt;/code&gt;s
                * @return the error message, or null if the &lt;code&gt;Throwable&lt;/code&gt; at the specified index in
                the chain does not
                * contain a message
                * @throws IndexOutOfBoundsException
                * if the &lt;code&gt;index&lt;/code&gt; argument is negative or not less than the count of &lt;code&gt;Throwable&lt;/code&gt;s
                * in the chain
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getMessage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>t</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getThrowable</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>Nestable</name>.
                                    <name>
                                        <name/>
                                    </name>
                                </name>
                                class.
                                <call>
                                    <name>isInstance</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>t</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>((<name>Nestable</name>) <name>t</name>).
                                        <call>
                                            <name>getMessage</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>t</name>.
                                    <name>getMessage</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the full message contained by the &lt;code&gt;Nestable&lt;/code&gt; and any nested &lt;code&gt;Throwable&lt;/code&gt;s.
                *
                * @param baseMsg
                * the base message to use when creating the full message. Should be generally be called via
                * &lt;code&gt;nestableHelper.getMessage(super.getMessage())&lt;/code&gt;, where &lt;code&gt;super&lt;/code&gt;
                is an
                * instance of {@link java.lang.Throwable}.
                * @return The concatenated message for this and all nested &lt;code&gt;Throwable&lt;/code&gt;s
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getMessage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>baseMsg</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>nestedCause</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ExceptionUtils</name>.
                                            <name>getCause</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>nestable</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>causeMsg</name> =
                            <init>
                                <expr>
                                    <name>nestedCause</name>
                                    == <name>null</name> ? <name>null</name> :
                                    <call>
                                        <name><name>nestedCause</name>.
                                            <name>getMessage</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>nestedCause</name>
                                == <name>null</name> || <name>causeMsg</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>baseMsg</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// may be null, which is a valid result</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>baseMsg</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>causeMsg</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>baseMsg</name>
                            + ": " +
                            <name>causeMsg</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the error message of this and any nested &lt;code&gt;Throwable&lt;/code&gt;s in an array of
                Strings, one element
                * for each message. Any &lt;code&gt;Throwable&lt;/code&gt; not containing a message is represented in
                the array by a null.
                * This has the effect of cause the length of the returned array to be equal to the result of the
                * {@link #getThrowableCount()} operation.
                *
                * @return the error messages
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getMessages</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Throwable</name>
                                <index>[]</index>
                            </type>
                            <name>throwables</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getThrowables</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>msgs</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>String</name>
                                        <index>[
                                            <expr>
                                                <name><name>throwables</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>throwables</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>msgs</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    (
                                    <name><name>Nestable</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class.
                                    <call>
                                        <name>isInstance</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>throwables</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    ? ((<name>Nestable</name>)
                                    <name>
                                        <name>throwables</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    ).
                                    <call>
                                        <name>getMessage</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    :
                                    <name>
                                        <name>throwables</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>getMessage</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>msgs</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the &lt;code&gt;Throwable&lt;/code&gt; in the chain of
                * &lt;code&gt;Throwable&lt;/code&gt;s at the specified index, numbered from 0.
                *
                * @param index the index, numbered from 0, of the &lt;code&gt;Throwable&lt;/code&gt; in
                * the chain of &lt;code&gt;Throwable&lt;/code&gt;s
                * @return the &lt;code&gt;Throwable&lt;/code&gt;
                * @throws IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt; argument is
                * negative or not less than the count of &lt;code&gt;Throwable&lt;/code&gt;s in the
                * chain
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Throwable</name>
                </type>
                <name>getThrowable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>this</name>.
                                            <name>nestable</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Throwable</name>
                                <index>[]</index>
                            </type>
                            <name>throwables</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getThrowables</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>
                                <name>throwables</name>
                                <index>[
                                    <expr>
                                        <name>index</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the number of &lt;code&gt;Throwable&lt;/code&gt;s contained in the
                * &lt;code&gt;Nestable&lt;/code&gt; contained by this delegate.
                *
                * @return the throwable count
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getThrowableCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>ExceptionUtils</name>.
                                    <name>getThrowableCount</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>nestable</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns this delegate's &lt;code&gt;Nestable&lt;/code&gt; and any nested
                * &lt;code&gt;Throwable&lt;/code&gt;s in an array of &lt;code&gt;Throwable&lt;/code&gt;s, one
                * element for each &lt;code&gt;Throwable&lt;/code&gt;.
                *
                * @return the &lt;code&gt;Throwable&lt;/code&gt;s
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Throwable</name>
                    <index>[]</index>
                </type>
                <name>getThrowables</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>ExceptionUtils</name>.
                                    <name>getThrowables</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>nestable</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the index, numbered from 0, of the first &lt;code&gt;Throwable&lt;/code&gt;
                * that matches the specified type, or a subclass, in the chain of &lt;code&gt;Throwable&lt;/code&gt;s
                * with an index greater than or equal to the specified index.
                * The method returns -1 if the specified type is not found in the chain.
                * &lt;p&gt;
                * NOTE: From v2.1, we have clarified the &lt;code&gt;Nestable&lt;/code&gt; interface
                * such that this method matches subclasses.
                * If you want to NOT match subclasses, please use
                * {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}
                * (which is avaiable in all versions of lang).
                * An alternative is to use the public static flag {@link #matchSubclasses}
                * on &lt;code&gt;NestableDelegate&lt;/code&gt;, however this is not recommended.
                *
                * @param type the type to find, subclasses match, null returns -1
                * @param fromIndex the index, numbered from 0, of the starting position in
                * the chain to be searched
                * @return index of the first occurrence of the type in the chain, or -1 if
                * the type is not found
                * @throws IndexOutOfBoundsException if the &lt;code&gt;fromIndex&lt;/code&gt; argument
                * is negative or not less than the count of &lt;code&gt;Throwable&lt;/code&gt;s in the
                * chain
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>indexOfThrowable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>fromIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fromIndex</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IndexOutOfBoundsException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The start index was out of bounds: " +
                                                        <name>fromIndex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Throwable</name>
                                <index>[]</index>
                            </type>
                            <name>throwables</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ExceptionUtils</name>.
                                            <name>getThrowables</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>nestable</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>fromIndex</name>
                                &gt;=
                                <name><name>throwables</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IndexOutOfBoundsException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The start index was out of bounds: "
                                                        + <name>fromIndex</name> + " &gt;= " +
                                                        <name><name>throwables</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>matchSubclasses</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>
                                                    <name>fromIndex</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>throwables</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>type</name>.
                                                            <name>isAssignableFrom</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>throwables</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    .
                                                                    <call>
                                                                        <name>getClass</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>
                                                    <name>fromIndex</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>throwables</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>type</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>throwables</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    .
                                                                    <call>
                                                                        <name>getClass</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return <expr>-1</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Prints the stack trace of this exception the the standar error
                * stream.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printStackTrace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>printStackTrace</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>System</name>.
                                                <name>err</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Prints the stack trace of this exception to the specified
                * stream.
                *
                * @param out &lt;code&gt;PrintStream&lt;/code&gt; to use for output.
                * @see #printStackTrace(PrintWriter)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printStackTrace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PrintStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <synchronized>synchronized (
                        <expr>
                            <name>out</name>
                        </expr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>PrintWriter</name>
                                    </type>
                                    <name>pw</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>PrintWriter</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>out</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>printStackTrace</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>pw</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// Flush the PrintWriter before it's GC'ed.</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>pw</name>.
                                            <name>flush</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </synchronized>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Prints the stack trace of this exception to the specified
                * writer. If the Throwable class has a &lt;code&gt;getCause&lt;/code&gt;
                * method (i.e. running on jre1.4 or higher), this method just
                * uses Throwable's printStackTrace() method. Otherwise, generates
                * the stack-trace, by taking into account the 'topDown' and
                * 'trimStackFrames' parameters. The topDown and trimStackFrames
                * are set to 'true' by default (produces jre1.4-like stack trace).
                *
                * @param out &lt;code&gt;PrintWriter&lt;/code&gt; to use for output.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>printStackTrace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>PrintWriter</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>nestable</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// if running on jre1.4 or higher, use default printStackTrace</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ExceptionUtils</name>.
                                        <name>isThrowableNested</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>throwable</name>
                                            <name>instanceof</name>
                                            <name>Nestable</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>((<name>Nestable</name>)<name>throwable</name>).
                                                    <call>
                                                        <name>printPartialStackTrace</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>out</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>throwable</name>.
                                                            <name>printStackTrace</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>out</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// generating the nested stack trace</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>stacks</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>throwable</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                        <index>[]</index>
                                    </type>
                                    <name>st</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>getStackFrames</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>throwable</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>stacks</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>st</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>throwable</name>
                                    =
                                    <call>
                                        <name><name>ExceptionUtils</name>.
                                            <name>getCause</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>throwable</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <comment type="line">// If NOT topDown, reverse the stack</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separatorLine</name> =
                            <init>
                                <expr>"Caused by: "</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <name>topDown</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>separatorLine</name>
                                        = "Rethrown as: "
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>Collections</name>.
                                                <name>reverse</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>stacks</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Remove the repeated lines in the stack</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>trimStackFrames</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>trimStackFrames</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>stacks</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <synchronized>synchronized (
                        <expr>
                            <name>out</name>
                        </expr>
                        )
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>Iterator</name>
                                        </type>
                                        <name>iter</name>=
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>stacks</name>.
                                                        <name>iterator</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <call>
                                            <name><name>iter</name>.
                                                <name>hasNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </condition>
                                <incr/>)
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                                <index>[]</index>
                                            </type>
                                            <name>st</name> =
                                            <init>
                                                <expr>(
                                                    <name>
                                                        <name>String</name>
                                                        <index>[]</index>
                                                    </name>
                                                    )
                                                    <call>
                                                        <name><name>iter</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <for>for (
                                        <init>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>i</name>=
                                                <init>
                                                    <expr>0</expr>
                                                </init>
                                                , <name>len</name>=
                                                <init>
                                                    <expr>
                                                        <name><name>st</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </init>
                                        <condition>
                                            <expr>
                                                <name>i</name>
                                                &lt;
                                                <name>len</name>
                                            </expr>
                                            ;
                                        </condition>
                                        <incr>
                                            <expr><name>i</name>++
                                            </expr>
                                        </incr>
                                        )
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>out</name>.
                                                            <name>println</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>st</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </for>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>iter</name>.
                                                        <name>hasNext</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>out</name>.
                                                                <name>print</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>separatorLine</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </synchronized>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Captures the stack trace associated with the specified
                * &lt;code&gt;Throwable&lt;/code&gt; object, decomposing it into a list of
                * stack frames.
                *
                * @param t The &lt;code&gt;Throwable&lt;/code&gt;.
                * @return An array of strings describing each stack frame.
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getStackFrames</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringWriter</name>
                            </type>
                            <name>sw</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringWriter</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>PrintWriter</name>
                            </type>
                            <name>pw</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>PrintWriter</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>sw</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Avoid infinite loop between decompose() and printStackTrace().</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>t</name>
                                <name>instanceof</name>
                                <name>Nestable</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>((<name>Nestable</name>) <name>t</name>).
                                        <call>
                                            <name>printPartialStackTrace</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>pw</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>t</name>.
                                                <name>printStackTrace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>pw</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>ExceptionUtils</name>.
                                    <name>getStackFrames</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>sw</name>.
                                                    <name>getBuffer</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>toString</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Trims the stack frames. The first set is left untouched. The rest
                * of the frames are truncated from the bottom by comparing with
                * one just on top.
                *
                * @param stacks The list containing String[] elements
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>trimStackFrames</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>stacks</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>size</name>=
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>stacks</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                                , <name>i</name>=
                                <init>
                                    <expr><name>size</name>-1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt; 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                        <index>[]</index>
                                    </type>
                                    <name>curr</name> =
                                    <init>
                                        <expr>(
                                            <name>
                                                <name>String</name>
                                                <index>[]</index>
                                            </name>
                                            )
                                            <call>
                                                <name><name>stacks</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                        <index>[]</index>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>(
                                            <name>
                                                <name>String</name>
                                                <index>[]</index>
                                            </name>
                                            )
                                            <call>
                                                <name><name>stacks</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>i</name>-1
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>List</name>
                                    </type>
                                    <name>currList</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>ArrayList</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>Arrays</name>.
                                                                    <name>asList</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>curr</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>List</name>
                                    </type>
                                    <name>nextList</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>ArrayList</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>Arrays</name>.
                                                                    <name>asList</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>next</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ExceptionUtils</name>.
                                            <name>removeCommonFrames</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>currList</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>nextList</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>trimmed</name> =
                                    <init>
                                        <expr>
                                            <name><name>curr</name>.
                                                <name>length</name>
                                            </name>
                                            -
                                            <call>
                                                <name><name>currList</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>trimmed</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>currList</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"\t... "+<name>trimmed</name>+" more"
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>stacks</name>.
                                                        <name>set</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>currList</name>.
                                                                        <name>toArray</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>new
                                                                                <name>
                                                                                    <name>String</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    currList</name>.
                                                                                                    <name>size</name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
