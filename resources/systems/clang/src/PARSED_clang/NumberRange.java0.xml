<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\NumberRange.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>text</name>.
            <name>StrBuilder</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Represents a range of {@link Number} objects.&lt;/p&gt;
        *
        * &lt;p&gt;This class uses &lt;code&gt;double&lt;/code&gt; comparisons. This means that it
        * is unsuitable for dealing with large &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;BigDecimal&lt;/code&gt;
        * or &lt;code&gt;BigInteger&lt;/code&gt; numbers.&lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author &lt;a href="mailto:chrise@esha.com"&gt;Christopher Elkins&lt;/a&gt;
        * @since 1.0
        * @version $Revision: 1057072 $ $Date: 2011-01-10 01:55:57 +0000 (Mon, 10 Jan 2011) $
        *
        * @deprecated Use one of the Range classes in org.apache.commons.lang.math.
        * Class will be removed in Commons Lang 3.0.
        *
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>NumberRange</name>
        <block>{

            <comment type="block">/* The minimum number in this range. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Number</name>
                    </type>
                    <name>min</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="block">/* The maximum number in this range. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Number</name>
                    </type>
                    <name>max</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="javadoc">/**
                * &lt;p&gt;Constructs a new &lt;code&gt;NumberRange&lt;/code&gt; using
                * &lt;code&gt;number&lt;/code&gt; as both the minimum and maximum in
                * this range.&lt;/p&gt;
                *
                * @param num the number to use for this range
                * @throws NullPointerException if the number is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>NumberRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Number</name>
                            </type>
                            <name>num</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>num</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The number must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>min</name>
                            </name>
                            =
                            <name>num</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>max</name>
                            </name>
                            =
                            <name>num</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructs a new &lt;code&gt;NumberRange&lt;/code&gt; with the specified
                * minimum and maximum numbers.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;em&gt;If the maximum is less than the minimum, the range will be constructed
                * from the minimum value to the minimum value, not what you would expect!.&lt;/em&gt;&lt;/p&gt;
                *
                * @param min the minimum number in this range
                * @param max the maximum number in this range
                * @throws NullPointerException if either the minimum or maximum number is
                * &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>NumberRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Number</name>
                            </type>
                            <name>min</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Number</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>min</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The minimum value must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>max</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>NullPointerException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"The maximum value must not be null"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>max</name>.
                                        <name>doubleValue</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt;
                                <call>
                                    <name><name>min</name>.
                                        <name>doubleValue</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>min</name>
                                        </name>
                                        =
                                        <name><name>this</name>.
                                            <name>max</name>
                                        </name>
                                        =
                                        <name>min</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>min</name>
                                        </name>
                                        =
                                        <name>min</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>max</name>
                                        </name>
                                        =
                                        <name>max</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the minimum number in this range.&lt;/p&gt;
                *
                * @return the minimum number in this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Number</name>
                </type>
                <name>getMinimum</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>min</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the maximum number in this range.&lt;/p&gt;
                *
                * @return the maximum number in this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Number</name>
                </type>
                <name>getMaximum</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>max</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified &lt;code&gt;number&lt;/code&gt; occurs within
                * this range using &lt;code&gt;double&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * @param number the number to test
                * @return &lt;code&gt;true&lt;/code&gt; if the specified number occurs within this
                * range; otherwise, &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>includesNumber</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Number</name>
                            </type>
                            <name>number</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>number</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>!(
                                        <call>
                                            <name><name>min</name>.
                                                <name>doubleValue</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt;
                                        <call>
                                            <name><name>number</name>.
                                                <name>doubleValue</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ) &amp;&amp;
                                        !(
                                        <call>
                                            <name><name>max</name>.
                                                <name>doubleValue</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &lt;
                                        <call>
                                            <name><name>number</name>.
                                                <name>doubleValue</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        )
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified range occurs entirely within this
                * range using &lt;code&gt;double&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * @param range the range to test
                * @return &lt;code&gt;true&lt;/code&gt; if the specified range occurs entirely within
                * this range; otherwise, &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>includesRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>NumberRange</name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>range</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>includesNumber</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>range</name>.
                                                            <name>min</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name>includesNumber</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>range</name>.
                                                            <name>max</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified range overlaps with this range
                * using &lt;code&gt;double&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * @param range the range to test
                * @return &lt;code&gt;true&lt;/code&gt; if the specified range overlaps with this
                * range; otherwise, &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>overlaps</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>NumberRange</name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>range</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>range</name>.
                                                <name>includesNumber</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>min</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ||
                                        <call>
                                            <name><name>range</name>.
                                                <name>includesNumber</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>max</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ||
                                        <call>
                                            <name>includesRange</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>range</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Indicates whether some other &lt;code&gt;Object&lt;/code&gt; is
                * &amp;quot;equal&amp;quot; to this one.&lt;/p&gt;
                *
                * @param obj the reference object with which to compare
                * @return &lt;code&gt;true&lt;/code&gt; if this object is the same as the obj
                * argument; &lt;code&gt;false&lt;/code&gt; otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!(<name>obj</name>
                                        <name>instanceof</name>
                                        <name>NumberRange</name>)
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>NumberRange</name>
                                                </type>
                                                <name>range</name> =
                                                <init>
                                                    <expr>(<name>NumberRange</name>)
                                                        <name>obj</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>min</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>range</name>.
                                                                    <name>min</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>max</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>range</name>.
                                                                    <name>max</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns a hash code value for this object.&lt;/p&gt;
                *
                * @return a hash code value for this object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>17</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = 37 * <name>result</name> +
                            <call>
                                <name><name>min</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = 37 * <name>result</name> +
                            <call>
                                <name><name>max</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the string representation of this range.&lt;/p&gt;
                *
                * &lt;p&gt;This string is the string representation of the minimum and
                * maximum numbers in the range, separated by a hyphen. If a number
                * is negative, then it is enclosed in parentheses.&lt;/p&gt;
                *
                * @return the string representation of this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>sb</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>min</name>.
                                        <name>doubleValue</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>sb</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'('</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>min</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>')'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>sb</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>min</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>sb</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'-'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>max</name>.
                                        <name>doubleValue</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>sb</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'('</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>max</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>')'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>sb</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>max</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name><name>sb</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
