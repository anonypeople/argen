<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\NumberUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigDecimal</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Provides extra functionality for Java Number classes.&lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author &lt;a href="mailto:rand_mcneely@yahoo.com"&gt;Rand McNeely&lt;/a&gt;
        * @author &lt;a href="mailto:steve.downey@netfolio.com"&gt;Steve Downey&lt;/a&gt;
        * @author Eric Pugh
        * @author Phil Steitz
        * @since 1.0
        * @version $Id: NumberUtils.java 905636 2010-02-02 14:03:32Z niallp $
        *
        * @deprecated Moved to org.apache.commons.lang.math.
        * Class will be removed in Commons Lang 3.0.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>NumberUtils</name>
        <block>{
            <comment type="line">// DEPRECATED CLASS !!!</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;&lt;code&gt;NumberUtils&lt;/code&gt; instances should NOT be constructed in standard
                programming.
                * Instead, the class should be used as &lt;code&gt;NumberUtils.stringToInt("6");&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean instance
                * to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>NumberUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//--------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Convert a &lt;code&gt;String&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt;, returning
                * &lt;code&gt;zero&lt;/code&gt; if the conversion fails.&lt;/p&gt;
                *
                * @param str the string to convert
                * @return the int represented by the string, or &lt;code&gt;zero&lt;/code&gt; if
                * conversion fails
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>stringToInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>stringToInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Convert a &lt;code&gt;String&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt;, returning a
                * default value if the conversion fails.&lt;/p&gt;
                *
                * @param str the string to convert
                * @param defaultValue the default value
                * @return the int represented by the string, or the default if conversion fails
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>stringToInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>defaultValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Integer</name>.
                                            <name>parseInt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>str</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NumberFormatException</name>
                                    </type>
                                    <name>nfe</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return
                                    <expr>
                                        <name>defaultValue</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="line">//--------------------------------------------------------------------</comment>

            <comment type="line">// must handle Long, Float, Integer, Float, Short,</comment>
            <comment type="line">// BigDecimal, BigInteger and Byte</comment>
            <comment type="line">// useful methods:</comment>
            <comment type="line">// Byte.decode(String)</comment>
            <comment type="line">// Byte.valueOf(String,int radix)</comment>
            <comment type="line">// Byte.valueOf(String)</comment>
            <comment type="line">// Double.valueOf(String)</comment>
            <comment type="line">// Float.valueOf(String)</comment>
            <comment type="line">// new Float(String)</comment>
            <comment type="line">// Integer.valueOf(String,int radix)</comment>
            <comment type="line">// Integer.valueOf(String)</comment>
            <comment type="line">// Integer.decode(String)</comment>
            <comment type="line">// Integer.getInteger(String)</comment>
            <comment type="line">// Integer.getInteger(String,int val)</comment>
            <comment type="line">// Integer.getInteger(String,Integer val)</comment>
            <comment type="line">// new Integer(String)</comment>
            <comment type="line">// new Double(String)</comment>
            <comment type="line">// new Byte(String)</comment>
            <comment type="line">// new Long(String)</comment>
            <comment type="line">// Long.getLong(String)</comment>
            <comment type="line">// Long.getLong(String,int)</comment>
            <comment type="line">// Long.getLong(String,Integer)</comment>
            <comment type="line">// Long.valueOf(String,int)</comment>
            <comment type="line">// Long.valueOf(String)</comment>
            <comment type="line">// new Short(String)</comment>
            <comment type="line">// Short.decode(String)</comment>
            <comment type="line">// Short.valueOf(String,int)</comment>
            <comment type="line">// Short.valueOf(String)</comment>
            <comment type="line">// new BigDecimal(String)</comment>
            <comment type="line">// new BigInteger(String)</comment>
            <comment type="line">// new BigInteger(String,int radix)</comment>
            <comment type="line">// Possible inputs:</comment>
            <comment type="line">// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd</comment>
            <comment type="line">// plus minus everything. Prolly more. A lot are not separable.</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Turns a string value into a java.lang.Number.&lt;/p&gt;
                *
                * &lt;p&gt;First, the value is examined for a type qualifier on the end
                * (&lt;code&gt;'f','F','d','D','l','L'&lt;/code&gt;). If it is found, it starts
                * trying to create successively larger types from the type specified
                * until one is found that can hold the value.&lt;/p&gt;
                *
                * &lt;p&gt;If a type specifier is not found, it will check for a decimal point
                * and then try successively larger types from &lt;code&gt;Integer&lt;/code&gt; to
                * &lt;code&gt;BigInteger&lt;/code&gt; and from &lt;code&gt;Float&lt;/code&gt; to
                * &lt;code&gt;BigDecimal&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;If the string starts with &lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;-0x&lt;/code&gt;, it
                * will be interpreted as a hexadecimal integer. Values with leading
                * &lt;code&gt;0&lt;/code&gt;'s will not be interpreted as octal.&lt;/p&gt;
                *
                * @param val String containing a number
                * @return Number created from the string
                * @throws NumberFormatException if the value cannot be converted
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Number</name>
                </type>
                <name>createNumber</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>NumberFormatException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>val</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>val</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NumberFormatException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"\"\" is not a valid number."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>val</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 1 &amp;&amp; !
                                <call>
                                    <name><name>Character</name>.
                                        <name>isDigit</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>val</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NumberFormatException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>val</name>
                                                        + " is not a valid number."
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>val</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"--"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// this is protection for poorness in java.lang.BigDecimal.
                                </comment>
                                <comment type="line">// it accepts this as a legal value, but it does not appear
                                </comment>
                                <comment type="line">// to be in specification of class. OS X Java parses it to
                                </comment>
                                <comment type="line">// a wrong value.</comment>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>val</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"0x"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>val</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"-0x"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>createInteger</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>val</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>lastChar</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>val</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>val</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    - 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>mant</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>dec</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>exp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>decPos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>val</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'.'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>expPos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>val</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'e'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    +
                                    <call>
                                        <name><name>val</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'E'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    + 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>decPos</name>
                                &gt; -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>expPos</name>
                                            &gt; -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>expPos</name>
                                                        &lt;
                                                        <name>decPos</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>NumberFormatException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>val</name>
                                                                                + " is not a valid number."
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name>dec</name>
                                                    =
                                                    <call>
                                                        <name><name>val</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>decPos</name>
                                                                    + 1
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>expPos</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>dec</name>
                                                    =
                                                    <call>
                                                        <name><name>val</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>decPos</name>
                                                                    + 1
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>mant</name>
                                        =
                                        <call>
                                            <name><name>val</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>decPos</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>expPos</name>
                                            &gt; -1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>mant</name>
                                                    =
                                                    <call>
                                                        <name><name>val</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>expPos</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>mant</name>
                                                    =
                                                    <name>val</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>dec</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>Character</name>.
                                        <name>isDigit</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>lastChar</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>expPos</name>
                                            &gt; -1 &amp;&amp; <name>expPos</name> &lt;
                                            <call>
                                                <name><name>val</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>exp</name>
                                                    =
                                                    <call>
                                                        <name><name>val</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>expPos</name>
                                                                    + 1
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>val</name>.
                                                                            <name>length</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    - 1
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>exp</name>
                                                    =
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <comment type="line">//Requesting a specific type..</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>numeric</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>val</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>val</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                - 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>boolean</name>
                                        </type>
                                        <name>allZeros</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>isAllZeros</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>mant</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                &amp;&amp;
                                                <call>
                                                    <name>isAllZeros</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>exp</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <switch>switch
                                    <condition>(
                                        <expr>
                                            <name>lastChar</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <case>case <expr>'l'</expr> :
                                        </case>
                                        <case>case <expr>'L'</expr> :
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>dec</name>
                                                        ==
                                                        <name>null</name>
                                                        &amp;&amp; <name>exp</name> ==
                                                        <name>null</name>
                                                        &amp;&amp; (
                                                        <call>
                                                            <name><name>numeric</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        == '-' &amp;&amp;
                                                        <call>
                                                            <name>isDigits</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>numeric</name>.
                                                                                <name>substring</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>1</expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        ||
                                                        <call>
                                                            <name>isDigits</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>numeric</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        )
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <try>try
                                                            <block>{
                                                                <return>return
                                                                    <expr>
                                                                        <call>
                                                                            <name>createLong</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>numeric</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                            <catch>catch (
                                                                <param>
                                                                    <decl>
                                                                        <type>
                                                                            <name>NumberFormatException</name>
                                                                        </type>
                                                                        <name>nfe</name>
                                                                    </decl>
                                                                </param>
                                                                )
                                                                <block>{
                                                                    <comment type="line">//Too big for a long</comment>
                                                                    }
                                                                </block>
                                                            </catch>
                                                        </try>
                                                        <return>return
                                                            <expr>
                                                                <call>
                                                                    <name>createBigInteger</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>numeric</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>

                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>NumberFormatException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>val</name>
                                                                    + " is not a valid number."
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                        </case>
                                        <case>case <expr>'f'</expr> :
                                        </case>
                                        <case>case <expr>'F'</expr> :
                                            <try>try
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>Float</name>
                                                            </type>
                                                            <name>f</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>NumberUtils</name>.
                                                                            <name>createFloat</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>numeric</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>!(
                                                                <call>
                                                                    <name><name>f</name>.
                                                                        <name>isInfinite</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                || (
                                                                <call>
                                                                    <name><name>f</name>.
                                                                        <name>floatValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                == 0.0F &amp;&amp; !<name>allZeros</name>))
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <comment type="line">//If it's too big for a float or
                                                                    the float value = 0 and the string
                                                                </comment>
                                                                <comment type="line">//has non-zeros in it, then float
                                                                    does not have the precision we want
                                                                </comment>
                                                                <return>return
                                                                    <expr>
                                                                        <name>f</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>

                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>NumberFormatException</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// ignore the bad number</comment>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            <comment type="line">//$FALL-THROUGH$</comment>
                                        </case>
                                        <case>case <expr>'d'</expr> :
                                        </case>
                                        <case>case <expr>'D'</expr> :
                                            <try>try
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>Double</name>
                                                            </type>
                                                            <name>d</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>NumberUtils</name>.
                                                                            <name>createDouble</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>numeric</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>!(
                                                                <call>
                                                                    <name><name>d</name>.
                                                                        <name>isInfinite</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                || (
                                                                <call>
                                                                    <name><name>d</name>.
                                                                        <name>floatValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                == 0.0D &amp;&amp; !<name>allZeros</name>))
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return
                                                                    <expr>
                                                                        <name>d</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>NumberFormatException</name>
                                                            </type>
                                                            <name>nfe</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// empty catch</comment>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            <try>try
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>createBigDecimal</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>numeric</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>NumberFormatException</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// empty catch</comment>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            <comment type="line">//$FALL-THROUGH$</comment>
                                        </case>
                                        <default>default :
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>NumberFormatException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>val</name>
                                                                    + " is not a valid number."
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>

                                        </default>
                                        }
                                    </block>
                                </switch>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">//User doesn't have a preference on the return type, so let's
                                    start
                                </comment>
                                <comment type="line">//small and go from there...</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>expPos</name>
                                            &gt; -1 &amp;&amp; <name>expPos</name> &lt;
                                            <call>
                                                <name><name>val</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>exp</name>
                                                    =
                                                    <call>
                                                        <name><name>val</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>expPos</name>
                                                                    + 1
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>val</name>.
                                                                            <name>length</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>exp</name>
                                                    =
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>dec</name>
                                            == <name>null</name> &amp;&amp; <name>exp</name> ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">//Must be an int,long,bigint</comment>
                                            <try>try
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>createInteger</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>val</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>NumberFormatException</name>
                                                            </type>
                                                            <name>nfe</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// empty catch</comment>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            <try>try
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>createLong</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>val</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>NumberFormatException</name>
                                                            </type>
                                                            <name>nfe</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// empty catch</comment>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>createBigInteger</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>val</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>

                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <comment type="line">//Must be a float,double,BigDec</comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>boolean</name>
                                                    </type>
                                                    <name>allZeros</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name>isAllZeros</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>mant</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            &amp;&amp;
                                                            <call>
                                                                <name>isAllZeros</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>exp</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <try>try
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>Float</name>
                                                            </type>
                                                            <name>f</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name>createFloat</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>val</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>!(
                                                                <call>
                                                                    <name><name>f</name>.
                                                                        <name>isInfinite</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                || (
                                                                <call>
                                                                    <name><name>f</name>.
                                                                        <name>floatValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                == 0.0F &amp;&amp; !<name>allZeros</name>))
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return
                                                                    <expr>
                                                                        <name>f</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>NumberFormatException</name>
                                                            </type>
                                                            <name>nfe</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// empty catch</comment>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            <try>try
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>Double</name>
                                                            </type>
                                                            <name>d</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name>createDouble</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>val</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>!(
                                                                <call>
                                                                    <name><name>d</name>.
                                                                        <name>isInfinite</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                || (
                                                                <call>
                                                                    <name><name>d</name>.
                                                                        <name>doubleValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                == 0.0D &amp;&amp; !<name>allZeros</name>))
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return
                                                                    <expr>
                                                                        <name>d</name>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>NumberFormatException</name>
                                                            </type>
                                                            <name>nfe</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// empty catch</comment>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>

                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>createBigDecimal</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>val</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>

                                            }
                                        </block>
                                    </else>
                                </if>

                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Utility method for {@link #createNumber(java.lang.String)}.&lt;/p&gt;
                *
                * &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if s is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param s the String to check
                * @return if it is all zeros or &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAllZeros</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>s</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>s</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        - 1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>s</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        != '0'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>s</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &gt; 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//--------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Convert a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Float&lt;/code&gt;.&lt;/p&gt;
                *
                * @param val a &lt;code&gt;String&lt;/code&gt; to convert
                * @return converted &lt;code&gt;Float&lt;/code&gt;
                * @throws NumberFormatException if the value cannot be converted
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Float</name>
                </type>
                <name>createFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Float</name>.
                                    <name>valueOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>val</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Convert a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Double&lt;/code&gt;.&lt;/p&gt;
                *
                * @param val a &lt;code&gt;String&lt;/code&gt; to convert
                * @return converted &lt;code&gt;Double&lt;/code&gt;
                * @throws NumberFormatException if the value cannot be converted
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Double</name>
                </type>
                <name>createDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Double</name>.
                                    <name>valueOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>val</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Convert a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Integer&lt;/code&gt;, handling
                * hex and octal notations.&lt;/p&gt;
                *
                * @param val a &lt;code&gt;String&lt;/code&gt; to convert
                * @return converted &lt;code&gt;Integer&lt;/code&gt;
                * @throws NumberFormatException if the value cannot be converted
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Integer</name>
                </type>
                <name>createInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// decode() handles 0xAABD and 0777 (hex and octal) as well.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Integer</name>.
                                    <name>decode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>val</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Convert a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Long&lt;/code&gt;.&lt;/p&gt;
                *
                * @param val a &lt;code&gt;String&lt;/code&gt; to convert
                * @return converted &lt;code&gt;Long&lt;/code&gt;
                * @throws NumberFormatException if the value cannot be converted
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Long</name>
                </type>
                <name>createLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Long</name>.
                                    <name>valueOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>val</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Convert a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;BigInteger&lt;/code&gt;.&lt;/p&gt;
                *
                * @param val a &lt;code&gt;String&lt;/code&gt; to convert
                * @return converted &lt;code&gt;BigInteger&lt;/code&gt;
                * @throws NumberFormatException if the value cannot be converted
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>BigInteger</name>
                </type>
                <name>createBigInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>bi</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>BigInteger</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>val</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>bi</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Convert a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;BigDecimal&lt;/code&gt;.&lt;/p&gt;
                *
                * @param val a &lt;code&gt;String&lt;/code&gt; to convert
                * @return converted &lt;code&gt;BigDecimal&lt;/code&gt;
                * @throws NumberFormatException if the value cannot be converted
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>BigDecimal</name>
                </type>
                <name>createBigDecimal</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigDecimal</name>
                            </type>
                            <name>bd</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>BigDecimal</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>val</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>bd</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//--------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the minimum of three &lt;code&gt;long&lt;/code&gt; values.&lt;/p&gt;
                *
                * @param a value 1
                * @param b value 2
                * @param c value 3
                * @return the smallest of the values
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>minimum</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>b</name>
                                &lt;
                                <name>a</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>a</name>
                                        =
                                        <name>b</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>c</name>
                                &lt;
                                <name>a</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>a</name>
                                        =
                                        <name>c</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>a</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the minimum of three &lt;code&gt;int&lt;/code&gt; values.&lt;/p&gt;
                *
                * @param a value 1
                * @param b value 2
                * @param c value 3
                * @return the smallest of the values
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>minimum</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>b</name>
                                &lt;
                                <name>a</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>a</name>
                                        =
                                        <name>b</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>c</name>
                                &lt;
                                <name>a</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>a</name>
                                        =
                                        <name>c</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>a</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the maximum of three &lt;code&gt;long&lt;/code&gt; values.&lt;/p&gt;
                *
                * @param a value 1
                * @param b value 2
                * @param c value 3
                * @return the largest of the values
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>maximum</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>b</name>
                                &gt;
                                <name>a</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>a</name>
                                        =
                                        <name>b</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>c</name>
                                &gt;
                                <name>a</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>a</name>
                                        =
                                        <name>c</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>a</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the maximum of three &lt;code&gt;int&lt;/code&gt; values.&lt;/p&gt;
                *
                * @param a value 1
                * @param b value 2
                * @param c value 3
                * @return the largest of the values
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>maximum</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>b</name>
                                &gt;
                                <name>a</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>a</name>
                                        =
                                        <name>b</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>c</name>
                                &gt;
                                <name>a</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>a</name>
                                        =
                                        <name>c</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>a</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//--------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares two &lt;code&gt;doubles&lt;/code&gt; for order.&lt;/p&gt;
                *
                * &lt;p&gt;This method is more comprehensive than the standard Java greater
                * than, less than and equals operators.&lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;It returns &lt;code&gt;-1&lt;/code&gt; if the first value is less than the second.
                * &lt;li&gt;It returns &lt;code&gt;+1&lt;/code&gt; if the first value is greater than the second.
                * &lt;li&gt;It returns &lt;code&gt;0&lt;/code&gt; if the values are equal.
                * &lt;/ul&gt;
                *
                * &lt;p&gt;
                * The ordering is as follows, largest to smallest:
                * &lt;ul&gt;
                * &lt;li&gt;NaN
                * &lt;li&gt;Positive infinity
                * &lt;li&gt;Maximum double
                * &lt;li&gt;Normal positive numbers
                * &lt;li&gt;+0.0
                * &lt;li&gt;-0.0
                * &lt;li&gt;Normal negative numbers
                * &lt;li&gt;Minimum double (-Double.MAX_VALUE)
                * &lt;li&gt;Negative infinity
                * &lt;/ul&gt;
                * &lt;/p&gt;
                *
                * &lt;p&gt;Comparing &lt;code&gt;NaN&lt;/code&gt; with &lt;code&gt;NaN&lt;/code&gt; will
                * return &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * @param lhs the first &lt;code&gt;double&lt;/code&gt;
                * @param rhs the second &lt;code&gt;double&lt;/code&gt;
                * @return &lt;code&gt;-1&lt;/code&gt; if lhs is less, &lt;code&gt;+1&lt;/code&gt; if greater,
                * &lt;code&gt;0&lt;/code&gt; if equal to rhs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>compare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                &lt;
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                &gt;
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>+1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// Need to compare bits to handle 0.0 == -0.0 being true</comment>
                    <comment type="line">// compare should put -0.0 &lt; +0.0</comment>
                    <comment type="line">// Two NaNs are also == for compare purposes</comment>
                    <comment type="line">// where NaN == NaN is false</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>lhsBits</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Double</name>.
                                            <name>doubleToLongBits</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>lhs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>rhsBits</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Double</name>.
                                            <name>doubleToLongBits</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>rhs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhsBits</name>
                                ==
                                <name>rhsBits</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// Something exotic! A comparison to NaN or 0.0 vs -0.0</comment>
                    <comment type="line">// Fortunately NaN's long is &gt; than everything else</comment>
                    <comment type="line">// Also negzeros bits &lt; poszero</comment>
                    <comment type="line">// NAN: 9221120237041090560</comment>
                    <comment type="line">// MAX: 9218868437227405311</comment>
                    <comment type="line">// NEGZERO: -9223372036854775808</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhsBits</name>
                                &lt;
                                <name>rhsBits</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return <expr>+1</expr>;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares two floats for order.&lt;/p&gt;
                *
                * &lt;p&gt;This method is more comprehensive than the standard Java greater than,
                * less than and equals operators.&lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;It returns &lt;code&gt;-1&lt;/code&gt; if the first value is less than the second.
                * &lt;li&gt;It returns &lt;code&gt;+1&lt;/code&gt; if the first value is greater than the second.
                * &lt;li&gt;It returns &lt;code&gt;0&lt;/code&gt; if the values are equal.
                * &lt;/ul&gt;
                *
                * &lt;p&gt; The ordering is as follows, largest to smallest:
                * &lt;ul&gt;
                * &lt;li&gt;NaN
                * &lt;li&gt;Positive infinity
                * &lt;li&gt;Maximum float
                * &lt;li&gt;Normal positive numbers
                * &lt;li&gt;+0.0
                * &lt;li&gt;-0.0
                * &lt;li&gt;Normal negative numbers
                * &lt;li&gt;Minimum float (-Float.MAX_VALUE)
                * &lt;li&gt;Negative infinity
                * &lt;/ul&gt;
                *
                * &lt;p&gt;Comparing &lt;code&gt;NaN&lt;/code&gt; with &lt;code&gt;NaN&lt;/code&gt; will return
                * &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * @param lhs the first &lt;code&gt;float&lt;/code&gt;
                * @param rhs the second &lt;code&gt;float&lt;/code&gt;
                * @return &lt;code&gt;-1&lt;/code&gt; if lhs is less, &lt;code&gt;+1&lt;/code&gt; if greater,
                * &lt;code&gt;0&lt;/code&gt; if equal to rhs
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>compare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>lhs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>rhs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                &lt;
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhs</name>
                                &gt;
                                <name>rhs</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>+1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">//Need to compare bits to handle 0.0 == -0.0 being true</comment>
                    <comment type="line">// compare should put -0.0 &lt; +0.0</comment>
                    <comment type="line">// Two NaNs are also == for compare purposes</comment>
                    <comment type="line">// where NaN == NaN is false</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lhsBits</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Float</name>.
                                            <name>floatToIntBits</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>lhs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>rhsBits</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Float</name>.
                                            <name>floatToIntBits</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>rhs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhsBits</name>
                                ==
                                <name>rhsBits</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">//Something exotic! A comparison to NaN or 0.0 vs -0.0</comment>
                    <comment type="line">//Fortunately NaN's int is &gt; than everything else</comment>
                    <comment type="line">//Also negzeros bits &lt; poszero</comment>
                    <comment type="line">//NAN: 2143289344</comment>
                    <comment type="line">//MAX: 2139095039</comment>
                    <comment type="line">//NEGZERO: -2147483648</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lhsBits</name>
                                &lt;
                                <name>rhsBits</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return <expr>+1</expr>;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">//--------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether the &lt;code&gt;String&lt;/code&gt; contains only
                * digit characters.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;Null&lt;/code&gt; and empty String will return
                * &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * @param str the &lt;code&gt;String&lt;/code&gt; to check
                * @return &lt;code&gt;true&lt;/code&gt; if str contains only unicode numeric
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isDigits</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>str</name> == <name>null</name>) || (
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isDigit</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks whether the String a valid Java number.&lt;/p&gt;
                *
                * &lt;p&gt;Valid numbers include hexadecimal marked with the &lt;code&gt;0x&lt;/code&gt;
                * qualifier, scientific notation and numbers marked with a type
                * qualifier (e.g. 123L).&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;Null&lt;/code&gt; and empty String will return
                * &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * @param str the &lt;code&gt;String&lt;/code&gt; to check
                * @return &lt;code&gt;true&lt;/code&gt; if the string is a correctly formatted number
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNumber</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>StringUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>chars</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <name><name>chars</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>hasExp</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>hasDecPoint</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>allowSigns</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>foundDigit</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// deal with any possible sign up front</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>chars</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                    == '-') ? 1 : 0
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>sz</name>
                                &gt; <name>start</name> + 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == '0' &amp;&amp;
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>start</name>
                                                        + 1
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == 'x'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>
                                                            <name>start</name>
                                                            + 2
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>i</name>
                                                        ==
                                                        <name>sz</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>false</expr>;
                                                        </return>
                                                        <comment type="line">// str == "0x"</comment>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <comment type="line">// checking hex (it can't be anything else)</comment>
                                            <for>for (<init>;</init>
                                                <condition>
                                                    <expr>
                                                        <name>i</name>
                                                        &lt;
                                                        <name><name>chars</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>(
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                &lt; '0' ||
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                &gt; '9')
                                                                &amp;&amp; (
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                &lt; 'a' ||
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                &gt; 'f')
                                                                &amp;&amp; (
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                &lt; 'A' ||
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                &gt; 'F')
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </for>
                                            <return>return <expr>true</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr><name>sz</name>--
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// don't want to loop to the last char, check it afterwords</comment>
                    <comment type="line">// for type qualifiers</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>
                                    <name>start</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// loop to the next to last char or to the last char if we need another digit
                        to
                    </comment>
                    <comment type="line">// make a valid number (e.g. chars[0..5] = "1234E")</comment>
                    <while>while
                        <condition>(
                            <expr>
                                <name>i</name>
                                &lt; <name>sz</name> || (<name>i</name> &lt; <name>sz</name> + 1 &amp;&amp; <name>
                                allowSigns
                            </name> &amp;&amp; !<name>foundDigit</name>)
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>chars</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        &gt;= '0' &amp;&amp;
                                        <name>
                                            <name>chars</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        &lt;= '9'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>foundDigit</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>allowSigns</name>
                                                = false
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>chars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                == '.'
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>hasDecPoint</name>
                                                            ||
                                                            <name>hasExp</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <comment type="line">// two decimal points or dec in
                                                                exponent
                                                            </comment>
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>hasDecPoint</name>
                                                        = true
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>
                                                            <name>chars</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        == 'e' ||
                                                        <name>
                                                            <name>chars</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        == 'E'
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// we've already taken care of hex.
                                                        </comment>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>hasExp</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <comment type="line">// two E's</comment>
                                                                    <return>return <expr>false</expr>;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        <if>if
                                                            <condition>(
                                                                <expr>!
                                                                    <name>foundDigit</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <return>return <expr>false</expr>;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>hasExp</name>
                                                                = true
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>allowSigns</name>
                                                                = true
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                == '+' ||
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                == '-'
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>!
                                                                            <name>allowSigns</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <return>return <expr>false</expr>;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>allowSigns</name>
                                                                        = false
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>foundDigit</name>
                                                                        = false
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <comment type="line">// we need a digit after the E
                                                                </comment>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <block>{
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </else>
                                                    </if>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>chars</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            &gt;= '0' &amp;&amp;
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            &lt;= '9'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// no type qualifier, OK</comment>
                                            <return>return <expr>true</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == 'e' ||
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == 'E'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// can't have an E at the last byte</comment>
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <name>allowSigns</name>
                                            &amp;&amp; (
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == 'd'
                                            ||
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == 'D'
                                            ||
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == 'f'
                                            ||
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == 'F')
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>foundDigit</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == 'l'
                                            ||
                                            <name>
                                                <name>chars</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            == 'L'
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// not allowing L with an exponent</comment>
                                            <return>return
                                                <expr>
                                                    <name>foundDigit</name>
                                                    &amp;&amp; !
                                                    <name>hasExp</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// last character is illegal</comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// allowSigns is true iff the val ends in 'E'</comment>
                    <comment type="line">// found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
                    </comment>
                    <return>return
                        <expr>!<name>allowSigns</name> &amp;&amp;
                            <name>foundDigit</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
