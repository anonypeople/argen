<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\ObjectUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Array</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationTargetException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>exception</name>.
            <name>CloneFailedException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>reflect</name>.
            <name>MethodUtils</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Operations on &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
        *
        * &lt;p&gt;This class tries to handle &lt;code&gt;null&lt;/code&gt; input gracefully.
        * An exception will generally not be thrown for a &lt;code&gt;null&lt;/code&gt; input.
        * Each method documents its behaviour in more detail.&lt;/p&gt;
        *
        * &lt;p&gt;#ThreadSafe#&lt;/p&gt;
        * @author Apache Software Foundation
        * @author &lt;a href="mailto:nissim@nksystems.com"&gt;Nissim Karpenstein&lt;/a&gt;
        * @author &lt;a href="mailto:janekdb@yahoo.co.uk"&gt;Janek Bogucki&lt;/a&gt;
        * @author Daniel L. Rall
        * @author Gary Gregory
        * @author Mario Winterer
        * @author &lt;a href="mailto:david@davidkarlsen.com"&gt;David J. M. Karlsen&lt;/a&gt;
        * @since 1.0
        * @version $Id: ObjectUtils.java 1057434 2011-01-11 01:27:37Z niallp $
        */
    </comment>
    <comment type="line">//@Immutable</comment>
    <class>
        <specifier>public</specifier>
        class <name>ObjectUtils</name>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;Singleton used as a &lt;code&gt;null&lt;/code&gt; placeholder where
                * &lt;code&gt;null&lt;/code&gt; has another meaning.&lt;/p&gt;
                *
                * &lt;p&gt;For example, in a &lt;code&gt;HashMap&lt;/code&gt; the
                * {@link java.util.HashMap#get(java.lang.Object)} method returns
                * &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;Map&lt;/code&gt; contains
                * &lt;code&gt;null&lt;/code&gt; or if there is no matching key. The
                * &lt;code&gt;Null&lt;/code&gt; placeholder can be used to distinguish between
                * these two cases.&lt;/p&gt;
                *
                * &lt;p&gt;Another example is &lt;code&gt;Hashtable&lt;/code&gt;, where &lt;code&gt;null&lt;/code&gt;
                * cannot be stored.&lt;/p&gt;
                *
                * &lt;p&gt;This instance is Serializable.&lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Null</name>
                    </type>
                    <name>NULL</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Null</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;&lt;code&gt;ObjectUtils&lt;/code&gt; instances should NOT be constructed in
                * standard programming. Instead, the class should be used as
                * &lt;code&gt;ObjectUtils.defaultIfNull("a","b");&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean instance
                * to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ObjectUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// Defaulting</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Returns a default value if the object passed is
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ObjectUtils.defaultIfNull(null, null) = null
                * ObjectUtils.defaultIfNull(null, "") = ""
                * ObjectUtils.defaultIfNull(null, "zz") = "zz"
                * ObjectUtils.defaultIfNull("abc", *) = "abc"
                * ObjectUtils.defaultIfNull(Boolean.TRUE, *) = Boolean.TRUE
                * &lt;/pre&gt;
                *
                * @param object the &lt;code&gt;Object&lt;/code&gt; to test, may be &lt;code&gt;null&lt;/code&gt;
                * @param defaultValue the default value to return, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;object&lt;/code&gt; if it is not &lt;code&gt;null&lt;/code&gt;, defaultValue
                otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>defaultIfNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>defaultValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>object</name>
                            != <name>null</name> ? <name>object</name> :
                            <name>defaultValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares two objects for equality, where either one or both
                * objects may be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ObjectUtils.equals(null, null) = true
                * ObjectUtils.equals(null, "") = false
                * ObjectUtils.equals("", null) = false
                * ObjectUtils.equals("", "") = true
                * ObjectUtils.equals(Boolean.TRUE, null) = false
                * ObjectUtils.equals(Boolean.TRUE, "true") = false
                * ObjectUtils.equals(Boolean.TRUE, Boolean.TRUE) = true
                * ObjectUtils.equals(Boolean.TRUE, Boolean.FALSE) = false
                * &lt;/pre&gt;
                *
                * @param object1 the first object, may be &lt;code&gt;null&lt;/code&gt;
                * @param object2 the second object, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the values of both objects are the same
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object1</name>
                                ==
                                <name>object2</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>(<name>object1</name> == <name>null</name>) || (<name>object2</name> == <name>
                                null</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>object1</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares two objects for inequality, where either one or both
                * objects may be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ObjectUtils.notEqual(null, null) = false
                * ObjectUtils.notEqual(null, "") = true
                * ObjectUtils.notEqual("", null) = true
                * ObjectUtils.notEqual("", "") = false
                * ObjectUtils.notEqual(Boolean.TRUE, null) = true
                * ObjectUtils.notEqual(Boolean.TRUE, "true") = true
                * ObjectUtils.notEqual(Boolean.TRUE, Boolean.TRUE) = false
                * ObjectUtils.notEqual(Boolean.TRUE, Boolean.FALSE) = true
                * &lt;/pre&gt;
                *
                * @param object1 the first object, may be &lt;code&gt;null&lt;/code&gt;
                * @param object2 the second object, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;false&lt;/code&gt; if the values of both objects are the same
                * @since 2.6
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>notEqual</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>ObjectUtils</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>object2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            == false
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the hash code of an object returning zero when the
                * object is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ObjectUtils.hashCode(null) = 0
                * ObjectUtils.hashCode(obj) = obj.hashCode()
                * &lt;/pre&gt;
                *
                * @param obj the object to obtain the hash code of, may be &lt;code&gt;null&lt;/code&gt;
                * @return the hash code of the object, or zero if null
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>obj</name> == <name>null</name>) ? 0 :
                            <call>
                                <name><name>obj</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Identity ToString</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the toString that would be produced by &lt;code&gt;Object&lt;/code&gt;
                * if a class did not override toString itself. &lt;code&gt;null&lt;/code&gt;
                * will return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ObjectUtils.identityToString(null) = null
                * ObjectUtils.identityToString("") = "java.lang.String@1e23"
                * ObjectUtils.identityToString(Boolean.TRUE) = "java.lang.Boolean@7fa"
                * &lt;/pre&gt;
                *
                * @param object the object to create a toString for, may be
                * &lt;code&gt;null&lt;/code&gt;
                * @return the default toString text, or &lt;code&gt;null&lt;/code&gt; if
                * &lt;code&gt;null&lt;/code&gt; passed in
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>identityToString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buffer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>identityToString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>buffer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buffer</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Appends the toString that would be produced by &lt;code&gt;Object&lt;/code&gt;
                * if a class did not override toString itself. &lt;code&gt;null&lt;/code&gt;
                * will throw a NullPointerException for either of the two parameters. &lt;/p&gt;
                *
                * &lt;pre&gt;
                * ObjectUtils.identityToString(buf, "") = buf.append("java.lang.String@1e23"
                * ObjectUtils.identityToString(buf, Boolean.TRUE) = buf.append("java.lang.Boolean@7fa"
                * ObjectUtils.identityToString(buf, Boolean.TRUE) = buf.append("java.lang.Boolean@7fa")
                * &lt;/pre&gt;
                *
                * @param buffer the buffer to append to
                * @param object the object to create a toString for
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>identityToString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Cannot get the toString of a null identity"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>buffer</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>object</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'@'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Integer</name>.
                                                    <name>toHexString</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.
                                                                    <name>identityHashCode</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>object</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Appends the toString that would be produced by &lt;code&gt;Object&lt;/code&gt;
                * if a class did not override toString itself. &lt;code&gt;null&lt;/code&gt;
                * will return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ObjectUtils.appendIdentityToString(*, null) = null
                * ObjectUtils.appendIdentityToString(null, "") = "java.lang.String@1e23"
                * ObjectUtils.appendIdentityToString(null, Boolean.TRUE) = "java.lang.Boolean@7fa"
                * ObjectUtils.appendIdentityToString(buf, Boolean.TRUE) = buf.append("java.lang.Boolean@7fa")
                * &lt;/pre&gt;
                *
                * @param buffer the buffer to append to, may be &lt;code&gt;null&lt;/code&gt;
                * @param object the object to create a toString for, may be &lt;code&gt;null&lt;/code&gt;
                * @return the default toString text, or &lt;code&gt;null&lt;/code&gt; if
                * &lt;code&gt;null&lt;/code&gt; passed in
                * @since 2.0
                * @deprecated The design of this method is bad - see LANG-360. Instead, use
                identityToString(StringBuffer, Object).
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StringBuffer</name>
                </type>
                <name>appendIdentityToString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>buffer</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>buffer</name>
                                        = new
                                        <call>
                                            <name>StringBuffer</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>
                                    <name>buffer</name>
                                    .
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>object</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'@'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Integer</name>.
                                                    <name>toHexString</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>System</name>.
                                                                    <name>identityHashCode</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>object</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ToString</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the &lt;code&gt;toString&lt;/code&gt; of an &lt;code&gt;Object&lt;/code&gt; returning
                * an empty string ("") if &lt;code&gt;null&lt;/code&gt; input.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ObjectUtils.toString(null) = ""
                * ObjectUtils.toString("") = ""
                * ObjectUtils.toString("bat") = "bat"
                * ObjectUtils.toString(Boolean.TRUE) = "true"
                * &lt;/pre&gt;
                *
                * @see StringUtils#defaultString(String)
                * @see String#valueOf(Object)
                * @param obj the Object to &lt;code&gt;toString&lt;/code&gt;, may be null
                * @return the passed in Object's toString, or nullStr if &lt;code&gt;null&lt;/code&gt; input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>obj</name>
                            == <name>null</name> ? "" :
                            <call>
                                <name><name>obj</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the &lt;code&gt;toString&lt;/code&gt; of an &lt;code&gt;Object&lt;/code&gt; returning
                * a specified text if &lt;code&gt;null&lt;/code&gt; input.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * ObjectUtils.toString(null, null) = null
                * ObjectUtils.toString(null, "null") = "null"
                * ObjectUtils.toString("", "null") = ""
                * ObjectUtils.toString("bat", "null") = "bat"
                * ObjectUtils.toString(Boolean.TRUE, "null") = "true"
                * &lt;/pre&gt;
                *
                * @see StringUtils#defaultString(String,String)
                * @see String#valueOf(Object)
                * @param obj the Object to &lt;code&gt;toString&lt;/code&gt;, may be null
                * @param nullStr the String to return if &lt;code&gt;null&lt;/code&gt; input, may be null
                * @return the passed in Object's toString, or nullStr if &lt;code&gt;null&lt;/code&gt; input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>nullStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>obj</name>
                            == <name>null</name> ? <name>nullStr</name> :
                            <call>
                                <name><name>obj</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Min/Max</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Null safe comparison of Comparables.
                *
                * @param c1 the first comparable, may be null
                * @param c2 the second comparable, may be null
                * @return
                * &lt;ul&gt;
                * &lt;li&gt;If both objects are non-null and unequal, the lesser object.
                * &lt;li&gt;If both objects are non-null and equal, c1.
                * &lt;li&gt;If one of the comparables is null, the non-null object.
                * &lt;li&gt;If both the comparables are null, null is returned.
                * &lt;/ul&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>min</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Comparable</name>
                            </type>
                            <name>c1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Comparable</name>
                            </type>
                            <name>c2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <call>
                                <name>compare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>c1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>c2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &lt;= 0 ? <name>c1</name> : <name>c2</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Null safe comparison of Comparables.
                *
                * @param c1 the first comparable, may be null
                * @param c2 the second comparable, may be null
                * @return
                * &lt;ul&gt;
                * &lt;li&gt;If both objects are non-null and unequal, the greater object.
                * &lt;li&gt;If both objects are non-null and equal, c1.
                * &lt;li&gt;If one of the comparables is null, the non-null object.
                * &lt;li&gt;If both the comparables are null, null is returned.
                * &lt;/ul&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>max</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Comparable</name>
                            </type>
                            <name>c1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Comparable</name>
                            </type>
                            <name>c2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <call>
                                <name>compare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>c1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>c2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &gt;= 0 ? <name>c1</name> : <name>c2</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Null safe comparison of Comparables.
                * {@code null} is assumed to be less than a non-{@code null} value.
                *
                * @param c1 the first comparable, may be null
                * @param c2 the second comparable, may be null
                * @return a negative value if c1 &lt; c2, zero if c1 = c2
                * and a positive value if c1 &gt; c2
                * @since 2.6
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>compare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Comparable</name>
                            </type>
                            <name>c1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Comparable</name>
                            </type>
                            <name>c2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>compare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>c1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>c2</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Null safe comparison of Comparables.
                *
                * @param c1 the first comparable, may be null
                * @param c2 the second comparable, may be null
                * @param nullGreater if true &lt;code&gt;null&lt;/code&gt; is considered greater
                * than a Non-&lt;code&gt;null&lt;/code&gt; value or if false &lt;code&gt;null&lt;/code&gt; is
                * considered less than a Non-&lt;code&gt;null&lt;/code&gt; value
                * @return a negative value if c1 &lt; c2, zero if c1 = c2
                * and a positive value if c1 &gt; c2
                * @see java.util.Comparator#compare(Object, Object)
                * @since 2.6
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>compare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Comparable</name>
                            </type>
                            <name>c1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Comparable</name>
                            </type>
                            <name>c2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>nullGreater</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>c1</name>
                                ==
                                <name>c2</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>c1</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>(<name>nullGreater</name> ? 1 : -1)
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>c2</name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>(<name>nullGreater</name> ? -1 : 1)
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>c1</name>.
                                    <name>compareTo</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>c2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Clone an object.
                *
                * @param o the object to clone
                * @return the clone if the object implements {@link Cloneable} otherwise &lt;code&gt;null&lt;/code&gt;
                * @throws CloneFailedException if the object is cloneable and the clone operation fails
                * @since 2.6
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>o</name>
                                <name>instanceof</name>
                                <name>Cloneable</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <specifier>final</specifier>
                                            <name>Object</name>
                                        </type>
                                        <name>result</name>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>o</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>isArray</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <specifier>final</specifier>
                                                        <name>Class</name>
                                                    </type>
                                                    <name>componentType</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>o</name>.
                                                                    <name>getClass</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>getComponentType</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>!
                                                        <call>
                                                            <name><name>componentType</name>.
                                                                <name>isPrimitive</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>result</name>
                                                                = ((
                                                                <name>
                                                                    <name>Object</name>
                                                                    <index>[]</index>
                                                                </name>
                                                                )<name>o</name>).
                                                                <call>
                                                                    <name>clone</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>length</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>Array</name>.
                                                                                <name>getLength</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>o</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>result</name>
                                                                =
                                                                <call>
                                                                    <name><name>Array</name>.
                                                                        <name>newInstance</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>componentType</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>length</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <while>while
                                                            <condition>(
                                                                <expr><name>length</name>-- &gt; 0
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>Array</name>.
                                                                                <name>set</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>result</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>length</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>Array</name>.
                                                                                                <name>get</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>o</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>length
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </while>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <try>try
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>result</name>
                                                            =
                                                            <call>
                                                                <name><name>MethodUtils</name>.
                                                                    <name>invokeMethod</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>o</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>"clone"</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>null</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <specifier>final</specifier>
                                                                <name>NoSuchMethodException</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>CloneFailedException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Cloneable type "
                                                                                +
                                                                                <call>
                                                                                    <name><name>o</name>.
                                                                                        <name>getClass</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                                .
                                                                                <call>
                                                                                    <name>getName</name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                                + " has no clone method"
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>e</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </catch>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <specifier>final</specifier>
                                                                <name>IllegalAccessException</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>CloneFailedException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Cannot clone Cloneable type "
                                                                                +
                                                                                <call>
                                                                                    <name><name>o</name>.
                                                                                        <name>getClass</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                                .
                                                                                <call>
                                                                                    <name>getName</name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>e</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </catch>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <specifier>final</specifier>
                                                                <name>InvocationTargetException</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>CloneFailedException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>"Exception cloning Cloneable type "
                                                                                +
                                                                                <call>
                                                                                    <name><name>o</name>.
                                                                                        <name>getClass</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                                .
                                                                                <call>
                                                                                    <name>getName</name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>e</name>.
                                                                                        <name>getTargetException</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <return>return
                                    <expr>
                                        <name>result</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Clone an object if possible. This method is similar to {@link #clone(Object)}, but will
                * return the provided instance as the return value instead of &lt;code&gt;null&lt;/code&gt; if the
                instance
                * is not cloneable. This is more convenient if the caller uses different
                * implementations (e.g. of a service) and some of the implementations do not allow concurrent
                * processing or have state. In such cases the implementation can simply provide a proper
                * clone implementation and the caller's code does not have to change.
                *
                * @param o the object to clone
                * @return the clone if the object implements {@link Cloneable} otherwise the object itself
                * @throws CloneFailedException if the object is cloneable and the clone operation fails
                * @since 2.6
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>cloneIfPossible</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Object</name>
                            </type>
                            <name>clone</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>clone</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>o</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>clone</name>
                            == <name>null</name> ? <name>o</name> :
                            <name>clone</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Null</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Class used as a null placeholder where &lt;code&gt;null&lt;/code&gt;
                * has another meaning.&lt;/p&gt;
                *
                * &lt;p&gt;For example, in a &lt;code&gt;HashMap&lt;/code&gt; the
                * {@link java.util.HashMap#get(java.lang.Object)} method returns
                * &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;Map&lt;/code&gt; contains
                * &lt;code&gt;null&lt;/code&gt; or if there is no matching key. The
                * &lt;code&gt;Null&lt;/code&gt; placeholder can be used to distinguish between
                * these two cases.&lt;/p&gt;
                *
                * &lt;p&gt;Another example is &lt;code&gt;Hashtable&lt;/code&gt;, where &lt;code&gt;null&lt;/code&gt;
                * cannot be stored.&lt;/p&gt;
                */
            </comment>
            <class>
                <specifier>public</specifier>
                <specifier>static</specifier> class <name>Null</name>
                <super>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{
                    <comment type="javadoc">/**
                        * Required for serialization support. Declare serialization compatibility with Commons Lang 1.0
                        *
                        * @see java.io.Serializable
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>7092611880189329093L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Restricted constructor - singleton.
                        */
                    </comment>
                    <constructor>
                        <name>Null</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * &lt;p&gt;Ensure singleton.&lt;/p&gt;
                        *
                        * @return the singleton value
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>Object</name>
                        </type>
                        <name>readResolve</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>ObjectUtils</name>.
                                        <name>NULL</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            }
        </block>
    </class>
</unit>
