<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\RandomStringUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Random</name>
        </name>
        ;
    </import>
    <comment type="javadoc">/**
        * &lt;p&gt;Operations for random &lt;code&gt;String&lt;/code&gt;s.&lt;/p&gt;
        * &lt;p&gt;Currently &lt;em&gt;private high surrogate&lt;/em&gt; characters are ignored.
        * These are unicode characters that fall between the values 56192 (db80)
        * and 56319 (dbff) as we don't know how to handle them.
        * High and low surrogates are correctly dealt with - that is if a
        * high surrogate is randomly chosen, 55296 (d800) to 56191 (db7f)
        * then it is followed by a low surrogate. If a low surrogate is chosen,
        * 56320 (dc00) to 57343 (dfff) then it is placed after a randomly
        * chosen high surrogate. &lt;/p&gt;
        *
        * &lt;p&gt;#ThreadSafe#&lt;/p&gt;
        * @author Apache Software Foundation
        * @author &lt;a href="mailto:steven@caswell.name"&gt;Steven Caswell&lt;/a&gt;
        * @author Gary Gregory
        * @author Phil Steitz
        * @since 1.0
        * @version $Id: RandomStringUtils.java 1056988 2011-01-09 17:58:53Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>RandomStringUtils</name>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;Random object used by random method. This has to be not local
                * to the random method so as to not return the same value in the
                * same millisecond.&lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Random</name>
                    </type>
                    <name>RANDOM</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Random</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;&lt;code&gt;RandomStringUtils&lt;/code&gt; instances should NOT be constructed in
                * standard programming. Instead, the class should be used as
                * &lt;code&gt;RandomStringUtils.random(5);&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean instance
                * to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>RandomStringUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// Random</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string whose length is the number of characters
                * specified.&lt;/p&gt;
                *
                * &lt;p&gt;Characters will be chosen from the set of all characters.&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @return the random string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>random</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>random</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string whose length is the number of characters
                * specified.&lt;/p&gt;
                *
                * &lt;p&gt;Characters will be chosen from the set of characters whose
                * ASCII value is between &lt;code&gt;32&lt;/code&gt; and &lt;code&gt;126&lt;/code&gt; (inclusive).&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @return the random string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>randomAscii</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>random</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>32</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>127</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string whose length is the number of characters
                * specified.&lt;/p&gt;
                *
                * &lt;p&gt;Characters will be chosen from the set of alphabetic
                * characters.&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @return the random string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>randomAlphabetic</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>random</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string whose length is the number of characters
                * specified.&lt;/p&gt;
                *
                * &lt;p&gt;Characters will be chosen from the set of alpha-numeric
                * characters.&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @return the random string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>randomAlphanumeric</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>random</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string whose length is the number of characters
                * specified.&lt;/p&gt;
                *
                * &lt;p&gt;Characters will be chosen from the set of numeric
                * characters.&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @return the random string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>randomNumeric</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>random</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string whose length is the number of characters
                * specified.&lt;/p&gt;
                *
                * &lt;p&gt;Characters will be chosen from the set of alpha-numeric
                * characters as indicated by the arguments.&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @param letters if &lt;code&gt;true&lt;/code&gt;, generated string will include
                * alphabetic characters
                * @param numbers if &lt;code&gt;true&lt;/code&gt;, generated string will include
                * numeric characters
                * @return the random string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>random</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>letters</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>numbers</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>random</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>letters</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>numbers</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string whose length is the number of characters
                * specified.&lt;/p&gt;
                *
                * &lt;p&gt;Characters will be chosen from the set of alpha-numeric
                * characters as indicated by the arguments.&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @param start the position in set of chars to start at
                * @param end the position in set of chars to end before
                * @param letters if &lt;code&gt;true&lt;/code&gt;, generated string will include
                * alphabetic characters
                * @param numbers if &lt;code&gt;true&lt;/code&gt;, generated string will include
                * numeric characters
                * @return the random string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>random</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>letters</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>numbers</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>random</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>end</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>letters</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>numbers</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>RANDOM</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string based on a variety of options, using
                * default source of randomness.&lt;/p&gt;
                *
                * &lt;p&gt;This method has exactly the same semantics as
                * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but
                * instead of using an externally supplied source of randomness, it uses
                * the internal static {@link Random} instance.&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @param start the position in set of chars to start at
                * @param end the position in set of chars to end before
                * @param letters only allow letters?
                * @param numbers only allow numbers?
                * @param chars the set of chars to choose randoms from.
                * If &lt;code&gt;null&lt;/code&gt;, then it will use the set of all chars.
                * @return the random string
                * @throws ArrayIndexOutOfBoundsException if there are not
                * &lt;code&gt;(end - start) + 1&lt;/code&gt; characters in the set array.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>random</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>letters</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>numbers</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>random</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>end</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>letters</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>numbers</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>RANDOM</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string based on a variety of options, using
                * supplied source of randomness.&lt;/p&gt;
                *
                * &lt;p&gt;If start and end are both &lt;code&gt;0&lt;/code&gt;, start and end are set
                * to &lt;code&gt;' '&lt;/code&gt; and &lt;code&gt;'z'&lt;/code&gt;, the ASCII printable
                * characters, will be used, unless letters and numbers are both
                * &lt;code&gt;false&lt;/code&gt;, in which case, start and end are set to
                * &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.
                *
                * &lt;p&gt;If set is not &lt;code&gt;null&lt;/code&gt;, characters between start and
                * end are chosen.&lt;/p&gt;
                *
                * &lt;p&gt;This method accepts a user-supplied {@link Random}
                * instance to use as a source of randomness. By seeding a single
                * {@link Random} instance with a fixed seed and using it for each call,
                * the same random sequence of strings can be generated repeatedly
                * and predictably.&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @param start the position in set of chars to start at
                * @param end the position in set of chars to end before
                * @param letters only allow letters?
                * @param numbers only allow numbers?
                * @param chars the set of chars to choose randoms from.
                * If &lt;code&gt;null&lt;/code&gt;, then it will use the set of all chars.
                * @param random a source of randomness.
                * @return the random string
                * @throws ArrayIndexOutOfBoundsException if there are not
                * &lt;code&gt;(end - start) + 1&lt;/code&gt; characters in the set array.
                * @throws IllegalArgumentException if &lt;code&gt;count&lt;/code&gt; &amp;lt; 0.
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>random</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>letters</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>numbers</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Random</name>
                            </type>
                            <name>random</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>count</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>count</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Requested random string length " + <name>count</name> +
                                                                " is less than 0."
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>(<name>start</name> == 0) &amp;&amp; (<name>end</name> == 0)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>end</name>
                                        = 'z' + 1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>start</name>
                                        = ' '
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>!<name>letters</name> &amp;&amp; !
                                            <name>numbers</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>start</name>
                                                    = 0
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>end</name>
                                                    =
                                                    <name><name>Integer</name>.
                                                        <name>MAX_VALUE</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>buffer</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>char</name>
                                        <index>[
                                            <expr>
                                                <name>count</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>gap</name> =
                            <init>
                                <expr>
                                    <name>end</name>
                                    -
                                    <name>start</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr><name>count</name>-- != 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>chars</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ch</name>
                                                =
                                                <call>(<name>char</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>random</name>.
                                                                        <name>nextInt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>gap</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                +
                                                                <name>start</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ch</name>
                                                =
                                                <name>
                                                    <name>chars</name>
                                                    <index>[
                                                        <expr>
                                                            <call>
                                                                <name><name>random</name>.
                                                                    <name>nextInt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>gap</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            +
                                                            <name>start</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>(<name>letters</name> &amp;&amp;
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isLetter</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ch</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                        || (<name>numbers</name> &amp;&amp;
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isDigit</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ch</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                        || (!<name>letters</name> &amp;&amp; !<name>numbers</name>)
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>ch</name>
                                                    &gt;= 56320 &amp;&amp; <name>ch</name> &lt;= 57343
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>count</name>
                                                                == 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr><name>count</name>++
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <block>{
                                                                <comment type="line">// low surrogate, insert high
                                                                    surrogate after putting it in
                                                                </comment>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>buffer</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>count</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                        =
                                                                        <name>ch</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr><name>count</name>--
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>buffer</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>count</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                        =
                                                                        <call>(<name>char</name>)
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>55296 +
                                                                                        <call>
                                                                                            <name><name>random</name>.
                                                                                                <name>nextInt</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>128</expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </else>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>ch</name>
                                                            &gt;= 55296 &amp;&amp; <name>ch</name> &lt;= 56191
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>count</name>
                                                                        == 0
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr><name>count</name>++
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                                <else>else
                                                                    <block>{
                                                                        <comment type="line">// high surrogate, insert
                                                                            low surrogate before putting it in
                                                                        </comment>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>
                                                                                    <name>buffer</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>count</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                                =
                                                                                <call>(<name>char</name>)
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>56320 +
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        random</name>.
                                                                                                        <name>nextInt
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>128
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr><name>count</name>--
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>
                                                                                    <name>buffer</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name>count</name>
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                                =
                                                                                <name>ch</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </else>
                                                            </if>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>ch</name>
                                                                    &gt;= 56192 &amp;&amp; <name>ch</name> &lt;= 56319
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <comment type="line">// private high surrogate, no
                                                                        effing clue, so skip it
                                                                    </comment>
                                                                    <expr_stmt>
                                                                        <expr><name>count</name>++
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>
                                                                                <name>buffer</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>count</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            =
                                                                            <name>ch</name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>count</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>new
                            <call>
                                <name>String</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>buffer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string whose length is the number of characters
                * specified.&lt;/p&gt;
                *
                * &lt;p&gt;Characters will be chosen from the set of characters
                * specified.&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @param chars the String containing the set of characters to use,
                * may be null
                * @return the random string
                * @throws IllegalArgumentException if &lt;code&gt;count&lt;/code&gt; &amp;lt; 0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>random</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>chars</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>random</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>count</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>RANDOM</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>random</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>chars</name>.
                                                    <name>toCharArray</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Creates a random string whose length is the number of characters
                * specified.&lt;/p&gt;
                *
                * &lt;p&gt;Characters will be chosen from the set of characters specified.&lt;/p&gt;
                *
                * @param count the length of random string to create
                * @param chars the character array containing the set of characters to use,
                * may be null
                * @return the random string
                * @throws IllegalArgumentException if &lt;code&gt;count&lt;/code&gt; &amp;lt; 0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>random</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>chars</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>random</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>count</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>RANDOM</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>random</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>chars</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>RANDOM</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
