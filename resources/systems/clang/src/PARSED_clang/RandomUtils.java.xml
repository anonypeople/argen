<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\math\RandomUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one
        * or more contributor license agreements. See the NOTICE file
        * distributed with this work for additional information
        * regarding copyright ownership. The ASF licenses this file
        * to you under the Apache License, Version 2.0 (the
        * "License"); you may not use this file except in compliance
        * with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing,
        * software distributed under the License is distributed on an
        * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        * KIND, either express or implied. See the License for the
        * specific language governing permissions and limitations
        * under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>math</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Random</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;&lt;code&gt;RandomUtils&lt;/code&gt; is a wrapper that supports all possible
        * {@link java.util.Random} methods via the {@link java.lang.Math#random()}
        * method and its system-wide &lt;code&gt;Random&lt;/code&gt; object.
        *
        * @author Gary D. Gregory
        * @since 2.0
        * @version $Id: RandomUtils.java 906320 2010-02-04 01:41:10Z sebb $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>RandomUtils</name>
        <block>{

            <comment type="javadoc">/**
                * An instance of {@link JVMRandom}.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Random</name>
                    </type>
                    <name>JVM_RANDOM</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>JVMRandom</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// should be possible for JVM_RANDOM?</comment>
            <comment type="line">// public static void nextBytes(byte[]) {</comment>
            <comment type="line">// public synchronized double nextGaussian();</comment>
            <comment type="line">// }</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed int value
                * from the Math.random() sequence.&lt;/p&gt;
                * &lt;b&gt;N.B. All values are &gt;= 0.&lt;b&gt;
                * @return the random int
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>nextInt</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>JVM_RANDOM</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed int value
                * from the given &lt;code&gt;random&lt;/code&gt; sequence.&lt;/p&gt;
                *
                * @param random the Random sequence generator.
                * @return the random int
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>nextInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Random</name>
                            </type>
                            <name>random</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>random</name>.
                                    <name>nextInt</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns a pseudorandom, uniformly distributed int value
                * between &lt;code&gt;0&lt;/code&gt; (inclusive) and the specified value
                * (exclusive), from the Math.random() sequence.&lt;/p&gt;
                *
                * @param n the specified exclusive max-value
                * @return the random int
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>nextInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>JVM_RANDOM</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns a pseudorandom, uniformly distributed int value
                * between &lt;code&gt;0&lt;/code&gt; (inclusive) and the specified value
                * (exclusive), from the given Random sequence.&lt;/p&gt;
                *
                * @param random the Random sequence generator.
                * @param n the specified exclusive max-value
                * @return the random int
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>nextInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Random</name>
                            </type>
                            <name>random</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// check this cannot return 'n'</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>random</name>.
                                    <name>nextInt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed long value
                * from the Math.random() sequence.&lt;/p&gt;
                * &lt;b&gt;N.B. All values are &gt;= 0.&lt;b&gt;
                * @return the random long
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>nextLong</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>JVM_RANDOM</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed long value
                * from the given Random sequence.&lt;/p&gt;
                *
                * @param random the Random sequence generator.
                * @return the random long
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>nextLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Random</name>
                            </type>
                            <name>random</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>random</name>.
                                    <name>nextLong</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed boolean value
                * from the Math.random() sequence.&lt;/p&gt;
                *
                * @return the random boolean
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>nextBoolean</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextBoolean</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>JVM_RANDOM</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed boolean value
                * from the given random sequence.&lt;/p&gt;
                *
                * @param random the Random sequence generator.
                * @return the random boolean
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>nextBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Random</name>
                            </type>
                            <name>random</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>random</name>.
                                    <name>nextBoolean</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed float value
                * between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; from the Math.random()
                * sequence.&lt;/p&gt;
                *
                * @return the random float
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                </type>
                <name>nextFloat</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextFloat</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>JVM_RANDOM</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed float value
                * between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; from the given Random
                * sequence.&lt;/p&gt;
                *
                * @param random the Random sequence generator.
                * @return the random float
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                </type>
                <name>nextFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Random</name>
                            </type>
                            <name>random</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>random</name>.
                                    <name>nextFloat</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed float value
                * between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; from the Math.random()
                * sequence.&lt;/p&gt;
                *
                * @return the random double
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>nextDouble</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextDouble</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>JVM_RANDOM</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns the next pseudorandom, uniformly distributed float value
                * between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; from the given Random
                * sequence.&lt;/p&gt;
                *
                * @param random the Random sequence generator.
                * @return the random double
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>nextDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Random</name>
                            </type>
                            <name>random</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>random</name>.
                                    <name>nextDouble</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
