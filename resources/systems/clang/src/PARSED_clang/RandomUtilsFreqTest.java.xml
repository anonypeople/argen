<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\test\java\org\apache\commons\lang\math\RandomUtilsFreqTest.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>math</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Random</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>junit</name>.<name>framework</name>.
            <name>TestCase</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Test cases for the {@link RandomUtils} class.
        *
        * @author &lt;a href="mailto:phil@steitz.com"&gt;Phil Steitz&lt;/a&gt;
        * @version $Revision: 912374 $ $Date: 2010-02-21 17:20:57 +0000 (Sun, 21 Feb 2010) $
        */
    </comment>

    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>RandomUtilsFreqTest</name>
        <super>
            <extends>extends
                <name>TestCase</name>
            </extends>
        </super>
        <block>{

            <constructor>
                <specifier>public</specifier>
                <name>RandomUtilsFreqTest</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testNextIntBound</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>10</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1&lt;&lt;8</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(1&lt;&lt;8)+1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(1&lt;&lt;8)-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1&lt;&lt;30</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(1&lt;&lt;30)-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(1&lt;&lt;30)+1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Random</name>
                            </type>
                            <name>rnd</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Random</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;10
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>tstNextInt</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>rnd</name>.
                                                            <name>nextInt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>Integer</name>.
                                                                        <name>MAX_VALUE</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testNextLongBound</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                            -1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>long</name>)
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                            +1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Long</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                            /1024
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Long</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                            /920
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Long</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                            /1000
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Long</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                            /512
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Long</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                            /64
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Long</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                            -1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>tstNextLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Long</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Random</name>
                            </type>
                            <name>rnd</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Random</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;10
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>tstNextLong</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>rnd</name>.
                                                            <name>nextInt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>Integer</name>.
                                                                        <name>MAX_VALUE</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;10
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>tstNextLong</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>rnd</name>.
                                                            <name>nextLong</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    &amp; 0x7fffffffffffffffL
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Generate 1000 values for nextInt(bound) and compare
                * the observed frequency counts to expected counts using
                * a chi-square test.
                * @param bound upper bound to use
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>tstNextInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bound</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertTrue</name>
                                <argument_list>(
                                    <argument>
                                        <expr><name>bound</name>+" Must be non-negative"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr><name>bound</name>&gt;=0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Random</name>
                            </type>
                            <name>rnd</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Random</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// test uniformity -- use Chi-Square test at .01 level</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>expected</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{<expr>500</expr>,<expr>500</expr>}
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>observed</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{<expr>0</expr>,<expr>0</expr>}
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>observed2</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{<expr>0</expr>,<expr>0</expr>}
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt; 1000
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>i</name>
                                ++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>result</name>
                                    =
                                    <call>
                                        <name><name>rnd</name>.
                                            <name>nextInt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bound</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>assertTrue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr><name>result</name>+" Must be non-negative"
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr><name>result</name>&gt;=0
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>assertTrue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr><name>result</name>+" Must be less than bound: "+
                                                    <name>bound</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr><name>result</name>&lt;
                                                    <name>bound</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>result</name>
                                        &lt; <name>bound</name>/2
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>observed</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                ++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>observed</name>
                                                    <index>[<expr>1</expr>]
                                                    </index>
                                                </name>
                                                ++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>observed2</name>
                                        <index>[
                                            <expr><name>result</name>%2
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    ++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <comment type="block">/* Use ChiSquare dist with df = 2-1 = 1, alpha = .001
                        * Change to 6.64 for alpha = .01
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>chiSquare</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>chiSquare</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>expected</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>observed</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertTrue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"mid point chi-square test -- will fail about 1 in 1000 times: "+
                                            <name>chiSquare</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chiSquare</name>
                                            &lt; 10.83
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>chiSquare</name>
                            =
                            <call>
                                <name>chiSquare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>expected</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>observed2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertTrue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"odd/even chi-square test -- will fail about 1 in 1000 times: "+
                                            <name>chiSquare</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chiSquare</name>
                                            &lt; 10.83
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Generate 1000 values for nextInt(bound) and compare
                * the observed frequency counts to expected counts using
                * a chi-square test.
                * @param bound upper bound to use
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>tstNextLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>bound</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Distribution</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>expected</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{<expr>500</expr>,<expr>500</expr>}
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>observed</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{<expr>0</expr>,<expr>0</expr>}
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Even/Odd</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>expected2</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{<expr>500</expr>,<expr>500</expr>}
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>observed2</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{<expr>0</expr>,<expr>0</expr>}
                                    </block>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>midPoint</name> =
                            <init>
                                <expr><name>bound</name>/2
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt; 1000
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>i</name>
                                ++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>result</name>
                                    =
                                    <call>
                                        <name><name>JVMRandom</name>.
                                            <name>nextLong</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bound</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>assertTrue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr><name>result</name>+" Must be non-negative"
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr><name>result</name>&gt;=0
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>assertTrue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr><name>result</name>+" Must be less than bound: "+
                                                    <name>bound</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr><name>result</name>&lt;
                                                    <name>bound</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>result</name>
                                        &lt;
                                        <name>midPoint</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>observed</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                ++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>observed</name>
                                                    <index>[<expr>1</expr>]
                                                    </index>
                                                </name>
                                                ++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>result</name>
                                        % 2 == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>observed2</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                ++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>observed2</name>
                                                    <index>[<expr>1</expr>]
                                                    </index>
                                                </name>
                                                ++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <comment type="block">/* Use ChiSquare dist with df = 2-1 = 1, alpha = .001
                        * Change to 6.64 for alpha = .01
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>double</name>
                            </type>
                            <name>chiSquare</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>chiSquare</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>expected</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>observed</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertTrue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"mid point chi-square test -- will fail about 1 in 1000 times: "
                                            +<name>chiSquare</name>+":"+
                                            <name>
                                                <name>observed</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            +","+
                                            <name>
                                                <name>observed</name>
                                                <index>[<expr>1</expr>]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>chiSquare</name>
                                            &lt; 10.83
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>double</name>
                            </type>
                            <name>oddEven</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>chiSquare</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>expected2</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>observed2</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertTrue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"odd/even chi-square test -- will fail about 1 in 1000 times: "
                                            +<name>oddEven</name>+":"+
                                            <name>
                                                <name>observed2</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            +","+
                                            <name>
                                                <name>observed2</name>
                                                <index>[<expr>1</expr>]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>oddEven</name>
                                            &lt; 10.83
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Computes Chi-Square statistic given observed and expected counts
                * @param observed array of observed frequency counts
                * @param expected array of expected frequency counts
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>double</name>
                </type>
                <name>chiSquare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>observed</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumSq</name> =
                            <init>
                                <expr>0.0d</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>dev</name> =
                            <init>
                                <expr>0.0d</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name><name>observed</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>dev</name>
                                    =
                                    <call>(<name>double</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>observed</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    -
                                                    <name>
                                                        <name>expected</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumSq</name>
                                    += <name>dev</name>*<name>dev</name>/(<name>double</name>)
                                    <name>
                                        <name>expected</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>sumSq</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
