<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\math\Range.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>math</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>text</name>.
            <name>StrBuilder</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;&lt;code&gt;Range&lt;/code&gt; represents a range of numbers of the same type.&lt;/p&gt;
        *
        * &lt;p&gt;Specific subclasses hold the range values as different types. Each
        * subclass should be immutable and {@link java.io.Serializable Serializable}
        * if possible.&lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @since 2.0
        * @version $Id: Range.java 1057072 2011-01-10 01:55:57Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>Range</name>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;Constructs a new range.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>Range</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// Accessors</comment>
            <comment type="line">//--------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the minimum number in this range.&lt;/p&gt;
                *
                * @return the minimum number in this range
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>Number</name>
                </type>
                <name>getMinimumNumber</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the minimum number in this range as a &lt;code&gt;long&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumNumber()} method.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @return the minimum number in this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getMinimumLong</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getMinimumNumber</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>longValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the minimum number in this range as a &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumNumber()} method.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @return the minimum number in this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getMinimumInteger</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getMinimumNumber</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>intValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the minimum number in this range as a &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumNumber()} method.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @return the minimum number in this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>getMinimumDouble</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getMinimumNumber</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>doubleValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the minimum number in this range as a &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumNumber()} method.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @return the minimum number in this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>float</name>
                </type>
                <name>getMinimumFloat</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getMinimumNumber</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>floatValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the maximum number in this range.&lt;/p&gt;
                *
                * @return the maximum number in this range
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>Number</name>
                </type>
                <name>getMaximumNumber</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the maximum number in this range as a &lt;code&gt;long&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMaximumNumber()} method.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @return the maximum number in this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getMaximumLong</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getMaximumNumber</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>longValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the maximum number in this range as a &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMaximumNumber()} method.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @return the maximum number in this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getMaximumInteger</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getMaximumNumber</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>intValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the maximum number in this range as a &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMaximumNumber()} method.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @return the maximum number in this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>getMaximumDouble</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getMaximumNumber</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>doubleValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the maximum number in this range as a &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMaximumNumber()} method.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @return the maximum number in this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>float</name>
                </type>
                <name>getMaximumFloat</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getMaximumNumber</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>floatValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Include tests</comment>
            <comment type="line">//--------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified &lt;code&gt;Number&lt;/code&gt; occurs within
                * this range.&lt;/p&gt;
                *
                * &lt;p&gt;The exact comparison implementation varies by subclass. It is
                * intended that an &lt;code&gt;int&lt;/code&gt; specific subclass will compare using
                * &lt;code&gt;int&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is handled and returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * @param number the number to test, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the specified number occurs within this range
                * @throws IllegalArgumentException if the &lt;code&gt;Number&lt;/code&gt; cannot be compared
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>boolean</name>
                </type>
                <name>containsNumber</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Number</name>
                            </type>
                            <name>number</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified &lt;code&gt;Number&lt;/code&gt; occurs within
                * this range using &lt;code&gt;long&lt;/code&gt; comparison..&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is handled and returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation forwards to the {@link #containsLong(long)} method.&lt;/p&gt;
                *
                * @param value the long to test, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the specified number occurs within this
                * range by &lt;code&gt;long&lt;/code&gt; comparison
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Number</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>containsLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>value</name>.
                                                    <name>longValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified &lt;code&gt;long&lt;/code&gt; occurs within
                * this range using &lt;code&gt;long&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumLong()} and
                * {@link #getMaximumLong()} methods and should be good for most uses.&lt;/p&gt;
                *
                * @param value the long to test
                * @return &lt;code&gt;true&lt;/code&gt; if the specified number occurs within this
                * range by &lt;code&gt;long&lt;/code&gt; comparison
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                            &gt;=
                            <call>
                                <name>getMinimumLong</name>
                                <argument_list>()</argument_list>
                            </call>
                            &amp;&amp; <name>value</name> &lt;=
                            <call>
                                <name>getMaximumLong</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified &lt;code&gt;Number&lt;/code&gt; occurs within
                * this range using &lt;code&gt;int&lt;/code&gt; comparison..&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is handled and returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation forwards to the {@link #containsInteger(int)} method.&lt;/p&gt;
                *
                * @param value the integer to test, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the specified number occurs within this
                * range by &lt;code&gt;int&lt;/code&gt; comparison
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Number</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>containsInteger</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>value</name>.
                                                    <name>intValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified &lt;code&gt;int&lt;/code&gt; occurs within
                * this range using &lt;code&gt;int&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumInteger()} and
                * {@link #getMaximumInteger()} methods and should be good for most uses.&lt;/p&gt;
                *
                * @param value the int to test
                * @return &lt;code&gt;true&lt;/code&gt; if the specified number occurs within this
                * range by &lt;code&gt;int&lt;/code&gt; comparison
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                            &gt;=
                            <call>
                                <name>getMinimumInteger</name>
                                <argument_list>()</argument_list>
                            </call>
                            &amp;&amp; <name>value</name> &lt;=
                            <call>
                                <name>getMaximumInteger</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified &lt;code&gt;Number&lt;/code&gt; occurs within
                * this range using &lt;code&gt;double&lt;/code&gt; comparison..&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is handled and returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation forwards to the {@link #containsDouble(double)} method.&lt;/p&gt;
                *
                * @param value the double to test, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the specified number occurs within this
                * range by &lt;code&gt;double&lt;/code&gt; comparison
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Number</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>containsDouble</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>value</name>.
                                                    <name>doubleValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified &lt;code&gt;double&lt;/code&gt; occurs within
                * this range using &lt;code&gt;double&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumDouble()} and
                * {@link #getMaximumDouble()} methods and should be good for most uses.&lt;/p&gt;
                *
                * @param value the double to test
                * @return &lt;code&gt;true&lt;/code&gt; if the specified number occurs within this
                * range by &lt;code&gt;double&lt;/code&gt; comparison
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>compareMin</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>NumberUtils</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>getMinimumDouble</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>compareMax</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>NumberUtils</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>getMaximumDouble</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>compareMin</name>
                            &lt;= 0 &amp;&amp; <name>compareMax</name> &gt;= 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified &lt;code&gt;Number&lt;/code&gt; occurs within
                * this range using &lt;code&gt;float&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is handled and returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation forwards to the {@link #containsFloat(float)} method.&lt;/p&gt;
                *
                * @param value the float to test, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the specified number occurs within this
                * range by &lt;code&gt;float&lt;/code&gt; comparison
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Number</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>containsFloat</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>value</name>.
                                                    <name>floatValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified &lt;code&gt;float&lt;/code&gt; occurs within
                * this range using &lt;code&gt;float&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumFloat()} and
                * {@link #getMaximumFloat()} methods and should be good for most uses.&lt;/p&gt;
                *
                * @param value the float to test
                * @return &lt;code&gt;true&lt;/code&gt; if the specified number occurs within this
                * range by &lt;code&gt;float&lt;/code&gt; comparison
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>compareMin</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>NumberUtils</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>getMinimumFloat</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>compareMax</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>NumberUtils</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>getMaximumFloat</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>compareMin</name>
                            &lt;= 0 &amp;&amp; <name>compareMax</name> &gt;= 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Range tests</comment>
            <comment type="line">//--------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified range occurs entirely within this range.&lt;/p&gt;
                *
                * &lt;p&gt;The exact comparison implementation varies by subclass. It is
                * intended that an &lt;code&gt;int&lt;/code&gt; specific subclass will compare using
                * &lt;code&gt;int&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is handled and returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #containsNumber(Number)} method.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @param range the range to test, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the specified range occurs entirely within
                * this range; otherwise, &lt;code&gt;false&lt;/code&gt;
                * @throws IllegalArgumentException if the &lt;code&gt;Range&lt;/code&gt; cannot be compared
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Range</name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>range</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>containsNumber</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>range</name>.
                                                    <name>getMinimumNumber</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name>containsNumber</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>range</name>.
                                                    <name>getMaximumNumber</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests whether the specified range overlaps with this range.&lt;/p&gt;
                *
                * &lt;p&gt;The exact comparison implementation varies by subclass. It is
                * intended that an &lt;code&gt;int&lt;/code&gt; specific subclass will compare using
                * &lt;code&gt;int&lt;/code&gt; comparison.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is handled and returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #containsNumber(Number)} and
                * {@link #containsRange(Range)} methods.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @param range the range to test, may be &lt;code&gt;null&lt;/code&gt;
                * @return &lt;code&gt;true&lt;/code&gt; if the specified range overlaps with this
                * range; otherwise, &lt;code&gt;false&lt;/code&gt;
                * @throws IllegalArgumentException if the &lt;code&gt;Range&lt;/code&gt; cannot be compared
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>overlapsRange</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Range</name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>range</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>range</name>.
                                    <name>containsNumber</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getMinimumNumber</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name><name>range</name>.
                                    <name>containsNumber</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getMaximumNumber</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name>containsNumber</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>range</name>.
                                                    <name>getMinimumNumber</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Basics</comment>
            <comment type="line">//--------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares this range to another object to test if they are equal.&lt;/p&gt;.
                *
                * &lt;p&gt;To be equal, the class, minimum and maximum must be equal.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumNumber()} and
                * {@link #getMaximumNumber()} methods.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @param obj the reference object with which to compare
                * @return &lt;code&gt;true&lt;/code&gt; if this object is equal
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>obj</name>
                                        == <name>null</name> ||
                                        <call>
                                            <name><name>obj</name>.
                                                <name>getClass</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        !=
                                        <call>
                                            <name>getClass</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Range</name>
                                                </type>
                                                <name>range</name> =
                                                <init>
                                                    <expr>(<name>Range</name>)
                                                        <name>obj</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>getMinimumNumber</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>equals</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>range</name>.
                                                                        <name>getMinimumNumber</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                &amp;&amp;
                                                <call>
                                                    <name>getMaximumNumber</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>equals</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>range</name>.
                                                                        <name>getMaximumNumber</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets a hashCode for the range.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumNumber()} and
                * {@link #getMaximumNumber()} methods.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @return a hash code value for this object
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>17</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = 37 * <name>result</name> +
                            <call>
                                <name>getClass</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>hashCode</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = 37 * <name>result</name> +
                            <call>
                                <name>getMinimumNumber</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>hashCode</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = 37 * <name>result</name> +
                            <call>
                                <name>getMaximumNumber</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>hashCode</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the range as a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;The format of the String is 'Range[&lt;i&gt;min&lt;/i&gt;,&lt;i&gt;max&lt;/i&gt;]'.&lt;/p&gt;
                *
                * &lt;p&gt;This implementation uses the {@link #getMinimumNumber()} and
                * {@link #getMaximumNumber()} methods.
                * Subclasses may be able to optimise this.&lt;/p&gt;
                *
                * @return the &lt;code&gt;String&lt;/code&gt; representation of this range
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>32</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Range["</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getMinimumNumber</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>','</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getMaximumNumber</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>']'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
