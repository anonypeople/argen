<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\builder\ReflectionToStringBuilder.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>builder</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>AccessibleObject</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Field</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Modifier</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>ArrayUtils</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>ClassUtils</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;
        * Assists in implementing {@link Object#toString()} methods using reflection.
        * &lt;/p&gt;
        *
        * &lt;p&gt;
        * This class uses reflection to determine the fields to append. Because these fields are usually private, the
        class
        * uses {@link java.lang.reflect.AccessibleObject#setAccessible(java.lang.reflect.AccessibleObject[], boolean)}
        to
        * change the visibility of the fields. This will fail under a security manager, unless the appropriate
        permissions are
        * set up correctly.
        * &lt;/p&gt;
        *
        * &lt;p&gt;
        * A typical invocation for this method would look like:
        * &lt;/p&gt;
        *
        * &lt;pre&gt;
        * public String toString() {
        * return ReflectionToStringBuilder.toString(this);
        * }&lt;/pre&gt;
        *
        *
        *
        * &lt;p&gt;
        * You can also use the builder to debug 3rd party objects:
        * &lt;/p&gt;
        *
        * &lt;pre&gt;
        * System.out.println("An object: " + ReflectionToStringBuilder.toString(anObject));&lt;/pre&gt;
        *
        *
        *
        * &lt;p&gt;
        * A subclass can control field output by overriding the methods:
        * &lt;ul&gt;
        * &lt;li&gt;{@link #accept(java.lang.reflect.Field)}&lt;/li&gt;
        * &lt;li&gt;{@link #getValue(java.lang.reflect.Field)}&lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;/p&gt;
        * &lt;p&gt;
        * For example, this method does &lt;i&gt;not&lt;/i&gt; include the &lt;code&gt;password&lt;/code&gt; field in
        the returned
        * &lt;code&gt;String&lt;/code&gt;:
        * &lt;/p&gt;
        *
        * &lt;pre&gt;
        * public String toString() {
        * return (new ReflectionToStringBuilder(this) {
        * protected boolean accept(Field f) {
        * return super.accept(f) &amp;&amp; !f.getName().equals("password");
        * }
        * }).toString();
        * }&lt;/pre&gt;
        *
        *
        *
        * &lt;p&gt;
        * The exact format of the &lt;code&gt;toString&lt;/code&gt; is determined by the {@link ToStringStyle} passed
        into the
        * constructor.
        * &lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author Gary Gregory
        * @author Pete Gieser
        * @since 2.0
        * @version $Id: ReflectionToStringBuilder.java 905636 2010-02-02 14:03:32Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>ReflectionToStringBuilder</name>
        <super>
            <extends>extends
                <name>ToStringBuilder</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Builds a &lt;code&gt;toString&lt;/code&gt; value using the default &lt;code&gt;ToStringStyle&lt;/code&gt;
                through reflection.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private fields. This
                means that it will
                * throw a security exception if run under a security manager, if the permissions are not set up
                correctly. It is
                * also not as efficient as testing explicitly.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Transient members will be not be included, as they are likely derived. Static fields will not be
                included.
                * Superclass fields will be appended.
                * &lt;/p&gt;
                *
                * @param object
                * the Object to be output
                * @return the String result
                * @throws IllegalArgumentException
                * if the Object is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Builds a &lt;code&gt;toString&lt;/code&gt; value through reflection.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private fields. This
                means that it will
                * throw a security exception if run under a security manager, if the permissions are not set up
                correctly. It is
                * also not as efficient as testing explicitly.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Transient members will be not be included, as they are likely derived. Static fields will not be
                included.
                * Superclass fields will be appended.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the style is &lt;code&gt;null&lt;/code&gt;, the default &lt;code&gt;ToStringStyle&lt;/code&gt; is
                used.
                * &lt;/p&gt;
                *
                * @param object
                * the Object to be output
                * @param style
                * the style of the &lt;code&gt;toString&lt;/code&gt; to create, may be &lt;code&gt;null&lt;/code&gt;
                * @return the String result
                * @throws IllegalArgumentException
                * if the Object or &lt;code&gt;ToStringStyle&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ToStringStyle</name>
                            </type>
                            <name>style</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>style</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Builds a &lt;code&gt;toString&lt;/code&gt; value through reflection.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private fields. This
                means that it will
                * throw a security exception if run under a security manager, if the permissions are not set up
                correctly. It is
                * also not as efficient as testing explicitly.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the &lt;code&gt;outputTransients&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, transient members
                will be output, otherwise they
                * are ignored, as they are likely derived fields, and not part of the value of the Object.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Static fields will not be included. Superclass fields will be appended.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the style is &lt;code&gt;null&lt;/code&gt;, the default &lt;code&gt;ToStringStyle&lt;/code&gt; is
                used.
                * &lt;/p&gt;
                *
                * @param object
                * the Object to be output
                * @param style
                * the style of the &lt;code&gt;toString&lt;/code&gt; to create, may be &lt;code&gt;null&lt;/code&gt;
                * @param outputTransients
                * whether to include transient fields
                * @return the String result
                * @throws IllegalArgumentException
                * if the Object is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ToStringStyle</name>
                            </type>
                            <name>style</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>outputTransients</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>style</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputTransients</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Builds a &lt;code&gt;toString&lt;/code&gt; value through reflection.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private fields. This
                means that it will
                * throw a security exception if run under a security manager, if the permissions are not set up
                correctly. It is
                * also not as efficient as testing explicitly.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the &lt;code&gt;outputTransients&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, transient fields
                will be output, otherwise they
                * are ignored, as they are likely derived fields, and not part of the value of the Object.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the &lt;code&gt;outputStatics&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, static fields will be
                output, otherwise they are
                * ignored.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Static fields will not be included. Superclass fields will be appended.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the style is &lt;code&gt;null&lt;/code&gt;, the default &lt;code&gt;ToStringStyle&lt;/code&gt; is
                used.
                * &lt;/p&gt;
                *
                * @param object
                * the Object to be output
                * @param style
                * the style of the &lt;code&gt;toString&lt;/code&gt; to create, may be &lt;code&gt;null&lt;/code&gt;
                * @param outputTransients
                * whether to include transient fields
                * @param outputStatics
                * whether to include transient fields
                * @return the String result
                * @throws IllegalArgumentException
                * if the Object is &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ToStringStyle</name>
                            </type>
                            <name>style</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>outputTransients</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>outputStatics</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>style</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputTransients</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputStatics</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Builds a &lt;code&gt;toString&lt;/code&gt; value through reflection.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private fields. This
                means that it will
                * throw a security exception if run under a security manager, if the permissions are not set up
                correctly. It is
                * also not as efficient as testing explicitly.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the &lt;code&gt;outputTransients&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, transient fields
                will be output, otherwise they
                * are ignored, as they are likely derived fields, and not part of the value of the Object.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the &lt;code&gt;outputStatics&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, static fields will be
                output, otherwise they are
                * ignored.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Superclass fields will be appended up to and including the specified superclass. A null superclass is
                treated as
                * &lt;code&gt;java.lang.Object&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the style is &lt;code&gt;null&lt;/code&gt;, the default &lt;code&gt;ToStringStyle&lt;/code&gt; is
                used.
                * &lt;/p&gt;
                *
                * @param object
                * the Object to be output
                * @param style
                * the style of the &lt;code&gt;toString&lt;/code&gt; to create, may be &lt;code&gt;null&lt;/code&gt;
                * @param outputTransients
                * whether to include transient fields
                * @param outputStatics
                * whether to include static fields
                * @param reflectUpToClass
                * the superclass to reflect up to (inclusive), may be &lt;code&gt;null&lt;/code&gt;
                * @return the String result
                * @throws IllegalArgumentException
                * if the Object is &lt;code&gt;null&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ToStringStyle</name>
                            </type>
                            <name>style</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>outputTransients</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>outputStatics</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>reflectUpToClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>ReflectionToStringBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>style</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>reflectUpToClass</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputTransients</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputStatics</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Builds a &lt;code&gt;toString&lt;/code&gt; value through reflection.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * It uses &lt;code&gt;AccessibleObject.setAccessible&lt;/code&gt; to gain access to private fields. This
                means that it will
                * throw a security exception if run under a security manager, if the permissions are not set up
                correctly. It is
                * also not as efficient as testing explicitly.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the &lt;code&gt;outputTransients&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, transient members
                will be output, otherwise they
                * are ignored, as they are likely derived fields, and not part of the value of the Object.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Static fields will not be included. Superclass fields will be appended up to and including the
                specified
                * superclass. A null superclass is treated as &lt;code&gt;java.lang.Object&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the style is &lt;code&gt;null&lt;/code&gt;, the default &lt;code&gt;ToStringStyle&lt;/code&gt; is
                used.
                * &lt;/p&gt;
                *
                * @deprecated Use {@link #toString(Object,ToStringStyle,boolean,boolean,Class)}
                *
                * @param object
                * the Object to be output
                * @param style
                * the style of the &lt;code&gt;toString&lt;/code&gt; to create, may be &lt;code&gt;null&lt;/code&gt;
                * @param outputTransients
                * whether to include transient fields
                * @param reflectUpToClass
                * the superclass to reflect up to (inclusive), may be &lt;code&gt;null&lt;/code&gt;
                * @return the String result
                * @throws IllegalArgumentException
                * if the Object is &lt;code&gt;null&lt;/code&gt;
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ToStringStyle</name>
                            </type>
                            <name>style</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>outputTransients</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>reflectUpToClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>ReflectionToStringBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>style</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>reflectUpToClass</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputTransients</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Builds a String for a toString method excluding the given field name.
                *
                * @param object
                * The object to "toString".
                * @param excludeFieldName
                * The field name to exclude
                * @return The toString value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toStringExclude</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>excludeFieldName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toStringExclude</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>String</name>
                                                <index>[]</index>
                                            </name>
                                            <block>{
                                                <expr>
                                                    <name>excludeFieldName</name>
                                                </expr>
                                                }
                                            </block>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Builds a String for a toString method excluding the given field names.
                *
                * @param object
                * The object to "toString".
                * @param excludeFieldNames
                * The field names to exclude. Null excludes nothing.
                * @return The toString value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toStringExclude</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <comment type="block">/*String*/</comment>
                            <name>excludeFieldNames</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toStringExclude</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toNoNullStringArray</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>excludeFieldNames</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts the given Collection into an array of Strings. The returned array does not contain &lt;code&gt;null&lt;/code&gt;
                * entries. Note that {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an
                array element
                * is &lt;code&gt;null&lt;/code&gt;.
                *
                * @param collection
                * The collection to convert
                * @return A new array of Strings.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>toNoNullStringArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>collection</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_STRING_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>toNoNullStringArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>collection</name>.
                                                    <name>toArray</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists
                * (arrays and collections). Note that {@link Arrays#sort(Object[])} will throw an {@link
                NullPointerException}
                * if an array element is &lt;code&gt;null&lt;/code&gt;.
                *
                * @param array
                * The array to check
                * @return The given array or a new array without null.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>toNoNullStringArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ArrayList</name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>array</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>e</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>array</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>e</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>list</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>toString</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>list</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>ArrayUtils</name>.
                                                <name>EMPTY_STRING_ARRAY</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Builds a String for a toString method excluding the given field names.
                *
                * @param object
                * The object to "toString".
                * @param excludeFieldNames
                * The field names to exclude
                * @return The toString value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toStringExclude</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>excludeFieldNames</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>ReflectionToStringBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>setExcludeFieldNames</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>excludeFieldNames</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Whether or not to append static fields.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>appendStatics</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Whether or not to append transient fields.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>appendTransients</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Which field names to exclude from output. Intended for fields like &lt;code&gt;"password"&lt;/code&gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                        <index>[]</index>
                    </type>
                    <name>excludeFieldNames</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The last super class to stop appending fields for.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Class</name>
                    </type>
                    <name>upToClass</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Constructor.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This constructor outputs using the default style set with &lt;code&gt;setDefaultStyle&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @param object
                * the Object to build a &lt;code&gt;toString&lt;/code&gt; for, must not be &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException
                * if the Object passed in is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ReflectionToStringBuilder</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Constructor.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the style is &lt;code&gt;null&lt;/code&gt;, the default style is used.
                * &lt;/p&gt;
                *
                * @param object
                * the Object to build a &lt;code&gt;toString&lt;/code&gt; for, must not be &lt;code&gt;null&lt;/code&gt;
                * @param style
                * the style of the &lt;code&gt;toString&lt;/code&gt; to create, may be &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException
                * if the Object passed in is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ReflectionToStringBuilder</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ToStringStyle</name>
                            </type>
                            <name>style</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>style</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Constructor.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the style is &lt;code&gt;null&lt;/code&gt;, the default style is used.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If the buffer is &lt;code&gt;null&lt;/code&gt;, a new one is created.
                * &lt;/p&gt;
                *
                * @param object
                * the Object to build a &lt;code&gt;toString&lt;/code&gt; for
                * @param style
                * the style of the &lt;code&gt;toString&lt;/code&gt; to create, may be &lt;code&gt;null&lt;/code&gt;
                * @param buffer
                * the &lt;code&gt;StringBuffer&lt;/code&gt; to populate, may be &lt;code&gt;null&lt;/code&gt;
                * @throws IllegalArgumentException
                * if the Object passed in is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ReflectionToStringBuilder</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ToStringStyle</name>
                            </type>
                            <name>style</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>style</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>buffer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructor.
                *
                * @deprecated Use {@link
                #ReflectionToStringBuilder(Object,ToStringStyle,StringBuffer,Class,boolean,boolean)}.
                *
                * @param object
                * the Object to build a &lt;code&gt;toString&lt;/code&gt; for
                * @param style
                * the style of the &lt;code&gt;toString&lt;/code&gt; to create, may be &lt;code&gt;null&lt;/code&gt;
                * @param buffer
                * the &lt;code&gt;StringBuffer&lt;/code&gt; to populate, may be &lt;code&gt;null&lt;/code&gt;
                * @param reflectUpToClass
                * the superclass to reflect up to (inclusive), may be &lt;code&gt;null&lt;/code&gt;
                * @param outputTransients
                * whether to include transient fields
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ReflectionToStringBuilder</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ToStringStyle</name>
                            </type>
                            <name>style</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>reflectUpToClass</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>outputTransients</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>style</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>buffer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setUpToClass</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>reflectUpToClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setAppendTransients</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>outputTransients</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructor.
                *
                * @param object
                * the Object to build a &lt;code&gt;toString&lt;/code&gt; for
                * @param style
                * the style of the &lt;code&gt;toString&lt;/code&gt; to create, may be &lt;code&gt;null&lt;/code&gt;
                * @param buffer
                * the &lt;code&gt;StringBuffer&lt;/code&gt; to populate, may be &lt;code&gt;null&lt;/code&gt;
                * @param reflectUpToClass
                * the superclass to reflect up to (inclusive), may be &lt;code&gt;null&lt;/code&gt;
                * @param outputTransients
                * whether to include transient fields
                * @param outputStatics
                * whether to include static fields
                * @since 2.1
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ReflectionToStringBuilder</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ToStringStyle</name>
                            </type>
                            <name>style</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>reflectUpToClass</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>outputTransients</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>outputStatics</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>style</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>buffer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setUpToClass</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>reflectUpToClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setAppendTransients</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>outputTransients</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>setAppendStatics</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>outputStatics</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns whether or not to append the given &lt;code&gt;Field&lt;/code&gt;.
                * &lt;ul&gt;
                * &lt;li&gt;Transient fields are appended only if {@link #isAppendTransients()} returns &lt;code&gt;true&lt;/code&gt;.
                * &lt;li&gt;Static fields are appended only if {@link #isAppendStatics()} returns &lt;code&gt;true&lt;/code&gt;.
                * &lt;li&gt;Inner class fields are not appened.&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * @param field
                * The Field to test.
                * @return Whether or not to append the given &lt;code&gt;Field&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>accept</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Field</name>
                            </type>
                            <name>field</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>field</name>.
                                        <name>getName</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>indexOf</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>ClassUtils</name>.
                                                    <name>INNER_CLASS_SEPARATOR_CHAR</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                != -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Reject field from inner class.</comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Modifier</name>.
                                        <name>isTransient</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>field</name>.
                                                        <name>getModifiers</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &amp;&amp; !
                                <call>
                                    <name><name>this</name>.
                                        <name>isAppendTransients</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Reject transient fields.</comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Modifier</name>.
                                        <name>isStatic</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>field</name>.
                                                        <name>getModifiers</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &amp;&amp; !
                                <call>
                                    <name><name>this</name>.
                                        <name>isAppendStatics</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Reject static fields.</comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>getExcludeFieldNames</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>null</name>
                                &amp;&amp;
                                <call>
                                    <name><name>Arrays</name>.
                                        <name>binarySearch</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>getExcludeFieldNames</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>field</name>.
                                                        <name>getName</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Reject fields from the getExcludeFieldNames list.</comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Appends the fields and values defined by the given object of the given Class.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If a cycle is detected as an object is &amp;quot;toString()'ed&amp;quot;, such an object is rendered
                as if
                * &lt;code&gt;Object.toString()&lt;/code&gt; had been called and not implemented by the object.
                * &lt;/p&gt;
                *
                * @param clazz
                * The class of object parameter
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>appendFieldsIn</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>clazz</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>clazz</name>.
                                        <name>isArray</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>reflectionAppendArray</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>getObject</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Field</name>
                                <index>[]</index>
                            </type>
                            <name>fields</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>clazz</name>.
                                            <name>getDeclaredFields</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>AccessibleObject</name>.
                                    <name>setAccessible</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fields</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>fields</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Field</name>
                                    </type>
                                    <name>field</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>fields</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>fieldName</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>field</name>.
                                                    <name>getName</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>accept</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>field</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <try>try
                                            <block>{
                                                <comment type="line">// Warning: Field.get(Object) creates wrappers
                                                    objects
                                                </comment>
                                                <comment type="line">// for primitive types.</comment>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>Object</name>
                                                        </type>
                                                        <name>fieldValue</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>this</name>.
                                                                        <name>getValue</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>field</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>this</name>.
                                                                <name>append</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>fieldName</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>fieldValue</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                            <catch>catch (
                                                <param>
                                                    <decl>
                                                        <type>
                                                            <name>IllegalAccessException</name>
                                                        </type>
                                                        <name>ex</name>
                                                    </decl>
                                                </param>
                                                )
                                                <block>{
                                                    <comment type="line">//this can't happen. Would get a Security
                                                        exception
                                                    </comment>
                                                    <comment type="line">// instead</comment>
                                                    <comment type="line">//throw a runtime exception in case the
                                                        impossible
                                                    </comment>
                                                    <comment type="line">// happens.</comment>
                                                    <throw>throw
                                                        <expr>new
                                                            <call>
                                                                <name>InternalError</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"Unexpected IllegalAccessException: " +
                                                                            <call>
                                                                                <name><name>ex</name>.
                                                                                    <name>getMessage</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                    }
                                                </block>
                                            </catch>
                                        </try>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * @return Returns the excludeFieldNames.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getExcludeFieldNames</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>excludeFieldNames</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the last super class to stop appending fields for.
                * &lt;/p&gt;
                *
                * @return The last super class to stop appending fields for.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Class</name>
                </type>
                <name>getUpToClass</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>upToClass</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Calls &lt;code&gt;java.lang.reflect.Field.get(Object)&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @param field
                * The Field to query.
                * @return The Object from the given Field.
                *
                * @throws IllegalArgumentException
                * see {@link java.lang.reflect.Field#get(Object)}
                * @throws IllegalAccessException
                * see {@link java.lang.reflect.Field#get(Object)}
                *
                * @see java.lang.reflect.Field#get(Object)
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>Object</name>
                </type>
                <name>getValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Field</name>
                            </type>
                            <name>field</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IllegalArgumentException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>field</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getObject</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets whether or not to append static fields.
                * &lt;/p&gt;
                *
                * @return Whether or not to append static fields.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isAppendStatics</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>appendStatics</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets whether or not to append transient fields.
                * &lt;/p&gt;
                *
                * @return Whether or not to append transient fields.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isAppendTransients</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>appendTransients</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Append to the &lt;code&gt;toString&lt;/code&gt; an &lt;code&gt;Object&lt;/code&gt; array.
                * &lt;/p&gt;
                *
                * @param array
                * the array to add to the &lt;code&gt;toString&lt;/code&gt;
                * @return this
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ToStringBuilder</name>
                </type>
                <name>reflectionAppendArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>getStyle</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>reflectionAppendArrayDetail</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>getStringBuffer</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Sets whether or not to append static fields.
                * &lt;/p&gt;
                *
                * @param appendStatics
                * Whether or not to append static fields.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAppendStatics</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>appendStatics</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>appendStatics</name>
                            </name>
                            =
                            <name>appendStatics</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Sets whether or not to append transient fields.
                * &lt;/p&gt;
                *
                * @param appendTransients
                * Whether or not to append transient fields.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAppendTransients</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>appendTransients</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>appendTransients</name>
                            </name>
                            =
                            <name>appendTransients</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the field names to exclude.
                *
                * @param excludeFieldNamesParam
                * The excludeFieldNames to excluding from toString or &lt;code&gt;null&lt;/code&gt;.
                * @return &lt;code&gt;this&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ReflectionToStringBuilder</name>
                </type>
                <name>setExcludeFieldNames</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>excludeFieldNamesParam</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>excludeFieldNamesParam</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>excludeFieldNames</name>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>excludeFieldNames</name>
                                        </name>
                                        =
                                        <call>
                                            <name>toNoNullStringArray</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>excludeFieldNamesParam</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>Arrays</name>.
                                                <name>sort</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>excludeFieldNames</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Sets the last super class to stop appending fields for.
                * &lt;/p&gt;
                *
                * @param clazz
                * The last super class to stop appending fields for.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setUpToClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>clazz</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>clazz</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Object</name>
                                        </type>
                                        <name>object</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>getObject</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>object</name>
                                            != <name>null</name> &amp;&amp;
                                            <call>
                                                <name><name>clazz</name>.
                                                    <name>isInstance</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>object</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            == false
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>IllegalArgumentException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Specified class is not a superclass of the
                                                                    object"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>upToClass</name>
                            </name>
                            =
                            <name>clazz</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the String built by this builder.
                * &lt;/p&gt;
                *
                * @return the built string
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>this</name>.
                                        <name>getObject</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.
                                                <name>getStyle</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>getNullText</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>clazz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getObject</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>appendFieldsIn</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>clazz</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>clazz</name>.
                                        <name>getSuperclass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                != <name>null</name> &amp;&amp; <name>clazz</name> !=
                                <call>
                                    <name><name>this</name>.
                                        <name>getUpToClass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>clazz</name>
                                    =
                                    <call>
                                        <name><name>clazz</name>.
                                            <name>getSuperclass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>appendFieldsIn</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>clazz</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
