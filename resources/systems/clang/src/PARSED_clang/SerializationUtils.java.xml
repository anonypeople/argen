<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\SerializationUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ByteArrayInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ByteArrayOutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectOutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Assists with the serialization process and performs additional functionality based
        * on serialization.&lt;/p&gt;
        * &lt;p&gt;
        * &lt;ul&gt;
        * &lt;li&gt;Deep clone using serialization
        * &lt;li&gt;Serialize managing finally and IOException
        * &lt;li&gt;Deserialize managing finally and IOException
        * &lt;/ul&gt;
        *
        * &lt;p&gt;This class throws exceptions for invalid &lt;code&gt;null&lt;/code&gt; inputs.
        * Each method documents its behaviour in more detail.&lt;/p&gt;
        *
        * &lt;p&gt;#ThreadSafe#&lt;/p&gt;
        * @author Apache Software Foundation
        * @author &lt;a href="mailto:nissim@nksystems.com"&gt;Nissim Karpenstein&lt;/a&gt;
        * @author &lt;a href="mailto:janekdb@yahoo.co.uk"&gt;Janek Bogucki&lt;/a&gt;
        * @author Daniel L. Rall
        * @author Jeff Varszegi
        * @author Gary Gregory
        * @since 1.0
        * @version $Id: SerializationUtils.java 1056988 2011-01-09 17:58:53Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>SerializationUtils</name>
        <block>{

            <comment type="javadoc">/**
                * &lt;p&gt;SerializationUtils instances should NOT be constructed in standard programming.
                * Instead, the class should be used as &lt;code&gt;SerializationUtils.clone(object)&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean instance
                * to operate.&lt;/p&gt;
                * @since 2.0
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>SerializationUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// Clone</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Deep clone an &lt;code&gt;Object&lt;/code&gt; using serialization.&lt;/p&gt;
                *
                * &lt;p&gt;This is many times slower than writing clone methods by hand
                * on all objects in your object graph. However, for complex object
                * graphs, or for those that don't support deep cloning this can
                * be a simple alternative implementation. Of course all the objects
                * must be &lt;code&gt;Serializable&lt;/code&gt;.&lt;/p&gt;
                *
                * @param object the &lt;code&gt;Serializable&lt;/code&gt; object to clone
                * @return the cloned object
                * @throws SerializationException (runtime) if the serialization fails
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>clone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Serializable</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>deserialize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>serialize</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>object</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Serialize</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Serializes an &lt;code&gt;Object&lt;/code&gt; to the specified stream.&lt;/p&gt;
                *
                * &lt;p&gt;The stream will be closed once the object is written.
                * This avoids the need for a finally clause, and maybe also exception
                * handling, in the application code.&lt;/p&gt;
                *
                * &lt;p&gt;The stream passed in is not buffered internally within this method.
                * This is the responsibility of your application if desired.&lt;/p&gt;
                *
                * @param obj the object to serialize to bytes, may be null
                * @param outputStream the stream to write to, must not be null
                * @throws IllegalArgumentException if &lt;code&gt;outputStream&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                * @throws SerializationException (runtime) if the serialization fails
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>serialize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Serializable</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>outputStream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>outputStream</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The OutputStream must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ObjectOutputStream</name>
                            </type>
                            <name>out</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <comment type="line">// stream closed in the finally</comment>
                            <expr_stmt>
                                <expr>
                                    <name>out</name>
                                    = new
                                    <call>
                                        <name>ObjectOutputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>outputStream</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>out</name>.
                                            <name>writeObject</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>obj</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>SerializationException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <try>try
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>out</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>out</name>.
                                                                    <name>close</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>IOException</name>
                                                </type>
                                                <name>ex</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <comment type="line">// ignore close exception</comment>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Serializes an &lt;code&gt;Object&lt;/code&gt; to a byte array for
                * storage/serialization.&lt;/p&gt;
                *
                * @param obj the object to serialize to bytes
                * @return a byte[] with the converted Serializable
                * @throws SerializationException (runtime) if the serialization fails
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>serialize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Serializable</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ByteArrayOutputStream</name>
                            </type>
                            <name>baos</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ByteArrayOutputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>512</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>serialize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>obj</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>baos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>baos</name>.
                                    <name>toByteArray</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Deserialize</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Deserializes an &lt;code&gt;Object&lt;/code&gt; from the specified stream.&lt;/p&gt;
                *
                * &lt;p&gt;The stream will be closed once the object is written. This
                * avoids the need for a finally clause, and maybe also exception
                * handling, in the application code.&lt;/p&gt;
                *
                * &lt;p&gt;The stream passed in is not buffered internally within this method.
                * This is the responsibility of your application if desired.&lt;/p&gt;
                *
                * @param inputStream the serialized object input stream, must not be null
                * @return the deserialized object
                * @throws IllegalArgumentException if &lt;code&gt;inputStream&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                * @throws SerializationException (runtime) if the serialization fails
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>deserialize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>inputStream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>inputStream</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The InputStream must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ObjectInputStream</name>
                            </type>
                            <name>in</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <comment type="line">// stream closed in the finally</comment>
                            <expr_stmt>
                                <expr>
                                    <name>in</name>
                                    = new
                                    <call>
                                        <name>ObjectInputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>inputStream</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>in</name>.
                                            <name>readObject</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>

                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ClassNotFoundException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>SerializationException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>SerializationException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ex</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <try>try
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>in</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>in</name>.
                                                                    <name>close</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>IOException</name>
                                                </type>
                                                <name>ex</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <comment type="line">// ignore close exception</comment>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Deserializes a single &lt;code&gt;Object&lt;/code&gt; from an array of bytes.&lt;/p&gt;
                *
                * @param objectData the serialized object, must not be null
                * @return the deserialized object
                * @throws IllegalArgumentException if &lt;code&gt;objectData&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                * @throws SerializationException (runtime) if the serialization fails
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>deserialize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>objectData</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>objectData</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The byte[] must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ByteArrayInputStream</name>
                            </type>
                            <name>bais</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ByteArrayInputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>objectData</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>deserialize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bais</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
