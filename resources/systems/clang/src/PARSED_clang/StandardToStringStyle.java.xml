<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\builder\StandardToStringStyle.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>builder</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * &lt;p&gt;Works with {@link ToStringBuilder} to create a &lt;code&gt;toString&lt;/code&gt;.&lt;/p&gt;
        *
        * &lt;p&gt;This class is intended to be used as a singleton.
        * There is no need to instantiate a new style each time.
        * Simply instantiate the class once, customize the values as required, and
        * store the result in a public static final variable for the rest of the
        * program to access.&lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author Pete Gieser
        * @author Gary Gregory
        * @since 1.0
        * @version $Id: StandardToStringStyle.java 905636 2010-02-02 14:03:32Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>StandardToStringStyle</name>
        <super>
            <extends>extends
                <name>ToStringStyle</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>1L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;Constructor.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StandardToStringStyle</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets whether to use the class name.&lt;/p&gt;
                *
                * @return the current useClassName flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isUseClassName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>isUseClassName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets whether to use the class name.&lt;/p&gt;
                *
                * @param useClassName the new useClassName flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setUseClassName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>useClassName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setUseClassName</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>useClassName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets whether to output short or long class names.&lt;/p&gt;
                *
                * @return the current useShortClassName flag
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isUseShortClassName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>isUseShortClassName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets whether to output short or long class names.&lt;/p&gt;
                *
                * @return the current shortClassName flag
                * @deprecated Use {@link #isUseShortClassName()}
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isShortClassName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>isUseShortClassName</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets whether to output short or long class names.&lt;/p&gt;
                *
                * @param useShortClassName the new useShortClassName flag
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setUseShortClassName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>useShortClassName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setUseShortClassName</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>useShortClassName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets whether to output short or long class names.&lt;/p&gt;
                *
                * @param shortClassName the new shortClassName flag
                * @deprecated Use {@link #setUseShortClassName(boolean)}
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setShortClassName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>shortClassName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setUseShortClassName</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>shortClassName</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets whether to use the identity hash code.&lt;/p&gt;
                * @return the current useIdentityHashCode flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isUseIdentityHashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>isUseIdentityHashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets whether to use the identity hash code.&lt;/p&gt;
                *
                * @param useIdentityHashCode the new useIdentityHashCode flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setUseIdentityHashCode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>useIdentityHashCode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setUseIdentityHashCode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>useIdentityHashCode</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets whether to use the field names passed in.&lt;/p&gt;
                *
                * @return the current useFieldNames flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isUseFieldNames</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>isUseFieldNames</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets whether to use the field names passed in.&lt;/p&gt;
                *
                * @param useFieldNames the new useFieldNames flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setUseFieldNames</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>useFieldNames</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setUseFieldNames</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>useFieldNames</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets whether to use full detail when the caller doesn't
                * specify.&lt;/p&gt;
                *
                * @return the current defaultFullDetail flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isDefaultFullDetail</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>isDefaultFullDetail</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets whether to use full detail when the caller doesn't
                * specify.&lt;/p&gt;
                *
                * @param defaultFullDetail the new defaultFullDetail flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setDefaultFullDetail</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>defaultFullDetail</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setDefaultFullDetail</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>defaultFullDetail</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets whether to output array content detail.&lt;/p&gt;
                *
                * @return the current array content detail setting
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isArrayContentDetail</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>isArrayContentDetail</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets whether to output array content detail.&lt;/p&gt;
                *
                * @param arrayContentDetail the new arrayContentDetail flag
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setArrayContentDetail</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>arrayContentDetail</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setArrayContentDetail</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>arrayContentDetail</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the array start text.&lt;/p&gt;
                *
                * @return the current array start text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getArrayStart</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getArrayStart</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the array start text.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted
                * to an empty String.&lt;/p&gt;
                *
                * @param arrayStart the new array start text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setArrayStart</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>arrayStart</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setArrayStart</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>arrayStart</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the array end text.&lt;/p&gt;
                *
                * @return the current array end text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getArrayEnd</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getArrayEnd</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the array end text.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted
                * to an empty String.&lt;/p&gt;
                *
                * @param arrayEnd the new array end text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setArrayEnd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>arrayEnd</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setArrayEnd</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>arrayEnd</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the array separator text.&lt;/p&gt;
                *
                * @return the current array separator text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getArraySeparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getArraySeparator</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the array separator text.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted
                * to an empty String.&lt;/p&gt;
                *
                * @param arraySeparator the new array separator text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setArraySeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>arraySeparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setArraySeparator</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>arraySeparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the content start text.&lt;/p&gt;
                *
                * @return the current content start text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getContentStart</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getContentStart</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the content start text.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted
                * to an empty String.&lt;/p&gt;
                *
                * @param contentStart the new content start text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setContentStart</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>contentStart</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setContentStart</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>contentStart</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the content end text.&lt;/p&gt;
                *
                * @return the current content end text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getContentEnd</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getContentEnd</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the content end text.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted
                * to an empty String.&lt;/p&gt;
                *
                * @param contentEnd the new content end text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setContentEnd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>contentEnd</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setContentEnd</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>contentEnd</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the field name value separator text.&lt;/p&gt;
                *
                * @return the current field name value separator text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getFieldNameValueSeparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getFieldNameValueSeparator</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the field name value separator text.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted
                * to an empty String.&lt;/p&gt;
                *
                * @param fieldNameValueSeparator the new field name value separator text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFieldNameValueSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>fieldNameValueSeparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setFieldNameValueSeparator</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fieldNameValueSeparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the field separator text.&lt;/p&gt;
                *
                * @return the current field separator text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getFieldSeparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getFieldSeparator</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the field separator text.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted
                * to an empty String.&lt;/p&gt;
                *
                * @param fieldSeparator the new field separator text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFieldSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>fieldSeparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setFieldSeparator</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fieldSeparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets whether the field separator should be added at the start
                * of each buffer.&lt;/p&gt;
                *
                * @return the fieldSeparatorAtStart flag
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFieldSeparatorAtStart</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>isFieldSeparatorAtStart</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets whether the field separator should be added at the start
                * of each buffer.&lt;/p&gt;
                *
                * @param fieldSeparatorAtStart the fieldSeparatorAtStart flag
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFieldSeparatorAtStart</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fieldSeparatorAtStart</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setFieldSeparatorAtStart</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fieldSeparatorAtStart</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets whether the field separator should be added at the end
                * of each buffer.&lt;/p&gt;
                *
                * @return fieldSeparatorAtEnd flag
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFieldSeparatorAtEnd</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>isFieldSeparatorAtEnd</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets whether the field separator should be added at the end
                * of each buffer.&lt;/p&gt;
                *
                * @param fieldSeparatorAtEnd the fieldSeparatorAtEnd flag
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setFieldSeparatorAtEnd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fieldSeparatorAtEnd</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setFieldSeparatorAtEnd</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fieldSeparatorAtEnd</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the text to output when &lt;code&gt;null&lt;/code&gt; found.&lt;/p&gt;
                *
                * @return the current text to output when &lt;code&gt;null&lt;/code&gt; found
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNullText</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getNullText</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the text to output when &lt;code&gt;null&lt;/code&gt; found.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted
                * to an empty String.&lt;/p&gt;
                *
                * @param nullText the new text to output when &lt;code&gt;null&lt;/code&gt; found
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNullText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>nullText</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setNullText</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nullText</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the text to output when a &lt;code&gt;Collection&lt;/code&gt;,
                * &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; size is output.&lt;/p&gt;
                *
                * &lt;p&gt;This is output before the size value.&lt;/p&gt;
                *
                * @return the current start of size text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSizeStartText</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getSizeStartText</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the start text to output when a &lt;code&gt;Collection&lt;/code&gt;,
                * &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; size is output.&lt;/p&gt;
                *
                * &lt;p&gt;This is output before the size value.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted to
                * an empty String.&lt;/p&gt;
                *
                * @param sizeStartText the new start of size text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSizeStartText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>sizeStartText</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setSizeStartText</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>sizeStartText</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * Gets the end text to output when a &lt;code&gt;Collection&lt;/code&gt;,
                * &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; size is output.&lt;/p&gt;
                *
                * &lt;p&gt;This is output after the size value.&lt;/p&gt;
                *
                * @return the current end of size text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSizeEndText</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getSizeEndText</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the end text to output when a &lt;code&gt;Collection&lt;/code&gt;,
                * &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; size is output.&lt;/p&gt;
                *
                * &lt;p&gt;This is output after the size value.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted
                * to an empty String.&lt;/p&gt;
                *
                * @param sizeEndText the new end of size text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSizeEndText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>sizeEndText</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setSizeEndText</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>sizeEndText</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the start text to output when an &lt;code&gt;Object&lt;/code&gt; is
                * output in summary mode.&lt;/p&gt;
                *
                * &lt;P&gt;This is output before the size value.&lt;/p&gt;
                *
                * @return the current start of summary text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSummaryObjectStartText</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getSummaryObjectStartText</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the start text to output when an &lt;code&gt;Object&lt;/code&gt; is
                * output in summary mode.&lt;/p&gt;
                *
                * &lt;p&gt;This is output before the size value.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted to
                * an empty String.&lt;/p&gt;
                *
                * @param summaryObjectStartText the new start of summary text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSummaryObjectStartText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>summaryObjectStartText</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setSummaryObjectStartText</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>summaryObjectStartText</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the end text to output when an &lt;code&gt;Object&lt;/code&gt; is
                * output in summary mode.&lt;/p&gt;
                *
                * &lt;p&gt;This is output after the size value.&lt;/p&gt;
                *
                * @return the current end of summary text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getSummaryObjectEndText</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>getSummaryObjectEndText</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Sets the end text to output when an &lt;code&gt;Object&lt;/code&gt; is
                * output in summary mode.&lt;/p&gt;
                *
                * &lt;p&gt;This is output after the size value.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; is accepted, but will be converted to
                * an empty String.&lt;/p&gt;
                *
                * @param summaryObjectEndText the new end of summary text
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setSummaryObjectEndText</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>summaryObjectEndText</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setSummaryObjectEndText</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>summaryObjectEndText</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">//---------------------------------------------------------------------</comment>

            }
        </block>
    </class>
</unit>
