<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\time\StopWatch.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>time</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * &lt;p&gt;
        * &lt;code&gt;StopWatch&lt;/code&gt; provides a convenient API for timings.
        * &lt;/p&gt;
        *
        * &lt;p&gt;
        * To start the watch, call {@link #start()}. At this point you can:
        * &lt;/p&gt;
        * &lt;ul&gt;
        * &lt;li&gt;{@link #split()} the watch to get the time whilst the watch continues in the background. {@link
        #unsplit()} will
        * remove the effect of the split. At this point, these three options are available again.&lt;/li&gt;
        * &lt;li&gt;{@link #suspend()} the watch to pause it. {@link #resume()} allows the watch to continue. Any time
        between the
        * suspend and resume will not be counted in the total. At this point, these three options are available again.&lt;/li&gt;
        * &lt;li&gt;{@link #stop()} the watch to complete the timing session.&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * &lt;p&gt;
        * It is intended that the output methods {@link #toString()} and {@link #getTime()} should only be called after
        stop,
        * split or suspend, however a suitable result will be returned at other points.
        * &lt;/p&gt;
        *
        * &lt;p&gt;
        * NOTE: As from v2.1, the methods protect against inappropriate calls. Thus you cannot now call stop before
        start,
        * resume before suspend or unsplit before split.
        * &lt;/p&gt;
        *
        * &lt;p&gt;
        * 1. split(), suspend(), or stop() cannot be invoked twice&lt;br /&gt;
        * 2. unsplit() may only be called if the watch has been split()&lt;br /&gt;
        * 3. resume() may only be called if the watch has been suspend()&lt;br /&gt;
        * 4. start() cannot be called twice without calling reset()
        * &lt;/p&gt;
        *
        * &lt;p&gt;This class is not thread-safe&lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @since 2.0
        * @version $Id: StopWatch.java 1056988 2011-01-09 17:58:53Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>StopWatch</name>
        <block>{

            <comment type="line">// running states</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>STATE_UNSTARTED</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>STATE_RUNNING</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>STATE_STOPPED</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>STATE_SUSPENDED</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// split state</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>STATE_UNSPLIT</name> =
                    <init>
                        <expr>10</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>STATE_SPLIT</name> =
                    <init>
                        <expr>11</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The current running state of the StopWatch.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>runningState</name> =
                    <init>
                        <expr>
                            <name>STATE_UNSTARTED</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Whether the stopwatch has a split time recorded.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>splitState</name> =
                    <init>
                        <expr>
                            <name>STATE_UNSPLIT</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The start time.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>startTime</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The stop time.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>stopTime</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Constructor.
                * &lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StopWatch</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Start the stopwatch.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This method starts a new timing session, clearing any previous values.
                * &lt;/p&gt;
                *
                * @throws IllegalStateException
                * if the StopWatch is already running.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>start</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                ==
                                <name>STATE_STOPPED</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Stopwatch must be reset before being restarted. "</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                !=
                                <name>STATE_UNSTARTED</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Stopwatch already started. "</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stopTime</name>
                            </name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>startTime</name>
                            </name>
                            =
                            <call>
                                <name><name>System</name>.
                                    <name>currentTimeMillis</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>runningState</name>
                            </name>
                            =
                            <name>STATE_RUNNING</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Stop the stopwatch.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This method ends a new timing session, allowing the time to be retrieved.
                * &lt;/p&gt;
                *
                * @throws IllegalStateException
                * if the StopWatch is not running.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>stop</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                != <name>STATE_RUNNING</name> &amp;&amp;
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                !=
                                <name>STATE_SUSPENDED</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Stopwatch is not running. "</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                ==
                                <name>STATE_RUNNING</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>stopTime</name>
                                        </name>
                                        =
                                        <call>
                                            <name><name>System</name>.
                                                <name>currentTimeMillis</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>runningState</name>
                            </name>
                            =
                            <name>STATE_STOPPED</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Resets the stopwatch. Stops it if need be.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This method clears the internal values to allow the object to be reused.
                * &lt;/p&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>runningState</name>
                            </name>
                            =
                            <name>STATE_UNSTARTED</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>splitState</name>
                            </name>
                            =
                            <name>STATE_UNSPLIT</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>startTime</name>
                            </name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stopTime</name>
                            </name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Split the time.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This method sets the stop time of the watch to allow a time to be extracted. The start time is
                unaffected,
                * enabling {@link #unsplit()} to continue the timing from the original start point.
                * &lt;/p&gt;
                *
                * @throws IllegalStateException
                * if the StopWatch is not running.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>split</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                !=
                                <name>STATE_RUNNING</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Stopwatch is not running. "</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stopTime</name>
                            </name>
                            =
                            <call>
                                <name><name>System</name>.
                                    <name>currentTimeMillis</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>splitState</name>
                            </name>
                            =
                            <name>STATE_SPLIT</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Remove a split.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This method clears the stop time. The start time is unaffected, enabling timing from the original
                start point to
                * continue.
                * &lt;/p&gt;
                *
                * @throws IllegalStateException
                * if the StopWatch has not been split.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>unsplit</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>splitState</name>
                                </name>
                                !=
                                <name>STATE_SPLIT</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Stopwatch has not been split. "</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stopTime</name>
                            </name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>splitState</name>
                            </name>
                            =
                            <name>STATE_UNSPLIT</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Suspend the stopwatch for later resumption.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This method suspends the watch until it is resumed. The watch will not include time between the
                suspend and
                * resume calls in the total time.
                * &lt;/p&gt;
                *
                * @throws IllegalStateException
                * if the StopWatch is not currently running.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>suspend</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                !=
                                <name>STATE_RUNNING</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Stopwatch must be running to suspend. "</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stopTime</name>
                            </name>
                            =
                            <call>
                                <name><name>System</name>.
                                    <name>currentTimeMillis</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>runningState</name>
                            </name>
                            =
                            <name>STATE_SUSPENDED</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Resume the stopwatch after a suspend.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This method resumes the watch after it was suspended. The watch will not include time between the
                suspend and
                * resume calls in the total time.
                * &lt;/p&gt;
                *
                * @throws IllegalStateException
                * if the StopWatch has not been suspended.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>resume</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                !=
                                <name>STATE_SUSPENDED</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Stopwatch must be suspended to resume. "</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>startTime</name>
                            </name>
                            += (
                            <call>
                                <name><name>System</name>.
                                    <name>currentTimeMillis</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            -
                            <name><name>this</name>.
                                <name>stopTime</name>
                            </name>
                            )
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stopTime</name>
                            </name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>runningState</name>
                            </name>
                            =
                            <name>STATE_RUNNING</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Get the time on the stopwatch.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This is either the time between the start and the moment this method is called, or the amount of time
                between
                * start and stop.
                * &lt;/p&gt;
                *
                * @return the time in milliseconds
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                == <name>STATE_STOPPED</name> ||
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                ==
                                <name>STATE_SUSPENDED</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>this</name>.
                                            <name>stopTime</name>
                                        </name>
                                        -
                                        <name><name>this</name>.
                                            <name>startTime</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.
                                            <name>runningState</name>
                                        </name>
                                        ==
                                        <name>STATE_UNSTARTED</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>0</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>runningState</name>
                                                </name>
                                                ==
                                                <name>STATE_RUNNING</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>System</name>.
                                                                <name>currentTimeMillis</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        -
                                                        <name><name>this</name>.
                                                            <name>startTime</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Illegal running state has occured. "</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Get the split time on the stopwatch.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This is the time between start and latest split.
                * &lt;/p&gt;
                *
                * @return the split time in milliseconds
                *
                * @throws IllegalStateException
                * if the StopWatch has not yet been split.
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getSplitTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>splitState</name>
                                </name>
                                !=
                                <name>STATE_SPLIT</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Stopwatch must be split to get the split time. "</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>stopTime</name>
                            </name>
                            -
                            <name><name>this</name>.
                                <name>startTime</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the time this stopwatch was started.
                *
                * @return the time this stopwatch was started
                * @throws IllegalStateException
                * if this StopWatch has not been started
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getStartTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>runningState</name>
                                </name>
                                ==
                                <name>STATE_UNSTARTED</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Stopwatch has not been started"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>startTime</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets a summary of the time that the stopwatch recorded as a string.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The format used is ISO8601-like, &lt;i&gt;hours&lt;/i&gt;:&lt;i&gt;minutes&lt;/i&gt;:&lt;i&gt;seconds&lt;/i&gt;.&lt;i&gt;milliseconds&lt;/i&gt;.
                * &lt;/p&gt;
                *
                * @return the time as a String
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>DurationFormatUtils</name>.
                                    <name>formatDurationHMS</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getTime</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets a summary of the split time that the stopwatch recorded as a string.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The format used is ISO8601-like, &lt;i&gt;hours&lt;/i&gt;:&lt;i&gt;minutes&lt;/i&gt;:&lt;i&gt;seconds&lt;/i&gt;.&lt;i&gt;milliseconds&lt;/i&gt;.
                * &lt;/p&gt;
                *
                * @return the split time as a String
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toSplitString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>DurationFormatUtils</name>.
                                    <name>formatDurationHMS</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getSplitTime</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
