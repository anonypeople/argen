<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\text\StrLookup.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>text</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Lookup a String key to a String value.
        * &lt;p&gt;
        * This class represents the simplest form of a string to string map.
        * It has a benefit over a map in that it can create the result on
        * demand based on the key.
        * &lt;p&gt;
        * This class comes complete with various factory methods.
        * If these do not suffice, you can subclass and implement your own matcher.
        * &lt;p&gt;
        * For example, it would be possible to implement a lookup that used the
        * key as a primary key, and looked up the value on demand from the database
        *
        * @author Apache Software Foundation
        * @since 2.2
        * @version $Id: StrLookup.java 905636 2010-02-02 14:03:32Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>StrLookup</name>
        <block>{

            <comment type="javadoc">/**
                * Lookup that always returns null.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrLookup</name>
                    </type>
                    <name>NONE_LOOKUP</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Lookup that uses System properties.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrLookup</name>
                    </type>
                    <name>SYSTEM_PROPERTIES_LOOKUP</name>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <expr_stmt>
                    <expr>
                        <name>NONE_LOOKUP</name>
                        = new
                        <call>
                            <name>MapStrLookup</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>StrLookup</name>
                        </type>
                        <name>lookup</name> =
                        <init>
                            <expr>
                                <name>null</name>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <try>try
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>lookup</name>
                                = new
                                <call>
                                    <name>MapStrLookup</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>System</name>.
                                                        <name>getProperties</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                    <catch>catch (
                        <param>
                            <decl>
                                <type>
                                    <name>SecurityException</name>
                                </type>
                                <name>ex</name>
                            </decl>
                        </param>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>lookup</name>
                                    =
                                    <name>NONE_LOOKUP</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </catch>
                </try>
                <expr_stmt>
                    <expr>
                        <name>SYSTEM_PROPERTIES_LOOKUP</name>
                        =
                        <name>lookup</name>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Returns a lookup which always returns null.
                *
                * @return a lookup that always returns null, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrLookup</name>
                </type>
                <name>noneLookup</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>NONE_LOOKUP</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a lookup which uses {@link System#getProperties() System properties}
                * to lookup the key to value.
                * &lt;p&gt;
                * If a security manager blocked access to system properties, then null will
                * be returned from every lookup.
                * &lt;p&gt;
                * If a null key is used, this lookup will throw a NullPointerException.
                *
                * @return a lookup using system properties, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrLookup</name>
                </type>
                <name>systemPropertiesLookup</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>SYSTEM_PROPERTIES_LOOKUP</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a lookup which looks up values using a map.
                * &lt;p&gt;
                * If the map is null, then null will be returned from every lookup.
                * The map result object is converted to a string using toString().
                *
                * @param map the map of keys to values, may be null
                * @return a lookup using the map, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrLookup</name>
                </type>
                <name>mapLookup</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Map</name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>MapStrLookup</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>map</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Constructor.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>StrLookup</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Looks up a String key to a String value.
                * &lt;p&gt;
                * The internal implementation may use any mechanism to return the value.
                * The simplest implementation is to use a Map. However, virtually any
                * implementation is possible.
                * &lt;p&gt;
                * For example, it would be possible to implement a lookup that used the
                * key as a primary key, and looked up the value on demand from the database
                * Or, a numeric based implementation could be created that treats the key
                * as an integer, increments the value and return the result as a string -
                * converting 1 to 2, 15 to 16 etc.
                * &lt;p&gt;
                * The {@link #lookup(String)} method always returns a String, regardless of
                * the underlying data, by converting it as necessary. For example:
                * &lt;pre&gt;
                * Map map = new HashMap();
                * map.put("number", new Integer(2));
                * assertEquals("2", StrLookup.mapLookup(map).lookup("number"));
                * &lt;/pre&gt;
                * @param key the key to be looked up, may be null
                * @return the matching value, null if no match
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>String</name>
                </type>
                <name>lookup</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Lookup implementation that uses a Map.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                class <name>MapStrLookup</name>
                <super>
                    <extends>extends
                        <name>StrLookup</name>
                    </extends>
                </super>
                <block>{

                    <comment type="javadoc">/** Map keys are variable names and value. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>Map</name>
                            </type>
                            <name>map</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Creates a new instance backed by a Map.
                        *
                        * @param map the map of keys to values, may be null
                        */
                    </comment>
                    <constructor>
                        <name>MapStrLookup</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Map</name>
                                    </type>
                                    <name>map</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>map</name>
                                    </name>
                                    =
                                    <name>map</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Looks up a String key to a String value using the map.
                        * &lt;p&gt;
                        * If the map is null, then null is returned.
                        * The map result object is converted to a string using toString().
                        *
                        * @param key the key to be looked up, may be null
                        * @return the matching value, null if no match
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>lookup</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>key</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>map</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>obj</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>map</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>obj</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>obj</name>.
                                            <name>toString</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
