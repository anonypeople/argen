<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\text\StrMatcher.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>text</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A matcher class that can be queried to determine if a character array
        * portion matches.
        * &lt;p&gt;
        * This class comes complete with various factory methods.
        * If these do not suffice, you can subclass and implement your own matcher.
        *
        * @author Apache Software Foundation
        * @since 2.2
        * @version $Id: StrMatcher.java 905636 2010-02-02 14:03:32Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>StrMatcher</name>
        <block>{

            <comment type="javadoc">/**
                * Matches the comma character.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>COMMA_MATCHER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>','</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Matches the tab character.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>TAB_MATCHER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'\t'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Matches the space character.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>SPACE_MATCHER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>' '</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Matches the same characters as StringTokenizer,
                * namely space, tab, newline, formfeed.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>SPLIT_MATCHER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharSetMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>" \t\n\r\f".
                                            <call>
                                                <name>toCharArray</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Matches the String trim() whitespace characters.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>TRIM_MATCHER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>TrimMatcher</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Matches the double quote character.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>SINGLE_QUOTE_MATCHER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'\''</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Matches the double quote character.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>DOUBLE_QUOTE_MATCHER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'"'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Matches the single or double quote character.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>QUOTE_MATCHER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>CharSetMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"'\"".
                                            <call>
                                                <name>toCharArray</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Matches no characters.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>NONE_MATCHER</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>NoMatcher</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// -----------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * Returns a matcher which matches the comma character.
                *
                * @return a matcher for a comma
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>commaMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>COMMA_MATCHER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a matcher which matches the tab character.
                *
                * @return a matcher for a tab
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>tabMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>TAB_MATCHER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a matcher which matches the space character.
                *
                * @return a matcher for a space
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>spaceMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>SPACE_MATCHER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Matches the same characters as StringTokenizer,
                * namely space, tab, newline and formfeed.
                *
                * @return the split matcher
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>splitMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>SPLIT_MATCHER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Matches the String trim() whitespace characters.
                *
                * @return the trim matcher
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>trimMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>TRIM_MATCHER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a matcher which matches the single quote character.
                *
                * @return a matcher for a single quote
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>singleQuoteMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>SINGLE_QUOTE_MATCHER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a matcher which matches the double quote character.
                *
                * @return a matcher for a double quote
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>doubleQuoteMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>DOUBLE_QUOTE_MATCHER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a matcher which matches the single or double quote character.
                *
                * @return a matcher for a single or double quote
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>quoteMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>QUOTE_MATCHER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Matches no characters.
                *
                * @return a matcher that matches nothing
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>noneMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>NONE_MATCHER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Constructor that creates a matcher from a character.
                *
                * @param ch the character to match, must not be null
                * @return a new Matcher for the given char
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>charMatcher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>CharMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Constructor that creates a matcher from a set of characters.
                *
                * @param chars the characters to match, null or empty matches nothing
                * @return a new matcher for the given char[]
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>charSetMatcher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>chars</name>
                                == <name>null</name> ||
                                <name><name>chars</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>NONE_MATCHER</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>chars</name>.
                                    <name>length</name>
                                </name>
                                == 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>CharMatcher</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>chars</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>CharSetMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>chars</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Constructor that creates a matcher from a string representing a set of characters.
                *
                * @param chars the characters to match, null or empty matches nothing
                * @return a new Matcher for the given characters
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>charSetMatcher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>chars</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>chars</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>NONE_MATCHER</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>chars</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>CharMatcher</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>chars</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>CharSetMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>chars</name>.
                                                    <name>toCharArray</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Constructor that creates a matcher from a string.
                *
                * @param str the string to match, null or empty matches nothing
                * @return a new Matcher for the given String
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>stringMatcher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>NONE_MATCHER</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>StringMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Constructor.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>StrMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the number of matching characters, zero for no match.
                * &lt;p&gt;
                * This method is called to check for a match.
                * The parameter &lt;code&gt;pos&lt;/code&gt; represents the current position to be
                * checked in the string &lt;code&gt;buffer&lt;/code&gt; (a character array which must
                * not be changed).
                * The API guarantees that &lt;code&gt;pos&lt;/code&gt; is a valid index for &lt;code&gt;buffer&lt;/code&gt;.
                * &lt;p&gt;
                * The character array may be larger than the active area to be matched.
                * Only values in the buffer between the specifed indices may be accessed.
                * &lt;p&gt;
                * The matching code may check one character or many.
                * It may check characters preceeding &lt;code&gt;pos&lt;/code&gt; as well as those
                * after, so long as no checks exceed the bounds specified.
                * &lt;p&gt;
                * It must return zero for no match, or a positive number if a match was found.
                * The number indicates the number of characters that matched.
                *
                * @param buffer the text content to match against, do not change
                * @param pos the starting position for the match, valid for buffer
                * @param bufferStart the first active index in the buffer, valid for buffer
                * @param bufferEnd the end index (exclusive) of the active buffer, valid for buffer
                * @return the number of matching characters, zero for no match
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>int</name>
                </type>
                <name>isMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bufferStart</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bufferEnd</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the number of matching characters, zero for no match.
                * &lt;p&gt;
                * This method is called to check for a match.
                * The parameter &lt;code&gt;pos&lt;/code&gt; represents the current position to be
                * checked in the string &lt;code&gt;buffer&lt;/code&gt; (a character array which must
                * not be changed).
                * The API guarantees that &lt;code&gt;pos&lt;/code&gt; is a valid index for &lt;code&gt;buffer&lt;/code&gt;.
                * &lt;p&gt;
                * The matching code may check one character or many.
                * It may check characters preceeding &lt;code&gt;pos&lt;/code&gt; as well as those after.
                * &lt;p&gt;
                * It must return zero for no match, or a positive number if a match was found.
                * The number indicates the number of characters that matched.
                *
                * @param buffer the text content to match against, do not change
                * @param pos the starting position for the match, valid for buffer
                * @return the number of matching characters, zero for no match
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>isMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>buffer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isMatch</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>buffer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pos</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>buffer</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Class used to define a set of characters for matching purposes.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>CharSetMatcher</name>
                <super>
                    <extends>extends
                        <name>StrMatcher</name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/** The set of characters to match. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>chars</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Constructor that creates a matcher from a character array.
                        *
                        * @param chars the characters to match, must not be null
                        */
                    </comment>
                    <constructor>
                        <name>CharSetMatcher</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>
                                        <name>chars</name>
                                        <index>[]</index>
                                    </name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>chars</name>
                                    </name>
                                    = (
                                    <name>
                                        <name>char</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name><name>chars</name>.
                                            <name>clone</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>Arrays</name>.
                                            <name>sort</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>chars</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Returns whether or not the given character matches.
                        *
                        * @param buffer the text content to match against, do not change
                        * @param pos the starting position for the match, valid for buffer
                        * @param bufferStart the first active index in the buffer, valid for buffer
                        * @param bufferEnd the end index of the active buffer, valid for buffer
                        * @return the number of matching characters, zero for no match
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>isMatch</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>char</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>buffer</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>pos</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferStart</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferEnd</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Arrays</name>.
                                            <name>binarySearch</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>chars</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>buffer</name>
                                                        <index>[
                                                            <expr>
                                                                <name>pos</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    &gt;= 0 ? 1 : 0
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Class used to define a character for matching purposes.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>CharMatcher</name>
                <super>
                    <extends>extends
                        <name>StrMatcher</name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/** The character to match. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Constructor that creates a matcher that matches a single character.
                        *
                        * @param ch the character to match
                        */
                    </comment>
                    <constructor>
                        <name>CharMatcher</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>ch</name>
                                    </name>
                                    =
                                    <name>ch</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Returns whether or not the given character matches.
                        *
                        * @param buffer the text content to match against, do not change
                        * @param pos the starting position for the match, valid for buffer
                        * @param bufferStart the first active index in the buffer, valid for buffer
                        * @param bufferEnd the end index of the active buffer, valid for buffer
                        * @return the number of matching characters, zero for no match
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>isMatch</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>char</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>buffer</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>pos</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferStart</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferEnd</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>ch</name>
                                    ==
                                    <name>
                                        <name>buffer</name>
                                        <index>[
                                            <expr>
                                                <name>pos</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    ? 1 : 0
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Class used to define a set of characters for matching purposes.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>StringMatcher</name>
                <super>
                    <extends>extends
                        <name>StrMatcher</name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/** The string to match, as a character array. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>chars</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Constructor that creates a matcher from a String.
                        *
                        * @param str the string to match, must not be null
                        */
                    </comment>
                    <constructor>
                        <name>StringMatcher</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>str</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>chars</name>
                                    =
                                    <call>
                                        <name><name>str</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Returns whether or not the given text matches the stored string.
                        *
                        * @param buffer the text content to match against, do not change
                        * @param pos the starting position for the match, valid for buffer
                        * @param bufferStart the first active index in the buffer, valid for buffer
                        * @param bufferEnd the end index of the active buffer, valid for buffer
                        * @return the number of matching characters, zero for no match
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>isMatch</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>char</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>buffer</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>pos</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferStart</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferEnd</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>len</name> =
                                    <init>
                                        <expr>
                                            <name><name>chars</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>pos</name>
                                        + <name>len</name> &gt;
                                        <name>bufferEnd</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>0</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name><name>chars</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                    ,
                                    <expr><name>pos</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>chars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                !=
                                                <name>
                                                    <name>buffer</name>
                                                    <index>[
                                                        <expr>
                                                            <name>pos</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>0</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>len</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Class used to match no characters.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>NoMatcher</name>
                <super>
                    <extends>extends
                        <name>StrMatcher</name>
                    </extends>
                </super>
                <block>{

                    <comment type="javadoc">/**
                        * Constructs a new instance of &lt;code&gt;NoMatcher&lt;/code&gt;.
                        */
                    </comment>
                    <constructor>
                        <name>NoMatcher</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Always returns &lt;code&gt;false&lt;/code&gt;.
                        *
                        * @param buffer the text content to match against, do not change
                        * @param pos the starting position for the match, valid for buffer
                        * @param bufferStart the first active index in the buffer, valid for buffer
                        * @param bufferEnd the end index of the active buffer, valid for buffer
                        * @return the number of matching characters, zero for no match
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>isMatch</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>char</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>buffer</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>pos</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferStart</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferEnd</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return <expr>0</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Class used to match whitespace as per trim().
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>TrimMatcher</name>
                <super>
                    <extends>extends
                        <name>StrMatcher</name>
                    </extends>
                </super>
                <block>{

                    <comment type="javadoc">/**
                        * Constructs a new instance of &lt;code&gt;TrimMatcher&lt;/code&gt;.
                        */
                    </comment>
                    <constructor>
                        <name>TrimMatcher</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Returns whether or not the given character matches.
                        *
                        * @param buffer the text content to match against, do not change
                        * @param pos the starting position for the match, valid for buffer
                        * @param bufferStart the first active index in the buffer, valid for buffer
                        * @param bufferEnd the end index of the active buffer, valid for buffer
                        * @return the number of matching characters, zero for no match
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>isMatch</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>char</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>buffer</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>pos</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferStart</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferEnd</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>
                                        <name>buffer</name>
                                        <index>[
                                            <expr>
                                                <name>pos</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &lt;= 32 ? 1 : 0
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            }
        </block>
    </class>
</unit>
