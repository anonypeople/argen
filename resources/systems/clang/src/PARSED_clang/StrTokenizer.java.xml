<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\text\StrTokenizer.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>text</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ListIterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Tokenizes a string based based on delimiters (separators)
        * and supporting quoting and ignored character concepts.
        * &lt;p&gt;
        * This class can split a String into many smaller strings. It aims
        * to do a similar job to {@link java.util.StringTokenizer StringTokenizer},
        * however it offers much more control and flexibility including implementing
        * the &lt;code&gt;ListIterator&lt;/code&gt; interface. By default, it is set up
        * like &lt;code&gt;StringTokenizer&lt;/code&gt;.
        * &lt;p&gt;
        * The input String is split into a number of &lt;i&gt;tokens&lt;/i&gt;.
        * Each token is separated from the next String by a &lt;i&gt;delimiter&lt;/i&gt;.
        * One or more delimiter characters must be specified.
        * &lt;p&gt;
        * Each token may be surrounded by quotes.
        * The &lt;i&gt;quote&lt;/i&gt; matcher specifies the quote character(s).
        * A quote may be escaped within a quoted section by duplicating itself.
        * &lt;p&gt;
        * Between each token and the delimiter are potentially characters that need trimming.
        * The &lt;i&gt;trimmer&lt;/i&gt; matcher specifies these characters.
        * One usage might be to trim whitespace characters.
        * &lt;p&gt;
        * At any point outside the quotes there might potentially be invalid characters.
        * The &lt;i&gt;ignored&lt;/i&gt; matcher specifies these characters to be removed.
        * One usage might be to remove new line characters.
        * &lt;p&gt;
        * Empty tokens may be removed or returned as null.
        * &lt;pre&gt;
        * "a,b,c" - Three tokens "a","b","c" (comma delimiter)
        * " a, b , c " - Three tokens "a","b","c" (default CSV processing trims whitespace)
        * "a, ", b ,", c" - Three tokens "a, " , " b ", ", c" (quoted text untouched)
        * &lt;/pre&gt;
        * &lt;p&gt;
        *
        * This tokenizer has the following properties and options:
        *
        * &lt;table&gt;
        * &lt;tr&gt;
        * &lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Default&lt;/th&gt;
        * &lt;/tr&gt;
        * &lt;tr&gt;
        * &lt;td&gt;delim&lt;/td&gt;&lt;td&gt;CharSetMatcher&lt;/td&gt;&lt;td&gt;{ \t\n\r\f}&lt;/td&gt;
        * &lt;/tr&gt;
        * &lt;tr&gt;
        * &lt;td&gt;quote&lt;/td&gt;&lt;td&gt;NoneMatcher&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;
        * &lt;/tr&gt;
        * &lt;tr&gt;
        * &lt;td&gt;ignore&lt;/td&gt;&lt;td&gt;NoneMatcher&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;
        * &lt;/tr&gt;
        * &lt;tr&gt;
        * &lt;td&gt;emptyTokenAsNull&lt;/td&gt;&lt;td&gt;boolean&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;
        * &lt;/tr&gt;
        * &lt;tr&gt;
        * &lt;td&gt;ignoreEmptyTokens&lt;/td&gt;&lt;td&gt;boolean&lt;/td&gt;&lt;td&gt;true&lt;/td&gt;
        * &lt;/tr&gt;
        * &lt;/table&gt;
        *
        * @author Apache Software Foundation
        * @author Matthew Inger
        * @author Gary D. Gregory
        * @since 2.2
        * @version $Id: StrTokenizer.java 907631 2010-02-08 12:22:48Z sebb $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>StrTokenizer</name>
        <super>
            <implements>implements <name>ListIterator</name>,
                <name>Cloneable</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrTokenizer</name>
                    </type>
                    <name>CSV_TOKENIZER_PROTOTYPE</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>StrTokenizer</name>
                    </type>
                    <name>TSV_TOKENIZER_PROTOTYPE</name>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <expr_stmt>
                    <expr>
                        <name>CSV_TOKENIZER_PROTOTYPE</name>
                        = new
                        <call>
                            <name>StrTokenizer</name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>CSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setDelimiterMatcher</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name><name>StrMatcher</name>.
                                                <name>commaMatcher</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>CSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setQuoteMatcher</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name><name>StrMatcher</name>.
                                                <name>doubleQuoteMatcher</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>CSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setIgnoredMatcher</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name><name>StrMatcher</name>.
                                                <name>noneMatcher</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>CSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setTrimmerMatcher</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name><name>StrMatcher</name>.
                                                <name>trimMatcher</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>CSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setEmptyTokenAsNull</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>false</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>CSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setIgnoreEmptyTokens</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>false</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>

                <expr_stmt>
                    <expr>
                        <name>TSV_TOKENIZER_PROTOTYPE</name>
                        = new
                        <call>
                            <name>StrTokenizer</name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>TSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setDelimiterMatcher</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name><name>StrMatcher</name>.
                                                <name>tabMatcher</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>TSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setQuoteMatcher</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name><name>StrMatcher</name>.
                                                <name>doubleQuoteMatcher</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>TSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setIgnoredMatcher</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name><name>StrMatcher</name>.
                                                <name>noneMatcher</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>TSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setTrimmerMatcher</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name><name>StrMatcher</name>.
                                                <name>trimMatcher</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>TSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setEmptyTokenAsNull</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>false</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name><name>TSV_TOKENIZER_PROTOTYPE</name>.
                                <name>setIgnoreEmptyTokens</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>false</expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <comment type="javadoc">/** The text to work on. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>char</name>
                    </type>
                    <name>
                        <name>chars</name>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The parsed tokens */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>
                        <name>tokens</name>
                        <index>[]</index>
                    </name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The current iteration position */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>tokenPos</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The delimiter matcher */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>delimMatcher</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>StrMatcher</name>.
                                    <name>splitMatcher</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The quote matcher */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>quoteMatcher</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>StrMatcher</name>.
                                    <name>noneMatcher</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The ignored matcher */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>ignoredMatcher</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>StrMatcher</name>.
                                    <name>noneMatcher</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** The trimmer matcher */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>StrMatcher</name>
                    </type>
                    <name>trimmerMatcher</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>StrMatcher</name>.
                                    <name>noneMatcher</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Whether to return empty tokens as null */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>emptyAsNull</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Whether to ignore empty tokens */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>ignoreEmptyTokens</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">//-----------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * Returns a clone of &lt;code&gt;CSV_TOKENIZER_PROTOTYPE&lt;/code&gt;.
                *
                * @return a clone of &lt;code&gt;CSV_TOKENIZER_PROTOTYPE&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>getCSVClone</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>StrTokenizer</name>)
                            <call>
                                <name><name>CSV_TOKENIZER_PROTOTYPE</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets a new tokenizer instance which parses Comma Separated Value strings
                * initializing it with the given input. The default for CSV processing
                * will be trim whitespace from both ends (which can be overridden with
                * the setTrimmer method).
                * &lt;p&gt;
                * You must call a "reset" method to set the string which you want to parse.
                * @return a new tokenizer instance which parses Comma Separated Value strings
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>getCSVInstance</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getCSVClone</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets a new tokenizer instance which parses Comma Separated Value strings
                * initializing it with the given input. The default for CSV processing
                * will be trim whitespace from both ends (which can be overridden with
                * the setTrimmer method).
                *
                * @param input the text to parse
                * @return a new tokenizer instance which parses Comma Separated Value strings
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>getCSVInstance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrTokenizer</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getCSVClone</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets a new tokenizer instance which parses Comma Separated Value strings
                * initializing it with the given input. The default for CSV processing
                * will be trim whitespace from both ends (which can be overridden with
                * the setTrimmer method).
                *
                * @param input the text to parse
                * @return a new tokenizer instance which parses Comma Separated Value strings
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>getCSVInstance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrTokenizer</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getCSVClone</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a clone of &lt;code&gt;TSV_TOKENIZER_PROTOTYPE&lt;/code&gt;.
                *
                * @return a clone of &lt;code&gt;TSV_TOKENIZER_PROTOTYPE&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>getTSVClone</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>StrTokenizer</name>)
                            <call>
                                <name><name>TSV_TOKENIZER_PROTOTYPE</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Gets a new tokenizer instance which parses Tab Separated Value strings.
                * The default for CSV processing will be trim whitespace from both ends
                * (which can be overridden with the setTrimmer method).
                * &lt;p&gt;
                * You must call a "reset" method to set the string which you want to parse.
                * @return a new tokenizer instance which parses Tab Separated Value strings.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>getTSVInstance</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getTSVClone</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets a new tokenizer instance which parses Tab Separated Value strings.
                * The default for CSV processing will be trim whitespace from both ends
                * (which can be overridden with the setTrimmer method).
                * @param input the string to parse
                * @return a new tokenizer instance which parses Tab Separated Value strings.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>getTSVInstance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrTokenizer</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getTSVClone</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets a new tokenizer instance which parses Tab Separated Value strings.
                * The default for CSV processing will be trim whitespace from both ends
                * (which can be overridden with the setTrimmer method).
                * @param input the string to parse
                * @return a new tokenizer instance which parses Tab Separated Value strings.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>getTSVInstance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrTokenizer</name>
                            </type>
                            <name>tok</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getTSVClone</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>tok</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>tok</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Constructs a tokenizer splitting on space, tab, newline and formfeed
                * as per StringTokenizer, but with no text to tokenize.
                * &lt;p&gt;
                * This constructor is normally used with {@link #reset(String)}.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>chars</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting on space, tab, newline and formfeed
                * as per StringTokenizer.
                *
                * @param input the string which is to be parsed
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>input</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>chars</name>
                                        =
                                        <call>
                                            <name><name>input</name>.
                                                <name>toCharArray</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>chars</name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting on the specified delimiter character.
                *
                * @param input the string which is to be parsed
                * @param delim the field delimiter character
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setDelimiterChar</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delim</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting on the specified delimiter string.
                *
                * @param input the string which is to be parsed
                * @param delim the field delimiter string
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setDelimiterString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delim</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting using the specified delimiter matcher.
                *
                * @param input the string which is to be parsed
                * @param delim the field delimiter matcher
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StrMatcher</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setDelimiterMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delim</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting on the specified delimiter character
                * and handling quotes using the specified quote character.
                *
                * @param input the string which is to be parsed
                * @param delim the field delimiter character
                * @param quote the field quoted string character
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>quote</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>delim</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setQuoteChar</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>quote</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting using the specified delimiter matcher
                * and handling quotes using the specified quote matcher.
                *
                * @param input the string which is to be parsed
                * @param delim the field delimiter matcher
                * @param quote the field quoted string matcher
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StrMatcher</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StrMatcher</name>
                            </type>
                            <name>quote</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>delim</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setQuoteMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>quote</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting on space, tab, newline and formfeed
                * as per StringTokenizer.
                * &lt;p&gt;
                * The input character array is not cloned, and must not be altered after
                * passing in to this method.
                *
                * @param input the string which is to be parsed, not cloned
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>chars</name>
                            </name>
                            =
                            <name>input</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting on the specified character.
                * &lt;p&gt;
                * The input character array is not cloned, and must not be altered after
                * passing in to this method.
                *
                * @param input the string which is to be parsed, not cloned
                * @param delim the field delimiter character
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setDelimiterChar</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delim</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting on the specified string.
                * &lt;p&gt;
                * The input character array is not cloned, and must not be altered after
                * passing in to this method.
                *
                * @param input the string which is to be parsed, not cloned
                * @param delim the field delimiter string
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setDelimiterString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delim</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting using the specified delimiter matcher.
                * &lt;p&gt;
                * The input character array is not cloned, and must not be altered after
                * passing in to this method.
                *
                * @param input the string which is to be parsed, not cloned
                * @param delim the field delimiter matcher
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StrMatcher</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setDelimiterMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delim</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting on the specified delimiter character
                * and handling quotes using the specified quote character.
                * &lt;p&gt;
                * The input character array is not cloned, and must not be altered after
                * passing in to this method.
                *
                * @param input the string which is to be parsed, not cloned
                * @param delim the field delimiter character
                * @param quote the field quoted string character
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>quote</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>delim</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setQuoteChar</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>quote</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a tokenizer splitting using the specified delimiter matcher
                * and handling quotes using the specified quote matcher.
                * &lt;p&gt;
                * The input character array is not cloned, and must not be altered after
                * passing in to this method.
                *
                * @param input the string which is to be parsed, not cloned
                * @param delim the field delimiter character
                * @param quote the field quoted string character
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StrTokenizer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StrMatcher</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StrMatcher</name>
                            </type>
                            <name>quote</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>delim</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>setQuoteMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>quote</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// API</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the number of tokens found in the String.
                *
                * @return the number of matched tokens
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkTokenized</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name><name>tokens</name>.
                                <name>length</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the next token from the String.
                * Equivalent to {@link #next()} except it returns null rather than
                * throwing {@link NoSuchElementException} when no tokens remain.
                *
                * @return the next sequential token, or null when no more tokens are found
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>nextToken</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>hasNext</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>
                                            <name>tokens</name>
                                            <index>[
                                                <expr><name>tokenPos</name>++
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the previous token from the String.
                *
                * @return the previous sequential token, or null when no more tokens are found
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>previousToken</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>hasPrevious</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>
                                            <name>tokens</name>
                                            <index>[
                                                <expr>--
                                                    <name>tokenPos</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets a copy of the full token list as an independent modifiable array.
                *
                * @return the tokens as a String array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>getTokenArray</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkTokenized</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>tokens</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets a copy of the full token list as an independent modifiable list.
                *
                * @return the tokens as a String array
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>List</name>
                </type>
                <name>getTokenList</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkTokenized</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>tokens</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>tokens</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>list</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>tokens</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>list</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Resets this tokenizer, forgetting all parsing and iteration already completed.
                * &lt;p&gt;
                * This method allows the same tokenizer to be reused for the same String.
                *
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>tokenPos</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>tokens</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reset this tokenizer, giving it a new input string to parse.
                * In this manner you can re-use a tokenizer with the same settings
                * on multiple input lines.
                *
                * @param input the new string to tokenize, null sets no text to parse
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>reset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>reset</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>input</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>chars</name>
                                        </name>
                                        =
                                        <call>
                                            <name><name>input</name>.
                                                <name>toCharArray</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>chars</name>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reset this tokenizer, giving it a new input string to parse.
                * In this manner you can re-use a tokenizer with the same settings
                * on multiple input lines.
                * &lt;p&gt;
                * The input character array is not cloned, and must not be altered after
                * passing in to this method.
                *
                * @param input the new character array to tokenize, not cloned, null sets no text to parse
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>reset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>reset</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>chars</name>
                            </name>
                            =
                            <name>input</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ListIterator</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks whether there are any more tokens.
                *
                * @return true if there are more tokens
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkTokenized</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>tokenPos</name>
                            &lt;
                            <name><name>tokens</name>.
                                <name>length</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the next token.
                *
                * @return the next String token
                * @throws NoSuchElementException if there are no more elements
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>next</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>hasNext</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>
                                            <name>tokens</name>
                                            <index>[
                                                <expr><name>tokenPos</name>++
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>NoSuchElementException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the index of the next token to return.
                *
                * @return the next token index
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>nextIndex</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>tokenPos</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether there are any previous tokens that can be iterated to.
                *
                * @return true if there are previous tokens
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasPrevious</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkTokenized</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>tokenPos</name>
                            &gt; 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the token previous to the last returned token.
                *
                * @return the previous token
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>previous</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>hasPrevious</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>
                                            <name>tokens</name>
                                            <index>[
                                                <expr>--
                                                    <name>tokenPos</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>NoSuchElementException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the index of the previous token.
                *
                * @return the previous token index
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>previousIndex</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>tokenPos</name>
                            - 1
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Unsupported ListIterator operation.
                *
                * @throws UnsupportedOperationException always
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>remove</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"remove() is unsupported"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Unsupported ListIterator operation.
                * @param obj this parameter ignored.
                * @throws UnsupportedOperationException always
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>set</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"set() is unsupported"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Unsupported ListIterator operation.
                * @param obj this parameter ignored.
                * @throws UnsupportedOperationException always
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"add() is unsupported"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// Implementation</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Checks if tokenization has been done, and if not then do it.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>checkTokenized</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>tokens</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>chars</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// still call tokenize as subclass may do some work
                                            </comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>List</name>
                                                    </type>
                                                    <name>split</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name>tokenize</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>null</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>tokens</name>
                                                    = (
                                                    <name>
                                                        <name>String</name>
                                                        <index>[]</index>
                                                    </name>
                                                    )
                                                    <call>
                                                        <name><name>split</name>.
                                                            <name>toArray</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>new
                                                                    <name>
                                                                        <name>String</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>split</name>.
                                                                                        <name>size</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>List</name>
                                                    </type>
                                                    <name>split</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name>tokenize</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>chars</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>chars</name>.
                                                                                <name>length</name>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>tokens</name>
                                                    = (
                                                    <name>
                                                        <name>String</name>
                                                        <index>[]</index>
                                                    </name>
                                                    )
                                                    <call>
                                                        <name><name>split</name>.
                                                            <name>toArray</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>new
                                                                    <name>
                                                                        <name>String</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>split</name>.
                                                                                        <name>size</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Internal method to performs the tokenization.
                * &lt;p&gt;
                * Most users of this class do not need to call this method. This method
                * will be called automatically by other (public) methods when required.
                * &lt;p&gt;
                * This method exists to allow subclasses to add code before or after the
                * tokenization. For example, a subclass could alter the character array,
                * offset or count to be parsed, or call the tokenizer multiple times on
                * multiple strings. It is also be possible to filter the results.
                * &lt;p&gt;
                * &lt;code&gt;StrTokenizer&lt;/code&gt; will always pass a zero offset and a count
                * equal to the length of the array to this method, however a subclass
                * may pass other values, or even an entirely different array.
                *
                * @param chars the character array being tokenized, may be null
                * @param offset the start position within the character array, must be valid
                * @param count the number of characters to tokenize, must be valid
                * @return the modifiable list of String tokens, unmodifiable if null array or zero count
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>List</name>
                </type>
                <name>tokenize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>chars</name>
                                == <name>null</name> || <name>count</name> == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>Collections</name>.
                                            <name>EMPTY_LIST</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>tokens</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name> =
                            <init>
                                <expr>
                                    <name>offset</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// loop around the entire buffer</comment>
                    <while>while
                        <condition>(
                            <expr>
                                <name>pos</name>
                                &gt;= 0 &amp;&amp; <name>pos</name> &lt;
                                <name>count</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">// find next token</comment>
                            <expr_stmt>
                                <expr>
                                    <name>pos</name>
                                    =
                                    <call>
                                        <name>readNextToken</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>chars</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>pos</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>count</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>buf</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>tokens</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// handle case where end of string is a delimiter</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>pos</name>
                                        &gt;=
                                        <name>count</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>addToken</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>tokens</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>""</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>tokens</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Adds a token to a list, paying attention to the parameters we've set.
                *
                * @param list the list to add to
                * @param tok the token to add
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>addToken</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>list</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tok</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>tok</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>tok</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isIgnoreEmptyTokens</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return;</return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isEmptyTokenAsNull</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>tok</name>
                                                    =
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>list</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tok</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads character by character through the String to get the next token.
                *
                * @param chars the character array being tokenized
                * @param start the first character of field
                * @param len the length of the character array being tokenized
                * @param workArea a temporary work area
                * @param tokens the list of parsed tokens
                * @return the starting position of the next field (the character
                * immediately after the delimiter), or -1 if end of string found
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>int</name>
                </type>
                <name>readNextToken</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>workArea</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>tokens</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// skip all leading whitespace, unless it is the</comment>
                    <comment type="line">// field delimiter or the quote character</comment>
                    <while>while
                        <condition>(
                            <expr>
                                <name>start</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>removeLen</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>max</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>getIgnoredMatcher</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>isMatch</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>chars</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>len</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>getTrimmerMatcher</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>isMatch</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>chars</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>len</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>removeLen</name>
                                        == 0 ||
                                        <call>
                                            <name>getDelimiterMatcher</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>isMatch</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>chars</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>len</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &gt; 0 ||
                                        <call>
                                            <name>getQuoteMatcher</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>isMatch</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>chars</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>len</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>start</name>
                                    +=
                                    <name>removeLen</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <comment type="line">// handle reaching end</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &gt;=
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>addToken</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tokens</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>""</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// handle empty token</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>delimLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getDelimiterMatcher</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>isMatch</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>chars</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>len</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>delimLen</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>addToken</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>tokens</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>""</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>start</name>
                                        +
                                        <name>delimLen</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// handle found token</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>quoteLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getQuoteMatcher</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>isMatch</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>chars</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>len</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>quoteLen</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>readWithQuotes</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>chars</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                        +
                                                        <name>quoteLen</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>len</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>workArea</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>tokens</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>quoteLen</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>readWithQuotes</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>chars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>len</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>workArea</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tokens</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a possibly quoted string token.
                *
                * @param chars the character array being tokenized
                * @param start the first character of field
                * @param len the length of the character array being tokenized
                * @param workArea a temporary work area
                * @param tokens the list of parsed tokens
                * @param quoteStart the start position of the matched quote, 0 if no quoting
                * @param quoteLen the length of the matched quote, 0 if no quoting
                * @return the starting position of the next field (the character
                * immediately after the delimiter, or if end of string found,
                * then the length of string
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>int</name>
                </type>
                <name>readWithQuotes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>workArea</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>tokens</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>quoteStart</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>quoteLen</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Loop until we've found the end of the quoted</comment>
                    <comment type="line">// string or the end of the input</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>workArea</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name> =
                            <init>
                                <expr>
                                    <name>start</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>quoting</name> =
                            <init>
                                <expr>(<name>quoteLen</name> &gt; 0)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>trimStart</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>
                                <name>pos</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">// quoting mode can occur several times throughout a string</comment>
                            <comment type="line">// we must switch between quoting and non-quoting until we</comment>
                            <comment type="line">// encounter a non-quoted delimiter, or end of string</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>quoting</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// In quoting mode</comment>

                                        <comment type="line">// If we've found a quote character, see if it's</comment>
                                        <comment type="line">// followed by a second quote. If so, then we need
                                        </comment>
                                        <comment type="line">// to actually put the quote character into the token
                                        </comment>
                                        <comment type="line">// rather than end the token.</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>isQuote</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>chars</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>pos</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>len</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>quoteStart</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>quoteLen</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <call>
                                                                    <name>isQuote</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>chars</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>pos</name>
                                                                                +
                                                                                <name>quoteLen</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>len</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>quoteStart</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>quoteLen</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <comment type="line">// matched pair of quotes, thus an
                                                                    escaped quote
                                                                </comment>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>workArea</name>.
                                                                                <name>append</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>chars</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>pos</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>quoteLen</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>pos</name>
                                                                        += (<name>quoteLen</name> * 2)
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>trimStart</name>
                                                                        =
                                                                        <call>
                                                                            <name><name>workArea</name>.
                                                                                <name>size</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <continue>continue;</continue>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>

                                                    <comment type="line">// end of quoting</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>quoting</name>
                                                            = false
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>pos</name>
                                                            +=
                                                            <name>quoteLen</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">// copy regular character from inside quotes</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>workArea</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr><name>pos</name>++
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>trimStart</name>
                                                =
                                                <call>
                                                    <name><name>workArea</name>.
                                                        <name>size</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// Not in quoting mode</comment>

                                        <comment type="line">// check for delimiter, and thus end of token</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>delimLen</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getDelimiterMatcher</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>isMatch</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>chars</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>pos</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>start</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>len</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>delimLen</name>
                                                    &gt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// return condition when end of token found
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>addToken</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tokens</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>workArea</name>.
                                                                                    <name>substring</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>0</expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>trimStart</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return
                                                        <expr>
                                                            <name>pos</name>
                                                            +
                                                            <name>delimLen</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">// check for quote, and thus back into quoting mode
                                        </comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>quoteLen</name>
                                                    &gt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <call>
                                                                    <name>isQuote</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>chars</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>pos</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>len</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>quoteStart</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>quoteLen</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>quoting</name>
                                                                        = true
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>pos</name>
                                                                        +=
                                                                        <name>quoteLen</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <continue>continue;</continue>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">// check for ignored (outside quotes), and ignore</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>ignoredLen</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getIgnoredMatcher</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>isMatch</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>chars</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>pos</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>start</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>len</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>ignoredLen</name>
                                                    &gt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>pos</name>
                                                            +=
                                                            <name>ignoredLen</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">// check for trimmed character</comment>
                                        <comment type="line">// don't yet know if its at the end, so copy to workArea
                                        </comment>
                                        <comment type="line">// use trimStart to keep track of trim at the end</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>trimmedLen</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getTrimmerMatcher</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>isMatch</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>chars</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>pos</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>start</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>len</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>trimmedLen</name>
                                                    &gt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>workArea</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>chars</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>pos</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>trimmedLen</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>pos</name>
                                                            +=
                                                            <name>trimmedLen</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <comment type="line">// copy regular character from outside quotes</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>workArea</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr><name>pos</name>++
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>trimStart</name>
                                                =
                                                <call>
                                                    <name><name>workArea</name>.
                                                        <name>size</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </while>

                    <comment type="line">// return condition when end of string found</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>addToken</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>tokens</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>workArea</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>trimStart</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return <expr>-1</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks if the characters at the index specified match the quote
                * already matched in readNextToken().
                *
                * @param chars the character array being tokenized
                * @param pos the position to check for a quote
                * @param len the length of the character array being tokenized
                * @param quoteStart the start position of the matched quote, 0 if no quoting
                * @param quoteLen the length of the matched quote, 0 if no quoting
                * @return true if a quote is matched
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>isQuote</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>quoteStart</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>quoteLen</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>quoteLen</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>(<name>pos</name> + <name>i</name>) &gt;= <name>len</name> ||
                                        <name>
                                            <name>chars</name>
                                            <index>[
                                                <expr>
                                                    <name>pos</name>
                                                    +
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        !=
                                        <name>
                                            <name>chars</name>
                                            <index>[
                                                <expr>
                                                    <name>quoteStart</name>
                                                    +
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Delimiter</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the field delimiter matcher.
                *
                * @return the delimiter matcher in use
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>getDelimiterMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>delimMatcher</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the field delimiter matcher.
                * &lt;p&gt;
                * The delimitier is used to separate one token from another.
                *
                * @param delim the delimiter matcher to use
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>setDelimiterMatcher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StrMatcher</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>delim</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>delimMatcher</name>
                                        </name>
                                        =
                                        <call>
                                            <name><name>StrMatcher</name>.
                                                <name>noneMatcher</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>delimMatcher</name>
                                        </name>
                                        =
                                        <name>delim</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the field delimiter character.
                *
                * @param delim the delimiter character to use
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>setDelimiterChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>setDelimiterMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>StrMatcher</name>.
                                                    <name>charMatcher</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>delim</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the field delimiter string.
                *
                * @param delim the delimiter string to use
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>setDelimiterString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>delim</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>setDelimiterMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>StrMatcher</name>.
                                                    <name>stringMatcher</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>delim</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Quote</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the quote matcher currently in use.
                * &lt;p&gt;
                * The quote character is used to wrap data between the tokens.
                * This enables delimiters to be entered as data.
                * The default value is '"' (double quote).
                *
                * @return the quote matcher in use
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>getQuoteMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>quoteMatcher</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the quote matcher to use.
                * &lt;p&gt;
                * The quote character is used to wrap data between the tokens.
                * This enables delimiters to be entered as data.
                *
                * @param quote the quote matcher to use, null ignored
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>setQuoteMatcher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StrMatcher</name>
                            </type>
                            <name>quote</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>quote</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>quoteMatcher</name>
                                        </name>
                                        =
                                        <name>quote</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the quote character to use.
                * &lt;p&gt;
                * The quote character is used to wrap data between the tokens.
                * This enables delimiters to be entered as data.
                *
                * @param quote the quote character to use
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>setQuoteChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>quote</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>setQuoteMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>StrMatcher</name>.
                                                    <name>charMatcher</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>quote</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Ignored</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the ignored character matcher.
                * &lt;p&gt;
                * These characters are ignored when parsing the String, unless they are
                * within a quoted region.
                * The default value is not to ignore anything.
                *
                * @return the ignored matcher in use
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>getIgnoredMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ignoredMatcher</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the matcher for characters to ignore.
                * &lt;p&gt;
                * These characters are ignored when parsing the String, unless they are
                * within a quoted region.
                *
                * @param ignored the ignored matcher to use, null ignored
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>setIgnoredMatcher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StrMatcher</name>
                            </type>
                            <name>ignored</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ignored</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>ignoredMatcher</name>
                                        </name>
                                        =
                                        <name>ignored</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the character to ignore.
                * &lt;p&gt;
                * This character is ignored when parsing the String, unless it is
                * within a quoted region.
                *
                * @param ignored the ignored character to use
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>setIgnoredChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ignored</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>setIgnoredMatcher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>StrMatcher</name>.
                                                    <name>charMatcher</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>ignored</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Trimmer</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the trimmer character matcher.
                * &lt;p&gt;
                * These characters are trimmed off on each side of the delimiter
                * until the token or quote is found.
                * The default value is not to trim anything.
                *
                * @return the trimmer matcher in use
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrMatcher</name>
                </type>
                <name>getTrimmerMatcher</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>trimmerMatcher</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the matcher for characters to trim.
                * &lt;p&gt;
                * These characters are trimmed off on each side of the delimiter
                * until the token or quote is found.
                *
                * @param trimmer the trimmer matcher to use, null ignored
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>setTrimmerMatcher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StrMatcher</name>
                            </type>
                            <name>trimmer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>trimmer</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>trimmerMatcher</name>
                                        </name>
                                        =
                                        <name>trimmer</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets whether the tokenizer currently returns empty tokens as null.
                * The default for this property is false.
                *
                * @return true if empty tokens are returned as null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmptyTokenAsNull</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>emptyAsNull</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether the tokenizer should return empty tokens as null.
                * The default for this property is false.
                *
                * @param emptyAsNull whether empty tokens are returned as null
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>setEmptyTokenAsNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>emptyAsNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>emptyAsNull</name>
                            </name>
                            =
                            <name>emptyAsNull</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets whether the tokenizer currently ignores empty tokens.
                * The default for this property is true.
                *
                * @return true if empty tokens are not returned
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isIgnoreEmptyTokens</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ignoreEmptyTokens</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets whether the tokenizer should ignore and not return empty tokens.
                * The default for this property is true.
                *
                * @param ignoreEmptyTokens whether empty tokens are not returned
                * @return this, to enable chaining
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>StrTokenizer</name>
                </type>
                <name>setIgnoreEmptyTokens</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>ignoreEmptyTokens</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>ignoreEmptyTokens</name>
                            </name>
                            =
                            <name>ignoreEmptyTokens</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the String content that the tokenizer is parsing.
                *
                * @return the string content being parsed
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getContent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>chars</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>String</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>chars</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Creates a new instance of this Tokenizer. The new instance is reset so
                * that it will be at the start of the token list.
                * If a {@link CloneNotSupportedException} is caught, return &lt;code&gt;null&lt;/code&gt;.
                *
                * @return a new instance of this Tokenizer which has been reset.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>clone</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>cloneReset</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>CloneNotSupportedException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a new instance of this Tokenizer. The new instance is reset so that
                * it will be at the start of the token list.
                *
                * @return a new instance of this Tokenizer which has been reset.
                * @throws CloneNotSupportedException if there is a problem cloning
                */
            </comment>
            <function>
                <type>
                    <name>Object</name>
                </type>
                <name>cloneReset</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>CloneNotSupportedException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// this method exists to enable 100% test coverage</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrTokenizer</name>
                            </type>
                            <name>cloned</name> =
                            <init>
                                <expr>(<name>StrTokenizer</name>)
                                    <call>
                                        <name><name>super</name>.
                                            <name>clone</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>cloned</name>.
                                    <name>chars</name>
                                </name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>cloned</name>.
                                            <name>chars</name>
                                        </name>
                                        = (
                                        <name>
                                            <name>char</name>
                                            <index>[]</index>
                                        </name>
                                        )
                                        <call>
                                            <name><name>cloned</name>.<name>chars</name>.
                                                <name>clone</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>cloned</name>.
                                    <name>reset</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>cloned</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * Gets the String content that the tokenizer is parsing.
                *
                * @return the string content being parsed
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>tokens</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>"StrTokenizer[not tokenized yet]"</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>"StrTokenizer" +
                            <call>
                                <name>getTokenList</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
