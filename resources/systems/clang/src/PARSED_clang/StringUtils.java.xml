<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\StringUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>text</name>.
            <name>StrBuilder</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Operations on {@link java.lang.String} that are
        * &lt;code&gt;null&lt;/code&gt; safe.&lt;/p&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;&lt;b&gt;IsEmpty/IsBlank&lt;/b&gt;
        * - checks if a String contains text&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;Trim/Strip&lt;/b&gt;
        * - removes leading and trailing whitespace&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;Equals&lt;/b&gt;
        * - compares two strings null-safe&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;startsWith&lt;/b&gt;
        * - check if a String starts with a prefix null-safe&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;endsWith&lt;/b&gt;
        * - check if a String ends with a suffix null-safe&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;IndexOf/LastIndexOf/Contains&lt;/b&gt;
        * - null-safe index-of checks
        * &lt;li&gt;&lt;b&gt;IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut&lt;/b&gt;
        * - index-of any of a set of Strings&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;ContainsOnly/ContainsNone/ContainsAny&lt;/b&gt;
        * - does String contains only/none/any of these characters&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;Substring/Left/Right/Mid&lt;/b&gt;
        * - null-safe substring extractions&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;SubstringBefore/SubstringAfter/SubstringBetween&lt;/b&gt;
        * - substring extraction relative to other strings&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;Split/Join&lt;/b&gt;
        * - splits a String into an array of substrings and vice versa&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;Remove/Delete&lt;/b&gt;
        * - removes part of a String&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;Replace/Overlay&lt;/b&gt;
        * - Searches a String and replaces one String with another&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;Chomp/Chop&lt;/b&gt;
        * - removes the last part of a String&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;LeftPad/RightPad/Center/Repeat&lt;/b&gt;
        * - pads a String&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize&lt;/b&gt;
        * - changes the case of a String&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;CountMatches&lt;/b&gt;
        * - counts the number of occurrences of one String in another&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable&lt;/b&gt;
        * - checks the characters in a String&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;DefaultString&lt;/b&gt;
        * - protects against a null input String&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;Reverse/ReverseDelimited&lt;/b&gt;
        * - reverses a String&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;Abbreviate&lt;/b&gt;
        * - abbreviates a string using ellipsis&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;Difference&lt;/b&gt;
        * - compares Strings and reports on their differences&lt;/li&gt;
        * &lt;li&gt;&lt;b&gt;LevensteinDistance&lt;/b&gt;
        * - the number of changes needed to change one String into another&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * &lt;p&gt;The &lt;code&gt;StringUtils&lt;/code&gt; class defines certain words related to
        * String handling.&lt;/p&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;null - &lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
        * &lt;li&gt;empty - a zero-length string (&lt;code&gt;""&lt;/code&gt;)&lt;/li&gt;
        * &lt;li&gt;space - the space character (&lt;code&gt;' '&lt;/code&gt;, char 32)&lt;/li&gt;
        * &lt;li&gt;whitespace - the characters defined by {@link Character#isWhitespace(char)}&lt;/li&gt;
        * &lt;li&gt;trim - the characters &amp;lt;= 32 as in {@link String#trim()}&lt;/li&gt;
        * &lt;/ul&gt;
        *
        * &lt;p&gt;&lt;code&gt;StringUtils&lt;/code&gt; handles &lt;code&gt;null&lt;/code&gt; input Strings quietly.
        * That is to say that a &lt;code&gt;null&lt;/code&gt; input will return &lt;code&gt;null&lt;/code&gt;.
        * Where a &lt;code&gt;boolean&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; is being returned
        * details vary by method.&lt;/p&gt;
        *
        * &lt;p&gt;A side effect of the &lt;code&gt;null&lt;/code&gt; handling is that a
        * &lt;code&gt;NullPointerException&lt;/code&gt; should be considered a bug in
        * &lt;code&gt;StringUtils&lt;/code&gt; (except for deprecated methods).&lt;/p&gt;
        *
        * &lt;p&gt;Methods in this class give sample code to explain their operation.
        * The symbol &lt;code&gt;*&lt;/code&gt; is used to indicate any input including &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
        *
        * &lt;p&gt;#ThreadSafe#&lt;/p&gt;
        * @see java.lang.String
        * @author Apache Software Foundation
        * @author &lt;a href="http://jakarta.apache.org/turbine/"&gt;Apache Jakarta Turbine&lt;/a&gt;
        * @author &lt;a href="mailto:jon@latchkey.com"&gt;Jon S. Stevens&lt;/a&gt;
        * @author Daniel L. Rall
        * @author &lt;a href="mailto:gcoladonato@yahoo.com"&gt;Greg Coladonato&lt;/a&gt;
        * @author &lt;a href="mailto:ed@apache.org"&gt;Ed Korthof&lt;/a&gt;
        * @author &lt;a href="mailto:rand_mcneely@yahoo.com"&gt;Rand McNeely&lt;/a&gt;
        * @author &lt;a href="mailto:fredrik@westermarck.com"&gt;Fredrik Westermarck&lt;/a&gt;
        * @author Holger Krauth
        * @author &lt;a href="mailto:alex@purpletech.com"&gt;Alexander Day Chaffee&lt;/a&gt;
        * @author &lt;a href="mailto:hps@intermeta.de"&gt;Henning P. Schmiedehausen&lt;/a&gt;
        * @author Arun Mammen Thomas
        * @author Gary Gregory
        * @author Phil Steitz
        * @author Al Chou
        * @author Michael Davey
        * @author Reuben Sivan
        * @author Chris Hyzer
        * @author Scott Johnson
        * @since 1.0
        * @version $Id: StringUtils.java 1058365 2011-01-13 00:04:49Z niallp $
        */
    </comment>
    <comment type="line">//@Immutable</comment>
    <class>
        <specifier>public</specifier>
        class <name>StringUtils</name>
        <block>{
            <comment type="line">// Performance testing notes (JDK 1.4, Jul03, scolebourne)</comment>
            <comment type="line">// Whitespace:</comment>
            <comment type="line">// Character.isWhitespace() is faster than WHITESPACE.indexOf()</comment>
            <comment type="line">// where WHITESPACE is a string of all whitespace characters</comment>
            <comment type="line">//</comment>
            <comment type="line">// Character access:</comment>
            <comment type="line">// String.charAt(n) versus toCharArray(), then array[n]</comment>
            <comment type="line">// String.charAt(n) is about 15% worse for a 10K string</comment>
            <comment type="line">// They are about equal for a length 50 string</comment>
            <comment type="line">// String.charAt(n) is about 4 times better for a length 3 string</comment>
            <comment type="line">// String.charAt(n) is best bet overall</comment>
            <comment type="line">//</comment>
            <comment type="line">// Append:</comment>
            <comment type="line">// String.concat about twice as fast as StringBuffer.append</comment>
            <comment type="line">// (not sure who tested this)</comment>

            <comment type="javadoc">/**
                * The empty String &lt;code&gt;""&lt;/code&gt;.
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>EMPTY</name> =
                    <init>
                        <expr>""</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Represents a failed index search.
                * @since 2.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>INDEX_NOT_FOUND</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;The maximum size to which the padding constant(s) can expand.&lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>PAD_LIMIT</name> =
                    <init>
                        <expr>8192</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;&lt;code&gt;StringUtils&lt;/code&gt; instances should NOT be constructed in
                * standard programming. Instead, the class should be used as
                * &lt;code&gt;StringUtils.trim(" foo ");&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;This constructor is public to permit tools that require a JavaBean
                * instance to operate.&lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>StringUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// Empty checks</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks if a String is empty ("") or null.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isEmpty(null) = true
                * StringUtils.isEmpty("") = true
                * StringUtils.isEmpty(" ") = false
                * StringUtils.isEmpty("bob") = false
                * StringUtils.isEmpty(" bob ") = false
                * &lt;/pre&gt;
                *
                * &lt;p&gt;NOTE: This method changed in Lang version 2.0.
                * It no longer trims the String.
                * That functionality is available in isBlank().&lt;/p&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the String is empty or null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>str</name>
                            == <name>null</name> ||
                            <call>
                                <name><name>str</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if a String is not empty ("") and not null.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isNotEmpty(null) = false
                * StringUtils.isNotEmpty("") = false
                * StringUtils.isNotEmpty(" ") = true
                * StringUtils.isNotEmpty("bob") = true
                * StringUtils.isNotEmpty(" bob ") = true
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the String is not empty and not null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <call>
                                <name><name>StringUtils</name>.
                                    <name>isEmpty</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if a String is whitespace, empty ("") or null.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isBlank(null) = true
                * StringUtils.isBlank("") = true
                * StringUtils.isBlank(" ") = true
                * StringUtils.isBlank("bob") = false
                * StringUtils.isBlank(" bob ") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the String is null, empty or whitespace
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isBlank</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || (<name>strLen</name> =
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>strLen</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>(
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isWhitespace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false)
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if a String is not empty (""), not null and not whitespace only.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isNotBlank(null) = false
                * StringUtils.isNotBlank("") = false
                * StringUtils.isNotBlank(" ") = false
                * StringUtils.isNotBlank("bob") = true
                * StringUtils.isNotBlank(" bob ") = true
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the String is
                * not empty and not null and not whitespace
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNotBlank</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <call>
                                <name><name>StringUtils</name>.
                                    <name>isBlank</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Trim</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Removes control characters (char &amp;lt;= 32) from both
                * ends of this String, handling &lt;code&gt;null&lt;/code&gt; by returning
                * an empty String ("").&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.clean(null) = ""
                * StringUtils.clean("") = ""
                * StringUtils.clean("abc") = "abc"
                * StringUtils.clean(" abc ") = "abc"
                * StringUtils.clean(" ") = ""
                * &lt;/pre&gt;
                *
                * @see java.lang.String#trim()
                * @param str the String to clean, may be null
                * @return the trimmed text, never &lt;code&gt;null&lt;/code&gt;
                * @deprecated Use the clearer named {@link #trimToEmpty(String)}.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>clean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>str</name>
                            == <name>null</name> ? <name>EMPTY</name> :
                            <call>
                                <name><name>str</name>.
                                    <name>trim</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes control characters (char &amp;lt;= 32) from both
                * ends of this String, handling &lt;code&gt;null&lt;/code&gt; by returning
                * &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;The String is trimmed using {@link String#trim()}.
                * Trim removes start and end characters &amp;lt;= 32.
                * To strip whitespace use {@link #strip(String)}.&lt;/p&gt;
                *
                * &lt;p&gt;To trim your choice of characters, use the
                * {@link #strip(String, String)} methods.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.trim(null) = null
                * StringUtils.trim("") = ""
                * StringUtils.trim(" ") = ""
                * StringUtils.trim("abc") = "abc"
                * StringUtils.trim(" abc ") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String to be trimmed, may be null
                * @return the trimmed string, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>trim</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>str</name>
                            == <name>null</name> ? <name>null</name> :
                            <call>
                                <name><name>str</name>.
                                    <name>trim</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes control characters (char &amp;lt;= 32) from both
                * ends of this String returning &lt;code&gt;null&lt;/code&gt; if the String is
                * empty ("") after the trim or if it is &lt;code&gt;null&lt;/code&gt;.
                *
                * &lt;p&gt;The String is trimmed using {@link String#trim()}.
                * Trim removes start and end characters &amp;lt;= 32.
                * To strip whitespace use {@link #stripToNull(String)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.trimToNull(null) = null
                * StringUtils.trimToNull("") = null
                * StringUtils.trimToNull(" ") = null
                * StringUtils.trimToNull("abc") = "abc"
                * StringUtils.trimToNull(" abc ") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String to be trimmed, may be null
                * @return the trimmed String,
                * &lt;code&gt;null&lt;/code&gt; if only chars &amp;lt;= 32, empty or null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>trimToNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ts</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>trim</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>str</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>isEmpty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ts</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ? <name>null</name> :
                            <name>ts</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes control characters (char &amp;lt;= 32) from both
                * ends of this String returning an empty String ("") if the String
                * is empty ("") after the trim or if it is &lt;code&gt;null&lt;/code&gt;.
                *
                * &lt;p&gt;The String is trimmed using {@link String#trim()}.
                * Trim removes start and end characters &amp;lt;= 32.
                * To strip whitespace use {@link #stripToEmpty(String)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.trimToEmpty(null) = ""
                * StringUtils.trimToEmpty("") = ""
                * StringUtils.trimToEmpty(" ") = ""
                * StringUtils.trimToEmpty("abc") = "abc"
                * StringUtils.trimToEmpty(" abc ") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String to be trimmed, may be null
                * @return the trimmed String, or an empty String if &lt;code&gt;null&lt;/code&gt; input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>trimToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>str</name>
                            == <name>null</name> ? <name>EMPTY</name> :
                            <call>
                                <name><name>str</name>.
                                    <name>trim</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Stripping</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Strips whitespace from the start and end of a String.&lt;/p&gt;
                *
                * &lt;p&gt;This is similar to {@link #trim(String)} but removes whitespace.
                * Whitespace is defined by {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.strip(null) = null
                * StringUtils.strip("") = ""
                * StringUtils.strip(" ") = ""
                * StringUtils.strip("abc") = "abc"
                * StringUtils.strip(" abc") = "abc"
                * StringUtils.strip("abc ") = "abc"
                * StringUtils.strip(" abc ") = "abc"
                * StringUtils.strip(" ab c ") = "ab c"
                * &lt;/pre&gt;
                *
                * @param str the String to remove whitespace from, may be null
                * @return the stripped String, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>strip</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>strip</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Strips whitespace from the start and end of a String returning
                * &lt;code&gt;null&lt;/code&gt; if the String is empty ("") after the strip.&lt;/p&gt;
                *
                * &lt;p&gt;This is similar to {@link #trimToNull(String)} but removes whitespace.
                * Whitespace is defined by {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.stripToNull(null) = null
                * StringUtils.stripToNull("") = null
                * StringUtils.stripToNull(" ") = null
                * StringUtils.stripToNull("abc") = "abc"
                * StringUtils.stripToNull(" abc") = "abc"
                * StringUtils.stripToNull("abc ") = "abc"
                * StringUtils.stripToNull(" abc ") = "abc"
                * StringUtils.stripToNull(" ab c ") = "ab c"
                * &lt;/pre&gt;
                *
                * @param str the String to be stripped, may be null
                * @return the stripped String,
                * &lt;code&gt;null&lt;/code&gt; if whitespace, empty or null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>stripToNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>str</name>
                            =
                            <call>
                                <name>strip</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            == 0 ? <name>null</name> :
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Strips whitespace from the start and end of a String returning
                * an empty String if &lt;code&gt;null&lt;/code&gt; input.&lt;/p&gt;
                *
                * &lt;p&gt;This is similar to {@link #trimToEmpty(String)} but removes whitespace.
                * Whitespace is defined by {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.stripToEmpty(null) = ""
                * StringUtils.stripToEmpty("") = ""
                * StringUtils.stripToEmpty(" ") = ""
                * StringUtils.stripToEmpty("abc") = "abc"
                * StringUtils.stripToEmpty(" abc") = "abc"
                * StringUtils.stripToEmpty("abc ") = "abc"
                * StringUtils.stripToEmpty(" abc ") = "abc"
                * StringUtils.stripToEmpty(" ab c ") = "ab c"
                * &lt;/pre&gt;
                *
                * @param str the String to be stripped, may be null
                * @return the trimmed String, or an empty String if &lt;code&gt;null&lt;/code&gt; input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>stripToEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>str</name>
                            == <name>null</name> ? <name>EMPTY</name> :
                            <call>
                                <name>strip</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Strips any of a set of characters from the start and end of a String.
                * This is similar to {@link String#trim()} but allows the characters
                * to be stripped to be controlled.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * An empty string ("") input returns the empty string.&lt;/p&gt;
                *
                * &lt;p&gt;If the stripChars String is &lt;code&gt;null&lt;/code&gt;, whitespace is
                * stripped as defined by {@link Character#isWhitespace(char)}.
                * Alternatively use {@link #strip(String)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.strip(null, *) = null
                * StringUtils.strip("", *) = ""
                * StringUtils.strip("abc", null) = "abc"
                * StringUtils.strip(" abc", null) = "abc"
                * StringUtils.strip("abc ", null) = "abc"
                * StringUtils.strip(" abc ", null) = "abc"
                * StringUtils.strip(" abcyx", "xyz") = " abc"
                * &lt;/pre&gt;
                *
                * @param str the String to remove characters from, may be null
                * @param stripChars the characters to remove, null treated as whitespace
                * @return the stripped String, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>strip</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>stripChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>str</name>
                            =
                            <call>
                                <name>stripStart</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stripChars</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>stripEnd</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stripChars</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Strips any of a set of characters from the start of a String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * An empty string ("") input returns the empty string.&lt;/p&gt;
                *
                * &lt;p&gt;If the stripChars String is &lt;code&gt;null&lt;/code&gt;, whitespace is
                * stripped as defined by {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.stripStart(null, *) = null
                * StringUtils.stripStart("", *) = ""
                * StringUtils.stripStart("abc", "") = "abc"
                * StringUtils.stripStart("abc", null) = "abc"
                * StringUtils.stripStart(" abc", null) = "abc"
                * StringUtils.stripStart("abc ", null) = "abc "
                * StringUtils.stripStart(" abc ", null) = "abc "
                * StringUtils.stripStart("yxabc ", "xyz") = "abc "
                * &lt;/pre&gt;
                *
                * @param str the String to remove characters from, may be null
                * @param stripChars the characters to remove, null treated as whitespace
                * @return the stripped String, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>stripStart</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>stripChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || (<name>strLen</name> =
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>stripChars</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <while>while
                                    <condition>(
                                        <expr>(<name>start</name> != <name>strLen</name>) &amp;&amp;
                                            <call>
                                                <name><name>Character</name>.
                                                    <name>isWhitespace</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>start</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>start</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>stripChars</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <while>while
                                            <condition>(
                                                <expr>(<name>start</name> != <name>strLen</name>) &amp;&amp; (
                                                    <call>
                                                        <name><name>stripChars</name>.
                                                            <name>indexOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>str</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>start</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    != <name>INDEX_NOT_FOUND</name>)
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <expr_stmt>
                                                    <expr><name>start</name>++
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </while>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Strips any of a set of characters from the end of a String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * An empty string ("") input returns the empty string.&lt;/p&gt;
                *
                * &lt;p&gt;If the stripChars String is &lt;code&gt;null&lt;/code&gt;, whitespace is
                * stripped as defined by {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.stripEnd(null, *) = null
                * StringUtils.stripEnd("", *) = ""
                * StringUtils.stripEnd("abc", "") = "abc"
                * StringUtils.stripEnd("abc", null) = "abc"
                * StringUtils.stripEnd(" abc", null) = " abc"
                * StringUtils.stripEnd("abc ", null) = "abc"
                * StringUtils.stripEnd(" abc ", null) = " abc"
                * StringUtils.stripEnd(" abcyx", "xyz") = " abc"
                * StringUtils.stripEnd("120.00", ".0") = "12"
                * &lt;/pre&gt;
                *
                * @param str the String to remove characters from, may be null
                * @param stripChars the set of characters to remove, null treated as whitespace
                * @return the stripped String, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>stripEnd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>stripChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || (<name>end</name> =
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>stripChars</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <while>while
                                    <condition>(
                                        <expr>(<name>end</name> != 0) &amp;&amp;
                                            <call>
                                                <name><name>Character</name>.
                                                    <name>isWhitespace</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>end</name>
                                                                            - 1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>end</name>--
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>stripChars</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <while>while
                                            <condition>(
                                                <expr>(<name>end</name> != 0) &amp;&amp; (
                                                    <call>
                                                        <name><name>stripChars</name>.
                                                            <name>indexOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>str</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>end</name>
                                                                                    - 1
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    != <name>INDEX_NOT_FOUND</name>)
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <expr_stmt>
                                                    <expr><name>end</name>--
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </while>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>end</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// StripAll</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Strips whitespace from the start and end of every String in an array.
                * Whitespace is defined by {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;p&gt;A new array is returned each time, except for length zero.
                * A &lt;code&gt;null&lt;/code&gt; array will return &lt;code&gt;null&lt;/code&gt;.
                * An empty array will return itself.
                * A &lt;code&gt;null&lt;/code&gt; array entry will be ignored.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.stripAll(null) = null
                * StringUtils.stripAll([]) = []
                * StringUtils.stripAll(["abc", " abc"]) = ["abc", "abc"]
                * StringUtils.stripAll(["abc ", null]) = ["abc", null]
                * &lt;/pre&gt;
                *
                * @param strs the array to remove whitespace from, may be null
                * @return the stripped Strings, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>stripAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>strs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>stripAll</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Strips any of a set of characters from the start and end of every
                * String in an array.&lt;/p&gt;
                * Whitespace is defined by {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;p&gt;A new array is returned each time, except for length zero.
                * A &lt;code&gt;null&lt;/code&gt; array will return &lt;code&gt;null&lt;/code&gt;.
                * An empty array will return itself.
                * A &lt;code&gt;null&lt;/code&gt; array entry will be ignored.
                * A &lt;code&gt;null&lt;/code&gt; stripChars will strip whitespace as defined by
                * {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.stripAll(null, *) = null
                * StringUtils.stripAll([], *) = []
                * StringUtils.stripAll(["abc", " abc"], null) = ["abc", "abc"]
                * StringUtils.stripAll(["abc ", null], null) = ["abc", null]
                * StringUtils.stripAll(["abc ", null], "yz") = ["abc ", null]
                * StringUtils.stripAll(["yabcz", null], "yz") = ["abc", null]
                * &lt;/pre&gt;
                *
                * @param strs the array to remove characters from, may be null
                * @param stripChars the characters to remove, null treated as whitespace
                * @return the stripped Strings, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>stripAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>strs</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>stripChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strsLen</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>strs</name>
                                == <name>null</name> || (<name>strsLen</name> =
                                <name><name>strs</name>.
                                    <name>length</name>
                                </name>
                                ) == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>strs</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>newArr</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>String</name>
                                        <index>[
                                            <expr>
                                                <name>strsLen</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>strsLen</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>newArr</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <call>
                                        <name>strip</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>strs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>stripChars</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>newArr</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Equals</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Compares two Strings, returning &lt;code&gt;true&lt;/code&gt; if they are equal.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt;s are handled without exceptions. Two &lt;code&gt;null&lt;/code&gt;
                * references are considered to be equal. The comparison is case sensitive.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.equals(null, null) = true
                * StringUtils.equals(null, "abc") = false
                * StringUtils.equals("abc", null) = false
                * StringUtils.equals("abc", "abc") = true
                * StringUtils.equals("abc", "ABC") = false
                * &lt;/pre&gt;
                *
                * @see java.lang.String#equals(Object)
                * @param str1 the first String, may be null
                * @param str2 the second String, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the Strings are equal, case sensitive, or
                * both &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>str1</name>
                            == <name>null</name> ? <name>str2</name> == <name>null</name> :
                            <call>
                                <name><name>str1</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares two Strings, returning &lt;code&gt;true&lt;/code&gt; if they are equal ignoring
                * the case.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt;s are handled without exceptions. Two &lt;code&gt;null&lt;/code&gt;
                * references are considered equal. Comparison is case insensitive.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.equalsIgnoreCase(null, null) = true
                * StringUtils.equalsIgnoreCase(null, "abc") = false
                * StringUtils.equalsIgnoreCase("abc", null) = false
                * StringUtils.equalsIgnoreCase("abc", "abc") = true
                * StringUtils.equalsIgnoreCase("abc", "ABC") = true
                * &lt;/pre&gt;
                *
                * @see java.lang.String#equalsIgnoreCase(String)
                * @param str1 the first String, may be null
                * @param str2 the second String, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the Strings are equal, case insensitive, or
                * both &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>equalsIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>str1</name>
                            == <name>null</name> ? <name>str2</name> == <name>null</name> :
                            <call>
                                <name><name>str1</name>.
                                    <name>equalsIgnoreCase</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// IndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the first index within a String, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#indexOf(int)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; or empty ("") String will return &lt;code&gt;INDEX_NOT_FOUND
                (-1)&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOf(null, *) = -1
                * StringUtils.indexOf("", *) = -1
                * StringUtils.indexOf("aabaabaa", 'a') = 0
                * StringUtils.indexOf("aabaabaa", 'b') = 2
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChar the character to find
                * @return the first index of the search character,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>searchChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>indexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchChar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the first index within a String from a start position,
                * handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#indexOf(int, int)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; or empty ("") String will return &lt;code&gt;(INDEX_NOT_FOUND)
                -1&lt;/code&gt;.
                * A negative start position is treated as zero.
                * A start position greater than the string length returns &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOf(null, *, *) = -1
                * StringUtils.indexOf("", *, *) = -1
                * StringUtils.indexOf("aabaabaa", 'b', 0) = 2
                * StringUtils.indexOf("aabaabaa", 'b', 3) = 5
                * StringUtils.indexOf("aabaabaa", 'b', 9) = -1
                * StringUtils.indexOf("aabaabaa", 'b', -1) = 2
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChar the character to find
                * @param startPos the start position, negative treated as zero
                * @return the first index of the search character,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>searchChar</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startPos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>indexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchChar</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startPos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the first index within a String, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#indexOf(String)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOf(null, *) = -1
                * StringUtils.indexOf(*, null) = -1
                * StringUtils.indexOf("", "") = 0
                * StringUtils.indexOf("", *) = -1 (except when * = "")
                * StringUtils.indexOf("aabaabaa", "a") = 0
                * StringUtils.indexOf("aabaabaa", "b") = 2
                * StringUtils.indexOf("aabaabaa", "ab") = 1
                * StringUtils.indexOf("aabaabaa", "") = 0
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @return the first index of the search String,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchStr</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>indexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchStr</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the n-th index within a String, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#indexOf(String)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.ordinalIndexOf(null, *, *) = -1
                * StringUtils.ordinalIndexOf(*, null, *) = -1
                * StringUtils.ordinalIndexOf("", "", *) = 0
                * StringUtils.ordinalIndexOf("aabaabaa", "a", 1) = 0
                * StringUtils.ordinalIndexOf("aabaabaa", "a", 2) = 1
                * StringUtils.ordinalIndexOf("aabaabaa", "b", 1) = 2
                * StringUtils.ordinalIndexOf("aabaabaa", "b", 2) = 5
                * StringUtils.ordinalIndexOf("aabaabaa", "ab", 1) = 1
                * StringUtils.ordinalIndexOf("aabaabaa", "ab", 2) = 4
                * StringUtils.ordinalIndexOf("aabaabaa", "", 1) = 0
                * StringUtils.ordinalIndexOf("aabaabaa", "", 2) = 0
                * &lt;/pre&gt;
                *
                * &lt;p&gt;Note that 'head(String str, int n)' may be implemented as: &lt;/p&gt;
                *
                * &lt;pre&gt;
                * str.substring(0, lastOrdinalIndexOf(str, "\n", n))
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @param ordinal the n-th &lt;code&gt;searchStr&lt;/code&gt; to find
                * @return the n-th index of the search String,
                * &lt;code&gt;-1&lt;/code&gt; (&lt;code&gt;INDEX_NOT_FOUND&lt;/code&gt;) if no match or &lt;code&gt;null&lt;/code&gt;
                string input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>ordinalIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ordinal</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>ordinalIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>searchStr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ordinal</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the n-th index within a String, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#indexOf(String)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @param ordinal the n-th &lt;code&gt;searchStr&lt;/code&gt; to find
                * @param lastIndex true if lastOrdinalIndexOf() otherwise false if ordinalIndexOf()
                * @return the n-th index of the search String,
                * &lt;code&gt;-1&lt;/code&gt; (&lt;code&gt;INDEX_NOT_FOUND&lt;/code&gt;) if no match or &lt;code&gt;null&lt;/code&gt;
                string input
                */
            </comment>
            <comment type="line">// Shared code between ordinalIndexOf(String,String,int) and
                lastOrdinalIndexOf(String,String,int)
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>ordinalIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ordinal</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>lastIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchStr</name> == <name>null</name> || <name>ordinal
                            </name> &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>searchStr</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>lastIndex</name>
                                        ?
                                        <call>
                                            <name><name>str</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        : 0
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>found</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>lastIndex</name>
                                    ?
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    :
                                    <name>INDEX_NOT_FOUND</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <do>do
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>lastIndex</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>index</name>
                                                =
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>lastIndexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>searchStr</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                                - 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>index</name>
                                                =
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>indexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>searchStr</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                                + 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>index</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr><name>found</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        while
                        <condition>(
                            <expr>
                                <name>found</name>
                                &lt;
                                <name>ordinal</name>
                            </expr>
                            )
                        </condition>
                        ;
                    </do>
                    <return>return
                        <expr>
                            <name>index</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the first index within a String, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#indexOf(String, int)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A negative start position is treated as zero.
                * An empty ("") search String always matches.
                * A start position greater than the string length only matches
                * an empty search String.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOf(null, *, *) = -1
                * StringUtils.indexOf(*, null, *) = -1
                * StringUtils.indexOf("", "", 0) = 0
                * StringUtils.indexOf("", *, 0) = -1 (except when * = "")
                * StringUtils.indexOf("aabaabaa", "a", 0) = 0
                * StringUtils.indexOf("aabaabaa", "b", 0) = 2
                * StringUtils.indexOf("aabaabaa", "ab", 0) = 1
                * StringUtils.indexOf("aabaabaa", "b", 3) = 5
                * StringUtils.indexOf("aabaabaa", "b", 9) = -1
                * StringUtils.indexOf("aabaabaa", "b", -1) = 2
                * StringUtils.indexOf("aabaabaa", "", 2) = 2
                * StringUtils.indexOf("abc", "", 9) = 3
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @param startPos the start position, negative treated as zero
                * @return the first index of the search String,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startPos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchStr</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// JDK1.2/JDK1.3 have a bug, when startPos &gt; str.length for "", hence
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>searchStr</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0 &amp;&amp; <name>startPos</name> &gt;=
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>indexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchStr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startPos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Case in-sensitive find of the first index within a String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A negative start position is treated as zero.
                * An empty ("") search String always matches.
                * A start position greater than the string length only matches
                * an empty search String.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOfIgnoreCase(null, *) = -1
                * StringUtils.indexOfIgnoreCase(*, null) = -1
                * StringUtils.indexOfIgnoreCase("", "") = 0
                * StringUtils.indexOfIgnoreCase("aabaabaa", "a") = 0
                * StringUtils.indexOfIgnoreCase("aabaabaa", "b") = 2
                * StringUtils.indexOfIgnoreCase("aabaabaa", "ab") = 1
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @return the first index of the search String,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>indexOfIgnoreCase</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>searchStr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Case in-sensitive find of the first index within a String
                * from the specified position.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A negative start position is treated as zero.
                * An empty ("") search String always matches.
                * A start position greater than the string length only matches
                * an empty search String.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOfIgnoreCase(null, *, *) = -1
                * StringUtils.indexOfIgnoreCase(*, null, *) = -1
                * StringUtils.indexOfIgnoreCase("", "", 0) = 0
                * StringUtils.indexOfIgnoreCase("aabaabaa", "A", 0) = 0
                * StringUtils.indexOfIgnoreCase("aabaabaa", "B", 0) = 2
                * StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0) = 1
                * StringUtils.indexOfIgnoreCase("aabaabaa", "B", 3) = 5
                * StringUtils.indexOfIgnoreCase("aabaabaa", "B", 9) = -1
                * StringUtils.indexOfIgnoreCase("aabaabaa", "B", -1) = 2
                * StringUtils.indexOfIgnoreCase("aabaabaa", "", 2) = 2
                * StringUtils.indexOfIgnoreCase("abc", "", 9) = 3
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @param startPos the start position, negative treated as zero
                * @return the first index of the search String,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startPos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchStr</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startPos</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startPos</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endLimit</name> =
                            <init>
                                <expr>(
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    -
                                    <call>
                                        <name><name>searchStr</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    ) + 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startPos</name>
                                &gt;
                                <name>endLimit</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>searchStr</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>startPos</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startPos</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>endLimit</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>regionMatches</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>searchStr</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>searchStr</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// LastIndexOf</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index within a String, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#lastIndexOf(int)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; or empty ("") String will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.lastIndexOf(null, *) = -1
                * StringUtils.lastIndexOf("", *) = -1
                * StringUtils.lastIndexOf("aabaabaa", 'a') = 7
                * StringUtils.lastIndexOf("aabaabaa", 'b') = 5
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChar the character to find
                * @return the last index of the search character,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>searchChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>lastIndexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchChar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index within a String from a start position,
                * handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#lastIndexOf(int, int)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; or empty ("") String will return &lt;code&gt;-1&lt;/code&gt;.
                * A negative start position returns &lt;code&gt;-1&lt;/code&gt;.
                * A start position greater than the string length searches the whole string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.lastIndexOf(null, *, *) = -1
                * StringUtils.lastIndexOf("", *, *) = -1
                * StringUtils.lastIndexOf("aabaabaa", 'b', 8) = 5
                * StringUtils.lastIndexOf("aabaabaa", 'b', 4) = 2
                * StringUtils.lastIndexOf("aabaabaa", 'b', 0) = -1
                * StringUtils.lastIndexOf("aabaabaa", 'b', 9) = 5
                * StringUtils.lastIndexOf("aabaabaa", 'b', -1) = -1
                * StringUtils.lastIndexOf("aabaabaa", 'a', 0) = 0
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChar the character to find
                * @param startPos the start position
                * @return the last index of the search character,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>searchChar</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startPos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>lastIndexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchChar</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startPos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the last index within a String, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#lastIndexOf(String)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.lastIndexOf(null, *) = -1
                * StringUtils.lastIndexOf(*, null) = -1
                * StringUtils.lastIndexOf("", "") = 0
                * StringUtils.lastIndexOf("aabaabaa", "a") = 7
                * StringUtils.lastIndexOf("aabaabaa", "b") = 5
                * StringUtils.lastIndexOf("aabaabaa", "ab") = 4
                * StringUtils.lastIndexOf("aabaabaa", "") = 8
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @return the last index of the search String,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchStr</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>lastIndexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchStr</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the n-th last index within a String, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#lastIndexOf(String)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.lastOrdinalIndexOf(null, *, *) = -1
                * StringUtils.lastOrdinalIndexOf(*, null, *) = -1
                * StringUtils.lastOrdinalIndexOf("", "", *) = 0
                * StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1) = 7
                * StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2) = 6
                * StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1) = 5
                * StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2) = 2
                * StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1) = 4
                * StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2) = 1
                * StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1) = 8
                * StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2) = 8
                * &lt;/pre&gt;
                *
                * &lt;p&gt;Note that 'tail(String str, int n)' may be implemented as: &lt;/p&gt;
                *
                * &lt;pre&gt;
                * str.substring(lastOrdinalIndexOf(str, "\n", n) + 1)
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @param ordinal the n-th last &lt;code&gt;searchStr&lt;/code&gt; to find
                * @return the n-th last index of the search String,
                * &lt;code&gt;-1&lt;/code&gt; (&lt;code&gt;INDEX_NOT_FOUND&lt;/code&gt;) if no match or &lt;code&gt;null&lt;/code&gt;
                string input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastOrdinalIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ordinal</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>ordinalIndexOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>searchStr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ordinal</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Finds the first index within a String, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#lastIndexOf(String, int)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A negative start position returns &lt;code&gt;-1&lt;/code&gt;.
                * An empty ("") search String always matches unless the start position is negative.
                * A start position greater than the string length searches the whole string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.lastIndexOf(null, *, *) = -1
                * StringUtils.lastIndexOf(*, null, *) = -1
                * StringUtils.lastIndexOf("aabaabaa", "a", 8) = 7
                * StringUtils.lastIndexOf("aabaabaa", "b", 8) = 5
                * StringUtils.lastIndexOf("aabaabaa", "ab", 8) = 4
                * StringUtils.lastIndexOf("aabaabaa", "b", 9) = 5
                * StringUtils.lastIndexOf("aabaabaa", "b", -1) = -1
                * StringUtils.lastIndexOf("aabaabaa", "a", 0) = 0
                * StringUtils.lastIndexOf("aabaabaa", "b", 0) = -1
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @param startPos the start position, negative treated as zero
                * @return the first index of the search String,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startPos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchStr</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>lastIndexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchStr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>startPos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Case in-sensitive find of the last index within a String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A negative start position returns &lt;code&gt;-1&lt;/code&gt;.
                * An empty ("") search String always matches unless the start position is negative.
                * A start position greater than the string length searches the whole string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.lastIndexOfIgnoreCase(null, *) = -1
                * StringUtils.lastIndexOfIgnoreCase(*, null) = -1
                * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A") = 7
                * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B") = 5
                * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB") = 4
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @return the first index of the search String,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOfIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchStr</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>lastIndexOfIgnoreCase</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>searchStr</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Case in-sensitive find of the last index within a String
                * from the specified position.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A negative start position returns &lt;code&gt;-1&lt;/code&gt;.
                * An empty ("") search String always matches unless the start position is negative.
                * A start position greater than the string length searches the whole string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.lastIndexOfIgnoreCase(null, *, *) = -1
                * StringUtils.lastIndexOfIgnoreCase(*, null, *) = -1
                * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8) = 7
                * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8) = 5
                * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8) = 4
                * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9) = 5
                * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1) = -1
                * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0) = 0
                * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0) = -1
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @param startPos the start position
                * @return the first index of the search String,
                * -1 if no match or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOfIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startPos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchStr</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startPos</name>
                                &gt; (
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                -
                                <call>
                                    <name><name>searchStr</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>startPos</name>
                                        =
                                        <call>
                                            <name><name>str</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        -
                                        <call>
                                            <name><name>searchStr</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>startPos</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>searchStr</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>startPos</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startPos</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>--
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>regionMatches</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>searchStr</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>searchStr</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Contains</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks if String contains a search character, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#indexOf(int)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; or empty ("") String will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.contains(null, *) = false
                * StringUtils.contains("", *) = false
                * StringUtils.contains("abc", 'a') = true
                * StringUtils.contains("abc", 'z') = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChar the character to find
                * @return true if the String contains the search character,
                * false if not or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>searchChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>indexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchChar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &gt;= 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if String contains a search String, handling &lt;code&gt;null&lt;/code&gt;.
                * This method uses {@link String#indexOf(String)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.contains(null, *) = false
                * StringUtils.contains(*, null) = false
                * StringUtils.contains("", "") = true
                * StringUtils.contains("abc", "") = true
                * StringUtils.contains("abc", "a") = true
                * StringUtils.contains("abc", "z") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @return true if the String contains the search String,
                * false if not or &lt;code&gt;null&lt;/code&gt; string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchStr</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>indexOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchStr</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &gt;= 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if String contains a search String irrespective of case,
                * handling &lt;code&gt;null&lt;/code&gt;. Case-insensitivity is defined as by
                * {@link String#equalsIgnoreCase(String)}.
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.contains(null, *) = false
                * StringUtils.contains(*, null) = false
                * StringUtils.contains("", "") = true
                * StringUtils.contains("abc", "") = true
                * StringUtils.contains("abc", "a") = true
                * StringUtils.contains("abc", "z") = false
                * StringUtils.contains("abc", "A") = true
                * StringUtils.contains("abc", "Z") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStr the String to find, may be null
                * @return true if the String contains the search String irrespective of
                * case or false if not or &lt;code&gt;null&lt;/code&gt; string input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>containsIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchStr</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>searchStr</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    -
                                    <name>len</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;=
                                <name>max</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>regionMatches</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>searchStr</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>len</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// IndexOfAny chars</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Search a String to find the first index of any
                * character in the given set of characters.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; or zero length search array will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOfAny(null, *) = -1
                * StringUtils.indexOfAny("", *) = -1
                * StringUtils.indexOfAny(*, null) = -1
                * StringUtils.indexOfAny(*, []) = -1
                * StringUtils.indexOfAny("zzabyycdxx",['z','a']) = 0
                * StringUtils.indexOfAny("zzabyycdxx",['b','y']) = 3
                * StringUtils.indexOfAny("aba", ['z']) = -1
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChars the chars to search for, may be null
                * @return the index of any of the chars, -1 if no match or null input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfAny</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>searchChars</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>csLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>csLast</name> =
                            <init>
                                <expr>
                                    <name>csLen</name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>searchLen</name> =
                            <init>
                                <expr>
                                    <name><name>searchChars</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>searchLast</name> =
                            <init>
                                <expr>
                                    <name>searchLen</name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>csLen</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>j</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>j</name>
                                        &lt;
                                        <name>searchLen</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>j</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>searchChars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>j</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ==
                                                <name>ch</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>i</name>
                                                            &lt; <name>csLast</name> &amp;&amp; <name>j</name> &lt; <name>
                                                            searchLast
                                                        </name> &amp;&amp;
                                                            <call>
                                                                <name><name>CharUtils</name>.
                                                                    <name>isHighSurrogate</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ch</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <comment type="line">// ch is a supplementary character
                                                            </comment>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>
                                                                            <name>searchChars</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>j</name>
                                                                                    + 1
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                        ==
                                                                        <call>
                                                                            <name><name>str</name>.
                                                                                <name>charAt</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                        + 1
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <return>return
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ;
                                                                        </return>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <return>return
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Search a String to find the first index of any
                * character in the given set of characters.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; search string will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOfAny(null, *) = -1
                * StringUtils.indexOfAny("", *) = -1
                * StringUtils.indexOfAny(*, null) = -1
                * StringUtils.indexOfAny(*, "") = -1
                * StringUtils.indexOfAny("zzabyycdxx", "za") = 0
                * StringUtils.indexOfAny("zzabyycdxx", "by") = 3
                * StringUtils.indexOfAny("aba","z") = -1
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChars the chars to search for, may be null
                * @return the index of any of the chars, -1 if no match or null input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfAny</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>searchChars</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>indexOfAny</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>searchChars</name>.
                                                    <name>toCharArray</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ContainsAny</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains any character in the given
                * set of characters.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;false&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; or zero length search array will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.containsAny(null, *) = false
                * StringUtils.containsAny("", *) = false
                * StringUtils.containsAny(*, null) = false
                * StringUtils.containsAny(*, []) = false
                * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
                * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
                * StringUtils.containsAny("aba", ['z']) = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChars the chars to search for, may be null
                * @return the &lt;code&gt;true&lt;/code&gt; if any of the chars are found,
                * &lt;code&gt;false&lt;/code&gt; if no match or null input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>containsAny</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>searchChars</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>csLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>searchLength</name> =
                            <init>
                                <expr>
                                    <name><name>searchChars</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>csLast</name> =
                            <init>
                                <expr>
                                    <name>csLength</name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>searchLast</name> =
                            <init>
                                <expr>
                                    <name>searchLength</name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>csLength</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>j</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>j</name>
                                        &lt;
                                        <name>searchLength</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>j</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>searchChars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>j</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ==
                                                <name>ch</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>CharUtils</name>.
                                                                    <name>isHighSurrogate</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ch</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>j</name>
                                                                        ==
                                                                        <name>searchLast</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <comment type="line">// missing low surrogate,
                                                                            fine, like String.indexOf(String)
                                                                        </comment>
                                                                        <return>return <expr>true</expr>;
                                                                        </return>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>i</name>
                                                                        &lt; <name>csLast</name> &amp;&amp;
                                                                        <name>
                                                                            <name>searchChars</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>j</name>
                                                                                    + 1
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                        ==
                                                                        <call>
                                                                            <name><name>str</name>.
                                                                                <name>charAt</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                        + 1
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <return>return <expr>true</expr>;
                                                                        </return>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <comment type="line">// ch is in the Basic Multilingual
                                                                Plane
                                                            </comment>
                                                            <return>return <expr>true</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Checks if the String contains any character in the given set of characters.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;false&lt;/code&gt;. A &lt;code&gt;null&lt;/code&gt;
                search string will return
                * &lt;code&gt;false&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.containsAny(null, *) = false
                * StringUtils.containsAny("", *) = false
                * StringUtils.containsAny(*, null) = false
                * StringUtils.containsAny(*, "") = false
                * StringUtils.containsAny("zzabyycdxx", "za") = true
                * StringUtils.containsAny("zzabyycdxx", "by") = true
                * StringUtils.containsAny("aba","z") = false
                * &lt;/pre&gt;
                *
                * @param str
                * the String to check, may be null
                * @param searchChars
                * the chars to search for, may be null
                * @return the &lt;code&gt;true&lt;/code&gt; if any of the chars are found, &lt;code&gt;false&lt;/code&gt;
                if no match or null input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>containsAny</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>searchChars</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>containsAny</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>searchChars</name>.
                                                    <name>toCharArray</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// IndexOfAnyBut chars</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Search a String to find the first index of any
                * character not in the given set of characters.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; or zero length search array will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOfAnyBut(null, *) = -1
                * StringUtils.indexOfAnyBut("", *) = -1
                * StringUtils.indexOfAnyBut(*, null) = -1
                * StringUtils.indexOfAnyBut(*, []) = -1
                * StringUtils.indexOfAnyBut("zzabyycdxx", new char[] {'z', 'a'} ) = 3
                * StringUtils.indexOfAnyBut("aba", new char[] {'z'} ) = 0
                * StringUtils.indexOfAnyBut("aba", new char[] {'a', 'b'} ) = -1
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChars the chars to search for, may be null
                * @return the index of any of the chars, -1 if no match or null input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfAnyBut</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>searchChars</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>csLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>csLast</name> =
                            <init>
                                <expr>
                                    <name>csLen</name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>searchLen</name> =
                            <init>
                                <expr>
                                    <name><name>searchChars</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>searchLast</name> =
                            <init>
                                <expr>
                                    <name>searchLen</name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <label><name>outer</name>:
                    </label>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>csLen</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>j</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>j</name>
                                        &lt;
                                        <name>searchLen</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>j</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>searchChars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>j</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ==
                                                <name>ch</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>i</name>
                                                            &lt; <name>csLast</name> &amp;&amp; <name>j</name> &lt; <name>
                                                            searchLast
                                                        </name> &amp;&amp;
                                                            <call>
                                                                <name><name>CharUtils</name>.
                                                                    <name>isHighSurrogate</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ch</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>
                                                                            <name>searchChars</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>j</name>
                                                                                    + 1
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                        ==
                                                                        <call>
                                                                            <name><name>str</name>.
                                                                                <name>charAt</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                        + 1
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <continue>continue outer;</continue>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <continue>continue outer;</continue>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>i</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Search a String to find the first index of any
                * character not in the given set of characters.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; or empty search string will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOfAnyBut(null, *) = -1
                * StringUtils.indexOfAnyBut("", *) = -1
                * StringUtils.indexOfAnyBut(*, null) = -1
                * StringUtils.indexOfAnyBut(*, "") = -1
                * StringUtils.indexOfAnyBut("zzabyycdxx", "za") = 3
                * StringUtils.indexOfAnyBut("zzabyycdxx", "") = -1
                * StringUtils.indexOfAnyBut("aba","ab") = -1
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChars the chars to search for, may be null
                * @return the index of any of the chars, -1 if no match or null input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfAnyBut</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>searchChars</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>strLen</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>boolean</name>
                                    </type>
                                    <name>chFound</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>searchChars</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>ch</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &gt;= 0
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>i</name>
                                        + 1 &lt; <name>strLen</name> &amp;&amp;
                                        <call>
                                            <name><name>CharUtils</name>.
                                                <name>isHighSurrogate</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ch</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>char</name>
                                                </type>
                                                <name>ch2</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                        + 1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>chFound</name>
                                                    &amp;&amp;
                                                    <call>
                                                        <name><name>searchChars</name>.
                                                            <name>indexOf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>ch2</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &lt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <name>chFound</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ContainsOnly</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only certain characters.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;false&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; valid character array will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) always returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.containsOnly(null, *) = false
                * StringUtils.containsOnly(*, null) = false
                * StringUtils.containsOnly("", *) = true
                * StringUtils.containsOnly("ab", '') = false
                * StringUtils.containsOnly("abab", 'abc') = true
                * StringUtils.containsOnly("ab1", 'abc') = false
                * StringUtils.containsOnly("abz", 'abc') = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param valid an array of valid chars, may be null
                * @return true if it only contains valid chars and is non-null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>containsOnly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>valid</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// All these pre-checks are to maintain API with an older version</comment>
                    <if>if
                        <condition>(
                            <expr>(<name>valid</name> == <name>null</name>) || (<name>str</name> == <name>null</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>valid</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>indexOfAnyBut</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valid</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ==
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only certain characters.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;false&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; valid character String will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) always returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.containsOnly(null, *) = false
                * StringUtils.containsOnly(*, null) = false
                * StringUtils.containsOnly("", *) = true
                * StringUtils.containsOnly("ab", "") = false
                * StringUtils.containsOnly("abab", "abc") = true
                * StringUtils.containsOnly("ab1", "abc") = false
                * StringUtils.containsOnly("abz", "abc") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param validChars a String of valid chars, may be null
                * @return true if it only contains valid chars and is non-null
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>containsOnly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>validChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>validChars</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>containsOnly</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>validChars</name>.
                                                    <name>toCharArray</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// ContainsNone</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks that the String does not contain certain characters.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;true&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; invalid character array will return &lt;code&gt;true&lt;/code&gt;.
                * An empty String (length()=0) always returns true.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.containsNone(null, *) = true
                * StringUtils.containsNone(*, null) = true
                * StringUtils.containsNone("", *) = true
                * StringUtils.containsNone("ab", '') = true
                * StringUtils.containsNone("abab", 'xyz') = true
                * StringUtils.containsNone("ab1", 'xyz') = true
                * StringUtils.containsNone("abz", 'xyz') = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchChars an array of invalid chars, may be null
                * @return true if it contains none of the invalid chars, or is null
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>containsNone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>searchChars</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>csLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>csLast</name> =
                            <init>
                                <expr>
                                    <name>csLen</name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>searchLen</name> =
                            <init>
                                <expr>
                                    <name><name>searchChars</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>searchLast</name> =
                            <init>
                                <expr>
                                    <name>searchLen</name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>csLen</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>j</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>j</name>
                                        &lt;
                                        <name>searchLen</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>j</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>searchChars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>j</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ==
                                                <name>ch</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>CharUtils</name>.
                                                                    <name>isHighSurrogate</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>ch</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>j</name>
                                                                        ==
                                                                        <name>searchLast</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <comment type="line">// missing low surrogate,
                                                                            fine, like String.indexOf(String)
                                                                        </comment>
                                                                        <return>return <expr>false</expr>;
                                                                        </return>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>i</name>
                                                                        &lt; <name>csLast</name> &amp;&amp;
                                                                        <name>
                                                                            <name>searchChars</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>j</name>
                                                                                    + 1
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                        ==
                                                                        <call>
                                                                            <name><name>str</name>.
                                                                                <name>charAt</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                        + 1
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <return>return <expr>false</expr>;
                                                                        </return>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <comment type="line">// ch is in the Basic Multilingual
                                                                Plane
                                                            </comment>
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks that the String does not contain certain characters.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;true&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; invalid character array will return &lt;code&gt;true&lt;/code&gt;.
                * An empty String ("") always returns true.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.containsNone(null, *) = true
                * StringUtils.containsNone(*, null) = true
                * StringUtils.containsNone("", *) = true
                * StringUtils.containsNone("ab", "") = true
                * StringUtils.containsNone("abab", "xyz") = true
                * StringUtils.containsNone("ab1", "xyz") = true
                * StringUtils.containsNone("abz", "xyz") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param invalidChars a String of invalid chars, may be null
                * @return true if it contains none of the invalid chars, or is null
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>containsNone</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>invalidChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>invalidChars</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>containsNone</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>invalidChars</name>.
                                                    <name>toCharArray</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// IndexOfAny strings</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Find the first index of any of a set of potential substrings.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; or zero length search array will return &lt;code&gt;-1&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; search array entry will be ignored, but a search
                * array containing "" will return &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;str&lt;/code&gt; is not
                * null. This method uses {@link String#indexOf(String)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOfAny(null, *) = -1
                * StringUtils.indexOfAny(*, null) = -1
                * StringUtils.indexOfAny(*, []) = -1
                * StringUtils.indexOfAny("zzabyycdxx", ["ab","cd"]) = 2
                * StringUtils.indexOfAny("zzabyycdxx", ["cd","ab"]) = 2
                * StringUtils.indexOfAny("zzabyycdxx", ["mn","op"]) = -1
                * StringUtils.indexOfAny("zzabyycdxx", ["zab","aby"]) = 1
                * StringUtils.indexOfAny("zzabyycdxx", [""]) = 0
                * StringUtils.indexOfAny("", [""]) = 0
                * StringUtils.indexOfAny("", ["a"]) = -1
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStrs the Strings to search for, may be null
                * @return the first index of any of the searchStrs in str, -1 if no match
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfAny</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchStrs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>str</name> == <name>null</name>) || (<name>searchStrs</name> == <name>
                                null</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <name><name>searchStrs</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// String's can't have a MAX_VALUEth index.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ret</name> =
                            <init>
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>tmp</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>search</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>searchStrs</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>search</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <call>
                                        <name><name>str</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>search</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>tmp</name>
                                        ==
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>tmp</name>
                                        &lt;
                                        <name>ret</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                =
                                                <name>tmp</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <return>return
                        <expr>(<name>ret</name> ==
                            <name><name>Integer</name>.
                                <name>MAX_VALUE</name>
                            </name>
                            ) ? <name>INDEX_NOT_FOUND</name> :
                            <name>ret</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Find the latest index of any of a set of potential substrings.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;-1&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; search array will return &lt;code&gt;-1&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; or zero length search array entry will be ignored,
                * but a search array containing "" will return the length of &lt;code&gt;str&lt;/code&gt;
                * if &lt;code&gt;str&lt;/code&gt; is not null. This method uses {@link String#indexOf(String)}&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.lastIndexOfAny(null, *) = -1
                * StringUtils.lastIndexOfAny(*, null) = -1
                * StringUtils.lastIndexOfAny(*, []) = -1
                * StringUtils.lastIndexOfAny(*, [null]) = -1
                * StringUtils.lastIndexOfAny("zzabyycdxx", ["ab","cd"]) = 6
                * StringUtils.lastIndexOfAny("zzabyycdxx", ["cd","ab"]) = 6
                * StringUtils.lastIndexOfAny("zzabyycdxx", ["mn","op"]) = -1
                * StringUtils.lastIndexOfAny("zzabyycdxx", ["mn","op"]) = -1
                * StringUtils.lastIndexOfAny("zzabyycdxx", ["mn",""]) = 10
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param searchStrs the Strings to search for, may be null
                * @return the last index of any of the Strings, -1 if no match
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lastIndexOfAny</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchStrs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>str</name> == <name>null</name>) || (<name>searchStrs</name> == <name>
                                null</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <name><name>searchStrs</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ret</name> =
                            <init>
                                <expr>
                                    <name>INDEX_NOT_FOUND</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>tmp</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>search</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>searchStrs</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>search</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>tmp</name>
                                    =
                                    <call>
                                        <name><name>str</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>search</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>tmp</name>
                                        &gt;
                                        <name>ret</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ret</name>
                                                =
                                                <name>tmp</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>ret</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Substring</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets a substring from the specified String avoiding exceptions.&lt;/p&gt;
                *
                * &lt;p&gt;A negative start position can be used to start &lt;code&gt;n&lt;/code&gt;
                * characters from the end of the String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") String will return "".&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.substring(null, *) = null
                * StringUtils.substring("", *) = ""
                * StringUtils.substring("abc", 0) = "abc"
                * StringUtils.substring("abc", 2) = "c"
                * StringUtils.substring("abc", 4) = ""
                * StringUtils.substring("abc", -2) = "bc"
                * StringUtils.substring("abc", -4) = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String to get the substring from, may be null
                * @param start the position to start from, negative means
                * count back from the end of the String by this many characters
                * @return substring from start position, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>substring</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// handle negatives, which means last n characters</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>start</name>
                                        =
                                        <call>
                                            <name><name>str</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        +
                                        <name>start</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// remember start is negative</comment>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>start</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &gt;
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets a substring from the specified String avoiding exceptions.&lt;/p&gt;
                *
                * &lt;p&gt;A negative start position can be used to start/end &lt;code&gt;n&lt;/code&gt;
                * characters from the end of the String.&lt;/p&gt;
                *
                * &lt;p&gt;The returned substring starts with the character in the &lt;code&gt;start&lt;/code&gt;
                * position and ends before the &lt;code&gt;end&lt;/code&gt; position. All position counting is
                * zero-based -- i.e., to start at the beginning of the string use
                * &lt;code&gt;start = 0&lt;/code&gt;. Negative start and end positions can be used to
                * specify offsets relative to the end of the String.&lt;/p&gt;
                *
                * &lt;p&gt;If &lt;code&gt;start&lt;/code&gt; is not strictly to the left of &lt;code&gt;end&lt;/code&gt;,
                ""
                * is returned.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.substring(null, *, *) = null
                * StringUtils.substring("", * , *) = "";
                * StringUtils.substring("abc", 0, 2) = "ab"
                * StringUtils.substring("abc", 2, 0) = ""
                * StringUtils.substring("abc", 2, 4) = "c"
                * StringUtils.substring("abc", 4, 6) = ""
                * StringUtils.substring("abc", 2, 2) = ""
                * StringUtils.substring("abc", -2, -1) = "b"
                * StringUtils.substring("abc", -4, 2) = "ab"
                * &lt;/pre&gt;
                *
                * @param str the String to get the substring from, may be null
                * @param start the position to start from, negative means
                * count back from the end of the String by this many characters
                * @param end the position to end at (exclusive), negative means
                * count back from the end of the String by this many characters
                * @return substring from start position to end positon,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>substring</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// handle negatives</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>end</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>end</name>
                                        =
                                        <call>
                                            <name><name>str</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        +
                                        <name>end</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// remember end is negative</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>start</name>
                                        =
                                        <call>
                                            <name><name>str</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        +
                                        <name>start</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// remember start is negative</comment>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// check length next</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>end</name>
                                &gt;
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>end</name>
                                        =
                                        <call>
                                            <name><name>str</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if start is greater than end, return ""</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &gt;
                                <name>end</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>start</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>end</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>end</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>end</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Left/Right/Mid</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the leftmost &lt;code&gt;len&lt;/code&gt; characters of a String.&lt;/p&gt;
                *
                * &lt;p&gt;If &lt;code&gt;len&lt;/code&gt; characters are not available, or the
                * String is &lt;code&gt;null&lt;/code&gt;, the String will be returned without
                * an exception. An empty String is returned if len is negative.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.left(null, *) = null
                * StringUtils.left(*, -ve) = ""
                * StringUtils.left("", *) = ""
                * StringUtils.left("abc", 0) = ""
                * StringUtils.left("abc", 2) = "ab"
                * StringUtils.left("abc", 4) = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String to get the leftmost characters from, may be null
                * @param len the length of the required String
                * @return the leftmost characters, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>left</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt;=
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>len</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the rightmost &lt;code&gt;len&lt;/code&gt; characters of a String.&lt;/p&gt;
                *
                * &lt;p&gt;If &lt;code&gt;len&lt;/code&gt; characters are not available, or the String
                * is &lt;code&gt;null&lt;/code&gt;, the String will be returned without an
                * an exception. An empty String is returned if len is negative.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.right(null, *) = null
                * StringUtils.right(*, -ve) = ""
                * StringUtils.right("", *) = ""
                * StringUtils.right("abc", 0) = ""
                * StringUtils.right("abc", 2) = "bc"
                * StringUtils.right("abc", 4) = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String to get the rightmost characters from, may be null
                * @param len the length of the required String
                * @return the rightmost characters, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>right</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt;=
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            -
                                            <name>len</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets &lt;code&gt;len&lt;/code&gt; characters from the middle of a String.&lt;/p&gt;
                *
                * &lt;p&gt;If &lt;code&gt;len&lt;/code&gt; characters are not available, the remainder
                * of the String will be returned without an exception. If the
                * String is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; will be returned.
                * An empty String is returned if len is negative or exceeds the
                * length of &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.mid(null, *, *) = null
                * StringUtils.mid(*, *, -ve) = ""
                * StringUtils.mid("", 0, *) = ""
                * StringUtils.mid("abc", 0, 2) = "ab"
                * StringUtils.mid("abc", 0, 4) = "abc"
                * StringUtils.mid("abc", 2, 4) = "c"
                * StringUtils.mid("abc", 4, 2) = ""
                * StringUtils.mid("abc", -2, 2) = "ab"
                * &lt;/pre&gt;
                *
                * @param str the String to get the characters from, may be null
                * @param pos the position to start from, negative treated as zero
                * @param len the length of the required String
                * @return the middle characters, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>mid</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                &lt; 0 || <name>pos</name> &gt;
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pos</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>pos</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt;= (<name>pos</name> + <name>len</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>pos</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>pos</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pos</name>
                                            +
                                            <name>len</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// SubStringAfter/SubStringBefore</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the substring before the first occurrence of a separator.
                * The separator is not returned.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; string input will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") string input will return the empty string.
                * A &lt;code&gt;null&lt;/code&gt; separator will return the input string.&lt;/p&gt;
                *
                * &lt;p&gt;If nothing is found, the string input is returned.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.substringBefore(null, *) = null
                * StringUtils.substringBefore("", *) = ""
                * StringUtils.substringBefore("abc", "a") = ""
                * StringUtils.substringBefore("abcba", "b") = "a"
                * StringUtils.substringBefore("abc", "c") = "ab"
                * StringUtils.substringBefore("abc", "d") = "abc"
                * StringUtils.substringBefore("abc", "") = ""
                * StringUtils.substringBefore("abc", null) = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String to get a substring from, may be null
                * @param separator the String to search for, may be null
                * @return the substring before the first occurrence of the separator,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>substringBefore</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                || <name>separator</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>separator</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>separator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pos</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the substring after the first occurrence of a separator.
                * The separator is not returned.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; string input will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") string input will return the empty string.
                * A &lt;code&gt;null&lt;/code&gt; separator will return the empty string if the
                * input string is not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;If nothing is found, the empty string is returned.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.substringAfter(null, *) = null
                * StringUtils.substringAfter("", *) = ""
                * StringUtils.substringAfter(*, null) = ""
                * StringUtils.substringAfter("abc", "a") = "bc"
                * StringUtils.substringAfter("abcba", "b") = "cba"
                * StringUtils.substringAfter("abc", "c") = ""
                * StringUtils.substringAfter("abc", "d") = ""
                * StringUtils.substringAfter("abc", "") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String to get a substring from, may be null
                * @param separator the String to search for, may be null
                * @return the substring after the first occurrence of the separator,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>substringAfter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>separator</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>separator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pos</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>pos</name>
                                            +
                                            <call>
                                                <name><name>separator</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the substring before the last occurrence of a separator.
                * The separator is not returned.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; string input will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") string input will return the empty string.
                * An empty or &lt;code&gt;null&lt;/code&gt; separator will return the input string.&lt;/p&gt;
                *
                * &lt;p&gt;If nothing is found, the string input is returned.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.substringBeforeLast(null, *) = null
                * StringUtils.substringBeforeLast("", *) = ""
                * StringUtils.substringBeforeLast("abcba", "b") = "abc"
                * StringUtils.substringBeforeLast("abc", "c") = "ab"
                * StringUtils.substringBeforeLast("a", "a") = ""
                * StringUtils.substringBeforeLast("a", "z") = "a"
                * StringUtils.substringBeforeLast("a", null) = "a"
                * StringUtils.substringBeforeLast("a", "") = "a"
                * &lt;/pre&gt;
                *
                * @param str the String to get a substring from, may be null
                * @param separator the String to search for, may be null
                * @return the substring before the last occurrence of the separator,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>substringBeforeLast</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>separator</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>separator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pos</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the substring after the last occurrence of a separator.
                * The separator is not returned.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; string input will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") string input will return the empty string.
                * An empty or &lt;code&gt;null&lt;/code&gt; separator will return the empty string if
                * the input string is not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;If nothing is found, the empty string is returned.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.substringAfterLast(null, *) = null
                * StringUtils.substringAfterLast("", *) = ""
                * StringUtils.substringAfterLast(*, "") = ""
                * StringUtils.substringAfterLast(*, null) = ""
                * StringUtils.substringAfterLast("abc", "a") = "bc"
                * StringUtils.substringAfterLast("abcba", "b") = "a"
                * StringUtils.substringAfterLast("abc", "c") = ""
                * StringUtils.substringAfterLast("a", "a") = ""
                * StringUtils.substringAfterLast("a", "z") = ""
                * &lt;/pre&gt;
                *
                * @param str the String to get a substring from, may be null
                * @param separator the String to search for, may be null
                * @return the substring after the last occurrence of the separator,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>substringAfterLast</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>separator</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>separator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pos</name>
                                == <name>INDEX_NOT_FOUND</name> || <name>pos</name> == (
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                -
                                <call>
                                    <name><name>separator</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>pos</name>
                                            +
                                            <call>
                                                <name><name>separator</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Substring between</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the String that is nested in between two instances of the
                * same String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; tag returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.substringBetween(null, *) = null
                * StringUtils.substringBetween("", "") = ""
                * StringUtils.substringBetween("", "tag") = null
                * StringUtils.substringBetween("tagabctag", null) = null
                * StringUtils.substringBetween("tagabctag", "") = ""
                * StringUtils.substringBetween("tagabctag", "tag") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String containing the substring, may be null
                * @param tag the String before and after the substring, may be null
                * @return the substring, &lt;code&gt;null&lt;/code&gt; if no match
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>substringBetween</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>substringBetween</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tag</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tag</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the String that is nested in between two Strings.
                * Only the first match is returned.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; open/close returns &lt;code&gt;null&lt;/code&gt; (no match).
                * An empty ("") open and close returns an empty string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.substringBetween("wx[b]yz", "[", "]") = "b"
                * StringUtils.substringBetween(null, *, *) = null
                * StringUtils.substringBetween(*, null, *) = null
                * StringUtils.substringBetween(*, *, null) = null
                * StringUtils.substringBetween("", "", "") = ""
                * StringUtils.substringBetween("", "", "]") = null
                * StringUtils.substringBetween("", "[", "]") = null
                * StringUtils.substringBetween("yabcz", "", "") = ""
                * StringUtils.substringBetween("yabcz", "y", "z") = "abc"
                * StringUtils.substringBetween("yabczyabcz", "y", "z") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String containing the substring, may be null
                * @param open the String before the substring, may be null
                * @param close the String after the substring, may be null
                * @return the substring, &lt;code&gt;null&lt;/code&gt; if no match
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>substringBetween</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>open</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>close</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>open</name> == <name>null</name> || <name>close</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>open</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                !=
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>end</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>indexOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>close</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>start</name>
                                                                +
                                                                <call>
                                                                    <name><name>open</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>end</name>
                                            !=
                                            <name>INDEX_NOT_FOUND</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>start</name>
                                                                    +
                                                                    <call>
                                                                        <name><name>open</name>.
                                                                            <name>length</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>end</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Searches a String for substrings delimited by a start and end tag,
                * returning all matching substrings in an array.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; open/close returns &lt;code&gt;null&lt;/code&gt; (no match).
                * An empty ("") open/close returns &lt;code&gt;null&lt;/code&gt; (no match).&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.substringsBetween("[a][b][c]", "[", "]") = ["a","b","c"]
                * StringUtils.substringsBetween(null, *, *) = null
                * StringUtils.substringsBetween(*, null, *) = null
                * StringUtils.substringsBetween(*, *, null) = null
                * StringUtils.substringsBetween("", "[", "]") = []
                * &lt;/pre&gt;
                *
                * @param str the String containing the substrings, null returns null, empty returns empty
                * @param open the String identifying the start of the substring, empty returns null
                * @param close the String identifying the end of the substring, empty returns null
                * @return a String Array of substrings, or &lt;code&gt;null&lt;/code&gt; if no match
                * @since 2.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>substringsBetween</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>open</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>close</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>open</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>close</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>strLen</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_STRING_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>closeLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>close</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>openLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>open</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>pos</name>
                                &lt; (<name>strLen</name> - <name>closeLen</name>)
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>start</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>open</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>pos</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>start</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>start</name>
                                    +=
                                    <name>openLen</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>end</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>close</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>start</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>end</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>list</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>start</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>end</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>pos</name>
                                    = <name>end</name> +
                                    <name>closeLen</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>list</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>list</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>String</name>
                                                <index>[
                                                    <expr>
                                                        <call>
                                                            <name><name>list</name>.
                                                                <name>size</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Nested extraction</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Gets the String that is nested in between two instances of the
                * same String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; tag returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.getNestedString(null, *) = null
                * StringUtils.getNestedString("", "") = ""
                * StringUtils.getNestedString("", "tag") = null
                * StringUtils.getNestedString("tagabctag", null) = null
                * StringUtils.getNestedString("tagabctag", "") = ""
                * StringUtils.getNestedString("tagabctag", "tag") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String containing nested-string, may be null
                * @param tag the String before and after nested-string, may be null
                * @return the nested String, &lt;code&gt;null&lt;/code&gt; if no match
                * @deprecated Use the better named {@link #substringBetween(String, String)}.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getNestedString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>tag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>substringBetween</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tag</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tag</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the String that is nested in between two Strings.
                * Only the first match is returned.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; open/close returns &lt;code&gt;null&lt;/code&gt; (no match).
                * An empty ("") open/close returns an empty string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.getNestedString(null, *, *) = null
                * StringUtils.getNestedString("", "", "") = ""
                * StringUtils.getNestedString("", "", "tag") = null
                * StringUtils.getNestedString("", "tag", "tag") = null
                * StringUtils.getNestedString("yabcz", null, null) = null
                * StringUtils.getNestedString("yabcz", "", "") = ""
                * StringUtils.getNestedString("yabcz", "y", "z") = "abc"
                * StringUtils.getNestedString("yabczyabcz", "y", "z") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String containing nested-string, may be null
                * @param open the String before nested-string, may be null
                * @param close the String after nested-string, may be null
                * @return the nested String, &lt;code&gt;null&lt;/code&gt; if no match
                * @deprecated Use the better named {@link #substringBetween(String, String, String)}.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getNestedString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>open</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>close</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>substringBetween</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>open</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>close</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Splitting</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array, using whitespace as the
                * separator.
                * Whitespace is defined by {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;p&gt;The separator is not included in the returned String array.
                * Adjacent separators are treated as one separator.
                * For more control over the split use the StrTokenizer class.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.split(null) = null
                * StringUtils.split("") = []
                * StringUtils.split("abc def") = ["abc", "def"]
                * StringUtils.split("abc def") = ["abc", "def"]
                * StringUtils.split(" abc ") = ["abc"]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be null
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>split</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>split</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array, separator specified.
                * This is an alternative to using StringTokenizer.&lt;/p&gt;
                *
                * &lt;p&gt;The separator is not included in the returned String array.
                * Adjacent separators are treated as one separator.
                * For more control over the split use the StrTokenizer class.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.split(null, *) = null
                * StringUtils.split("", *) = []
                * StringUtils.split("a.b.c", '.') = ["a", "b", "c"]
                * StringUtils.split("a..b.c", '.') = ["a", "b", "c"]
                * StringUtils.split("a:b:c", '.') = ["a:b:c"]
                * StringUtils.split("a b c", ' ') = ["a", "b", "c"]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be null
                * @param separatorChar the character used as the delimiter
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>split</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separatorChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separatorChar</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array, separators specified.
                * This is an alternative to using StringTokenizer.&lt;/p&gt;
                *
                * &lt;p&gt;The separator is not included in the returned String array.
                * Adjacent separators are treated as one separator.
                * For more control over the split use the StrTokenizer class.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; separatorChars splits on whitespace.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.split(null, *) = null
                * StringUtils.split("", *) = []
                * StringUtils.split("abc def", null) = ["abc", "def"]
                * StringUtils.split("abc def", " ") = ["abc", "def"]
                * StringUtils.split("abc def", " ") = ["abc", "def"]
                * StringUtils.split("ab:cd:ef", ":") = ["ab", "cd", "ef"]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be null
                * @param separatorChars the characters used as the delimiters,
                * &lt;code&gt;null&lt;/code&gt; splits on whitespace
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>split</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separatorChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separatorChars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array with a maximum length,
                * separators specified.&lt;/p&gt;
                *
                * &lt;p&gt;The separator is not included in the returned String array.
                * Adjacent separators are treated as one separator.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; separatorChars splits on whitespace.&lt;/p&gt;
                *
                * &lt;p&gt;If more than &lt;code&gt;max&lt;/code&gt; delimited substrings are found, the last
                * returned string includes all characters after the first &lt;code&gt;max - 1&lt;/code&gt;
                * returned strings (including separator characters).&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.split(null, *, *) = null
                * StringUtils.split("", *, *) = []
                * StringUtils.split("ab de fg", null, 0) = ["ab", "cd", "ef"]
                * StringUtils.split("ab de fg", null, 0) = ["ab", "cd", "ef"]
                * StringUtils.split("ab:cd:ef", ":", 0) = ["ab", "cd", "ef"]
                * StringUtils.split("ab:cd:ef", ":", 2) = ["ab", "cd:ef"]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be null
                * @param separatorChars the characters used as the delimiters,
                * &lt;code&gt;null&lt;/code&gt; splits on whitespace
                * @param max the maximum number of elements to include in the
                * array. A zero or negative value implies no limit
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>split</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separatorChars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separatorChars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>max</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array, separator string specified.&lt;/p&gt;
                *
                * &lt;p&gt;The separator(s) will not be included in the returned String array.
                * Adjacent separators are treated as one separator.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; separator splits on whitespace.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.splitByWholeSeparator(null, *) = null
                * StringUtils.splitByWholeSeparator("", *) = []
                * StringUtils.splitByWholeSeparator("ab de fg", null) = ["ab", "de", "fg"]
                * StringUtils.splitByWholeSeparator("ab de fg", null) = ["ab", "de", "fg"]
                * StringUtils.splitByWholeSeparator("ab:cd:ef", ":") = ["ab", "cd", "ef"]
                * StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-") = ["ab", "cd", "ef"]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be null
                * @param separator String containing the String to be used as a delimiter,
                * &lt;code&gt;null&lt;/code&gt; splits on whitespace
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String was input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitByWholeSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitByWholeSeparatorWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array, separator string specified.
                * Returns a maximum of &lt;code&gt;max&lt;/code&gt; substrings.&lt;/p&gt;
                *
                * &lt;p&gt;The separator(s) will not be included in the returned String array.
                * Adjacent separators are treated as one separator.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; separator splits on whitespace.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.splitByWholeSeparator(null, *, *) = null
                * StringUtils.splitByWholeSeparator("", *, *) = []
                * StringUtils.splitByWholeSeparator("ab de fg", null, 0) = ["ab", "de", "fg"]
                * StringUtils.splitByWholeSeparator("ab de fg", null, 0) = ["ab", "de", "fg"]
                * StringUtils.splitByWholeSeparator("ab:cd:ef", ":", 2) = ["ab", "cd:ef"]
                * StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"]
                * StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be null
                * @param separator String containing the String to be used as a delimiter,
                * &lt;code&gt;null&lt;/code&gt; splits on whitespace
                * @param max the maximum number of elements to include in the returned
                * array. A zero or negative value implies no limit.
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String was input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitByWholeSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitByWholeSeparatorWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>max</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array, separator string specified. &lt;/p&gt;
                *
                * &lt;p&gt;The separator is not included in the returned String array.
                * Adjacent separators are treated as separators for empty tokens.
                * For more control over the split use the StrTokenizer class.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; separator splits on whitespace.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *) = null
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("", *) = []
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null) = ["ab", "de", "fg"]
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null) = ["ab", "", "", "de", "fg"]
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab:cd:ef", ":") = ["ab", "cd", "ef"]
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-") = ["ab", "cd", "ef"]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be null
                * @param separator String containing the String to be used as a delimiter,
                * &lt;code&gt;null&lt;/code&gt; splits on whitespace
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String was input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitByWholeSeparatorPreserveAllTokens</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitByWholeSeparatorWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array, separator string specified.
                * Returns a maximum of &lt;code&gt;max&lt;/code&gt; substrings.&lt;/p&gt;
                *
                * &lt;p&gt;The separator is not included in the returned String array.
                * Adjacent separators are treated as separators for empty tokens.
                * For more control over the split use the StrTokenizer class.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; separator splits on whitespace.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *, *) = null
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("", *, *) = []
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null, 0) = ["ab", "de", "fg"]
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null, 0) = ["ab", "", "", "de", "fg"]
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab:cd:ef", ":", 2) = ["ab", "cd:ef"]
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"]
                * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be null
                * @param separator String containing the String to be used as a delimiter,
                * &lt;code&gt;null&lt;/code&gt; splits on whitespace
                * @param max the maximum number of elements to include in the returned
                * array. A zero or negative value implies no limit.
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String was input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitByWholeSeparatorPreserveAllTokens</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitByWholeSeparatorWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>max</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Performs the logic for the &lt;code&gt;splitByWholeSeparatorPreserveAllTokens&lt;/code&gt; methods.
                *
                * @param str the String to parse, may be &lt;code&gt;null&lt;/code&gt;
                * @param separator String containing the String to be used as a delimiter,
                * &lt;code&gt;null&lt;/code&gt; splits on whitespace
                * @param max the maximum number of elements to include in the returned
                * array. A zero or negative value implies no limit.
                * @param preserveAllTokens if &lt;code&gt;true&lt;/code&gt;, adjacent separators are
                * treated as empty token separators; if &lt;code&gt;false&lt;/code&gt;, adjacent
                * separators are treated as one separator.
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitByWholeSeparatorWorker</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserveAllTokens</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_STRING_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>(<name>separator</name> == <name>null</name>) || (
                                <call>
                                    <name><name>EMPTY</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>separator</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                )
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Split on whitespace.</comment>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>splitWorker</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>str</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>max</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>preserveAllTokens</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>separatorLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>separator</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ArrayList</name>
                            </type>
                            <name>substrings</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numberOfSubstrings</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>beg</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>end</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>end</name>
                                    =
                                    <call>
                                        <name><name>str</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>separator</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>beg</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>end</name>
                                        &gt; -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>end</name>
                                                    &gt;
                                                    <name>beg</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>numberOfSubstrings</name>
                                                            += 1
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>numberOfSubstrings</name>
                                                                ==
                                                                <name>max</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>end</name>
                                                                        =
                                                                        <name>len</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>substrings</name>.
                                                                                <name>add</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>str</name>.
                                                                                                <name>substring</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>beg</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <block>{
                                                                <comment type="line">// The following is OK, because
                                                                    String.substring( beg, end ) excludes
                                                                </comment>
                                                                <comment type="line">// the character at the position
                                                                    'end'.
                                                                </comment>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>substrings</name>.
                                                                                <name>add</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>str</name>.
                                                                                                <name>substring</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>beg</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>end</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>

                                                                <comment type="line">// Set the starting point for the
                                                                    next search.
                                                                </comment>
                                                                <comment type="line">// The following is equivalent to
                                                                    beg = end + (separatorLength - 1) + 1,
                                                                </comment>
                                                                <comment type="line">// which is the right
                                                                    calculation:
                                                                </comment>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>beg</name>
                                                                        = <name>end</name> +
                                                                        <name>separatorLength</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </else>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <comment type="line">// We found a consecutive occurrence of the
                                                        separator, so skip it.
                                                    </comment>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>preserveAllTokens</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>numberOfSubstrings</name>
                                                                        += 1
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>numberOfSubstrings</name>
                                                                            ==
                                                                            <name>max</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>end</name>
                                                                                    =
                                                                                    <name>len</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>substrings</name>.
                                                                                            <name>add</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            str</name>.
                                                                                                            <name>
                                                                                                                substring
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>(
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <name>
                                                                                                                        beg
                                                                                                                    </name>
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            )
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                    <else>else
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>substrings</name>.
                                                                                            <name>add</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>EMPTY</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </else>
                                                                </if>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>beg</name>
                                                            = <name>end</name> +
                                                            <name>separatorLength</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// String.substring( beg ) goes from 'beg' to the end of
                                            the String.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>substrings</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>str</name>.
                                                                        <name>substring</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>beg</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>end</name>
                                                =
                                                <name>len</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </while>

                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>substrings</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>String</name>
                                                <index>[
                                                    <expr>
                                                        <call>
                                                            <name><name>substrings</name>.
                                                                <name>size</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// -----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array, using whitespace as the
                * separator, preserving all tokens, including empty tokens created by
                * adjacent separators. This is an alternative to using StringTokenizer.
                * Whitespace is defined by {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;p&gt;The separator is not included in the returned String array.
                * Adjacent separators are treated as separators for empty tokens.
                * For more control over the split use the StrTokenizer class.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.splitPreserveAllTokens(null) = null
                * StringUtils.splitPreserveAllTokens("") = []
                * StringUtils.splitPreserveAllTokens("abc def") = ["abc", "def"]
                * StringUtils.splitPreserveAllTokens("abc def") = ["abc", "", "def"]
                * StringUtils.splitPreserveAllTokens(" abc ") = ["", "abc", ""]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be &lt;code&gt;null&lt;/code&gt;
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitPreserveAllTokens</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array, separator specified,
                * preserving all tokens, including empty tokens created by adjacent
                * separators. This is an alternative to using StringTokenizer.&lt;/p&gt;
                *
                * &lt;p&gt;The separator is not included in the returned String array.
                * Adjacent separators are treated as separators for empty tokens.
                * For more control over the split use the StrTokenizer class.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.splitPreserveAllTokens(null, *) = null
                * StringUtils.splitPreserveAllTokens("", *) = []
                * StringUtils.splitPreserveAllTokens("a.b.c", '.') = ["a", "b", "c"]
                * StringUtils.splitPreserveAllTokens("a..b.c", '.') = ["a", "", "b", "c"]
                * StringUtils.splitPreserveAllTokens("a:b:c", '.') = ["a:b:c"]
                * StringUtils.splitPreserveAllTokens("a\tb\nc", null) = ["a", "b", "c"]
                * StringUtils.splitPreserveAllTokens("a b c", ' ') = ["a", "b", "c"]
                * StringUtils.splitPreserveAllTokens("a b c ", ' ') = ["a", "b", "c", ""]
                * StringUtils.splitPreserveAllTokens("a b c ", ' ') = ["a", "b", "c", "", ""]
                * StringUtils.splitPreserveAllTokens(" a b c", ' ') = ["", a", "b", "c"]
                * StringUtils.splitPreserveAllTokens(" a b c", ' ') = ["", "", a", "b", "c"]
                * StringUtils.splitPreserveAllTokens(" a b c ", ' ') = ["", a", "b", "c", ""]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be &lt;code&gt;null&lt;/code&gt;
                * @param separatorChar the character used as the delimiter,
                * &lt;code&gt;null&lt;/code&gt; splits on whitespace
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitPreserveAllTokens</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separatorChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separatorChar</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Performs the logic for the &lt;code&gt;split&lt;/code&gt; and
                * &lt;code&gt;splitPreserveAllTokens&lt;/code&gt; methods that do not return a
                * maximum array length.
                *
                * @param str the String to parse, may be &lt;code&gt;null&lt;/code&gt;
                * @param separatorChar the separate character
                * @param preserveAllTokens if &lt;code&gt;true&lt;/code&gt;, adjacent separators are
                * treated as empty token separators; if &lt;code&gt;false&lt;/code&gt;, adjacent
                * separators are treated as one separator.
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitWorker</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separatorChar</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserveAllTokens</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Performance tuned for 2.0 (JDK1.4)</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_STRING_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>start</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>match</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>lastMatch</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ==
                                        <name>separatorChar</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>match</name>
                                                    ||
                                                    <name>preserveAllTokens</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>list</name>.
                                                                    <name>add</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>str</name>.
                                                                                    <name>substring</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>start</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>i</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>match</name>
                                                            = false
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>lastMatch</name>
                                                            = true
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>start</name>
                                                = ++
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>lastMatch</name>
                                    = false
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>match</name>
                                    = true
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>i</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <if>if
                        <condition>(
                            <expr>
                                <name>match</name>
                                || (<name>preserveAllTokens</name> &amp;&amp; <name>lastMatch</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>list</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>substring</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>start</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>list</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>String</name>
                                                <index>[
                                                    <expr>
                                                        <call>
                                                            <name><name>list</name>.
                                                                <name>size</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array, separators specified,
                * preserving all tokens, including empty tokens created by adjacent
                * separators. This is an alternative to using StringTokenizer.&lt;/p&gt;
                *
                * &lt;p&gt;The separator is not included in the returned String array.
                * Adjacent separators are treated as separators for empty tokens.
                * For more control over the split use the StrTokenizer class.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; separatorChars splits on whitespace.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.splitPreserveAllTokens(null, *) = null
                * StringUtils.splitPreserveAllTokens("", *) = []
                * StringUtils.splitPreserveAllTokens("abc def", null) = ["abc", "def"]
                * StringUtils.splitPreserveAllTokens("abc def", " ") = ["abc", "def"]
                * StringUtils.splitPreserveAllTokens("abc def", " ") = ["abc", "", def"]
                * StringUtils.splitPreserveAllTokens("ab:cd:ef", ":") = ["ab", "cd", "ef"]
                * StringUtils.splitPreserveAllTokens("ab:cd:ef:", ":") = ["ab", "cd", "ef", ""]
                * StringUtils.splitPreserveAllTokens("ab:cd:ef::", ":") = ["ab", "cd", "ef", "", ""]
                * StringUtils.splitPreserveAllTokens("ab::cd:ef", ":") = ["ab", "", cd", "ef"]
                * StringUtils.splitPreserveAllTokens(":cd:ef", ":") = ["", cd", "ef"]
                * StringUtils.splitPreserveAllTokens("::cd:ef", ":") = ["", "", cd", "ef"]
                * StringUtils.splitPreserveAllTokens(":cd:ef:", ":") = ["", cd", "ef", ""]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be &lt;code&gt;null&lt;/code&gt;
                * @param separatorChars the characters used as the delimiters,
                * &lt;code&gt;null&lt;/code&gt; splits on whitespace
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitPreserveAllTokens</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separatorChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separatorChars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits the provided text into an array with a maximum length,
                * separators specified, preserving all tokens, including empty tokens
                * created by adjacent separators.&lt;/p&gt;
                *
                * &lt;p&gt;The separator is not included in the returned String array.
                * Adjacent separators are treated as separators for empty tokens.
                * Adjacent separators are treated as one separator.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.
                * A &lt;code&gt;null&lt;/code&gt; separatorChars splits on whitespace.&lt;/p&gt;
                *
                * &lt;p&gt;If more than &lt;code&gt;max&lt;/code&gt; delimited substrings are found, the last
                * returned string includes all characters after the first &lt;code&gt;max - 1&lt;/code&gt;
                * returned strings (including separator characters).&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.splitPreserveAllTokens(null, *, *) = null
                * StringUtils.splitPreserveAllTokens("", *, *) = []
                * StringUtils.splitPreserveAllTokens("ab de fg", null, 0) = ["ab", "cd", "ef"]
                * StringUtils.splitPreserveAllTokens("ab de fg", null, 0) = ["ab", "cd", "ef"]
                * StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 0) = ["ab", "cd", "ef"]
                * StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2) = ["ab", "cd:ef"]
                * StringUtils.splitPreserveAllTokens("ab de fg", null, 2) = ["ab", " de fg"]
                * StringUtils.splitPreserveAllTokens("ab de fg", null, 3) = ["ab", "", " de fg"]
                * StringUtils.splitPreserveAllTokens("ab de fg", null, 4) = ["ab", "", "", "de fg"]
                * &lt;/pre&gt;
                *
                * @param str the String to parse, may be &lt;code&gt;null&lt;/code&gt;
                * @param separatorChars the characters used as the delimiters,
                * &lt;code&gt;null&lt;/code&gt; splits on whitespace
                * @param max the maximum number of elements to include in the
                * array. A zero or negative value implies no limit
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitPreserveAllTokens</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separatorChars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitWorker</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separatorChars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>max</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Performs the logic for the &lt;code&gt;split&lt;/code&gt; and
                * &lt;code&gt;splitPreserveAllTokens&lt;/code&gt; methods that return a maximum array
                * length.
                *
                * @param str the String to parse, may be &lt;code&gt;null&lt;/code&gt;
                * @param separatorChars the separate character
                * @param max the maximum number of elements to include in the
                * array. A zero or negative value implies no limit.
                * @param preserveAllTokens if &lt;code&gt;true&lt;/code&gt;, adjacent separators are
                * treated as empty token separators; if &lt;code&gt;false&lt;/code&gt;, adjacent
                * separators are treated as one separator.
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitWorker</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separatorChars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserveAllTokens</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Performance tuned for 2.0 (JDK1.4)</comment>
                    <comment type="line">// Direct code is quicker than StringTokenizer.</comment>
                    <comment type="line">// Also, StringTokenizer uses isSpace() not isWhitespace()</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_STRING_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sizePlus1</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                            , <name>start</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>match</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>lastMatch</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>separatorChars</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Null separator means use whitespace</comment>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name>len</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>Character</name>.
                                                            <name>isWhitespace</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>str</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>match</name>
                                                                ||
                                                                <name>preserveAllTokens</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>lastMatch</name>
                                                                        = true
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr><name>sizePlus1</name>++ ==
                                                                            <name>max</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                    =
                                                                                    <name>len</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>lastMatch</name>
                                                                                    = false
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>list</name>.
                                                                                <name>add</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>str</name>.
                                                                                                <name>substring</name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>start
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>i</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>match</name>
                                                                        = false
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>start</name>
                                                            = ++
                                                            <name>i</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>lastMatch</name>
                                                = false
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>match</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr><name>i</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>separatorChars</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == 1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// Optimise 1 character case</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>char</name>
                                                </type>
                                                <name>sep</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>separatorChars</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <while>while
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>len</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            ==
                                                            <name>sep</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>match</name>
                                                                        ||
                                                                        <name>preserveAllTokens</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>lastMatch</name>
                                                                                = true
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <if>if
                                                                            <condition>(
                                                                                <expr><name>sizePlus1</name>++ ==
                                                                                    <name>max</name>
                                                                                </expr>
                                                                                )
                                                                            </condition>
                                                                            <then>
                                                                                <block>{
                                                                                    <expr_stmt>
                                                                                        <expr>
                                                                                            <name>i</name>
                                                                                            =
                                                                                            <name>len</name>
                                                                                        </expr>
                                                                                        ;
                                                                                    </expr_stmt>
                                                                                    <expr_stmt>
                                                                                        <expr>
                                                                                            <name>lastMatch</name>
                                                                                            = false
                                                                                        </expr>
                                                                                        ;
                                                                                    </expr_stmt>
                                                                                    }
                                                                                </block>
                                                                            </then>
                                                                        </if>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>list</name>.
                                                                                        <name>add</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        str</name>.
                                                                                                        <name>
                                                                                                            substring
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    start
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        ,
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    i
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>match</name>
                                                                                = false
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>start</name>
                                                                    = ++
                                                                    <name>i</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <continue>continue;</continue>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>lastMatch</name>
                                                        = false
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>match</name>
                                                        = true
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </while>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// standard case</comment>
                                        <while>while
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>len</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>separatorChars</name>.
                                                                    <name>indexOf</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>str</name>.
                                                                                    <name>charAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>i</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            &gt;= 0
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>match</name>
                                                                        ||
                                                                        <name>preserveAllTokens</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>lastMatch</name>
                                                                                = true
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <if>if
                                                                            <condition>(
                                                                                <expr><name>sizePlus1</name>++ ==
                                                                                    <name>max</name>
                                                                                </expr>
                                                                                )
                                                                            </condition>
                                                                            <then>
                                                                                <block>{
                                                                                    <expr_stmt>
                                                                                        <expr>
                                                                                            <name>i</name>
                                                                                            =
                                                                                            <name>len</name>
                                                                                        </expr>
                                                                                        ;
                                                                                    </expr_stmt>
                                                                                    <expr_stmt>
                                                                                        <expr>
                                                                                            <name>lastMatch</name>
                                                                                            = false
                                                                                        </expr>
                                                                                        ;
                                                                                    </expr_stmt>
                                                                                    }
                                                                                </block>
                                                                            </then>
                                                                        </if>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>list</name>.
                                                                                        <name>add</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        str</name>.
                                                                                                        <name>
                                                                                                            substring
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    start
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        ,
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    i
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>match</name>
                                                                                = false
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>start</name>
                                                                    = ++
                                                                    <name>i</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <continue>continue;</continue>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>lastMatch</name>
                                                        = false
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>match</name>
                                                        = true
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </while>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>match</name>
                                || (<name>preserveAllTokens</name> &amp;&amp; <name>lastMatch</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>list</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>substring</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>start</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>list</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>String</name>
                                                <index>[
                                                    <expr>
                                                        <call>
                                                            <name><name>list</name>.
                                                                <name>size</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits a String by Character type as returned by
                * &lt;code&gt;java.lang.Character.getType(char)&lt;/code&gt;. Groups of contiguous
                * characters of the same type are returned as complete tokens.
                * &lt;pre&gt;
                * StringUtils.splitByCharacterType(null) = null
                * StringUtils.splitByCharacterType("") = []
                * StringUtils.splitByCharacterType("ab de fg") = ["ab", " ", "de", " ", "fg"]
                * StringUtils.splitByCharacterType("ab de fg") = ["ab", " ", "de", " ", "fg"]
                * StringUtils.splitByCharacterType("ab:cd:ef") = ["ab", ":", "cd", ":", "ef"]
                * StringUtils.splitByCharacterType("number5") = ["number", "5"]
                * StringUtils.splitByCharacterType("fooBar") = ["foo", "B", "ar"]
                * StringUtils.splitByCharacterType("foo200Bar") = ["foo", "200", "B", "ar"]
                * StringUtils.splitByCharacterType("ASFRules") = ["ASFR", "ules"]
                * &lt;/pre&gt;
                * @param str the String to split, may be &lt;code&gt;null&lt;/code&gt;
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitByCharacterType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitByCharacterType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits a String by Character type as returned by
                * &lt;code&gt;java.lang.Character.getType(char)&lt;/code&gt;. Groups of contiguous
                * characters of the same type are returned as complete tokens, with the
                * following exception: the character of type
                * &lt;code&gt;Character.UPPERCASE_LETTER&lt;/code&gt;, if any, immediately
                * preceding a token of type &lt;code&gt;Character.LOWERCASE_LETTER&lt;/code&gt;
                * will belong to the following token rather than to the preceding, if any,
                * &lt;code&gt;Character.UPPERCASE_LETTER&lt;/code&gt; token.
                * &lt;pre&gt;
                * StringUtils.splitByCharacterTypeCamelCase(null) = null
                * StringUtils.splitByCharacterTypeCamelCase("") = []
                * StringUtils.splitByCharacterTypeCamelCase("ab de fg") = ["ab", " ", "de", " ", "fg"]
                * StringUtils.splitByCharacterTypeCamelCase("ab de fg") = ["ab", " ", "de", " ", "fg"]
                * StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef") = ["ab", ":", "cd", ":", "ef"]
                * StringUtils.splitByCharacterTypeCamelCase("number5") = ["number", "5"]
                * StringUtils.splitByCharacterTypeCamelCase("fooBar") = ["foo", "Bar"]
                * StringUtils.splitByCharacterTypeCamelCase("foo200Bar") = ["foo", "200", "Bar"]
                * StringUtils.splitByCharacterTypeCamelCase("ASFRules") = ["ASF", "Rules"]
                * &lt;/pre&gt;
                * @param str the String to split, may be &lt;code&gt;null&lt;/code&gt;
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitByCharacterTypeCamelCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>splitByCharacterType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Splits a String by Character type as returned by
                * &lt;code&gt;java.lang.Character.getType(char)&lt;/code&gt;. Groups of contiguous
                * characters of the same type are returned as complete tokens, with the
                * following exception: if &lt;code&gt;camelCase&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;,
                * the character of type &lt;code&gt;Character.UPPERCASE_LETTER&lt;/code&gt;, if any,
                * immediately preceding a token of type &lt;code&gt;Character.LOWERCASE_LETTER&lt;/code&gt;
                * will belong to the following token rather than to the preceding, if any,
                * &lt;code&gt;Character.UPPERCASE_LETTER&lt;/code&gt; token.
                * @param str the String to split, may be &lt;code&gt;null&lt;/code&gt;
                * @param camelCase whether to use so-called "camel-case" for letter types
                * @return an array of parsed Strings, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>splitByCharacterType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>camelCase</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_STRING_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>c</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>tokenStart</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>currentType</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Character</name>.
                                            <name>getType</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>c</name>
                                                        <index>[
                                                            <expr>
                                                                <name>tokenStart</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>pos</name> =
                                <init>
                                    <expr>
                                        <name>tokenStart</name>
                                        + 1
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>pos</name>
                                &lt;
                                <name><name>c</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>pos</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>type</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Character</name>.
                                                    <name>getType</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>c</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>pos</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        ==
                                        <name>currentType</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>camelCase</name>
                                        &amp;&amp; <name>type</name> ==
                                        <name><name>Character</name>.
                                            <name>LOWERCASE_LETTER</name>
                                        </name>
                                        &amp;&amp; <name>currentType</name> ==
                                        <name><name>Character</name>.
                                            <name>UPPERCASE_LETTER</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>newTokenStart</name> =
                                                <init>
                                                    <expr>
                                                        <name>pos</name>
                                                        - 1
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>newTokenStart</name>
                                                    !=
                                                    <name>tokenStart</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>list</name>.
                                                                    <name>add</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>new
                                                                            <call>
                                                                                <name>String</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>c</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>tokenStart</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>newTokenStart</name>
                                                                                            -
                                                                                            <name>tokenStart</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>tokenStart</name>
                                                            =
                                                            <name>newTokenStart</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>list</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>new
                                                                <call>
                                                                    <name>String</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>c</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>tokenStart</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>pos</name>
                                                                                -
                                                                                <name>tokenStart</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>tokenStart</name>
                                                =
                                                <name>pos</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>currentType</name>
                                    =
                                    <name>type</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>list</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>String</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>c</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>tokenStart</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>c</name>.
                                                                <name>length</name>
                                                            </name>
                                                            -
                                                            <name>tokenStart</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>(
                            <name>
                                <name>String</name>
                                <index>[]</index>
                            </name>
                            )
                            <call>
                                <name><name>list</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <name>
                                                <name>String</name>
                                                <index>[
                                                    <expr>
                                                        <call>
                                                            <name><name>list</name>.
                                                                <name>size</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Joining</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Joins the provided elements into a single String. &lt;/p&gt;
                *
                * &lt;p&gt;No separator is added to the joined String.
                * Null objects or empty string elements are represented by
                * empty strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.concatenate(null) = null
                * StringUtils.concatenate([]) = ""
                * StringUtils.concatenate([null]) = ""
                * StringUtils.concatenate(["a", "b", "c"]) = "abc"
                * StringUtils.concatenate([null, "", "a"]) = "a"
                * &lt;/pre&gt;
                *
                * @param array the array of values to concatenate, may be null
                * @return the concatenated String, &lt;code&gt;null&lt;/code&gt; if null array input
                * @deprecated Use the better named {@link #join(Object[])} instead.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>concatenate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>join</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Joins the elements of the provided array into a single String
                * containing the provided list of elements.&lt;/p&gt;
                *
                * &lt;p&gt;No separator is added to the joined String.
                * Null objects or empty strings within the array are represented by
                * empty strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.join(null) = null
                * StringUtils.join([]) = ""
                * StringUtils.join([null]) = ""
                * StringUtils.join(["a", "b", "c"]) = "abc"
                * StringUtils.join([null, "", "a"]) = "a"
                * &lt;/pre&gt;
                *
                * @param array the array of values to join together, may be null
                * @return the joined String, &lt;code&gt;null&lt;/code&gt; if null array input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>join</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Joins the elements of the provided array into a single String
                * containing the provided list of elements.&lt;/p&gt;
                *
                * &lt;p&gt;No delimiter is added before or after the list.
                * Null objects or empty strings within the array are represented by
                * empty strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.join(null, *) = null
                * StringUtils.join([], *) = ""
                * StringUtils.join([null], *) = ""
                * StringUtils.join(["a", "b", "c"], ';') = "a;b;c"
                * StringUtils.join(["a", "b", "c"], null) = "abc"
                * StringUtils.join([null, "", "a"], ';') = ";;a"
                * &lt;/pre&gt;
                *
                * @param array the array of values to join together, may be null
                * @param separator the separator character to use
                * @return the joined String, &lt;code&gt;null&lt;/code&gt; if null array input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name>join</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Joins the elements of the provided array into a single String
                * containing the provided list of elements.&lt;/p&gt;
                *
                * &lt;p&gt;No delimiter is added before or after the list.
                * Null objects or empty strings within the array are represented by
                * empty strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.join(null, *) = null
                * StringUtils.join([], *) = ""
                * StringUtils.join([null], *) = ""
                * StringUtils.join(["a", "b", "c"], ';') = "a;b;c"
                * StringUtils.join(["a", "b", "c"], null) = "abc"
                * StringUtils.join([null, "", "a"], ';') = ";;a"
                * &lt;/pre&gt;
                *
                * @param array the array of values to join together, may be null
                * @param separator the separator character to use
                * @param startIndex the first index to start joining from. It is
                * an error to pass in an end index past the end of the array
                * @param endIndex the index to stop joining from (exclusive). It is
                * an error to pass in an end index past the end of the array
                * @return the joined String, &lt;code&gt;null&lt;/code&gt; if null array input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bufSize</name> =
                            <init>
                                <expr>(<name>endIndex</name> - <name>startIndex</name>)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>bufSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>bufSize</name>
                            *= ((
                            <name>
                                <name>array</name>
                                <index>[
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            == <name>null</name> ? 16 :
                            <name>
                                <name>array</name>
                                <index>[
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>length</name>
                                <argument_list>()</argument_list>
                            </call>
                            ) + 1)
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bufSize</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>endIndex</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>i</name>
                                        &gt;
                                        <name>startIndex</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>separator</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>array</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * &lt;p&gt;Joins the elements of the provided array into a single String
                * containing the provided list of elements.&lt;/p&gt;
                *
                * &lt;p&gt;No delimiter is added before or after the list.
                * A &lt;code&gt;null&lt;/code&gt; separator is the same as an empty String ("").
                * Null objects or empty strings within the array are represented by
                * empty strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.join(null, *) = null
                * StringUtils.join([], *) = ""
                * StringUtils.join([null], *) = ""
                * StringUtils.join(["a", "b", "c"], "--") = "a--b--c"
                * StringUtils.join(["a", "b", "c"], null) = "abc"
                * StringUtils.join(["a", "b", "c"], "") = "abc"
                * StringUtils.join([null, "", "a"], ',') = ",,a"
                * &lt;/pre&gt;
                *
                * @param array the array of values to join together, may be null
                * @param separator the separator character to use, null treated as ""
                * @return the joined String, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>join</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>array</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Joins the elements of the provided array into a single String
                * containing the provided list of elements.&lt;/p&gt;
                *
                * &lt;p&gt;No delimiter is added before or after the list.
                * A &lt;code&gt;null&lt;/code&gt; separator is the same as an empty String ("").
                * Null objects or empty strings within the array are represented by
                * empty strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.join(null, *) = null
                * StringUtils.join([], *) = ""
                * StringUtils.join([null], *) = ""
                * StringUtils.join(["a", "b", "c"], "--") = "a--b--c"
                * StringUtils.join(["a", "b", "c"], null) = "abc"
                * StringUtils.join(["a", "b", "c"], "") = "abc"
                * StringUtils.join([null, "", "a"], ',') = ",,a"
                * &lt;/pre&gt;
                *
                * @param array the array of values to join together, may be null
                * @param separator the separator character to use, null treated as ""
                * @param startIndex the first index to start joining from. It is
                * an error to pass in an end index past the end of the array
                * @param endIndex the index to stop joining from (exclusive). It is
                * an error to pass in an end index past the end of the array
                * @return the joined String, &lt;code&gt;null&lt;/code&gt; if null array input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startIndex</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>separator</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>separator</name>
                                        =
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// endIndex - startIndex &gt; 0: Len = NofStrings *(len(firstString) +
                        len(separator))
                    </comment>
                    <comment type="line">// (Assuming that all Strings are roughly equally long)</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bufSize</name> =
                            <init>
                                <expr>(<name>endIndex</name> - <name>startIndex</name>)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>bufSize</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name>bufSize</name>
                            *= ((
                            <name>
                                <name>array</name>
                                <index>[
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            == <name>null</name> ? 16 :
                            <name>
                                <name>array</name>
                                <index>[
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>length</name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                            +
                            <call>
                                <name><name>separator</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bufSize</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>startIndex</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>endIndex</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>i</name>
                                        &gt;
                                        <name>startIndex</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>separator</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>array</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Joins the elements of the provided &lt;code&gt;Iterator&lt;/code&gt; into
                * a single String containing the provided elements.&lt;/p&gt;
                *
                * &lt;p&gt;No delimiter is added before or after the list. Null objects or empty
                * strings within the iteration are represented by empty strings.&lt;/p&gt;
                *
                * &lt;p&gt;See the examples here: {@link #join(Object[],char)}. &lt;/p&gt;
                *
                * @param iterator the &lt;code&gt;Iterator&lt;/code&gt; of values to join together, may be null
                * @param separator the separator character to use
                * @return the joined String, &lt;code&gt;null&lt;/code&gt; if null iterator input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Iterator</name>
                            </type>
                            <name>iterator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// handle null, zero and one elements before building a buffer</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>iterator</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>iterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>first</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>iterator</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>iterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ObjectUtils</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>first</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// two or more elements</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>256</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Java default is 16, probably too small</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>first</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>buf</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>first</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>iterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buf</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>separator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>obj</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>iterator</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>obj</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>obj</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>

                    <return>return
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Joins the elements of the provided &lt;code&gt;Iterator&lt;/code&gt; into
                * a single String containing the provided elements.&lt;/p&gt;
                *
                * &lt;p&gt;No delimiter is added before or after the list.
                * A &lt;code&gt;null&lt;/code&gt; separator is the same as an empty String ("").&lt;/p&gt;
                *
                * &lt;p&gt;See the examples here: {@link #join(Object[],String)}. &lt;/p&gt;
                *
                * @param iterator the &lt;code&gt;Iterator&lt;/code&gt; of values to join together, may be null
                * @param separator the separator character to use, null treated as ""
                * @return the joined String, &lt;code&gt;null&lt;/code&gt; if null iterator input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Iterator</name>
                            </type>
                            <name>iterator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// handle null, zero and one elements before building a buffer</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>iterator</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>iterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>first</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>iterator</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>iterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ObjectUtils</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>first</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// two or more elements</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>256</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Java default is 16, probably too small</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>first</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>buf</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>first</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>iterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>separator</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>separator</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>obj</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>iterator</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>obj</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>obj</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Joins the elements of the provided &lt;code&gt;Collection&lt;/code&gt; into
                * a single String containing the provided elements.&lt;/p&gt;
                *
                * &lt;p&gt;No delimiter is added before or after the list. Null objects or empty
                * strings within the iteration are represented by empty strings.&lt;/p&gt;
                *
                * &lt;p&gt;See the examples here: {@link #join(Object[],char)}. &lt;/p&gt;
                *
                * @param collection the &lt;code&gt;Collection&lt;/code&gt; of values to join together, may be null
                * @param separator the separator character to use
                * @return the joined String, &lt;code&gt;null&lt;/code&gt; if null iterator input
                * @since 2.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>collection</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>join</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>collection</name>.
                                                    <name>iterator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Joins the elements of the provided &lt;code&gt;Collection&lt;/code&gt; into
                * a single String containing the provided elements.&lt;/p&gt;
                *
                * &lt;p&gt;No delimiter is added before or after the list.
                * A &lt;code&gt;null&lt;/code&gt; separator is the same as an empty String ("").&lt;/p&gt;
                *
                * &lt;p&gt;See the examples here: {@link #join(Object[],String)}. &lt;/p&gt;
                *
                * @param collection the &lt;code&gt;Collection&lt;/code&gt; of values to join together, may be null
                * @param separator the separator character to use, null treated as ""
                * @return the joined String, &lt;code&gt;null&lt;/code&gt; if null iterator input
                * @since 2.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>collection</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>join</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>collection</name>.
                                                    <name>iterator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Delete</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Deletes all 'space' characters from a String as defined by
                * {@link Character#isSpace(char)}.&lt;/p&gt;
                *
                * &lt;p&gt;This is the only StringUtils method that uses the
                * &lt;code&gt;isSpace&lt;/code&gt; definition. You are advised to use
                * {@link #deleteWhitespace(String)} instead as whitespace is much
                * better localized.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.deleteSpaces(null) = null
                * StringUtils.deleteSpaces("") = ""
                * StringUtils.deleteSpaces("abc") = "abc"
                * StringUtils.deleteSpaces(" \t abc \n ") = "abc"
                * StringUtils.deleteSpaces("ab c") = "abc"
                * StringUtils.deleteSpaces("a\nb\tc ") = "abc"
                * &lt;/pre&gt;
                *
                * &lt;p&gt;Spaces are defined as &lt;code&gt;{' ', '\t', '\r', '\n', '\b'}&lt;/code&gt;
                * in line with the deprecated &lt;code&gt;isSpace&lt;/code&gt; method.&lt;/p&gt;
                *
                * @param str the String to delete spaces from, may be null
                * @return the String without 'spaces', &lt;code&gt;null&lt;/code&gt; if null String input
                * @deprecated Use the better localized {@link #deleteWhitespace(String)}.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>deleteSpaces</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>CharSetUtils</name>.
                                    <name>delete</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>" \t\r\n\b"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Deletes all whitespaces from a String as defined by
                * {@link Character#isWhitespace(char)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.deleteWhitespace(null) = null
                * StringUtils.deleteWhitespace("") = ""
                * StringUtils.deleteWhitespace("abc") = "abc"
                * StringUtils.deleteWhitespace(" ab c ") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String to delete whitespace from, may be null
                * @return the String without whitespaces, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>deleteWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>chs</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>char</name>
                                        <index>[
                                            <expr>
                                                <name>sz</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isWhitespace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>chs</name>
                                                    <index>[
                                                        <expr><name>count</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <name>count</name>
                                ==
                                <name>sz</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>String</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>chs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Remove</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Removes a substring only if it is at the begining of a source string,
                * otherwise returns the source string.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; source string will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") source string will return the empty string.
                * A &lt;code&gt;null&lt;/code&gt; search string will return the source string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.removeStart(null, *) = null
                * StringUtils.removeStart("", *) = ""
                * StringUtils.removeStart(*, null) = *
                * StringUtils.removeStart("www.domain.com", "www.") = "domain.com"
                * StringUtils.removeStart("domain.com", "www.") = "domain.com"
                * StringUtils.removeStart("www.domain.com", "domain") = "www.domain.com"
                * StringUtils.removeStart("abc", "") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the source String to search, may be null
                * @param remove the String to search for and remove, may be null
                * @return the substring with the string removed if found,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>removeStart</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>remove</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>remove</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>remove</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>remove</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Case insensitive removal of a substring if it is at the begining of a source string,
                * otherwise returns the source string.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; source string will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") source string will return the empty string.
                * A &lt;code&gt;null&lt;/code&gt; search string will return the source string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.removeStartIgnoreCase(null, *) = null
                * StringUtils.removeStartIgnoreCase("", *) = ""
                * StringUtils.removeStartIgnoreCase(*, null) = *
                * StringUtils.removeStartIgnoreCase("www.domain.com", "www.") = "domain.com"
                * StringUtils.removeStartIgnoreCase("www.domain.com", "WWW.") = "domain.com"
                * StringUtils.removeStartIgnoreCase("domain.com", "www.") = "domain.com"
                * StringUtils.removeStartIgnoreCase("www.domain.com", "domain") = "www.domain.com"
                * StringUtils.removeStartIgnoreCase("abc", "") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the source String to search, may be null
                * @param remove the String to search for (case insensitive) and remove, may be null
                * @return the substring with the string removed if found,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>removeStartIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>remove</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>remove</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>startsWithIgnoreCase</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>remove</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>remove</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes a substring only if it is at the end of a source string,
                * otherwise returns the source string.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; source string will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") source string will return the empty string.
                * A &lt;code&gt;null&lt;/code&gt; search string will return the source string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.removeEnd(null, *) = null
                * StringUtils.removeEnd("", *) = ""
                * StringUtils.removeEnd(*, null) = *
                * StringUtils.removeEnd("www.domain.com", ".com.") = "www.domain.com"
                * StringUtils.removeEnd("www.domain.com", ".com") = "www.domain"
                * StringUtils.removeEnd("www.domain.com", "domain") = "www.domain.com"
                * StringUtils.removeEnd("abc", "") = "abc"
                * &lt;/pre&gt;
                *
                * @param str the source String to search, may be null
                * @param remove the String to search for and remove, may be null
                * @return the substring with the string removed if found,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>removeEnd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>remove</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>remove</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>endsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>remove</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        -
                                                        <call>
                                                            <name><name>remove</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Case insensitive removal of a substring if it is at the end of a source string,
                * otherwise returns the source string.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; source string will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") source string will return the empty string.
                * A &lt;code&gt;null&lt;/code&gt; search string will return the source string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.removeEndIgnoreCase(null, *) = null
                * StringUtils.removeEndIgnoreCase("", *) = ""
                * StringUtils.removeEndIgnoreCase(*, null) = *
                * StringUtils.removeEndIgnoreCase("www.domain.com", ".com.") = "www.domain.com"
                * StringUtils.removeEndIgnoreCase("www.domain.com", ".com") = "www.domain"
                * StringUtils.removeEndIgnoreCase("www.domain.com", "domain") = "www.domain.com"
                * StringUtils.removeEndIgnoreCase("abc", "") = "abc"
                * StringUtils.removeEndIgnoreCase("www.domain.com", ".COM") = "www.domain")
                * StringUtils.removeEndIgnoreCase("www.domain.COM", ".com") = "www.domain")
                * &lt;/pre&gt;
                *
                * @param str the source String to search, may be null
                * @param remove the String to search for (case insensitive) and remove, may be null
                * @return the substring with the string removed if found,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>removeEndIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>remove</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>remove</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>endsWithIgnoreCase</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>remove</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        -
                                                        <call>
                                                            <name><name>remove</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes all occurrences of a substring from within the source string.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; source string will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") source string will return the empty string.
                * A &lt;code&gt;null&lt;/code&gt; remove string will return the source string.
                * An empty ("") remove string will return the source string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.remove(null, *) = null
                * StringUtils.remove("", *) = ""
                * StringUtils.remove(*, null) = *
                * StringUtils.remove(*, "") = *
                * StringUtils.remove("queued", "ue") = "qd"
                * StringUtils.remove("queued", "zz") = "queued"
                * &lt;/pre&gt;
                *
                * @param str the source String to search, may be null
                * @param remove the String to search for and remove, may be null
                * @return the substring with the string removed if found,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>remove</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>remove</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>replace</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>remove</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>EMPTY</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes all occurrences of a character from within the source string.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; source string will return &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") source string will return the empty string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.remove(null, *) = null
                * StringUtils.remove("", *) = ""
                * StringUtils.remove("queued", 'u') = "qeed"
                * StringUtils.remove("queued", 'z') = "queued"
                * &lt;/pre&gt;
                *
                * @param str the source String to search, may be null
                * @param remove the char to search for and remove, may be null
                * @return the substring with the char removed if found,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>remove</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>str</name>.
                                        <name>indexOf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>remove</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>chars</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>toCharArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pos</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>chars</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>chars</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        !=
                                        <name>remove</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>chars</name>
                                                    <index>[
                                                        <expr><name>pos</name>++
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>
                                                    <name>chars</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>new
                            <call>
                                <name>String</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>chars</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>pos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Replacing</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Replaces a String with another String inside a larger String, once.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; reference passed to this method is a no-op.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.replaceOnce(null, *, *) = null
                * StringUtils.replaceOnce("", *, *) = ""
                * StringUtils.replaceOnce("any", null, *) = "any"
                * StringUtils.replaceOnce("any", *, null) = "any"
                * StringUtils.replaceOnce("any", "", *) = "any"
                * StringUtils.replaceOnce("aba", "a", null) = "aba"
                * StringUtils.replaceOnce("aba", "a", "") = "ba"
                * StringUtils.replaceOnce("aba", "a", "z") = "zba"
                * &lt;/pre&gt;
                *
                * @see #replace(String text, String searchString, String replacement, int max)
                * @param text text to search and replace in, may be null
                * @param searchString the String to search for, may be null
                * @param replacement the String to replace with, may be null
                * @return the text with any replacements processed,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>replaceOnce</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>replacement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>replace</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>text</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>searchString</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>replacement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Replaces all occurrences of a String within another String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; reference passed to this method is a no-op.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.replace(null, *, *) = null
                * StringUtils.replace("", *, *) = ""
                * StringUtils.replace("any", null, *) = "any"
                * StringUtils.replace("any", *, null) = "any"
                * StringUtils.replace("any", "", *) = "any"
                * StringUtils.replace("aba", "a", null) = "aba"
                * StringUtils.replace("aba", "a", "") = "b"
                * StringUtils.replace("aba", "a", "z") = "zbz"
                * &lt;/pre&gt;
                *
                * @see #replace(String text, String searchString, String replacement, int max)
                * @param text text to search and replace in, may be null
                * @param searchString the String to search for, may be null
                * @param replacement the String to replace it with, may be null
                * @return the text with any replacements processed,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>replace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>replacement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>replace</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>text</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>searchString</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>replacement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Replaces a String with another String inside a larger String,
                * for the first &lt;code&gt;max&lt;/code&gt; values of the search String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; reference passed to this method is a no-op.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.replace(null, *, *, *) = null
                * StringUtils.replace("", *, *, *) = ""
                * StringUtils.replace("any", null, *, *) = "any"
                * StringUtils.replace("any", *, null, *) = "any"
                * StringUtils.replace("any", "", *, *) = "any"
                * StringUtils.replace("any", *, *, 0) = "any"
                * StringUtils.replace("abaa", "a", null, -1) = "abaa"
                * StringUtils.replace("abaa", "a", "", -1) = "b"
                * StringUtils.replace("abaa", "a", "z", 0) = "abaa"
                * StringUtils.replace("abaa", "a", "z", 1) = "zbaa"
                * StringUtils.replace("abaa", "a", "z", 2) = "zbza"
                * StringUtils.replace("abaa", "a", "z", -1) = "zbzz"
                * &lt;/pre&gt;
                *
                * @param text text to search and replace in, may be null
                * @param searchString the String to search for, may be null
                * @param replacement the String to replace it with, may be null
                * @param max maximum number of values to replace, or &lt;code&gt;-1&lt;/code&gt; if no maximum
                * @return the text with any replacements processed,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>replace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchString</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>replacement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>text</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>searchString</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                || <name>replacement</name> == <name>null</name> || <name>max</name> == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>text</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>text</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>searchString</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>end</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>text</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>replLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>searchString</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>increase</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>replacement</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    -
                                    <name>replLength</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>increase</name>
                            = (<name>increase</name> &lt; 0 ? 0 : <name>increase</name>)
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>increase</name>
                            *= (<name>max</name> &lt; 0 ? 16 : (<name>max</name> &gt; 64 ? 64 : <name>max</name>))
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>text</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    +
                                                    <name>increase</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>end</name>
                                !=
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buf</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>text</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>start</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>end</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>replacement</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>start</name>
                                    = <name>end</name> +
                                    <name>replLength</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>--<name>max</name> == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>end</name>
                                    =
                                    <call>
                                        <name><name>text</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>searchString</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>text</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>start</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buf</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Replaces all occurrences of Strings within another String.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * A &lt;code&gt;null&lt;/code&gt; reference passed to this method is a no-op, or if
                * any "search string" or "string to replace" is null, that replace will be
                * ignored. This will not repeat. For repeating replaces, call the
                * overloaded method.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.replaceEach(null, *, *) = null
                * StringUtils.replaceEach("", *, *) = ""
                * StringUtils.replaceEach("aba", null, null) = "aba"
                * StringUtils.replaceEach("aba", new String[0], null) = "aba"
                * StringUtils.replaceEach("aba", null, new String[0]) = "aba"
                * StringUtils.replaceEach("aba", new String[]{"a"}, null) = "aba"
                * StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}) = "b"
                * StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}) = "aba"
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}) = "wcte"
                * (example of how it does not repeat)
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}) = "dcte"
                * &lt;/pre&gt;
                *
                * @param text
                * text to search and replace in, no-op if null
                * @param searchList
                * the Strings to search for, no-op if null
                * @param replacementList
                * the Strings to replace them with, no-op if null
                * @return the text with any replacements processed, &lt;code&gt;null&lt;/code&gt; if
                * null String input
                * @throws IndexOutOfBoundsException
                * if the lengths of the arrays are not the same (null is ok,
                * and/or size 0)
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>replaceEach</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchList</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>replacementList</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>replaceEach</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>text</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>searchList</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>replacementList</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Replaces all occurrences of Strings within another String.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * A &lt;code&gt;null&lt;/code&gt; reference passed to this method is a no-op, or if
                * any "search string" or "string to replace" is null, that replace will be
                * ignored. This will not repeat. For repeating replaces, call the
                * overloaded method.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.replaceEach(null, *, *, *) = null
                * StringUtils.replaceEach("", *, *, *) = ""
                * StringUtils.replaceEach("aba", null, null, *) = "aba"
                * StringUtils.replaceEach("aba", new String[0], null, *) = "aba"
                * StringUtils.replaceEach("aba", null, new String[0], *) = "aba"
                * StringUtils.replaceEach("aba", new String[]{"a"}, null, *) = "aba"
                * StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *) = "b"
                * StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *) = "aba"
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *) = "wcte"
                * (example of how it repeats)
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false) = "dcte"
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true) = "tcte"
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, true) =
                IllegalArgumentException
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, false) = "dcabe"
                * &lt;/pre&gt;
                *
                * @param text
                * text to search and replace in, no-op if null
                * @param searchList
                * the Strings to search for, no-op if null
                * @param replacementList
                * the Strings to replace them with, no-op if null
                * @return the text with any replacements processed, &lt;code&gt;null&lt;/code&gt; if
                * null String input
                * @throws IllegalArgumentException
                * if the search is repeating and there is an endless loop due
                * to outputs of one being inputs to another
                * @throws IndexOutOfBoundsException
                * if the lengths of the arrays are not the same (null is ok,
                * and/or size 0)
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>replaceEachRepeatedly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchList</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>replacementList</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// timeToLive should be 0 if not used or nothing to replace, else it's
                    </comment>
                    <comment type="line">// the length of the replace array</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>timeToLive</name> =
                            <init>
                                <expr>
                                    <name>searchList</name>
                                    == <name>null</name> ? 0 :
                                    <name><name>searchList</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>replaceEach</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>text</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>searchList</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>replacementList</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>timeToLive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Replaces all occurrences of Strings within another String.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * A &lt;code&gt;null&lt;/code&gt; reference passed to this method is a no-op, or if
                * any "search string" or "string to replace" is null, that replace will be
                * ignored.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.replaceEach(null, *, *, *) = null
                * StringUtils.replaceEach("", *, *, *) = ""
                * StringUtils.replaceEach("aba", null, null, *) = "aba"
                * StringUtils.replaceEach("aba", new String[0], null, *) = "aba"
                * StringUtils.replaceEach("aba", null, new String[0], *) = "aba"
                * StringUtils.replaceEach("aba", new String[]{"a"}, null, *) = "aba"
                * StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *) = "b"
                * StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *) = "aba"
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *) = "wcte"
                * (example of how it repeats)
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false) = "dcte"
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true) = "tcte"
                * StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, *) =
                IllegalArgumentException
                * &lt;/pre&gt;
                *
                * @param text
                * text to search and replace in, no-op if null
                * @param searchList
                * the Strings to search for, no-op if null
                * @param replacementList
                * the Strings to replace them with, no-op if null
                * @param repeat if true, then replace repeatedly
                * until there are no more possible replacements or timeToLive &lt; 0
                * @param timeToLive
                * if less than 0 then there is a circular reference and endless
                * loop
                * @return the text with any replacements processed, &lt;code&gt;null&lt;/code&gt; if
                * null String input
                * @throws IllegalArgumentException
                * if the search is repeating and there is an endless loop due
                * to outputs of one being inputs to another
                * @throws IndexOutOfBoundsException
                * if the lengths of the arrays are not the same (null is ok,
                * and/or size 0)
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>replaceEach</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchList</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>replacementList</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>repeat</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>timeToLive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// mchyzer Performance note: This creates very few new objects (one major
                        goal)
                    </comment>
                    <comment type="line">// let me know if there are performance requests, we can create a harness to
                        measure
                    </comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>text</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>text</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0 || <name>searchList</name> == <name>null</name> ||
                                <name><name>searchList</name>.
                                    <name>length</name>
                                </name>
                                == 0 || <name>replacementList</name> == <name>null</name> ||
                                <name><name>replacementList</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>text</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// if recursing, this shouldnt be less than 0</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>timeToLive</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"TimeToLive of " + <name>timeToLive</name> + " is less than 0:
                                                        " +
                                                        <name>text</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>searchLength</name> =
                            <init>
                                <expr>
                                    <name><name>searchList</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>replacementLength</name> =
                            <init>
                                <expr>
                                    <name><name>replacementList</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// make sure lengths are ok, these need to be equal</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>searchLength</name>
                                !=
                                <name>replacementLength</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Search and Replace array lengths don't match: "
                                                        +
                                                        <name>searchLength</name>
                                                        + " vs "
                                                        +
                                                        <name>replacementLength</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// keep track of which still have matches</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                                <index>[]</index>
                            </type>
                            <name>noMoreMatchesForReplIndex</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>boolean</name>
                                        <index>[
                                            <expr>
                                                <name>searchLength</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// index on index that the match was found</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>textIndex</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>replaceIndex</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>tempIndex</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// index of replace array that will replace the search string found</comment>
                    <comment type="line">// NOTE: logic duplicated below START</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>searchLength</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>noMoreMatchesForReplIndex</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ||
                                        <name>
                                            <name>searchList</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == <name>null</name> ||
                                        <name>
                                            <name>searchList</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        .
                                        <call>
                                            <name>length</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == 0 ||
                                        <name>
                                            <name>replacementList</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>tempIndex</name>
                                    =
                                    <call>
                                        <name><name>text</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>searchList</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// see if we need to keep searching for this</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>tempIndex</name>
                                        == -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>noMoreMatchesForReplIndex</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>textIndex</name>
                                                    == -1 || <name>tempIndex</name> &lt;
                                                    <name>textIndex</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>textIndex</name>
                                                            =
                                                            <name>tempIndex</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>replaceIndex</name>
                                                            =
                                                            <name>i</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <comment type="line">// NOTE: logic mostly below END</comment>

                    <comment type="line">// no search strings found, we are done</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>textIndex</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>text</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// get a good guess on the size of the result buffer so it doesnt have to
                        double if it goes over a bit
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>increase</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// count the replacement text elements that are larger than their corresponding
                        text being replaced
                    </comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>searchList</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>searchList</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        == <name>null</name> ||
                                        <name>
                                            <name>replacementList</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>greater</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>replacementList</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            .
                                            <call>
                                                <name>length</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            -
                                            <name>
                                                <name>searchList</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            .
                                            <call>
                                                <name>length</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>greater</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>increase</name>
                                                += 3 *
                                                <name>greater</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// assume 3 matches</comment>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <comment type="line">// have upper-bound at 20% increase, then let Java take over</comment>
                    <expr_stmt>
                        <expr>
                            <name>increase</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>min</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>increase</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>text</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            / 5
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>text</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    +
                                                    <name>increase</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>
                                <name>textIndex</name>
                                != -1
                            </expr>
                            )
                        </condition>
                        <block>{

                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>
                                                <name>start</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>textIndex</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>buf</name>.
                                                    <name>append</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>text</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buf</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>replacementList</name>
                                                        <index>[
                                                            <expr>
                                                                <name>replaceIndex</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>start</name>
                                    = <name>textIndex</name> +
                                    <name>
                                        <name>searchList</name>
                                        <index>[
                                            <expr>
                                                <name>replaceIndex</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    .
                                    <call>
                                        <name>length</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>textIndex</name>
                                    = -1
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>replaceIndex</name>
                                    = -1
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>tempIndex</name>
                                    = -1
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// find the next earliest match</comment>
                            <comment type="line">// NOTE: logic mostly duplicated above START</comment>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>searchLength</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>noMoreMatchesForReplIndex</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ||
                                                <name>
                                                    <name>searchList</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                == <name>null</name> ||
                                                <name>
                                                    <name>searchList</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                .
                                                <call>
                                                    <name>length</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == 0 ||
                                                <name>
                                                    <name>replacementList</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <continue>continue;</continue>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>tempIndex</name>
                                            =
                                            <call>
                                                <name><name>text</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>searchList</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>start</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>

                                    <comment type="line">// see if we need to keep searching for this</comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>tempIndex</name>
                                                == -1
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>noMoreMatchesForReplIndex</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        = true
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>textIndex</name>
                                                            == -1 || <name>tempIndex</name> &lt;
                                                            <name>textIndex</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>textIndex</name>
                                                                    =
                                                                    <name>tempIndex</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>replaceIndex</name>
                                                                    =
                                                                    <name>i</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </for>
                            <comment type="line">// NOTE: logic duplicated above END</comment>

                            }
                        </block>
                    </while>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>textLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>text</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>start</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>textLength</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buf</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>text</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>buf</name>.
                                            <name>toString</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <name>repeat</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>result</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name>replaceEach</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>searchList</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>replacementList</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>repeat</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>timeToLive</name>
                                            - 1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Replace, character based</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Replaces all occurrences of a character in a String with another.
                * This is a null-safe version of {@link String#replace(char, char)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; string input returns &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") string input returns an empty string.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.replaceChars(null, *, *) = null
                * StringUtils.replaceChars("", *, *) = ""
                * StringUtils.replaceChars("abcba", 'b', 'y') = "aycya"
                * StringUtils.replaceChars("abcba", 'z', 'y') = "abcba"
                * &lt;/pre&gt;
                *
                * @param str String to replace characters in, may be null
                * @param searchChar the character to search for, may be null
                * @param replaceChar the character to replace, may be null
                * @return modified String, &lt;code&gt;null&lt;/code&gt; if null string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>replaceChars</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>searchChar</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>replaceChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>replace</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>searchChar</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>replaceChar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Replaces multiple characters in a String in one go.
                * This method can also be used to delete characters.&lt;/p&gt;
                *
                * &lt;p&gt;For example:&lt;br /&gt;
                * &lt;code&gt;replaceChars(&amp;quot;hello&amp;quot;, &amp;quot;ho&amp;quot;, &amp;quot;jy&amp;quot;) =
                jelly&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; string input returns &lt;code&gt;null&lt;/code&gt;.
                * An empty ("") string input returns an empty string.
                * A null or empty set of search characters returns the input string.&lt;/p&gt;
                *
                * &lt;p&gt;The length of the search characters should normally equal the length
                * of the replace characters.
                * If the search characters is longer, then the extra search characters
                * are deleted.
                * If the search characters is shorter, then the extra replace characters
                * are ignored.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.replaceChars(null, *, *) = null
                * StringUtils.replaceChars("", *, *) = ""
                * StringUtils.replaceChars("abc", null, *) = "abc"
                * StringUtils.replaceChars("abc", "", *) = "abc"
                * StringUtils.replaceChars("abc", "b", null) = "ac"
                * StringUtils.replaceChars("abc", "b", "") = "ac"
                * StringUtils.replaceChars("abcba", "bc", "yz") = "ayzya"
                * StringUtils.replaceChars("abcba", "bc", "y") = "ayya"
                * StringUtils.replaceChars("abcba", "bc", "yzx") = "ayzya"
                * &lt;/pre&gt;
                *
                * @param str String to replace characters in, may be null
                * @param searchChars a set of characters to search for, may be null
                * @param replaceChars a set of characters to replace, may be null
                * @return modified String, &lt;code&gt;null&lt;/code&gt; if null string input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>replaceChars</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>searchChars</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>replaceChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>searchChars</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>replaceChars</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>replaceChars</name>
                                        =
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>modified</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>replaceCharsLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>replaceChars</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>strLength</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>strLength</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>searchChars</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>ch</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>index</name>
                                        &gt;= 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>modified</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>index</name>
                                                    &lt;
                                                    <name>replaceCharsLength</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>buf</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>replaceChars</name>.
                                                                                    <name>charAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>index</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ch</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <name>modified</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>buf</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Overlay</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Overlays part of a String with another String.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.overlayString(null, *, *, *) = NullPointerException
                * StringUtils.overlayString(*, null, *, *) = NullPointerException
                * StringUtils.overlayString("", "abc", 0, 0) = "abc"
                * StringUtils.overlayString("abcdef", null, 2, 4) = "abef"
                * StringUtils.overlayString("abcdef", "", 2, 4) = "abef"
                * StringUtils.overlayString("abcdef", "zzzz", 2, 4) = "abzzzzef"
                * StringUtils.overlayString("abcdef", "zzzz", 4, 2) = "abcdzzzzcdef"
                * StringUtils.overlayString("abcdef", "zzzz", -1, 4) = IndexOutOfBoundsException
                * StringUtils.overlayString("abcdef", "zzzz", 2, 8) = IndexOutOfBoundsException
                * &lt;/pre&gt;
                *
                * @param text the String to do overlaying in, may be null
                * @param overlay the String to overlay, may be null
                * @param start the position to start overlaying at, must be valid
                * @param end the position to stop overlaying before, must be valid
                * @return overlayed String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @throws NullPointerException if text or overlay is null
                * @throws IndexOutOfBoundsException if either position is invalid
                * @deprecated Use better named {@link #overlay(String, String, int, int)} instead.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>overlayString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>text</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>overlay</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>StrBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                            +
                                            <call>
                                                <name><name>overlay</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            +
                                            <call>
                                                <name><name>text</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - <name>end</name> + 1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>text</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>start</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>overlay</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>text</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>end</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Overlays part of a String with another String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; string input returns &lt;code&gt;null&lt;/code&gt;.
                * A negative index is treated as zero.
                * An index greater than the string length is treated as the string length.
                * The start index is always the smaller of the two indices.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.overlay(null, *, *, *) = null
                * StringUtils.overlay("", "abc", 0, 0) = "abc"
                * StringUtils.overlay("abcdef", null, 2, 4) = "abef"
                * StringUtils.overlay("abcdef", "", 2, 4) = "abef"
                * StringUtils.overlay("abcdef", "", 4, 2) = "abef"
                * StringUtils.overlay("abcdef", "zzzz", 2, 4) = "abzzzzef"
                * StringUtils.overlay("abcdef", "zzzz", 4, 2) = "abzzzzef"
                * StringUtils.overlay("abcdef", "zzzz", -1, 4) = "zzzzef"
                * StringUtils.overlay("abcdef", "zzzz", 2, 8) = "abzzzz"
                * StringUtils.overlay("abcdef", "zzzz", -2, -3) = "zzzzabcdef"
                * StringUtils.overlay("abcdef", "zzzz", 8, 10) = "abcdefzzzz"
                * &lt;/pre&gt;
                *
                * @param str the String to do overlaying in, may be null
                * @param overlay the String to overlay, may be null
                * @param start the position to start overlaying at
                * @param end the position to stop overlaying before
                * @return overlayed String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>overlay</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>overlay</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>overlay</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>overlay</name>
                                        =
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>start</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &gt;
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>start</name>
                                        =
                                        <name>len</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>end</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>end</name>
                                        = 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>end</name>
                                &gt;
                                <name>len</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>end</name>
                                        =
                                        <name>len</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &gt;
                                <name>end</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>temp</name> =
                                        <init>
                                            <expr>
                                                <name>start</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>start</name>
                                        =
                                        <name>end</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>end</name>
                                        =
                                        <name>temp</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>StrBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>len</name>
                                            + <name>start</name> - <name>end</name> +
                                            <call>
                                                <name><name>overlay</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            + 1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>start</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>overlay</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>end</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Chomping</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Removes one newline from end of a String if it's there,
                * otherwise leave it alone. A newline is &amp;quot;&lt;code&gt;\n&lt;/code&gt;&amp;quot;,
                * &amp;quot;&lt;code&gt;\r&lt;/code&gt;&amp;quot;, or &amp;quot;&lt;code&gt;\r\n&lt;/code&gt;&amp;quot;.&lt;/p&gt;
                *
                * &lt;p&gt;NOTE: This method changed in 2.0.
                * It now more closely matches Perl chomp.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.chomp(null) = null
                * StringUtils.chomp("") = ""
                * StringUtils.chomp("abc \r") = "abc "
                * StringUtils.chomp("abc\n") = "abc"
                * StringUtils.chomp("abc\r\n") = "abc"
                * StringUtils.chomp("abc\r\n\r\n") = "abc\r\n"
                * StringUtils.chomp("abc\n\r") = "abc\n"
                * StringUtils.chomp("abc\n\rabc") = "abc\n\rabc"
                * StringUtils.chomp("\r") = ""
                * StringUtils.chomp("\n") = ""
                * StringUtils.chomp("\r\n") = ""
                * &lt;/pre&gt;
                *
                * @param str the String to chomp a newline from, may be null
                * @return String without newline, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>chomp</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                        </type>
                                        <name>ch</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>ch</name>
                                            ==
                                            <name><name>CharUtils</name>.
                                                <name>CR</name>
                                            </name>
                                            || <name>ch</name> ==
                                            <name><name>CharUtils</name>.
                                                <name>LF</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>EMPTY</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lastIdx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>last</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>lastIdx</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>last</name>
                                ==
                                <name><name>CharUtils</name>.
                                    <name>LF</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>lastIdx</name>
                                                            - 1
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ==
                                            <name><name>CharUtils</name>.
                                                <name>CR</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>lastIdx</name>--
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>last</name>
                                        !=
                                        <name><name>CharUtils</name>.
                                            <name>CR</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>lastIdx</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lastIdx</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes &lt;code&gt;separator&lt;/code&gt; from the end of
                * &lt;code&gt;str&lt;/code&gt; if it's there, otherwise leave it alone.&lt;/p&gt;
                *
                * &lt;p&gt;NOTE: This method changed in version 2.0.
                * It now more closely matches Perl chomp.
                * For the previous behavior, use {@link #substringBeforeLast(String, String)}.
                * This method uses {@link String#endsWith(String)}.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.chomp(null, *) = null
                * StringUtils.chomp("", *) = ""
                * StringUtils.chomp("foobar", "bar") = "foo"
                * StringUtils.chomp("foobar", "baz") = "foobar"
                * StringUtils.chomp("foo", "foo") = ""
                * StringUtils.chomp("foo ", "foo") = "foo "
                * StringUtils.chomp(" foo", "foo") = " "
                * StringUtils.chomp("foo", "foooo") = "foo"
                * StringUtils.chomp("foo", "") = "foo"
                * StringUtils.chomp("foo", null) = "foo"
                * &lt;/pre&gt;
                *
                * @param str the String to chomp from, may be null
                * @param separator separator String, may be null
                * @return String without trailing separator, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>chomp</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                || <name>separator</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>endsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>separator</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        -
                                                        <call>
                                                            <name><name>separator</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Remove any &amp;quot;\n&amp;quot; if and only if it is at the end
                * of the supplied String.&lt;/p&gt;
                *
                * @param str the String to chomp from, must not be null
                * @return String without chomped ending
                * @throws NullPointerException if str is &lt;code&gt;null&lt;/code&gt;
                * @deprecated Use {@link #chomp(String)} instead.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>chompLast</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>chompLast</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"\n"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Remove a value if and only if the String ends with that value.&lt;/p&gt;
                *
                * @param str the String to chomp from, must not be null
                * @param sep the String to chomp, must not be null
                * @return String without chomped ending
                * @throws NullPointerException if str or sep is &lt;code&gt;null&lt;/code&gt;
                * @deprecated Use {@link #chomp(String,String)} instead.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>chompLast</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>sep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>sub</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>substring</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    -
                                                    <call>
                                                        <name><name>sep</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>sep</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>sub</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        -
                                                        <call>
                                                            <name><name>sep</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Remove everything and return the last value of a supplied String, and
                * everything after it from a String.&lt;/p&gt;
                *
                * @param str the String to chomp from, must not be null
                * @param sep the String to chomp, must not be null
                * @return String chomped
                * @throws NullPointerException if str or sep is &lt;code&gt;null&lt;/code&gt;
                * @deprecated Use {@link #substringAfterLast(String, String)} instead
                * (although this doesn't include the separator)
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getChomp</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>sep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>idx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>lastIndexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>sep</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>idx</name>
                                ==
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                -
                                <call>
                                    <name><name>sep</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>sep</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>idx</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>idx</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>EMPTY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Remove the first value of a supplied String, and everything before it
                * from a String.&lt;/p&gt;
                *
                * @param str the String to chomp from, must not be null
                * @param sep the String to chomp, must not be null
                * @return String without chomped beginning
                * @throws NullPointerException if str or sep is &lt;code&gt;null&lt;/code&gt;
                * @deprecated Use {@link #substringAfter(String,String)} instead.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>prechomp</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>sep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>idx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>sep</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>idx</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>idx</name>
                                            +
                                            <call>
                                                <name><name>sep</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Remove and return everything before the first value of a
                * supplied String from another String.&lt;/p&gt;
                *
                * @param str the String to chomp from, must not be null
                * @param sep the String to chomp, must not be null
                * @return String prechomped
                * @throws NullPointerException if str or sep is &lt;code&gt;null&lt;/code&gt;
                * @deprecated Use {@link #substringBefore(String,String)} instead
                * (although this doesn't include the separator).
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getPrechomp</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>sep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>idx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>indexOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>sep</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>idx</name>
                                == -1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>idx</name>
                                            +
                                            <call>
                                                <name><name>sep</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Chopping</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Remove the last character from a String.&lt;/p&gt;
                *
                * &lt;p&gt;If the String ends in &lt;code&gt;\r\n&lt;/code&gt;, then remove both
                * of them.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.chop(null) = null
                * StringUtils.chop("") = ""
                * StringUtils.chop("abc \r") = "abc "
                * StringUtils.chop("abc\n") = "abc"
                * StringUtils.chop("abc\r\n") = "abc"
                * StringUtils.chop("abc") = "ab"
                * StringUtils.chop("abc\nabc") = "abc\nab"
                * StringUtils.chop("a") = ""
                * StringUtils.chop("\r") = ""
                * StringUtils.chop("\n") = ""
                * StringUtils.chop("\r\n") = ""
                * &lt;/pre&gt;
                *
                * @param str the String to chop last character from, may be null
                * @return String without last character, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>chop</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>strLen</name>
                                &lt; 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lastIdx</name> =
                            <init>
                                <expr>
                                    <name>strLen</name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>ret</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>substring</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>lastIdx</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>last</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>lastIdx</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>last</name>
                                ==
                                <name><name>CharUtils</name>.
                                    <name>LF</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>ret</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>lastIdx</name>
                                                            - 1
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ==
                                            <name><name>CharUtils</name>.
                                                <name>CR</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>ret</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>lastIdx</name>
                                                                    - 1
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>ret</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Removes &lt;code&gt;\n&lt;/code&gt; from end of a String if it's there.
                * If a &lt;code&gt;\r&lt;/code&gt; precedes it, then remove that too.&lt;/p&gt;
                *
                * @param str the String to chop a newline from, must not be null
                * @return String without newline
                * @throws NullPointerException if str is &lt;code&gt;null&lt;/code&gt;
                * @deprecated Use {@link #chomp(String)} instead.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>chopNewline</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>lastIdx</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>lastIdx</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>last</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>lastIdx</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>last</name>
                                ==
                                <name><name>CharUtils</name>.
                                    <name>LF</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>lastIdx</name>
                                                            - 1
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ==
                                            <name><name>CharUtils</name>.
                                                <name>CR</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>lastIdx</name>--
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr><name>lastIdx</name>++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>lastIdx</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Conversion</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Escapes any values it finds into their String form.&lt;/p&gt;
                *
                * &lt;p&gt;So a tab becomes the characters &lt;code&gt;'\\'&lt;/code&gt; and
                * &lt;code&gt;'t'&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;As of Lang 2.0, this calls {@link StringEscapeUtils#escapeJava(String)}
                * behind the scenes.
                * &lt;/p&gt;
                * @see StringEscapeUtils#escapeJava(java.lang.String)
                * @param str String to escape values in
                * @return String with escaped values
                * @throws NullPointerException if str is &lt;code&gt;null&lt;/code&gt;
                * @deprecated Use {@link StringEscapeUtils#escapeJava(String)}
                * This method will be removed in Commons Lang 3.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>escape</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>StringEscapeUtils</name>.
                                    <name>escapeJava</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Padding</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Repeat a String &lt;code&gt;repeat&lt;/code&gt; times to form a
                * new String.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.repeat(null, 2) = null
                * StringUtils.repeat("", 0) = ""
                * StringUtils.repeat("", 2) = ""
                * StringUtils.repeat("a", 3) = "aaa"
                * StringUtils.repeat("ab", 2) = "abab"
                * StringUtils.repeat("a", -2) = ""
                * &lt;/pre&gt;
                *
                * @param str the String to repeat, may be null
                * @param repeat number of times to repeat str, negative treated as zero
                * @return a new String consisting of the original String repeated,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>repeat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>repeat</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Performance tuned for 2.0 (JDK1.4)</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>repeat</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>inputLength</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>repeat</name>
                                == 1 || <name>inputLength</name> == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>inputLength</name>
                                == 1 &amp;&amp; <name>repeat</name> &lt;=
                                <name>PAD_LIMIT</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>padding</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>repeat</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>outputLength</name> =
                            <init>
                                <expr>
                                    <name>inputLength</name>
                                    *
                                    <name>repeat</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>inputLength</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>1</expr> :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                        </type>
                                        <name>ch</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                            <index>[]</index>
                                        </type>
                                        <name>output1</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>char</name>
                                                    <index>[
                                                        <expr>
                                                            <name>outputLength</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>
                                                    <name>repeat</name>
                                                    - 1
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &gt;= 0
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>--
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>output1</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>ch</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>String</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>output1</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>2</expr> :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                        </type>
                                        <name>ch0</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                        </type>
                                        <name>ch1</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>1</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                            <index>[]</index>
                                        </type>
                                        <name>output2</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>char</name>
                                                    <index>[
                                                        <expr>
                                                            <name>outputLength</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>
                                                    <name>repeat</name>
                                                    * 2 - 2
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &gt;= 0
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>--
                                        </expr>
                                        ,
                                        <expr><name>i</name>--
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>output2</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>ch0</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>output2</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                            + 1
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>ch1</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>String</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>output2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>StrBuilder</name>
                                        </type>
                                        <name>buf</name> =
                                        <init>
                                            <expr>new
                                                <call>
                                                    <name>StrBuilder</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>outputLength</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name>repeat</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buf</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>str</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>buf</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Repeat a String &lt;code&gt;repeat&lt;/code&gt; times to form a
                * new String, with a String separator injected each time. &lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.repeat(null, null, 2) = null
                * StringUtils.repeat(null, "x", 2) = null
                * StringUtils.repeat("", null, 0) = ""
                * StringUtils.repeat("", "", 2) = ""
                * StringUtils.repeat("", "x", 3) = "xxx"
                * StringUtils.repeat("?", ", ", 3) = "?, ?, ?"
                * &lt;/pre&gt;
                *
                * @param str the String to repeat, may be null
                * @param separator the String to inject, may be null
                * @param repeat number of times to repeat str, negative treated as zero
                * @return a new String consisting of the original String repeated,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>repeat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>repeat</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>separator</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>repeat</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>str</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>repeat</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// given that repeat(String, int) is quite optimized, better to
                                    rely on it than try and splice this into it
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>result</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>repeat</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>str</name>
                                                                +
                                                                <name>separator</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>repeat</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>removeEnd</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>separator</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns padding using the specified delimiter repeated
                * to a given length.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.padding(0, 'e') = ""
                * StringUtils.padding(3, 'e') = "eee"
                * StringUtils.padding(-2, 'e') = IndexOutOfBoundsException
                * &lt;/pre&gt;
                *
                * &lt;p&gt;Note: this method doesn't not support padding with
                * &lt;a href="http://www.unicode.org/glossary/#supplementary_character"&gt;Unicode Supplementary
                Characters&lt;/a&gt;
                * as they require a pair of &lt;code&gt;char&lt;/code&gt;s to be represented.
                * If you are needing to support full I18N of your applications
                * consider using {@link #repeat(String, int)} instead.
                * &lt;/p&gt;
                *
                * @param repeat number of times to repeat delim
                * @param padChar character to repeat
                * @return String with repeated character
                * @throws IndexOutOfBoundsException if &lt;code&gt;repeat &amp;lt; 0&lt;/code&gt;
                * @see #repeat(String, int)
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>padding</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>repeat</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>padChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IndexOutOfBoundsException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>repeat</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IndexOutOfBoundsException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Cannot pad a negative amount: " +
                                                        <name>repeat</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>char</name>
                                <index>[]</index>
                            </type>
                            <name>buf</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>char</name>
                                        <index>[
                                            <expr>
                                                <name>repeat</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>buf</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>buf</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>padChar</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>new
                            <call>
                                <name>String</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>buf</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Right pad a String with spaces (' ').&lt;/p&gt;
                *
                * &lt;p&gt;The String is padded to the size of &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.rightPad(null, *) = null
                * StringUtils.rightPad("", 3) = " "
                * StringUtils.rightPad("bat", 3) = "bat"
                * StringUtils.rightPad("bat", 5) = "bat "
                * StringUtils.rightPad("bat", 1) = "bat"
                * StringUtils.rightPad("bat", -1) = "bat"
                * &lt;/pre&gt;
                *
                * @param str the String to pad out, may be null
                * @param size the size to pad to
                * @return right padded String or original String if no padding is necessary,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>rightPad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>rightPad</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>' '</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Right pad a String with a specified character.&lt;/p&gt;
                *
                * &lt;p&gt;The String is padded to the size of &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.rightPad(null, *, *) = null
                * StringUtils.rightPad("", 3, 'z') = "zzz"
                * StringUtils.rightPad("bat", 3, 'z') = "bat"
                * StringUtils.rightPad("bat", 5, 'z') = "batzz"
                * StringUtils.rightPad("bat", 1, 'z') = "bat"
                * StringUtils.rightPad("bat", -1, 'z') = "bat"
                * &lt;/pre&gt;
                *
                * @param str the String to pad out, may be null
                * @param size the size to pad to
                * @param padChar the character to pad with
                * @return right padded String or original String if no padding is necessary,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>rightPad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>padChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pads</name> =
                            <init>
                                <expr>
                                    <name>size</name>
                                    -
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pads</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// returns original String when possible</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pads</name>
                                &gt;
                                <name>PAD_LIMIT</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>rightPad</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>str</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>padChar</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>concat</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>padding</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>pads</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>padChar</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Right pad a String with a specified String.&lt;/p&gt;
                *
                * &lt;p&gt;The String is padded to the size of &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.rightPad(null, *, *) = null
                * StringUtils.rightPad("", 3, "z") = "zzz"
                * StringUtils.rightPad("bat", 3, "yz") = "bat"
                * StringUtils.rightPad("bat", 5, "yz") = "batyz"
                * StringUtils.rightPad("bat", 8, "yz") = "batyzyzy"
                * StringUtils.rightPad("bat", 1, "yz") = "bat"
                * StringUtils.rightPad("bat", -1, "yz") = "bat"
                * StringUtils.rightPad("bat", 5, null) = "bat "
                * StringUtils.rightPad("bat", 5, "") = "bat "
                * &lt;/pre&gt;
                *
                * @param str the String to pad out, may be null
                * @param size the size to pad to
                * @param padStr the String to pad with, null or empty treated as single space
                * @return right padded String or original String if no padding is necessary,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>rightPad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>padStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>padStr</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>padStr</name>
                                        = " "
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>padLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>padStr</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pads</name> =
                            <init>
                                <expr>
                                    <name>size</name>
                                    -
                                    <name>strLen</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pads</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// returns original String when possible</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>padLen</name>
                                == 1 &amp;&amp; <name>pads</name> &lt;=
                                <name>PAD_LIMIT</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>rightPad</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>str</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>padStr</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>pads</name>
                                ==
                                <name>padLen</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>concat</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>padStr</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>pads</name>
                                        &lt;
                                        <name>padLen</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>concat</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>padStr</name>.
                                                                        <name>substring</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>0</expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>pads</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>char</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>padding</name> =
                                                <init>
                                                    <expr>new
                                                        <name>
                                                            <name>char</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>pads</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>char</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>padChars</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>padStr</name>.
                                                                <name>toCharArray</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>pads</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>i</name>++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>padding</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        =
                                                        <name>
                                                            <name>padChars</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                    %
                                                                    <name>padLen</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </for>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>str</name>.
                                                        <name>concat</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>new
                                                                <call>
                                                                    <name>String</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>padding</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Left pad a String with spaces (' ').&lt;/p&gt;
                *
                * &lt;p&gt;The String is padded to the size of &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.leftPad(null, *) = null
                * StringUtils.leftPad("", 3) = " "
                * StringUtils.leftPad("bat", 3) = "bat"
                * StringUtils.leftPad("bat", 5) = " bat"
                * StringUtils.leftPad("bat", 1) = "bat"
                * StringUtils.leftPad("bat", -1) = "bat"
                * &lt;/pre&gt;
                *
                * @param str the String to pad out, may be null
                * @param size the size to pad to
                * @return left padded String or original String if no padding is necessary,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>leftPad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>leftPad</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>' '</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Left pad a String with a specified character.&lt;/p&gt;
                *
                * &lt;p&gt;Pad to a size of &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.leftPad(null, *, *) = null
                * StringUtils.leftPad("", 3, 'z') = "zzz"
                * StringUtils.leftPad("bat", 3, 'z') = "bat"
                * StringUtils.leftPad("bat", 5, 'z') = "zzbat"
                * StringUtils.leftPad("bat", 1, 'z') = "bat"
                * StringUtils.leftPad("bat", -1, 'z') = "bat"
                * &lt;/pre&gt;
                *
                * @param str the String to pad out, may be null
                * @param size the size to pad to
                * @param padChar the character to pad with
                * @return left padded String or original String if no padding is necessary,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>leftPad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>padChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pads</name> =
                            <init>
                                <expr>
                                    <name>size</name>
                                    -
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pads</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// returns original String when possible</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pads</name>
                                &gt;
                                <name>PAD_LIMIT</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>leftPad</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>str</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>padChar</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>padding</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>pads</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>padChar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>concat</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Left pad a String with a specified String.&lt;/p&gt;
                *
                * &lt;p&gt;Pad to a size of &lt;code&gt;size&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.leftPad(null, *, *) = null
                * StringUtils.leftPad("", 3, "z") = "zzz"
                * StringUtils.leftPad("bat", 3, "yz") = "bat"
                * StringUtils.leftPad("bat", 5, "yz") = "yzbat"
                * StringUtils.leftPad("bat", 8, "yz") = "yzyzybat"
                * StringUtils.leftPad("bat", 1, "yz") = "bat"
                * StringUtils.leftPad("bat", -1, "yz") = "bat"
                * StringUtils.leftPad("bat", 5, null) = " bat"
                * StringUtils.leftPad("bat", 5, "") = " bat"
                * &lt;/pre&gt;
                *
                * @param str the String to pad out, may be null
                * @param size the size to pad to
                * @param padStr the String to pad with, null or empty treated as single space
                * @return left padded String or original String if no padding is necessary,
                * &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>leftPad</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>padStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>padStr</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>padStr</name>
                                        = " "
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>padLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>padStr</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pads</name> =
                            <init>
                                <expr>
                                    <name>size</name>
                                    -
                                    <name>strLen</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pads</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// returns original String when possible</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>padLen</name>
                                == 1 &amp;&amp; <name>pads</name> &lt;=
                                <name>PAD_LIMIT</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>leftPad</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>str</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>padStr</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>pads</name>
                                ==
                                <name>padLen</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>padStr</name>.
                                                <name>concat</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>str</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>pads</name>
                                        &lt;
                                        <name>padLen</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>padStr</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>pads</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>concat</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>str</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>char</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>padding</name> =
                                                <init>
                                                    <expr>new
                                                        <name>
                                                            <name>char</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>pads</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>char</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>padChars</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>padStr</name>.
                                                                <name>toCharArray</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>pads</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>i</name>++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>padding</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        =
                                                        <name>
                                                            <name>padChars</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                    %
                                                                    <name>padLen</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </for>
                                        <return>return
                                            <expr>new
                                                <call>
                                                    <name>String</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>padding</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>concat</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>str</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets a String's length or &lt;code&gt;0&lt;/code&gt; if the String is &lt;code&gt;null&lt;/code&gt;.
                *
                * @param str
                * a String or &lt;code&gt;null&lt;/code&gt;
                * @return String length or &lt;code&gt;0&lt;/code&gt; if the String is &lt;code&gt;null&lt;/code&gt;.
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>length</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>str</name>
                            == <name>null</name> ? 0 :
                            <call>
                                <name><name>str</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Centering</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Centers a String in a larger String of size &lt;code&gt;size&lt;/code&gt;
                * using the space character (' ').&lt;p&gt;
                *
                * &lt;p&gt;If the size is less than the String length, the String is returned.
                * A &lt;code&gt;null&lt;/code&gt; String returns &lt;code&gt;null&lt;/code&gt;.
                * A negative size is treated as zero.&lt;/p&gt;
                *
                * &lt;p&gt;Equivalent to &lt;code&gt;center(str, size, " ")&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.center(null, *) = null
                * StringUtils.center("", 4) = " "
                * StringUtils.center("ab", -1) = "ab"
                * StringUtils.center("ab", 4) = " ab "
                * StringUtils.center("abcd", 2) = "abcd"
                * StringUtils.center("a", 4) = " a "
                * &lt;/pre&gt;
                *
                * @param str the String to center, may be null
                * @param size the int size of new String, negative treated as zero
                * @return centered String, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>center</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>center</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>' '</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Centers a String in a larger String of size &lt;code&gt;size&lt;/code&gt;.
                * Uses a supplied character as the value to pad the String with.&lt;/p&gt;
                *
                * &lt;p&gt;If the size is less than the String length, the String is returned.
                * A &lt;code&gt;null&lt;/code&gt; String returns &lt;code&gt;null&lt;/code&gt;.
                * A negative size is treated as zero.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.center(null, *, *) = null
                * StringUtils.center("", 4, ' ') = " "
                * StringUtils.center("ab", -1, ' ') = "ab"
                * StringUtils.center("ab", 4, ' ') = " ab"
                * StringUtils.center("abcd", 2, ' ') = "abcd"
                * StringUtils.center("a", 4, ' ') = " a "
                * StringUtils.center("a", 4, 'y') = "yayy"
                * &lt;/pre&gt;
                *
                * @param str the String to center, may be null
                * @param size the int size of new String, negative treated as zero
                * @param padChar the character to pad the new String with
                * @return centered String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>center</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>padChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>size</name> &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pads</name> =
                            <init>
                                <expr>
                                    <name>size</name>
                                    -
                                    <name>strLen</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pads</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>str</name>
                            =
                            <call>
                                <name>leftPad</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>strLen</name>
                                            + <name>pads</name> / 2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>padChar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>str</name>
                            =
                            <call>
                                <name>rightPad</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>padChar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Centers a String in a larger String of size &lt;code&gt;size&lt;/code&gt;.
                * Uses a supplied String as the value to pad the String with.&lt;/p&gt;
                *
                * &lt;p&gt;If the size is less than the String length, the String is returned.
                * A &lt;code&gt;null&lt;/code&gt; String returns &lt;code&gt;null&lt;/code&gt;.
                * A negative size is treated as zero.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.center(null, *, *) = null
                * StringUtils.center("", 4, " ") = " "
                * StringUtils.center("ab", -1, " ") = "ab"
                * StringUtils.center("ab", 4, " ") = " ab"
                * StringUtils.center("abcd", 2, " ") = "abcd"
                * StringUtils.center("a", 4, " ") = " a "
                * StringUtils.center("a", 4, "yz") = "yayz"
                * StringUtils.center("abc", 7, null) = " abc "
                * StringUtils.center("abc", 7, "") = " abc "
                * &lt;/pre&gt;
                *
                * @param str the String to center, may be null
                * @param size the int size of new String, negative treated as zero
                * @param padStr the String to pad the new String with, must not be null or empty
                * @return centered String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @throws IllegalArgumentException if padStr is &lt;code&gt;null&lt;/code&gt; or empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>center</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>padStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>size</name> &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>padStr</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>padStr</name>
                                        = " "
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pads</name> =
                            <init>
                                <expr>
                                    <name>size</name>
                                    -
                                    <name>strLen</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>pads</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>str</name>
                            =
                            <call>
                                <name>leftPad</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>strLen</name>
                                            + <name>pads</name> / 2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>padStr</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>str</name>
                            =
                            <call>
                                <name>rightPad</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>padStr</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Case conversion</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Converts a String to upper case as per {@link String#toUpperCase()}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.upperCase(null) = null
                * StringUtils.upperCase("") = ""
                * StringUtils.upperCase("aBc") = "ABC"
                * &lt;/pre&gt;
                *
                * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As described in the documentation for {@link
                String#toUpperCase()},
                * the result of this method is affected by the current locale.
                * For platform-independent case transformations, the method {@link #lowerCase(String, Locale)}
                * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).&lt;/p&gt;
                *
                * @param str the String to upper case, may be null
                * @return the upper cased String, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>upperCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>toUpperCase</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a String to upper case as per {@link String#toUpperCase(Locale)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.upperCase(null, Locale.ENGLISH) = null
                * StringUtils.upperCase("", Locale.ENGLISH) = ""
                * StringUtils.upperCase("aBc", Locale.ENGLISH) = "ABC"
                * &lt;/pre&gt;
                *
                * @param str the String to upper case, may be null
                * @param locale the locale that defines the case transformation rules, must not be null
                * @return the upper cased String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>upperCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>toUpperCase</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>locale</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a String to lower case as per {@link String#toLowerCase()}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.lowerCase(null) = null
                * StringUtils.lowerCase("") = ""
                * StringUtils.lowerCase("aBc") = "abc"
                * &lt;/pre&gt;
                *
                * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As described in the documentation for {@link
                String#toLowerCase()},
                * the result of this method is affected by the current locale.
                * For platform-independent case transformations, the method {@link #lowerCase(String, Locale)}
                * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).&lt;/p&gt;
                *
                * @param str the String to lower case, may be null
                * @return the lower cased String, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>lowerCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>toLowerCase</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Converts a String to lower case as per {@link String#toLowerCase(Locale)}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.lowerCase(null, Locale.ENGLISH) = null
                * StringUtils.lowerCase("", Locale.ENGLISH) = ""
                * StringUtils.lowerCase("aBc", Locale.ENGLISH) = "abc"
                * &lt;/pre&gt;
                *
                * @param str the String to lower case, may be null
                * @param locale the locale that defines the case transformation rules, must not be null
                * @return the lower cased String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>lowerCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Locale</name>
                            </type>
                            <name>locale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>toLowerCase</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>locale</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Capitalizes a String changing the first letter to title case as
                * per {@link Character#toTitleCase(char)}. No other letters are changed.&lt;/p&gt;
                *
                * &lt;p&gt;For a word based algorithm, see {@link WordUtils#capitalize(String)}.
                * A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.capitalize(null) = null
                * StringUtils.capitalize("") = ""
                * StringUtils.capitalize("cat") = "Cat"
                * StringUtils.capitalize("cAt") = "CAt"
                * &lt;/pre&gt;
                *
                * @param str the String to capitalize, may be null
                * @return the capitalized String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @see WordUtils#capitalize(String)
                * @see #uncapitalize(String)
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>capitalize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || (<name>strLen</name> =
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>StrBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strLen</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Character</name>.
                                                    <name>toTitleCase</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>1</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Capitalizes a String changing the first letter to title case as
                * per {@link Character#toTitleCase(char)}. No other letters are changed.&lt;/p&gt;
                *
                * @param str the String to capitalize, may be null
                * @return the capitalized String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @deprecated Use the standardly named {@link #capitalize(String)}.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>capitalise</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>capitalize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Uncapitalizes a String changing the first letter to title case as
                * per {@link Character#toLowerCase(char)}. No other letters are changed.&lt;/p&gt;
                *
                * &lt;p&gt;For a word based algorithm, see {@link WordUtils#uncapitalize(String)}.
                * A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.uncapitalize(null) = null
                * StringUtils.uncapitalize("") = ""
                * StringUtils.uncapitalize("Cat") = "cat"
                * StringUtils.uncapitalize("CAT") = "cAT"
                * &lt;/pre&gt;
                *
                * @param str the String to uncapitalize, may be null
                * @return the uncapitalized String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @see WordUtils#uncapitalize(String)
                * @see #capitalize(String)
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>uncapitalize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || (<name>strLen</name> =
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>StrBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strLen</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Character</name>.
                                                    <name>toLowerCase</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>str</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>1</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Uncapitalizes a String changing the first letter to title case as
                * per {@link Character#toLowerCase(char)}. No other letters are changed.&lt;/p&gt;
                *
                * @param str the String to uncapitalize, may be null
                * @return the uncapitalized String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @deprecated Use the standardly named {@link #uncapitalize(String)}.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>uncapitalise</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>uncapitalize</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Swaps the case of a String changing upper and title case to
                * lower case, and lower case to upper case.&lt;/p&gt;
                *
                * &lt;ul&gt;
                * &lt;li&gt;Upper case character converts to Lower case&lt;/li&gt;
                * &lt;li&gt;Title case character converts to Lower case&lt;/li&gt;
                * &lt;li&gt;Lower case character converts to Upper case&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;p&gt;For a word based algorithm, see {@link WordUtils#swapCase(String)}.
                * A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.swapCase(null) = null
                * StringUtils.swapCase("") = ""
                * StringUtils.swapCase("The dog has a BONE") = "tHE DOG HAS A bone"
                * &lt;/pre&gt;
                *
                * &lt;p&gt;NOTE: This method changed in Lang version 2.0.
                * It no longer performs a word based algorithm.
                * If you only use ASCII, you will notice no change.
                * That functionality is available in WordUtils.&lt;/p&gt;
                *
                * @param str the String to swap case, may be null
                * @return the changed String, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>swapCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strLen</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || (<name>strLen</name> =
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>buffer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>strLen</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>strLen</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>ch</name>
                                    =
                                    <call>
                                        <name><name>str</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isUpperCase</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ch</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ch</name>
                                                =
                                                <call>
                                                    <name><name>Character</name>.
                                                        <name>toLowerCase</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ch</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>Character</name>.
                                                        <name>isTitleCase</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ch</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>ch</name>
                                                        =
                                                        <call>
                                                            <name><name>Character</name>.
                                                                <name>toLowerCase</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>Character</name>.
                                                                <name>isLowerCase</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ch</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>ch</name>
                                                                =
                                                                <call>
                                                                    <name><name>Character</name>.
                                                                        <name>toUpperCase</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>ch</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>ch</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>buffer</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Capitalizes all the whitespace separated words in a String.
                * Only the first letter of each word is changed.&lt;/p&gt;
                *
                * &lt;p&gt;Whitespace is defined by {@link Character#isWhitespace(char)}.
                * A &lt;code&gt;null&lt;/code&gt; input String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * @param str the String to capitalize, may be null
                * @return capitalized String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @deprecated Use the relocated {@link WordUtils#capitalize(String)}.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>capitaliseAllWords</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>WordUtils</name>.
                                    <name>capitalize</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Count matches</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Counts how many times the substring appears in the larger String.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; or empty ("") String input returns &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.countMatches(null, *) = 0
                * StringUtils.countMatches("", *) = 0
                * StringUtils.countMatches("abba", null) = 0
                * StringUtils.countMatches("abba", "") = 0
                * StringUtils.countMatches("abba", "a") = 2
                * StringUtils.countMatches("abba", "ab") = 1
                * StringUtils.countMatches("abba", "xxx") = 0
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param sub the substring to count, may be null
                * @return the number of occurrences, 0 if either String is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>countMatches</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>sub</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>sub</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>idx</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>idx</name> =
                                <call>
                                    <name><name>str</name>.
                                        <name>indexOf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>sub</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>idx</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ) !=
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr><name>count</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>idx</name>
                                    +=
                                    <call>
                                        <name><name>sub</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>count</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Character Tests</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only unicode letters.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) will return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isAlpha(null) = false
                * StringUtils.isAlpha("") = true
                * StringUtils.isAlpha(" ") = false
                * StringUtils.isAlpha("abc") = true
                * StringUtils.isAlpha("ab2c") = false
                * StringUtils.isAlpha("ab-c") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if only contains letters, and is non-null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAlpha</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isLetter</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only unicode letters and
                * space (' ').&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;
                * An empty String (length()=0) will return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isAlphaSpace(null) = false
                * StringUtils.isAlphaSpace("") = true
                * StringUtils.isAlphaSpace(" ") = true
                * StringUtils.isAlphaSpace("abc") = true
                * StringUtils.isAlphaSpace("ab c") = true
                * StringUtils.isAlphaSpace("ab2c") = false
                * StringUtils.isAlphaSpace("ab-c") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if only contains letters and space,
                * and is non-null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAlphaSpace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>(
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isLetter</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false) &amp;&amp; (
                                        <call>
                                            <name><name>str</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        != ' ')
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only unicode letters or digits.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) will return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isAlphanumeric(null) = false
                * StringUtils.isAlphanumeric("") = true
                * StringUtils.isAlphanumeric(" ") = false
                * StringUtils.isAlphanumeric("abc") = true
                * StringUtils.isAlphanumeric("ab c") = false
                * StringUtils.isAlphanumeric("ab2c") = true
                * StringUtils.isAlphanumeric("ab-c") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if only contains letters or digits,
                * and is non-null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAlphanumeric</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isLetterOrDigit</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only unicode letters, digits
                * or space (&lt;code&gt;' '&lt;/code&gt;).&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) will return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isAlphanumeric(null) = false
                * StringUtils.isAlphanumeric("") = true
                * StringUtils.isAlphanumeric(" ") = true
                * StringUtils.isAlphanumeric("abc") = true
                * StringUtils.isAlphanumeric("ab c") = true
                * StringUtils.isAlphanumeric("ab2c") = true
                * StringUtils.isAlphanumeric("ab-c") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if only contains letters, digits or space,
                * and is non-null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAlphanumericSpace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>(
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isLetterOrDigit</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false) &amp;&amp; (
                                        <call>
                                            <name><name>str</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        != ' ')
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the string contains only ASCII printable characters.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) will return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isAsciiPrintable(null) = false
                * StringUtils.isAsciiPrintable("") = true
                * StringUtils.isAsciiPrintable(" ") = true
                * StringUtils.isAsciiPrintable("Ceki") = true
                * StringUtils.isAsciiPrintable("ab2c") = true
                * StringUtils.isAsciiPrintable("!ab-c~") = true
                * StringUtils.isAsciiPrintable("\u0020") = true
                * StringUtils.isAsciiPrintable("\u0021") = true
                * StringUtils.isAsciiPrintable("\u007e") = true
                * StringUtils.isAsciiPrintable("\u007f") = false
                * StringUtils.isAsciiPrintable("Ceki G\u00fclc\u00fc") = false
                * &lt;/pre&gt;
                *
                * @param str the string to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if every character is in the range
                * 32 thru 126
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAsciiPrintable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>CharUtils</name>.
                                                <name>isAsciiPrintable</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only unicode digits.
                * A decimal point is not a unicode digit and returns false.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) will return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isNumeric(null) = false
                * StringUtils.isNumeric("") = true
                * StringUtils.isNumeric(" ") = false
                * StringUtils.isNumeric("123") = true
                * StringUtils.isNumeric("12 3") = false
                * StringUtils.isNumeric("ab2c") = false
                * StringUtils.isNumeric("12-3") = false
                * StringUtils.isNumeric("12.3") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if only contains digits, and is non-null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNumeric</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isDigit</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only unicode digits or space
                * (&lt;code&gt;' '&lt;/code&gt;).
                * A decimal point is not a unicode digit and returns false.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) will return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isNumeric(null) = false
                * StringUtils.isNumeric("") = true
                * StringUtils.isNumeric(" ") = true
                * StringUtils.isNumeric("123") = true
                * StringUtils.isNumeric("12 3") = true
                * StringUtils.isNumeric("ab2c") = false
                * StringUtils.isNumeric("12-3") = false
                * StringUtils.isNumeric("12.3") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if only contains digits or space,
                * and is non-null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNumericSpace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>(
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isDigit</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false) &amp;&amp; (
                                        <call>
                                            <name><name>str</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        != ' ')
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only whitespace.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) will return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isWhitespace(null) = false
                * StringUtils.isWhitespace("") = true
                * StringUtils.isWhitespace(" ") = true
                * StringUtils.isWhitespace("abc") = false
                * StringUtils.isWhitespace("ab2c") = false
                * StringUtils.isWhitespace("ab-c") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if only contains whitespace, and is non-null
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>(
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isWhitespace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false)
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only lowercase characters.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isAllLowerCase(null) = false
                * StringUtils.isAllLowerCase("") = false
                * StringUtils.isAllLowerCase(" ") = false
                * StringUtils.isAllLowerCase("abc") = true
                * StringUtils.isAllLowerCase("abC") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if only contains lowercase characters, and is non-null
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAllLowerCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isLowerCase</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Checks if the String contains only uppercase characters.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;.
                * An empty String (length()=0) will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.isAllUpperCase(null) = false
                * StringUtils.isAllUpperCase("") = false
                * StringUtils.isAllUpperCase(" ") = false
                * StringUtils.isAllUpperCase("ABC") = true
                * StringUtils.isAllUpperCase("aBC") = false
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if only contains uppercase characters, and is non-null
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAllUpperCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>sz</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>sz</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isUpperCase</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Defaults</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Returns either the passed in String,
                * or if the String is &lt;code&gt;null&lt;/code&gt;, an empty String ("").&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.defaultString(null) = ""
                * StringUtils.defaultString("") = ""
                * StringUtils.defaultString("bat") = "bat"
                * &lt;/pre&gt;
                *
                * @see ObjectUtils#toString(Object)
                * @see String#valueOf(Object)
                * @param str the String to check, may be null
                * @return the passed in String, or the empty String if it
                * was &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>defaultString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>str</name>
                            == <name>null</name> ? <name>EMPTY</name> :
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns either the passed in String, or if the String is
                * &lt;code&gt;null&lt;/code&gt;, the value of &lt;code&gt;defaultStr&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.defaultString(null, "NULL") = "NULL"
                * StringUtils.defaultString("", "NULL") = ""
                * StringUtils.defaultString("bat", "NULL") = "bat"
                * &lt;/pre&gt;
                *
                * @see ObjectUtils#toString(Object,String)
                * @see String#valueOf(Object)
                * @param str the String to check, may be null
                * @param defaultStr the default String to return
                * if the input is &lt;code&gt;null&lt;/code&gt;, may be null
                * @return the passed in String, or the default if it was &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>defaultString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>defaultStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>str</name>
                            == <name>null</name> ? <name>defaultStr</name> :
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns either the passed in String, or if the String is
                * whitespace, empty ("") or &lt;code&gt;null&lt;/code&gt;, the value of &lt;code&gt;defaultStr&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.defaultIfBlank(null, "NULL") = "NULL"
                * StringUtils.defaultIfBlank("", "NULL") = "NULL"
                * StringUtils.defaultIfBlank(" ", "NULL") = "NULL"
                * StringUtils.defaultIfBlank("bat", "NULL") = "bat"
                * StringUtils.defaultIfBlank("", null) = null
                * &lt;/pre&gt;
                * @param str the String to check, may be null
                * @param defaultStr the default String to return
                * if the input is whitespace, empty ("") or &lt;code&gt;null&lt;/code&gt;, may be null
                * @return the passed in String, or the default
                * @see StringUtils#defaultString(String, String)
                * @since 2.6
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>defaultIfBlank</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>defaultStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>StringUtils</name>.
                                    <name>isBlank</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ? <name>defaultStr</name> :
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Returns either the passed in String, or if the String is
                * empty or &lt;code&gt;null&lt;/code&gt;, the value of &lt;code&gt;defaultStr&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.defaultIfEmpty(null, "NULL") = "NULL"
                * StringUtils.defaultIfEmpty("", "NULL") = "NULL"
                * StringUtils.defaultIfEmpty("bat", "NULL") = "bat"
                * StringUtils.defaultIfEmpty("", null) = null
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param defaultStr the default String to return
                * if the input is empty ("") or &lt;code&gt;null&lt;/code&gt;, may be null
                * @return the passed in String, or the default
                * @see StringUtils#defaultString(String, String)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>defaultIfEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>defaultStr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>StringUtils</name>.
                                    <name>isEmpty</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ? <name>defaultStr</name> :
                            <name>str</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Reversing</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Reverses a String as per {@link StrBuilder#reverse()}.&lt;/p&gt;
                *
                * &lt;p&gt;A &lt;code&gt;null&lt;/code&gt; String returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.reverse(null) = null
                * StringUtils.reverse("") = ""
                * StringUtils.reverse("bat") = "tab"
                * &lt;/pre&gt;
                *
                * @param str the String to reverse, may be null
                * @return the reversed String, &lt;code&gt;null&lt;/code&gt; if null String input
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>StrBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>reverse</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Reverses a String that is delimited by a specific character.&lt;/p&gt;
                *
                * &lt;p&gt;The Strings between the delimiters are not reversed.
                * Thus java.lang.String becomes String.lang.java (if the delimiter
                * is &lt;code&gt;'.'&lt;/code&gt;).&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.reverseDelimited(null, *) = null
                * StringUtils.reverseDelimited("", *) = ""
                * StringUtils.reverseDelimited("a.b.c", 'x') = "a.b.c"
                * StringUtils.reverseDelimited("a.b.c", ".") = "c.b.a"
                * &lt;/pre&gt;
                *
                * @param str the String to reverse, may be null
                * @param separatorChar the separator character to use
                * @return the reversed String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>reverseDelimited</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separatorChar</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// could implement manually, but simple way is to reuse other,</comment>
                    <comment type="line">// probably slower, methods.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>strs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>split</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>str</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>separatorChar</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ArrayUtils</name>.
                                    <name>reverse</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strs</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>join</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separatorChar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Reverses a String that is delimited by a specific character.&lt;/p&gt;
                *
                * &lt;p&gt;The Strings between the delimiters are not reversed.
                * Thus java.lang.String becomes String.lang.java (if the delimiter
                * is &lt;code&gt;"."&lt;/code&gt;).&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.reverseDelimitedString(null, *) = null
                * StringUtils.reverseDelimitedString("",*) = ""
                * StringUtils.reverseDelimitedString("a.b.c", null) = "a.b.c"
                * StringUtils.reverseDelimitedString("a.b.c", ".") = "c.b.a"
                * &lt;/pre&gt;
                *
                * @param str the String to reverse, may be null
                * @param separatorChars the separator characters to use, null treated as whitespace
                * @return the reversed String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @deprecated Use {@link #reverseDelimited(String, char)} instead.
                * This method is broken as the join doesn't know which char to use.
                * Method will be removed in Commons Lang 3.0.
                *
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>reverseDelimitedString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separatorChars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// could implement manually, but simple way is to reuse other,</comment>
                    <comment type="line">// probably slower, methods.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>strs</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>split</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>str</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>separatorChars</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ArrayUtils</name>.
                                    <name>reverse</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strs</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>separatorChars</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>join</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>strs</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>' '</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>join</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strs</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separatorChars</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Abbreviating</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Abbreviates a String using ellipses. This will turn
                * "Now is the time for all good men" into "Now is the time for..."&lt;/p&gt;
                *
                * &lt;p&gt;Specifically:
                * &lt;ul&gt;
                * &lt;li&gt;If &lt;code&gt;str&lt;/code&gt; is less than &lt;code&gt;maxWidth&lt;/code&gt; characters
                * long, return it.&lt;/li&gt;
                * &lt;li&gt;Else abbreviate it to &lt;code&gt;(substring(str, 0, max-3) + "...")&lt;/code&gt;.&lt;/li&gt;
                * &lt;li&gt;If &lt;code&gt;maxWidth&lt;/code&gt; is less than &lt;code&gt;4&lt;/code&gt;, throw an
                * &lt;code&gt;IllegalArgumentException&lt;/code&gt;.&lt;/li&gt;
                * &lt;li&gt;In no case will it return a String of length greater than
                * &lt;code&gt;maxWidth&lt;/code&gt;.&lt;/li&gt;
                * &lt;/ul&gt;
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.abbreviate(null, *) = null
                * StringUtils.abbreviate("", 4) = ""
                * StringUtils.abbreviate("abcdefg", 6) = "abc..."
                * StringUtils.abbreviate("abcdefg", 7) = "abcdefg"
                * StringUtils.abbreviate("abcdefg", 8) = "abcdefg"
                * StringUtils.abbreviate("abcdefg", 4) = "a..."
                * StringUtils.abbreviate("abcdefg", 3) = IllegalArgumentException
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param maxWidth maximum length of result String, must be at least 4
                * @return abbreviated String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @throws IllegalArgumentException if the width is too small
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>abbreviate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>maxWidth</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>abbreviate</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>maxWidth</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Abbreviates a String using ellipses. This will turn
                * "Now is the time for all good men" into "...is the time for..."&lt;/p&gt;
                *
                * &lt;p&gt;Works like &lt;code&gt;abbreviate(String, int)&lt;/code&gt;, but allows you to specify
                * a "left edge" offset. Note that this left edge is not necessarily going to
                * be the leftmost character in the result, or the first character following the
                * ellipses, but it will appear somewhere in the result.
                *
                * &lt;p&gt;In no case will it return a String of length greater than
                * &lt;code&gt;maxWidth&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.abbreviate(null, *, *) = null
                * StringUtils.abbreviate("", 0, 4) = ""
                * StringUtils.abbreviate("abcdefghijklmno", -1, 10) = "abcdefg..."
                * StringUtils.abbreviate("abcdefghijklmno", 0, 10) = "abcdefg..."
                * StringUtils.abbreviate("abcdefghijklmno", 1, 10) = "abcdefg..."
                * StringUtils.abbreviate("abcdefghijklmno", 4, 10) = "abcdefg..."
                * StringUtils.abbreviate("abcdefghijklmno", 5, 10) = "...fghi..."
                * StringUtils.abbreviate("abcdefghijklmno", 6, 10) = "...ghij..."
                * StringUtils.abbreviate("abcdefghijklmno", 8, 10) = "...ijklmno"
                * StringUtils.abbreviate("abcdefghijklmno", 10, 10) = "...ijklmno"
                * StringUtils.abbreviate("abcdefghijklmno", 12, 10) = "...ijklmno"
                * StringUtils.abbreviate("abcdefghij", 0, 3) = IllegalArgumentException
                * StringUtils.abbreviate("abcdefghij", 5, 6) = IllegalArgumentException
                * &lt;/pre&gt;
                *
                * @param str the String to check, may be null
                * @param offset left edge of source String
                * @param maxWidth maximum length of result String, must be at least 4
                * @return abbreviated String, &lt;code&gt;null&lt;/code&gt; if null String input
                * @throws IllegalArgumentException if the width is too small
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>abbreviate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>maxWidth</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>maxWidth</name>
                                &lt; 4
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Minimum abbreviation width is 4"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt;=
                                <name>maxWidth</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>offset</name>
                                &gt;
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>offset</name>
                                        =
                                        <call>
                                            <name><name>str</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>(
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                - <name>offset</name>) &lt; (<name>maxWidth</name> - 3)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>offset</name>
                                        =
                                        <call>
                                            <name><name>str</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        - (<name>maxWidth</name> - 3)
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>offset</name>
                                &lt;= 4
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>str</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>maxWidth</name>
                                                        - 3
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        + "..."
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>maxWidth</name>
                                &lt; 7
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Minimum abbreviation width with offset is 7"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>(<name>offset</name> + (<name>maxWidth</name> - 3)) &lt;
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>"..." +
                                        <call>
                                            <name>abbreviate</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>str</name>.
                                                                <name>substring</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>offset</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>maxWidth</name>
                                                        - 3
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>"..." +
                            <call>
                                <name><name>str</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - (<name>maxWidth</name> - 3)
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Abbreviates a String to the length passed, replacing the middle characters with the supplied
                * replacement String.&lt;/p&gt;
                *
                * &lt;p&gt;This abbreviation only occurs if the following criteria is met:
                * &lt;ul&gt;
                * &lt;li&gt;Neither the String for abbreviation nor the replacement String are null or empty &lt;/li&gt;
                * &lt;li&gt;The length to truncate to is less than the length of the supplied String&lt;/li&gt;
                * &lt;li&gt;The length to truncate to is greater than 0&lt;/li&gt;
                * &lt;li&gt;The abbreviated String will have enough room for the length supplied replacement String
                * and the first and last characters of the supplied String for abbreviation&lt;/li&gt;
                * &lt;/ul&gt;
                * Otherwise, the returned String will be the same as the supplied String for abbreviation.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.abbreviateMiddle(null, null, 0) = null
                * StringUtils.abbreviateMiddle("abc", null, 0) = "abc"
                * StringUtils.abbreviateMiddle("abc", ".", 0) = "abc"
                * StringUtils.abbreviateMiddle("abc", ".", 3) = "abc"
                * StringUtils.abbreviateMiddle("abcdef", ".", 4) = "ab.f"
                * &lt;/pre&gt;
                *
                * @param str the String to abbreviate, may be null
                * @param middle the String to replace the middle characters with, may be null
                * @param length the length to abbreviate &lt;code&gt;str&lt;/code&gt; to.
                * @return the abbreviated String if the above criteria is met, or the original String supplied for
                abbreviation.
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>abbreviateMiddle</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>middle</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>str</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>middle</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>length</name>
                                &gt;=
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                || <name>length</name> &lt; (
                                <call>
                                    <name><name>middle</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                +2)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>targetSting</name> =
                            <init>
                                <expr><name>length</name>-
                                    <call>
                                        <name><name>middle</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startOffset</name> =
                            <init>
                                <expr><name>targetSting</name>/2+<name>targetSting</name>%2
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>endOffset</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    -<name>targetSting</name>/2
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>startOffset</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>middle</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>endOffset</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Difference</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Compares two Strings, and returns the portion where they differ.
                * (More precisely, return the remainder of the second String,
                * starting from where it's different from the first.)&lt;/p&gt;
                *
                * &lt;p&gt;For example,
                * &lt;code&gt;difference("i am a machine", "i am a robot") -&gt; "robot"&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.difference(null, null) = null
                * StringUtils.difference("", "") = ""
                * StringUtils.difference("", "abc") = "abc"
                * StringUtils.difference("abc", "") = ""
                * StringUtils.difference("abc", "abc") = ""
                * StringUtils.difference("ab", "abxyz") = "xyz"
                * StringUtils.difference("abcde", "abxyz") = "xyz"
                * StringUtils.difference("abcde", "xyz") = "xyz"
                * &lt;/pre&gt;
                *
                * @param str1 the first String, may be null
                * @param str2 the second String, may be null
                * @return the portion of str2 where it differs from str1; returns the
                * empty String if they are equal
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>difference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str1</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str2</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str2</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str1</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>at</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOfDifference</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>str1</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>str2</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>at</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str2</name>.
                                    <name>substring</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>at</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares two Strings, and returns the index at which the
                * Strings begin to differ.&lt;/p&gt;
                *
                * &lt;p&gt;For example,
                * &lt;code&gt;indexOfDifference("i am a machine", "i am a robot") -&gt; 7&lt;/code&gt;&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOfDifference(null, null) = -1
                * StringUtils.indexOfDifference("", "") = -1
                * StringUtils.indexOfDifference("", "abc") = 0
                * StringUtils.indexOfDifference("abc", "") = 0
                * StringUtils.indexOfDifference("abc", "abc") = -1
                * StringUtils.indexOfDifference("ab", "abxyz") = 2
                * StringUtils.indexOfDifference("abcde", "abxyz") = 2
                * StringUtils.indexOfDifference("abcde", "xyz") = 0
                * &lt;/pre&gt;
                *
                * @param str1 the first String, may be null
                * @param str2 the second String, may be null
                * @return the index where str2 and str1 begin to differ; -1 if they are equal
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfDifference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str1</name>
                                ==
                                <name>str2</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str1</name>
                                == <name>null</name> || <name>str2</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <expr>
                                <name>i</name>
                                = 0
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>str1</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &amp;&amp; <name>i</name> &lt;
                                <call>
                                    <name><name>str2</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>str1</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        !=
                                        <call>
                                            <name><name>str2</name>.
                                                <name>charAt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>str2</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                || <name>i</name> &lt;
                                <call>
                                    <name><name>str1</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>INDEX_NOT_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares all Strings in an array and returns the index at which the
                * Strings begin to differ.&lt;/p&gt;
                *
                * &lt;p&gt;For example,
                * &lt;code&gt;indexOfDifference(new String[] {"i am a machine", "i am a robot"}) -&gt; 7&lt;/code&gt;&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.indexOfDifference(null) = -1
                * StringUtils.indexOfDifference(new String[] {}) = -1
                * StringUtils.indexOfDifference(new String[] {"abc"}) = -1
                * StringUtils.indexOfDifference(new String[] {null, null}) = -1
                * StringUtils.indexOfDifference(new String[] {"", ""}) = -1
                * StringUtils.indexOfDifference(new String[] {"", null}) = 0
                * StringUtils.indexOfDifference(new String[] {"abc", null, null}) = 0
                * StringUtils.indexOfDifference(new String[] {null, null, "abc"}) = 0
                * StringUtils.indexOfDifference(new String[] {"", "abc"}) = 0
                * StringUtils.indexOfDifference(new String[] {"abc", ""}) = 0
                * StringUtils.indexOfDifference(new String[] {"abc", "abc"}) = -1
                * StringUtils.indexOfDifference(new String[] {"abc", "a"}) = 1
                * StringUtils.indexOfDifference(new String[] {"ab", "abxyz"}) = 2
                * StringUtils.indexOfDifference(new String[] {"abcde", "abxyz"}) = 2
                * StringUtils.indexOfDifference(new String[] {"abcde", "xyz"}) = 0
                * StringUtils.indexOfDifference(new String[] {"xyz", "abcde"}) = 0
                * StringUtils.indexOfDifference(new String[] {"i am a machine", "i am a robot"}) = 7
                * &lt;/pre&gt;
                *
                * @param strs array of strings, entries may be null
                * @return the index where the strings begin to differ; -1 if they are all equal
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>indexOfDifference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>strs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>strs</name>
                                == <name>null</name> ||
                                <name><name>strs</name>.
                                    <name>length</name>
                                </name>
                                &lt;= 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>anyStringNull</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>allStringsNull</name> =
                            <init>
                                <expr>true</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>arrayLen</name> =
                            <init>
                                <expr>
                                    <name><name>strs</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>shortestStrLen</name> =
                            <init>
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>longestStrLen</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// find the min and max string lengths; this avoids checking to make</comment>
                    <comment type="line">// sure we are not exceeding the length of the string each time through
                    </comment>
                    <comment type="line">// the bottom loop.</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>arrayLen</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>strs</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>anyStringNull</name>
                                                = true
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>shortestStrLen</name>
                                                = 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>allStringsNull</name>
                                                = false
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>shortestStrLen</name>
                                                =
                                                <call>
                                                    <name><name>Math</name>.
                                                        <name>min</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>strs</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                .
                                                                <call>
                                                                    <name>length</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>shortestStrLen</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>longestStrLen</name>
                                                =
                                                <call>
                                                    <name><name>Math</name>.
                                                        <name>max</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>strs</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                .
                                                                <call>
                                                                    <name>length</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>longestStrLen</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>

                    <comment type="line">// handle lists containing all nulls or all empty strings</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>allStringsNull</name>
                                || (<name>longestStrLen</name> == 0 &amp;&amp; !<name>anyStringNull</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>INDEX_NOT_FOUND</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// handle lists containing some nulls or some empty strings</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>shortestStrLen</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// find the position with the first difference across all strings</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>firstDiff</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>stringPos</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>stringPos</name>
                                &lt;
                                <name>shortestStrLen</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>stringPos</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>comparisonChar</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>strs</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            .
                                            <call>
                                                <name>charAt</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>stringPos</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>arrayPos</name> =
                                        <init>
                                            <expr>1</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>arrayPos</name>
                                        &lt;
                                        <name>arrayLen</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>arrayPos</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>strs</name>
                                                    <index>[
                                                        <expr>
                                                            <name>arrayPos</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                .
                                                <call>
                                                    <name>charAt</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>stringPos</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                !=
                                                <name>comparisonChar</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>firstDiff</name>
                                                        =
                                                        <name>stringPos</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <break>break;</break>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>firstDiff</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <if>if
                        <condition>(
                            <expr>
                                <name>firstDiff</name>
                                == -1 &amp;&amp; <name>shortestStrLen</name> !=
                                <name>longestStrLen</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// we compared all of the characters up to the length of the
                                </comment>
                                <comment type="line">// shortest string and didn't find a match, but the string
                                    lengths
                                </comment>
                                <comment type="line">// vary, so return the length of the shortest string.</comment>
                                <return>return
                                    <expr>
                                        <name>shortestStrLen</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>firstDiff</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Compares all Strings in an array and returns the initial sequence of
                * characters that is common to all of them.&lt;/p&gt;
                *
                * &lt;p&gt;For example,
                * &lt;code&gt;getCommonPrefix(new String[] {"i am a machine", "i am a robot"}) -&gt; "i am a "&lt;/code&gt;&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.getCommonPrefix(null) = ""
                * StringUtils.getCommonPrefix(new String[] {}) = ""
                * StringUtils.getCommonPrefix(new String[] {"abc"}) = "abc"
                * StringUtils.getCommonPrefix(new String[] {null, null}) = ""
                * StringUtils.getCommonPrefix(new String[] {"", ""}) = ""
                * StringUtils.getCommonPrefix(new String[] {"", null}) = ""
                * StringUtils.getCommonPrefix(new String[] {"abc", null, null}) = ""
                * StringUtils.getCommonPrefix(new String[] {null, null, "abc"}) = ""
                * StringUtils.getCommonPrefix(new String[] {"", "abc"}) = ""
                * StringUtils.getCommonPrefix(new String[] {"abc", ""}) = ""
                * StringUtils.getCommonPrefix(new String[] {"abc", "abc"}) = "abc"
                * StringUtils.getCommonPrefix(new String[] {"abc", "a"}) = "a"
                * StringUtils.getCommonPrefix(new String[] {"ab", "abxyz"}) = "ab"
                * StringUtils.getCommonPrefix(new String[] {"abcde", "abxyz"}) = "ab"
                * StringUtils.getCommonPrefix(new String[] {"abcde", "xyz"}) = ""
                * StringUtils.getCommonPrefix(new String[] {"xyz", "abcde"}) = ""
                * StringUtils.getCommonPrefix(new String[] {"i am a machine", "i am a robot"}) = "i am a "
                * &lt;/pre&gt;
                *
                * @param strs array of String objects, entries may be null
                * @return the initial sequence of characters that are common to all Strings
                * in the array; empty String if the array is null, the elements are all null
                * or if there is no common prefix.
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getCommonPrefix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>strs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>strs</name>
                                == <name>null</name> ||
                                <name><name>strs</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>EMPTY</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>smallestIndexOfDiff</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>indexOfDifference</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>strs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>smallestIndexOfDiff</name>
                                ==
                                <name>INDEX_NOT_FOUND</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// all strings were identical</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>strs</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>EMPTY</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>
                                            <name>strs</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>smallestIndexOfDiff</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// there were no common initial characters</comment>
                                        <return>return
                                            <expr>
                                                <name>EMPTY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// we found a common initial character sequence</comment>
                                        <return>return
                                            <expr>
                                                <name>
                                                    <name>strs</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                .
                                                <call>
                                                    <name>substring</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>smallestIndexOfDiff</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// Misc</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Find the Levenshtein distance between two Strings.&lt;/p&gt;
                *
                * &lt;p&gt;This is the number of changes needed to change one String into
                * another, where each change is a single character modification (deletion,
                * insertion or substitution).&lt;/p&gt;
                *
                * &lt;p&gt;The previous implementation of the Levenshtein distance algorithm
                * was from &lt;a href="http://www.merriampark.com/ld.htm"&gt;http://www.merriampark.com/ld.htm&lt;/a&gt;&lt;/p&gt;
                *
                * &lt;p&gt;Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError
                * which can occur when my Java implementation is used with very large strings.&lt;br&gt;
                * This implementation of the Levenshtein distance algorithm
                * is from &lt;a href="http://www.merriampark.com/ldjava.htm"&gt;http://www.merriampark.com/ldjava.htm&lt;/a&gt;&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.getLevenshteinDistance(null, *) = IllegalArgumentException
                * StringUtils.getLevenshteinDistance(*, null) = IllegalArgumentException
                * StringUtils.getLevenshteinDistance("","") = 0
                * StringUtils.getLevenshteinDistance("","a") = 1
                * StringUtils.getLevenshteinDistance("aaapppp", "") = 7
                * StringUtils.getLevenshteinDistance("frog", "fog") = 1
                * StringUtils.getLevenshteinDistance("fly", "ant") = 3
                * StringUtils.getLevenshteinDistance("elephant", "hippo") = 7
                * StringUtils.getLevenshteinDistance("hippo", "elephant") = 7
                * StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") = 8
                * StringUtils.getLevenshteinDistance("hello", "hallo") = 1
                * &lt;/pre&gt;
                *
                * @param s the first String, must not be null
                * @param t the second String, must not be null
                * @return result distance
                * @throws IllegalArgumentException if either String input &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>getLevenshteinDistance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>s</name>
                                == <name>null</name> || <name>t</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Strings must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="block">/*
                        The difference between this impl. and the previous is that, rather
                        than creating and retaining a matrix of size s.length()+1 by t.length()+1,
                        we maintain two single-dimensional arrays of length s.length()+1. The first, d,
                        is the 'current working' distance array that maintains the newest distance cost
                        counts as we iterate through the characters of String s. Each time we increment
                        the index of String t we are comparing, d is copied to p, the second int[]. Doing so
                        allows us to retain the previous cost counts as required by the algorithm (taking
                        the minimum of the cost count to the left, up one, and diagonally up and to the left
                        of the current cost count being calculated). (Note that the arrays aren't really
                        copied anymore, just switched...this is clearly much better than cloning an array
                        or doing a System.arraycopy() each time through the outer loop.)

                        Effectively, the difference between the two implementations is this one does not
                        cause an out of memory condition when calculating the LD over two very large strings.
                        */
                    </comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>s</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// length of s</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>m</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>t</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// length of t</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>n</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>m</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>m</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>n</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>n</name>
                                &gt;
                                <name>m</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// swap the input strings to consume less memory</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>tmp</name> =
                                        <init>
                                            <expr>
                                                <name>s</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>s</name>
                                        =
                                        <name>t</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>t</name>
                                        =
                                        <name>tmp</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>n</name>
                                        =
                                        <name>m</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>m</name>
                                        =
                                        <call>
                                            <name><name>t</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>
                                <name>p</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr><name>n</name>+1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//'previous' cost array, horizontally</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>
                                <name>d</name>
                                <index>[]</index>
                            </name>
                            =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr><name>n</name>+1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// cost array, horizontally</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>
                                <name>_d</name>
                                <index>[]</index>
                            </name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">//placeholder to assist in swapping p and d</comment>

                    <comment type="line">// indexes into strings s and t</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// iterates through s</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// iterates through t</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>t_j</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// jth character of t</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cost</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// cost</comment>

                    <for>for (
                        <init>
                            <expr>
                                <name>i</name>
                                = 0
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;=
                                <name>n</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>p</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>i</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <for>for (
                        <init>
                            <expr>
                                <name>j</name>
                                = 1
                            </expr>
                            ;
                        </init>
                        <condition>
                            <expr><name>j</name>&lt;=
                                <name>m</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>j</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>t_j</name>
                                    =
                                    <call>
                                        <name><name>t</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr><name>j</name>-1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>d</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                    =
                                    <name>j</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <for>for (
                                <init>
                                    <expr><name>i</name>=1
                                    </expr>
                                    ;
                                </init>
                                <condition>
                                    <expr><name>i</name>&lt;=
                                        <name>n</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>cost</name>
                                            =
                                            <call>
                                                <name><name>s</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>i</name>-1
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ==<name>t_j</name> ? 0 : 1
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <comment type="line">// minimum of cell to the left+1, to the top+1, diagonally left
                                        and up +cost
                                    </comment>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>d</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>min</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>Math</name>.
                                                                    <name>min</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>d</name>
                                                                                <index>[
                                                                                    <expr><name>i</name>-1
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            +1
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>p</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            +1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>p</name>
                                                                <index>[
                                                                    <expr><name>i</name>-1
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            +
                                                            <name>cost</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>

                            <comment type="line">// copy current distance counts to 'previous row' distance counts
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <name>_d</name>
                                    =
                                    <name>p</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>p</name>
                                    =
                                    <name>d</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>d</name>
                                    =
                                    <name>_d</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <comment type="line">// our last action in the above loop was to switch d and p, so p now</comment>
                    <comment type="line">// actually has the most recent cost counts</comment>
                    <return>return
                        <expr>
                            <name>
                                <name>p</name>
                                <index>[
                                    <expr>
                                        <name>n</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// startsWith</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Check if a String starts with a specified prefix.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt;s are handled without exceptions. Two &lt;code&gt;null&lt;/code&gt;
                * references are considered to be equal. The comparison is case sensitive.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.startsWith(null, null) = true
                * StringUtils.startsWith(null, "abc") = false
                * StringUtils.startsWith("abcdef", null) = false
                * StringUtils.startsWith("abcdef", "abc") = true
                * StringUtils.startsWith("ABCDEF", "abc") = false
                * &lt;/pre&gt;
                *
                * @see java.lang.String#startsWith(String)
                * @param str the String to check, may be null
                * @param prefix the prefix to find, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the String starts with the prefix, case sensitive, or
                * both &lt;code&gt;null&lt;/code&gt;
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>startsWith</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>startsWith</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Case insensitive check if a String starts with a specified prefix.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt;s are handled without exceptions. Two &lt;code&gt;null&lt;/code&gt;
                * references are considered to be equal. The comparison is case insensitive.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.startsWithIgnoreCase(null, null) = true
                * StringUtils.startsWithIgnoreCase(null, "abc") = false
                * StringUtils.startsWithIgnoreCase("abcdef", null) = false
                * StringUtils.startsWithIgnoreCase("abcdef", "abc") = true
                * StringUtils.startsWithIgnoreCase("ABCDEF", "abc") = true
                * &lt;/pre&gt;
                *
                * @see java.lang.String#startsWith(String)
                * @param str the String to check, may be null
                * @param prefix the prefix to find, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the String starts with the prefix, case insensitive, or
                * both &lt;code&gt;null&lt;/code&gt;
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>startsWithIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>startsWith</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Check if a String starts with a specified prefix (optionally case insensitive).&lt;/p&gt;
                *
                * @see java.lang.String#startsWith(String)
                * @param str the String to check, may be null
                * @param prefix the prefix to find, may be null
                * @param ignoreCase inidicates whether the compare should ignore case
                * (case insensitive) or not.
                * @return &lt;code&gt;true&lt;/code&gt; if the String starts with the prefix or
                * both &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>startsWith</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>ignoreCase</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>prefix</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(<name>str</name> == <name>null</name> &amp;&amp; <name>prefix
                                    </name> == <name>null</name>)
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>prefix</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt;
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>regionMatches</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ignoreCase</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>prefix</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Check if a String starts with any of an array of specified strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.startsWithAny(null, null) = false
                * StringUtils.startsWithAny(null, new String[] {"abc"}) = false
                * StringUtils.startsWithAny("abcxyz", null) = false
                * StringUtils.startsWithAny("abcxyz", new String[] {""}) = false
                * StringUtils.startsWithAny("abcxyz", new String[] {"abc"}) = true
                * StringUtils.startsWithAny("abcxyz", new String[] {null, "xyz", "abc"}) = true
                * &lt;/pre&gt;
                *
                * @see #startsWith(String, String)
                * @param string the String to check, may be null
                * @param searchStrings the Strings to find, may be null or empty
                * @return &lt;code&gt;true&lt;/code&gt; if the String starts with any of the the prefixes, case
                insensitive, or
                * both &lt;code&gt;null&lt;/code&gt;
                * @since 2.5
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>startsWithAny</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchStrings</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>string</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>searchStrings</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>searchStrings</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>searchString</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>searchStrings</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>StringUtils</name>.
                                                <name>startsWith</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>string</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>searchString</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// endsWith</comment>
            <comment type="line">//-----------------------------------------------------------------------</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Check if a String ends with a specified suffix.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt;s are handled without exceptions. Two &lt;code&gt;null&lt;/code&gt;
                * references are considered to be equal. The comparison is case sensitive.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.endsWith(null, null) = true
                * StringUtils.endsWith(null, "def") = false
                * StringUtils.endsWith("abcdef", null) = false
                * StringUtils.endsWith("abcdef", "def") = true
                * StringUtils.endsWith("ABCDEF", "def") = false
                * StringUtils.endsWith("ABCDEF", "cde") = false
                * &lt;/pre&gt;
                *
                * @see java.lang.String#endsWith(String)
                * @param str the String to check, may be null
                * @param suffix the suffix to find, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the String ends with the suffix, case sensitive, or
                * both &lt;code&gt;null&lt;/code&gt;
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>endsWith</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>suffix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>endsWith</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>suffix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Case insensitive check if a String ends with a specified suffix.&lt;/p&gt;
                *
                * &lt;p&gt;&lt;code&gt;null&lt;/code&gt;s are handled without exceptions. Two &lt;code&gt;null&lt;/code&gt;
                * references are considered to be equal. The comparison is case insensitive.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.endsWithIgnoreCase(null, null) = true
                * StringUtils.endsWithIgnoreCase(null, "def") = false
                * StringUtils.endsWithIgnoreCase("abcdef", null) = false
                * StringUtils.endsWithIgnoreCase("abcdef", "def") = true
                * StringUtils.endsWithIgnoreCase("ABCDEF", "def") = true
                * StringUtils.endsWithIgnoreCase("ABCDEF", "cde") = false
                * &lt;/pre&gt;
                *
                * @see java.lang.String#endsWith(String)
                * @param str the String to check, may be null
                * @param suffix the suffix to find, may be null
                * @return &lt;code&gt;true&lt;/code&gt; if the String ends with the suffix, case insensitive, or
                * both &lt;code&gt;null&lt;/code&gt;
                * @since 2.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>endsWithIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>suffix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>endsWith</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>suffix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Check if a String ends with a specified suffix (optionally case insensitive).&lt;/p&gt;
                *
                * @see java.lang.String#endsWith(String)
                * @param str the String to check, may be null
                * @param suffix the suffix to find, may be null
                * @param ignoreCase inidicates whether the compare should ignore case
                * (case insensitive) or not.
                * @return &lt;code&gt;true&lt;/code&gt; if the String starts with the prefix or
                * both &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>endsWith</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>suffix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>ignoreCase</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> || <name>suffix</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(<name>str</name> == <name>null</name> &amp;&amp; <name>suffix
                                    </name> == <name>null</name>)
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>suffix</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt;
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strOffset</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>str</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    -
                                    <call>
                                        <name><name>suffix</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>str</name>.
                                    <name>regionMatches</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ignoreCase</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>strOffset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>suffix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>suffix</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Similar to &lt;a
                * href="http://www.w3.org/TR/xpath/#function-normalize-space"&gt;http://www.w3.org/TR/xpath/#function-normalize
                * -space&lt;/a&gt;
                * &lt;/p&gt;
                * &lt;p&gt;
                * The function returns the argument string with whitespace normalized by using
                * &lt;code&gt;{@link #trim(String)}&lt;/code&gt; to remove leading and trailing whitespace
                * and then replacing sequences of whitespace characters by a single space.
                * &lt;/p&gt;
                * In XML Whitespace characters are the same as those allowed by the &lt;a
                * href="http://www.w3.org/TR/REC-xml/#NT-S"&gt;S&lt;/a&gt; production, which is S ::= (#x20 | #x9 | #xD
                | #xA)+
                * &lt;p&gt;
                * See Java's {@link Character#isWhitespace(char)} for which characters are considered whitespace.
                * &lt;p&gt;
                * The difference is that Java's whitespace includes vertical tab and form feed, which this functional
                will also
                * normalize. Additonally &lt;code&gt;{@link #trim(String)}&lt;/code&gt; removes control characters (char
                &amp;lt;= 32) from both
                * ends of this String.
                * &lt;/p&gt;
                *
                * @see Character#isWhitespace(char)
                * @see #trim(String)
                * @see &lt;ahref="http://www.w3.org/TR/xpath/#function-normalize-space"&gt;
                * http://www.w3.org/TR/xpath/#function-normalize-space&lt;/a&gt;
                * @param str the source String to normalize whitespaces from, may be null
                * @return the modified string with whitespace normalized, &lt;code&gt;null&lt;/code&gt; if null String
                input
                *
                * @since 2.6
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>normalizeSpace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>str</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>str</name>
                            =
                            <call>
                                <name>strip</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>str</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>str</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt;= 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StrBuilder</name>
                            </type>
                            <name>b</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StrBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>str</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>str</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>str</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>Character</name>.
                                                <name>isWhitespace</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>c</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    &gt; 0 &amp;&amp; !
                                                    <call>
                                                        <name><name>Character</name>.
                                                            <name>isWhitespace</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>str</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                    - 1
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>b</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>' '</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>b</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>c</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>b</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Check if a String ends with any of an array of specified strings.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * StringUtils.endsWithAny(null, null) = false
                * StringUtils.endsWithAny(null, new String[] {"abc"}) = false
                * StringUtils.endsWithAny("abcxyz", null) = false
                * StringUtils.endsWithAny("abcxyz", new String[] {""}) = true
                * StringUtils.endsWithAny("abcxyz", new String[] {"xyz"}) = true
                * StringUtils.endsWithAny("abcxyz", new String[] {null, "xyz", "abc"}) = true
                * &lt;/pre&gt;
                *
                * @param string the String to check, may be null
                * @param searchStrings the Strings to find, may be null or empty
                * @return &lt;code&gt;true&lt;/code&gt; if the String ends with any of the the prefixes, case
                insensitive, or
                * both &lt;code&gt;null&lt;/code&gt;
                * @since 2.6
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>endsWithAny</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>searchStrings</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isEmpty</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>string</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>ArrayUtils</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>searchStrings</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>searchStrings</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>searchString</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>searchStrings</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>StringUtils</name>.
                                                <name>endsWith</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>string</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>searchString</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
