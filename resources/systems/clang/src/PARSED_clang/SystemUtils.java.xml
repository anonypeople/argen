<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\SystemUtils.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;
        * Helpers for &lt;code&gt;java.lang.System&lt;/code&gt;.
        * &lt;/p&gt;
        *
        * &lt;p&gt;
        * If a system property cannot be read due to security restrictions,
        * the corresponding field in this class will be set to &lt;code&gt;null&lt;/code&gt;
        * and a message will be written to &lt;code&gt;System.err&lt;/code&gt;.
        * &lt;/p&gt;
        *
        * &lt;p&gt;
        * #ThreadSafe#
        * &lt;/p&gt;
        *
        * @author Apache Software Foundation
        * @author Based on code from Avalon Excalibur
        * @author Based on code from Lucene
        * @author &lt;a href="mailto:sdowney@panix.com"&gt;Steve Downey&lt;/a&gt;
        * @author Gary Gregory
        * @author Michael Becke
        * @author Tetsuya Kaneuchi
        * @author Rafal Krupinski
        * @author Jason Gritman
        * @since 1.0
        * @version $Id: SystemUtils.java 1056988 2011-01-09 17:58:53Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>SystemUtils</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>JAVA_VERSION_TRIM_SIZE</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The prefix String for all Windows OS.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>OS_NAME_WINDOWS_PREFIX</name> =
                    <init>
                        <expr>"Windows"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// System property constants</comment>
            <comment type="line">// -----------------------------------------------------------------------</comment>
            <comment type="line">// These MUST be declared first. Other constants depend on this.</comment>

            <comment type="javadoc">/**
                * The System property key for the user home directory.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>USER_HOME_KEY</name> =
                    <init>
                        <expr>"user.home"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The System property key for the user directory.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>USER_DIR_KEY</name> =
                    <init>
                        <expr>"user.dir"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The System property key for the Java IO temporary directory.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_IO_TMPDIR_KEY</name> =
                    <init>
                        <expr>"java.io.tmpdir"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The System property key for the Java home directory.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_HOME_KEY</name> =
                    <init>
                        <expr>"java.home"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;awt.toolkit&lt;/code&gt; System Property.
                * &lt;/p&gt;
                * &lt;p&gt;
                * Holds a class name, on Windows XP this is &lt;code&gt;sun.awt.windows.WToolkit&lt;/code&gt;.
                * &lt;/p&gt;
                * &lt;p&gt;
                * &lt;b&gt;On platforms without a GUI, this value is &lt;code&gt;null&lt;/code&gt;.&lt;/b&gt;
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                will
                * be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>AWT_TOOLKIT</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"awt.toolkit"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;file.encoding&lt;/code&gt; System Property.
                * &lt;/p&gt;
                * &lt;p&gt;
                * File encoding, such as &lt;code&gt;Cp1252&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.0
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>FILE_ENCODING</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"file.encoding"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;file.separator&lt;/code&gt; System Property. File separator (&lt;code&gt;&amp;quot;/&amp;quot;&lt;/code&gt;
                on UNIX).
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>FILE_SEPARATOR</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"file.separator"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.awt.fonts&lt;/code&gt; System Property.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_AWT_FONTS</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.awt.fonts"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.awt.graphicsenv&lt;/code&gt; System Property.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_AWT_GRAPHICSENV</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.awt.graphicsenv"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.awt.headless&lt;/code&gt; System Property.
                * The value of this property is the String &lt;code&gt;"true"&lt;/code&gt; or &lt;code&gt;"false"&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @see #isJavaAwtHeadless()
                * @since 2.1
                * @since Java 1.4
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_AWT_HEADLESS</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.awt.headless"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.awt.printerjob&lt;/code&gt; System Property.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_AWT_PRINTERJOB</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.awt.printerjob"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.class.path&lt;/code&gt; System Property. Java class path.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_CLASS_PATH</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.class.path"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.class.version&lt;/code&gt; System Property. Java class format version number.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_CLASS_VERSION</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.class.version"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.compiler&lt;/code&gt; System Property. Name of JIT compiler to use.
                * First in JDK version 1.2. Not used in Sun JDKs after 1.2.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2. Not used in Sun versions after 1.2.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_COMPILER</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.compiler"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.endorsed.dirs&lt;/code&gt; System Property. Path of endorsed directory or
                directories.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.4
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_ENDORSED_DIRS</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.endorsed.dirs"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.ext.dirs&lt;/code&gt; System Property. Path of extension directory or
                directories.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.3
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_EXT_DIRS</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.ext.dirs"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.home&lt;/code&gt; System Property. Java installation directory.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_HOME</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>JAVA_HOME_KEY</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.io.tmpdir&lt;/code&gt; System Property. Default temp file path.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_IO_TMPDIR</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>JAVA_IO_TMPDIR_KEY</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.library.path&lt;/code&gt; System Property. List of paths to search when loading
                libraries.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_LIBRARY_PATH</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.library.path"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.runtime.name&lt;/code&gt; System Property. Java Runtime Environment name.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.0
                * @since Java 1.3
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_RUNTIME_NAME</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.runtime.name"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.runtime.version&lt;/code&gt; System Property. Java Runtime Environment version.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.0
                * @since Java 1.3
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_RUNTIME_VERSION</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.runtime.version"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.specification.name&lt;/code&gt; System Property. Java Runtime Environment
                specification name.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_SPECIFICATION_NAME</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.specification.name"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.specification.vendor&lt;/code&gt; System Property. Java Runtime Environment
                specification vendor.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_SPECIFICATION_VENDOR</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.specification.vendor"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.specification.version&lt;/code&gt; System Property. Java Runtime Environment
                specification version.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.3
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_SPECIFICATION_VERSION</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.specification.version"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.util.prefs.PreferencesFactory&lt;/code&gt; System Property. A class name.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.1
                * @since Java 1.4
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_UTIL_PREFS_PREFERENCES_FACTORY</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.util.prefs.PreferencesFactory"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.vendor&lt;/code&gt; System Property. Java vendor-specific string.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VENDOR</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.vendor"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.vendor.url&lt;/code&gt; System Property. Java vendor URL.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VENDOR_URL</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.vendor.url"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.version&lt;/code&gt; System Property. Java version number.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VERSION</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.version"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.vm.info&lt;/code&gt; System Property. Java Virtual Machine implementation info.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.0
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VM_INFO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.vm.info"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.vm.name&lt;/code&gt; System Property. Java Virtual Machine implementation name.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VM_NAME</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.vm.name"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.vm.specification.name&lt;/code&gt; System Property. Java Virtual Machine
                specification name.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VM_SPECIFICATION_NAME</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.vm.specification.name"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.vm.specification.vendor&lt;/code&gt; System Property. Java Virtual Machine
                specification vendor.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VM_SPECIFICATION_VENDOR</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.vm.specification.vendor"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.vm.specification.version&lt;/code&gt; System Property. Java Virtual Machine
                specification version.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VM_SPECIFICATION_VERSION</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.vm.specification.version"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.vm.vendor&lt;/code&gt; System Property. Java Virtual Machine implementation
                vendor.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VM_VENDOR</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.vm.vendor"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;java.vm.version&lt;/code&gt; System Property. Java Virtual Machine implementation
                version.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VM_VERSION</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"java.vm.version"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;line.separator&lt;/code&gt; System Property. Line separator (&lt;code&gt;&amp;quot;\n&amp;quot;&lt;/code&gt;
                on UNIX).
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>LINE_SEPARATOR</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"line.separator"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;os.arch&lt;/code&gt; System Property. Operating system architecture.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>OS_ARCH</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"os.arch"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;os.name&lt;/code&gt; System Property. Operating system name.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>OS_NAME</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"os.name"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;os.version&lt;/code&gt; System Property. Operating system version.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>OS_VERSION</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"os.version"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;path.separator&lt;/code&gt; System Property. Path separator (&lt;code&gt;&amp;quot;:&amp;quot;&lt;/code&gt;
                on UNIX).
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>PATH_SEPARATOR</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"path.separator"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;user.country&lt;/code&gt; or &lt;code&gt;user.region&lt;/code&gt; System Property.
                * User's country code, such as &lt;code&gt;GB&lt;/code&gt;. First in
                * Java version 1.2 as &lt;code&gt;user.region&lt;/code&gt;. Renamed to &lt;code&gt;user.country&lt;/code&gt;
                in 1.4
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.0
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>USER_COUNTRY</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"user.country"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            == <name>null</name> ?
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"user.region"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"user.country"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;user.dir&lt;/code&gt; System Property. User's current working directory.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>USER_DIR</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>USER_DIR_KEY</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;user.home&lt;/code&gt; System Property. User's home directory.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>USER_HOME</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>USER_HOME_KEY</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;user.language&lt;/code&gt; System Property. User's language code, such as &lt;code&gt;"en"&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.0
                * @since Java 1.2
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>USER_LANGUAGE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"user.language"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;user.name&lt;/code&gt; System Property. User's account name.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since Java 1.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>USER_NAME</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"user.name"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * The &lt;code&gt;user.timezone&lt;/code&gt; System Property. For example: &lt;code&gt;"America/Los_Angeles"&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Defaults to &lt;code&gt;null&lt;/code&gt; if the runtime does not have
                * security access to read this property or the property does not exist.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This value is initialized when the class is loaded. If {@link System#setProperty(String,String)} or
                * {@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value
                * will be out of sync with that System property.
                * &lt;/p&gt;
                *
                * @since 2.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>USER_TIMEZONE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getSystemProperty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"user.timezone"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Java version</comment>
            <comment type="line">// -----------------------------------------------------------------------</comment>
            <comment type="line">// This MUST be declared after those above as it depends on the</comment>
            <comment type="line">// values being set up</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the Java version as a &lt;code&gt;String&lt;/code&gt; trimming leading letters.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;null&lt;/code&gt; if {@link #JAVA_VERSION} is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_VERSION_TRIMMED</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJavaVersionTrimmed</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Java version values</comment>
            <comment type="line">// -----------------------------------------------------------------------</comment>
            <comment type="line">// These MUST be declared after the trim above as they depend on the</comment>
            <comment type="line">// value being set up</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the Java version as a &lt;code&gt;float&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example return values:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;1.2f&lt;/code&gt; for Java 1.2
                * &lt;li&gt;&lt;code&gt;1.31f&lt;/code&gt; for Java 1.3.1
                * &lt;/ul&gt;
                *
                * &lt;p&gt;
                * The field will return zero if {@link #JAVA_VERSION} is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>float</name>
                    </type>
                    <name>JAVA_VERSION_FLOAT</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJavaVersionAsFloat</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the Java version as an &lt;code&gt;int&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example return values:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;120&lt;/code&gt; for Java 1.2
                * &lt;li&gt;&lt;code&gt;131&lt;/code&gt; for Java 1.3.1
                * &lt;/ul&gt;
                *
                * &lt;p&gt;
                * The field will return zero if {@link #JAVA_VERSION} is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>JAVA_VERSION_INT</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJavaVersionAsInt</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Java version checks</comment>
            <comment type="line">// -----------------------------------------------------------------------</comment>
            <comment type="line">// These MUST be declared after those above as they depend on the</comment>
            <comment type="line">// values being set up</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Java version 1.1 (also 1.1.x versions).
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if {@link #JAVA_VERSION} is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_JAVA_1_1</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJavaVersionMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.1"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Java version 1.2 (also 1.2.x versions).
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if {@link #JAVA_VERSION} is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_JAVA_1_2</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJavaVersionMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.2"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Java version 1.3 (also 1.3.x versions).
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if {@link #JAVA_VERSION} is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_JAVA_1_3</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJavaVersionMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.3"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Java version 1.4 (also 1.4.x versions).
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if {@link #JAVA_VERSION} is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_JAVA_1_4</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJavaVersionMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.4"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Java version 1.5 (also 1.5.x versions).
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if {@link #JAVA_VERSION} is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_JAVA_1_5</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJavaVersionMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.5"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Java version 1.6 (also 1.6.x versions).
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if {@link #JAVA_VERSION} is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_JAVA_1_6</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJavaVersionMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.6"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Java version 1.7 (also 1.7.x versions).
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if {@link #JAVA_VERSION} is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.5
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_JAVA_1_7</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJavaVersionMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.7"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Operating system checks</comment>
            <comment type="line">// -----------------------------------------------------------------------</comment>
            <comment type="line">// These MUST be declared after those above as they depend on the</comment>
            <comment type="line">// values being set up</comment>
            <comment type="line">// OS names from http://www.vamphq.com/os.html</comment>
            <comment type="line">// Selected ones included - please advise dev@commons.apache.org</comment>
            <comment type="line">// if you want another added or a mistake corrected</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is AIX.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_AIX</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"AIX"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is HP-UX.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_HP_UX</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"HP-UX"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Irix.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_IRIX</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Irix"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Linux.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_LINUX</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Linux"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"LINUX"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Mac.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_MAC</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Mac"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Mac.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_MAC_OSX</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Mac OS X"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is OS/2.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_OS2</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"OS/2"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Solaris.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_SOLARIS</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Solaris"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is SunOS.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_SUN_OS</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"SunOS"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is a UNIX like system,
                * as in any of AIX, HP-UX, Irix, Linux, MacOSX, Solaris or SUN OS.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.1
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_UNIX</name> =
                    <init>
                        <expr>
                            <name>IS_OS_AIX</name>
                            || <name>IS_OS_HP_UX</name> || <name>IS_OS_IRIX</name> || <name>IS_OS_LINUX</name> ||
                            <name>IS_OS_MAC_OSX</name>
                            || <name>IS_OS_SOLARIS</name> ||
                            <name>IS_OS_SUN_OS</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Windows.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_WINDOWS</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME_WINDOWS_PREFIX</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Windows 2000.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_WINDOWS_2000</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME_WINDOWS_PREFIX</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"5.0"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Windows 95.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_WINDOWS_95</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME_WINDOWS_PREFIX</name>
                                            + " 9"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"4.0"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Java 1.2 running on Windows98 returns 'Windows 95', hence the above</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Windows 98.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_WINDOWS_98</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME_WINDOWS_PREFIX</name>
                                            + " 9"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"4.1"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Java 1.2 running on Windows98 returns 'Windows 95', hence the above</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Windows ME.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_WINDOWS_ME</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME_WINDOWS_PREFIX</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"4.9"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Java 1.2 running on WindowsME may return 'Windows 95', hence the above</comment>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Windows NT.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_WINDOWS_NT</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatchesName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME_WINDOWS_PREFIX</name>
                                            + " NT"
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Windows 2000 returns 'Windows 2000' but may suffer from same Java1.2 problem
            </comment>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Windows XP.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_WINDOWS_XP</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME_WINDOWS_PREFIX</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"5.1"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// -----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Windows Vista.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.4
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_WINDOWS_VISTA</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME_WINDOWS_PREFIX</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"6.0"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is &lt;code&gt;true&lt;/code&gt; if this is Windows 7.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * The field will return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;OS_NAME&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @since 2.5
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>IS_OS_WINDOWS_7</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getOSMatches</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME_WINDOWS_PREFIX</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"6.1"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the Java home directory as a &lt;code&gt;File&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @return a directory
                * @throws SecurityException if a security manager exists and its
                * &lt;code&gt;checkPropertyAccess&lt;/code&gt; method doesn't allow access to the specified system
                property.
                * @see System#getProperty(String)
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>File</name>
                </type>
                <name>getJavaHome</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>File</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>System</name>.
                                                    <name>getProperty</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>JAVA_HOME_KEY</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the Java IO temporary directory as a &lt;code&gt;File&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @return a directory
                * @throws SecurityException if a security manager exists and its
                * &lt;code&gt;checkPropertyAccess&lt;/code&gt; method doesn't allow access to the specified system
                * property.
                * @see System#getProperty(String)
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>File</name>
                </type>
                <name>getJavaIoTmpDir</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>File</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>System</name>.
                                                    <name>getProperty</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>JAVA_IO_TMPDIR_KEY</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets the Java version number as a &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;
                *
                * &lt;p&gt;Example return values:&lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;1.2f&lt;/code&gt; for JDK 1.2
                * &lt;li&gt;&lt;code&gt;1.31f&lt;/code&gt; for JDK 1.3.1
                * &lt;/ul&gt;
                *
                * @return the version, for example 1.31f for JDK 1.3.1
                * @deprecated Use {@link #JAVA_VERSION_FLOAT} instead.
                * Method will be removed in Commons Lang 3.0.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                </type>
                <name>getJavaVersion</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>JAVA_VERSION_FLOAT</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the Java version number as a &lt;code&gt;float&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example return values:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;1.2f&lt;/code&gt; for Java 1.2&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;1.31f&lt;/code&gt; for Java 1.3.1&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;1.6f&lt;/code&gt; for Java 1.6.0_20&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;p&gt;
                * Patch releases are not reported.
                * &lt;/p&gt;
                *
                * @return the version, for example 1.31f for Java 1.3.1
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                </type>
                <name>getJavaVersionAsFloat</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toVersionFloat</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toJavaVersionIntArray</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>SystemUtils</name>.
                                                                <name>JAVA_VERSION</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>JAVA_VERSION_TRIM_SIZE</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the Java version number as an &lt;code&gt;int&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example return values:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;120&lt;/code&gt; for Java 1.2&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;131&lt;/code&gt; for Java 1.3.1&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;160&lt;/code&gt; for Java 1.6.0_20&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;p&gt;
                * Patch releases are not reported.
                * &lt;/p&gt;
                *
                * @return the version, for example 131 for Java 1.3.1
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>getJavaVersionAsInt</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toVersionInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toJavaVersionIntArray</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>SystemUtils</name>.
                                                                <name>JAVA_VERSION</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>JAVA_VERSION_TRIM_SIZE</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Decides if the Java version matches.
                * &lt;/p&gt;
                *
                * @param versionPrefix
                * the prefix for the java version
                * @return true if matches, or false if not or can't determine
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>getJavaVersionMatches</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>versionPrefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isJavaVersionMatch</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>JAVA_VERSION_TRIMMED</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>versionPrefix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Trims the text of the java version to start with numbers.
                *
                * @return the trimmed java version
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getJavaVersionTrimmed</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>JAVA_VERSION</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <call>
                                                <name><name>JAVA_VERSION</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>char</name>
                                                </type>
                                                <name>ch</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>JAVA_VERSION</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>ch</name>
                                                    &gt;= '0' &amp;&amp; <name>ch</name> &lt;= '9'
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name><name>JAVA_VERSION</name>.
                                                                    <name>substring</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Decides if the operating system matches.
                *
                * @param osNamePrefix
                * the prefix for the os name
                * @param osVersionPrefix
                * the prefix for the version
                * @return true if matches, or false if not or can't determine
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>getOSMatches</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>osNamePrefix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>osVersionPrefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isOSMatch</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>OS_VERSION</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>osNamePrefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>osVersionPrefix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Decides if the operating system matches.
                *
                * @param osNamePrefix
                * the prefix for the os name
                * @return true if matches, or false if not or can't determine
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>getOSMatchesName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>osNamePrefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isOSNameMatch</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>OS_NAME</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>osNamePrefix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// -----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets a System property, defaulting to &lt;code&gt;null&lt;/code&gt; if the property cannot be read.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * If a &lt;code&gt;SecurityException&lt;/code&gt; is caught, the return value is &lt;code&gt;null&lt;/code&gt;
                and a message is written to
                * &lt;code&gt;System.err&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @param property
                * the system property name
                * @return the system property value or &lt;code&gt;null&lt;/code&gt; if a security problem occurs
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getSystemProperty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>property</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>property</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>SecurityException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// we are not allowed to look at this property</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.<name>err</name>.
                                                <name>println</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Caught a SecurityException reading the system property '" +
                                                        <name>property</name>
                                                        + "'; the SystemUtils property value will default to null."
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the user directory as a &lt;code&gt;File&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @return a directory
                * @throws SecurityException if a security manager exists and its
                * &lt;code&gt;checkPropertyAccess&lt;/code&gt; method doesn't allow access to the specified system
                property.
                * @see System#getProperty(String)
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>File</name>
                </type>
                <name>getUserDir</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>File</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>System</name>.
                                                    <name>getProperty</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>USER_DIR_KEY</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Gets the user home directory as a &lt;code&gt;File&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * @return a directory
                * @throws SecurityException if a security manager exists and its
                * &lt;code&gt;checkPropertyAccess&lt;/code&gt; method doesn't allow access to the specified system
                property.
                * @see System#getProperty(String)
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>File</name>
                </type>
                <name>getUserHome</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>File</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>System</name>.
                                                    <name>getProperty</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>USER_HOME_KEY</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns whether the {@link #JAVA_AWT_HEADLESS} value is &lt;code&gt;true&lt;/code&gt;.
                *
                * @return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;JAVA_AWT_HEADLESS&lt;/code&gt; is &lt;code&gt;"true"&lt;/code&gt;,
                &lt;code&gt;false&lt;/code&gt; otherwise.
                *
                * @see #JAVA_AWT_HEADLESS
                * @since 2.1
                * @since Java 1.4
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isJavaAwtHeadless</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>JAVA_AWT_HEADLESS</name>
                            != <name>null</name> ?
                            <call>
                                <name><name>JAVA_AWT_HEADLESS</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Boolean</name>.<name>TRUE</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            : false
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is the Java version at least the requested version.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example input:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;1.2f&lt;/code&gt; to test for Java 1.2&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;1.31f&lt;/code&gt; to test for Java 1.3.1&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * @param requiredVersion
                * the required version, for example 1.31f
                * @return &lt;code&gt;true&lt;/code&gt; if the actual version is equal or greater than the required
                version
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isJavaVersionAtLeast</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>requiredVersion</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>JAVA_VERSION_FLOAT</name>
                            &gt;=
                            <name>requiredVersion</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Is the Java version at least the requested version.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example input:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;120&lt;/code&gt; to test for Java 1.2 or greater&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;131&lt;/code&gt; to test for Java 1.3.1 or greater&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * @param requiredVersion
                * the required version, for example 131
                * @return &lt;code&gt;true&lt;/code&gt; if the actual version is equal or greater than the required
                version
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isJavaVersionAtLeast</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>requiredVersion</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>JAVA_VERSION_INT</name>
                            &gt;=
                            <name>requiredVersion</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Decides if the Java version matches.
                * &lt;/p&gt;
                * &lt;p&gt;
                * This method is package private instead of private to support unit test invocation.
                * &lt;/p&gt;
                *
                * @param version
                * the actual Java version
                * @param versionPrefix
                * the prefix for the expected Java version
                * @return true if matches, or false if not or can't determine
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isJavaVersionMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>versionPrefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>version</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>version</name>.
                                    <name>startsWith</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>versionPrefix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Decides if the operating system matches.
                * &lt;p&gt;
                * This method is package private instead of private to support unit test invocation.
                * &lt;/p&gt;
                *
                * @param osName
                * the actual OS name
                * @param osVersion
                * the actual OS version
                * @param osNamePrefix
                * the prefix for the expected OS name
                * @param osVersionPrefix
                * the prefix for the expected OS version
                * @return true if matches, or false if not or can't determine
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isOSMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>osName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>osVersion</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>osNamePrefix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>osVersionPrefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>osName</name>
                                == <name>null</name> || <name>osVersion</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>osName</name>.
                                    <name>startsWith</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>osNamePrefix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>osVersion</name>.
                                    <name>startsWith</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>osVersionPrefix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Decides if the operating system matches.
                * &lt;p&gt;
                * This method is package private instead of private to support unit test invocation.
                * &lt;/p&gt;
                *
                * @param osName
                * the actual OS name
                * @param osNamePrefix
                * the prefix for the expected OS name
                * @return true if matches, or false if not or can't determine
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isOSNameMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>osName</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>osNamePrefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>osName</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>osName</name>.
                                    <name>startsWith</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>osNamePrefix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Converts the given Java version string to a &lt;code&gt;float&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example return values:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;1.2f&lt;/code&gt; for Java 1.2&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;1.31f&lt;/code&gt; for Java 1.3.1&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;1.6f&lt;/code&gt; for Java 1.6.0_20&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;p&gt;
                * Patch releases are not reported.
                * &lt;/p&gt;
                * &lt;p&gt;
                * This method is package private instead of private to support unit test invocation.
                * &lt;/p&gt;
                *
                * @param version The string version
                * @return the version, for example 1.31f for Java 1.3.1
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>float</name>
                </type>
                <name>toJavaVersionFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toVersionFloat</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toJavaVersionIntArray</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>version</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>JAVA_VERSION_TRIM_SIZE</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Converts the given Java version string to an &lt;code&gt;int&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example return values:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;120&lt;/code&gt; for Java 1.2&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;131&lt;/code&gt; for Java 1.3.1&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;160&lt;/code&gt; for Java 1.6.0_20&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;p&gt;
                * Patch releases are not reported.
                * &lt;/p&gt;
                * &lt;p&gt;
                * This method is package private instead of private to support unit test invocation.
                * &lt;/p&gt;
                *
                * @param version The string version
                * @return the version, for example 131 for Java 1.3.1
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>toJavaVersionInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toVersionInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toJavaVersionIntArray</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>version</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>JAVA_VERSION_TRIM_SIZE</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Converts the given Java version string to an &lt;code&gt;int[]&lt;/code&gt; of maximum size &lt;code&gt;3&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example return values:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;[1, 2, 0]&lt;/code&gt; for Java 1.2&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;[1, 3, 1]&lt;/code&gt; for Java 1.3.1&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;[1, 5, 0]&lt;/code&gt; for Java 1.5.0_21&lt;/li&gt;
                * &lt;/ul&gt;
                * &lt;p&gt;
                * This method is package private instead of private to support unit test invocation.
                * &lt;/p&gt;
                *
                * @param version The string version
                * @return the version, for example [1, 5, 0] for Java 1.5.0_21
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>toJavaVersionIntArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toJavaVersionIntArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>version</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Converts the given Java version string to an &lt;code&gt;int[]&lt;/code&gt; of maximum size &lt;code&gt;limit&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example return values:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;[1, 2, 0]&lt;/code&gt; for Java 1.2&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;[1, 3, 1]&lt;/code&gt; for Java 1.3.1&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;[1, 5, 0, 21]&lt;/code&gt; for Java 1.5.0_21&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * @param version The string version
                * @param limit version limit
                * @return the version, for example [1, 5, 0, 21] for Java 1.5.0_21
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>toJavaVersionIntArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>limit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>version</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>ArrayUtils</name>.
                                            <name>EMPTY_INT_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>strings</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>StringUtils</name>.
                                            <name>split</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>version</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"._- "</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>ints</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[
                                            <expr>
                                                <call>
                                                    <name><name>Math</name>.
                                                        <name>min</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>limit</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>strings</name>.
                                                                    <name>length</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>strings</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp; <name>j</name> &lt;
                                <name>limit</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>s</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>strings</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>s</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <try>try
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>ints</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>j</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        =
                                                        <call>
                                                            <name><name>Integer</name>.
                                                                <name>parseInt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>s</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr><name>j</name>++
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                            <catch>catch (
                                                <param>
                                                    <decl>
                                                        <type>
                                                            <name>Exception</name>
                                                        </type>
                                                        <name>e</name>
                                                    </decl>
                                                </param>
                                                )
                                                <block>{
                                                    }
                                                </block>
                                            </catch>
                                        </try>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>ints</name>.
                                    <name>length</name>
                                </name>
                                &gt;
                                <name>j</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                            <index>[]</index>
                                        </type>
                                        <name>newInts</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>int</name>
                                                    <index>[
                                                        <expr>
                                                            <name>j</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>arraycopy</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ints</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newInts</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>j</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>ints</name>
                                        =
                                        <name>newInts</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>ints</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Converts given the Java version array to a &lt;code&gt;float&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example return values:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;1.2f&lt;/code&gt; for Java 1.2&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;1.31f&lt;/code&gt; for Java 1.3.1&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;1.6f&lt;/code&gt; for Java 1.6.0_20&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;p&gt;
                * Patch releases are not reported.
                * &lt;/p&gt;
                *
                * @param javaVersions The version numbers
                * @return the version, for example 1.31f for Java 1.3.1
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>float</name>
                </type>
                <name>toVersionFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>javaVersions</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>javaVersions</name>
                                == <name>null</name> ||
                                <name><name>javaVersions</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0f</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>javaVersions</name>.
                                    <name>length</name>
                                </name>
                                == 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>
                                            <name>javaVersions</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuffer</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuffer</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>
                                                <name>javaVersions</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'.'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>javaVersions</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>builder</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>javaVersions</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Float</name>.
                                            <name>parseFloat</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>builder</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Exception</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return <expr>0f</expr>;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Converts given the Java version array to an &lt;code&gt;int&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * Example return values:
                * &lt;/p&gt;
                * &lt;ul&gt;
                * &lt;li&gt;&lt;code&gt;120&lt;/code&gt; for Java 1.2&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;131&lt;/code&gt; for Java 1.3.1&lt;/li&gt;
                * &lt;li&gt;&lt;code&gt;160&lt;/code&gt; for Java 1.6.0_20&lt;/li&gt;
                * &lt;/ul&gt;
                *
                * &lt;p&gt;
                * Patch releases are not reported.
                * &lt;/p&gt;
                *
                * @param javaVersions The version numbers
                * @return the version, for example 1.31f for Java 1.3.1
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>toVersionInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>javaVersions</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>javaVersions</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>intVersion</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name> =
                            <init>
                                <expr>
                                    <name><name>javaVersions</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                &gt;= 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>intVersion</name>
                                        =
                                        <name>
                                            <name>javaVersions</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                        * 100
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                &gt;= 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>intVersion</name>
                                        +=
                                        <name>
                                            <name>javaVersions</name>
                                            <index>[<expr>1</expr>]
                                            </index>
                                        </name>
                                        * 10
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>len</name>
                                &gt;= 3
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>intVersion</name>
                                        +=
                                        <name>
                                            <name>javaVersions</name>
                                            <index>[<expr>2</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>intVersion</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// -----------------------------------------------------------------------</comment>
            <comment type="javadoc">/**
                * &lt;p&gt;
                * SystemUtils instances should NOT be constructed in standard programming. Instead, the class should be
                used as
                * &lt;code&gt;SystemUtils.FILE_SEPARATOR&lt;/code&gt;.
                * &lt;/p&gt;
                *
                * &lt;p&gt;
                * This constructor is public to permit tools that require a JavaBean instance to operate.
                * &lt;/p&gt;
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>SystemUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            }
        </block>
    </class>
</unit>
