<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\UnhandledException.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.<name>exception</name>.
            <name>NestableRuntimeException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Thrown when it is impossible or undesirable to consume or throw a checked exception.&lt;/p&gt;
        * This exception supplements the standard exception classes by providing a more
        * semantically rich description of the problem.&lt;/p&gt;
        *
        * &lt;p&gt;&lt;code&gt;UnhandledException&lt;/code&gt; represents the case where a method has to deal
        * with a checked exception but does not wish to.
        * Instead, the checked exception is rethrown in this unchecked wrapper.&lt;/p&gt;
        *
        * &lt;pre&gt;
        * public void foo() {
        * try {
        * // do something that throws IOException
        * } catch (IOException ex) {
        * // don't want to or can't throw IOException from foo()
        * throw new UnhandledException(ex);
        * }
        * }
        * &lt;/pre&gt;
        *
        * @author Matthew Hawthorne
        * @since 2.0
        * @version $Id: UnhandledException.java 437554 2006-08-28 06:21:41Z bayard $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>UnhandledException</name>
        <super>
            <extends>extends
                <name>NestableRuntimeException</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>1832101364842773720L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructs the exception using a cause.
                *
                * @param cause the underlying cause
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>UnhandledException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cause</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs the exception using a message and cause.
                *
                * @param message the message to use
                * @param cause the underlying cause
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>UnhandledException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>message</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cause</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            }
        </block>
    </class>
</unit>
