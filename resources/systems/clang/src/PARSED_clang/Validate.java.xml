<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\Validate.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>lang</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;This class assists in validating arguments.&lt;/p&gt;
        *
        * &lt;p&gt;The class is based along the lines of JUnit. If an argument value is
        * deemed invalid, an IllegalArgumentException is thrown. For example:&lt;/p&gt;
        *
        * &lt;pre&gt;
        * Validate.isTrue( i &gt; 0, "The value must be greater than zero: ", i);
        * Validate.notNull( surname, "The surname must not be null");
        * &lt;/pre&gt;
        *
        * @author Apache Software Foundation
        * @author &lt;a href="mailto:ola.berg@arkitema.se"&gt;Ola Berg&lt;/a&gt;
        * @author Gary Gregory
        * @author Norm Deane
        * @since 2.0
        * @version $Id: Validate.java 1057051 2011-01-09 23:15:51Z sebb $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>Validate</name>
        <block>{
            <comment type="line">// Validate has no dependencies on other classes in Commons Lang at present</comment>

            <comment type="javadoc">/**
                * Constructor. This class should not normally be instantiated.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>Validate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// isTrue</comment>
            <comment type="line">//---------------------------------------------------------------------------------
            </comment>
            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the argument condition is &lt;code&gt;true&lt;/code&gt;; otherwise
                * throwing an exception with the specified message. This method is useful when
                * validating according to an arbitrary boolean expression, such as validating an
                * object or using your own custom validation expression.&lt;/p&gt;
                *
                * &lt;pre&gt;Validate.isTrue( myObject.isOk(), "The object is not OK: ", myObject);&lt;/pre&gt;
                *
                * &lt;p&gt;For performance reasons, the object value is passed as a separate parameter and
                * appended to the exception message only in the case of an error.&lt;/p&gt;
                *
                * @param expression the boolean expression to check
                * @param message the exception message if invalid
                * @param value the value to append to the message when invalid
                * @throws IllegalArgumentException if expression is &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>isTrue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>expression</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>message</name>
                                                        +
                                                        <name>value</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the argument condition is &lt;code&gt;true&lt;/code&gt;; otherwise
                * throwing an exception with the specified message. This method is useful when
                * validating according to an arbitrary boolean expression, such as validating a
                * primitive number or using your own custom validation expression.&lt;/p&gt;
                *
                * &lt;pre&gt;Validate.isTrue(i &gt; 0.0, "The value must be greater than zero: ", i);&lt;/pre&gt;
                *
                * &lt;p&gt;For performance reasons, the long value is passed as a separate parameter and
                * appended to the exception message only in the case of an error.&lt;/p&gt;
                *
                * @param expression the boolean expression to check
                * @param message the exception message if invalid
                * @param value the value to append to the message when invalid
                * @throws IllegalArgumentException if expression is &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>isTrue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>expression</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>message</name>
                                                        +
                                                        <name>value</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the argument condition is &lt;code&gt;true&lt;/code&gt;; otherwise
                * throwing an exception with the specified message. This method is useful when
                * validating according to an arbitrary boolean expression, such as validating a
                * primitive number or using your own custom validation expression.&lt;/p&gt;
                *
                * &lt;pre&gt;Validate.isTrue(d &gt; 0.0, "The value must be greater than zero: ", d);&lt;/pre&gt;
                *
                * &lt;p&gt;For performance reasons, the double value is passed as a separate parameter and
                * appended to the exception message only in the case of an error.&lt;/p&gt;
                *
                * @param expression the boolean expression to check
                * @param message the exception message if invalid
                * @param value the value to append to the message when invalid
                * @throws IllegalArgumentException if expression is &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>isTrue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>expression</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>message</name>
                                                        +
                                                        <name>value</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the argument condition is &lt;code&gt;true&lt;/code&gt;; otherwise
                * throwing an exception with the specified message. This method is useful when
                * validating according to an arbitrary boolean expression, such as validating a
                * primitive number or using your own custom validation expression.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * Validate.isTrue( (i &gt; 0), "The value must be greater than zero");
                * Validate.isTrue( myObject.isOk(), "The object is not OK");
                * &lt;/pre&gt;
                *
                * @param expression the boolean expression to check
                * @param message the exception message if invalid
                * @throws IllegalArgumentException if expression is &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>isTrue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>expression</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>message</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the argument condition is &lt;code&gt;true&lt;/code&gt;; otherwise
                * throwing an exception. This method is useful when validating according
                * to an arbitrary boolean expression, such as validating a
                * primitive number or using your own custom validation expression.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * Validate.isTrue(i &gt; 0);
                * Validate.isTrue(myObject.isOk());&lt;/pre&gt;
                *
                * &lt;p&gt;The message of the exception is &amp;quot;The validated expression is
                * false&amp;quot;.&lt;/p&gt;
                *
                * @param expression the boolean expression to check
                * @throws IllegalArgumentException if expression is &lt;code&gt;false&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>isTrue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>expression</name>
                                == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The validated expression is false"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// notNull</comment>
            <comment type="line">//---------------------------------------------------------------------------------
            </comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument is not &lt;code&gt;null&lt;/code&gt;;
                * otherwise throwing an exception.
                *
                * &lt;pre&gt;Validate.notNull(myObject);&lt;/pre&gt;
                *
                * &lt;p&gt;The message of the exception is &amp;quot;The validated object is
                * null&amp;quot;.&lt;/p&gt;
                *
                * @param object the object to check
                * @throws IllegalArgumentException if the object is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>notNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"The validated object is null"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument is not &lt;code&gt;null&lt;/code&gt;;
                * otherwise throwing an exception with the specified message.
                *
                * &lt;pre&gt;Validate.notNull(myObject, "The object must not be null");&lt;/pre&gt;
                *
                * @param object the object to check
                * @param message the exception message if invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>notNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>message</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// notEmpty array</comment>
            <comment type="line">//---------------------------------------------------------------------------------
            </comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument array is neither &lt;code&gt;null&lt;/code&gt;
                * nor a length of zero (no elements); otherwise throwing an exception
                * with the specified message.
                *
                * &lt;pre&gt;Validate.notEmpty(myArray, "The array must not be empty");&lt;/pre&gt;
                *
                * @param array the array to check
                * @param message the exception message if invalid
                * @throws IllegalArgumentException if the array is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>notEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>array</name>
                                == <name>null</name> ||
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>message</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument array is neither &lt;code&gt;null&lt;/code&gt;
                * nor a length of zero (no elements); otherwise throwing an exception.
                *
                * &lt;pre&gt;Validate.notEmpty(myArray);&lt;/pre&gt;
                *
                * &lt;p&gt;The message in the exception is &amp;quot;The validated array is
                * empty&amp;quot;.
                *
                * @param array the array to check
                * @throws IllegalArgumentException if the array is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>notEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notEmpty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"The validated array is empty"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// notEmpty collection</comment>
            <comment type="line">//---------------------------------------------------------------------------------
            </comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument collection is neither &lt;code&gt;null&lt;/code&gt;
                * nor a size of zero (no elements); otherwise throwing an exception
                * with the specified message.
                *
                * &lt;pre&gt;Validate.notEmpty(myCollection, "The collection must not be empty");&lt;/pre&gt;
                *
                * @param collection the collection to check
                * @param message the exception message if invalid
                * @throws IllegalArgumentException if the collection is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>notEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>collection</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>collection</name>.
                                        <name>size</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>message</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument collection is neither &lt;code&gt;null&lt;/code&gt;
                * nor a size of zero (no elements); otherwise throwing an exception.
                *
                * &lt;pre&gt;Validate.notEmpty(myCollection);&lt;/pre&gt;
                *
                * &lt;p&gt;The message in the exception is &amp;quot;The validated collection is
                * empty&amp;quot;.&lt;/p&gt;
                *
                * @param collection the collection to check
                * @throws IllegalArgumentException if the collection is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>notEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notEmpty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>collection</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"The validated collection is empty"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// notEmpty map</comment>
            <comment type="line">//---------------------------------------------------------------------------------
            </comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument map is neither &lt;code&gt;null&lt;/code&gt;
                * nor a size of zero (no elements); otherwise throwing an exception
                * with the specified message.
                *
                * &lt;pre&gt;Validate.notEmpty(myMap, "The map must not be empty");&lt;/pre&gt;
                *
                * @param map the map to check
                * @param message the exception message if invalid
                * @throws IllegalArgumentException if the map is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>notEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Map</name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>map</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>map</name>.
                                        <name>size</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>message</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument map is neither &lt;code&gt;null&lt;/code&gt;
                * nor a size of zero (no elements); otherwise throwing an exception.
                *
                * &lt;pre&gt;Validate.notEmpty(myMap);&lt;/pre&gt;
                *
                * &lt;p&gt;The message in the exception is &amp;quot;The validated map is
                * empty&amp;quot;.&lt;/p&gt;
                *
                * @param map the map to check
                * @throws IllegalArgumentException if the map is empty
                * @see #notEmpty(Map, String)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>notEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Map</name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notEmpty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>map</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"The validated map is empty"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// notEmpty string</comment>
            <comment type="line">//---------------------------------------------------------------------------------
            </comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument string is
                * neither &lt;code&gt;null&lt;/code&gt; nor a length of zero (no characters);
                * otherwise throwing an exception with the specified message.
                *
                * &lt;pre&gt;Validate.notEmpty(myString, "The string must not be empty");&lt;/pre&gt;
                *
                * @param string the string to check
                * @param message the exception message if invalid
                * @throws IllegalArgumentException if the string is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>notEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>string</name>
                                == <name>null</name> ||
                                <call>
                                    <name><name>string</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>message</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument string is
                * neither &lt;code&gt;null&lt;/code&gt; nor a length of zero (no characters);
                * otherwise throwing an exception with the specified message.
                *
                * &lt;pre&gt;Validate.notEmpty(myString);&lt;/pre&gt;
                *
                * &lt;p&gt;The message in the exception is &amp;quot;The validated
                * string is empty&amp;quot;.&lt;/p&gt;
                *
                * @param string the string to check
                * @throws IllegalArgumentException if the string is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>notEmpty</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notEmpty</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>string</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"The validated string is empty"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// notNullElements array</comment>
            <comment type="line">//---------------------------------------------------------------------------------
            </comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument array is neither
                * &lt;code&gt;null&lt;/code&gt; nor contains any elements that are &lt;code&gt;null&lt;/code&gt;;
                * otherwise throwing an exception with the specified message.
                *
                * &lt;pre&gt;Validate.noNullElements(myArray, "The array contain null at position %d");&lt;/pre&gt;
                *
                * &lt;p&gt;If the array is &lt;code&gt;null&lt;/code&gt;, then the message in the exception
                * is &amp;quot;The validated object is null&amp;quot;.&lt;/p&gt;
                *
                * @param array the array to check
                * @param message the exception message if the collection has &lt;code&gt;null&lt;/code&gt; elements
                * @throws IllegalArgumentException if the array is &lt;code&gt;null&lt;/code&gt; or
                * an element in the array is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>noNullElements</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Validate</name>.
                                    <name>notNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>message</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument array is neither
                * &lt;code&gt;null&lt;/code&gt; nor contains any elements that are &lt;code&gt;null&lt;/code&gt;;
                * otherwise throwing an exception.
                *
                * &lt;pre&gt;Validate.noNullElements(myArray);&lt;/pre&gt;
                *
                * &lt;p&gt;If the array is &lt;code&gt;null&lt;/code&gt;, then the message in the exception
                * is &amp;quot;The validated object is null&amp;quot;.&lt;/p&gt;
                *
                * &lt;p&gt;If the array has a &lt;code&gt;null&lt;/code&gt; element, then the message in the
                * exception is &amp;quot;The validated array contains null element at index:
                * &amp;quot followed by the index.&lt;/p&gt;
                *
                * @param array the array to check
                * @throws IllegalArgumentException if the array is &lt;code&gt;null&lt;/code&gt; or
                * an element in the array is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>noNullElements</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Validate</name>.
                                    <name>notNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>array</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"The validated array contains null element at index: "
                                                                +
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="line">// notNullElements collection</comment>
            <comment type="line">//---------------------------------------------------------------------------------
            </comment>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument collection is neither
                * &lt;code&gt;null&lt;/code&gt; nor contains any elements that are &lt;code&gt;null&lt;/code&gt;;
                * otherwise throwing an exception with the specified message.
                *
                * &lt;pre&gt;Validate.noNullElements(myCollection, "The collection contains null elements");&lt;/pre&gt;
                *
                * &lt;p&gt;If the collection is &lt;code&gt;null&lt;/code&gt;, then the message in the exception
                * is &amp;quot;The validated object is null&amp;quot;.&lt;/p&gt;
                *
                *
                * @param collection the collection to check
                * @param message the exception message if the collection has
                * @throws IllegalArgumentException if the collection is &lt;code&gt;null&lt;/code&gt; or
                * an element in the collection is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>noNullElements</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Validate</name>.
                                    <name>notNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>collection</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Iterator</name>
                                </type>
                                <name>it</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>collection</name>.
                                                <name>iterator</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>it</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>message</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate that the specified argument collection is neither
                * &lt;code&gt;null&lt;/code&gt; nor contains any elements that are &lt;code&gt;null&lt;/code&gt;;
                * otherwise throwing an exception.
                *
                * &lt;pre&gt;Validate.noNullElements(myCollection);&lt;/pre&gt;
                *
                * &lt;p&gt;If the collection is &lt;code&gt;null&lt;/code&gt;, then the message in the exception
                * is &amp;quot;The validated object is null&amp;quot;.&lt;/p&gt;
                *
                * &lt;p&gt;If the collection has a &lt;code&gt;null&lt;/code&gt; element, then the message in the
                * exception is &amp;quot;The validated collection contains null element at index:
                * &amp;quot followed by the index.&lt;/p&gt;
                *
                * @param collection the collection to check
                * @throws IllegalArgumentException if the collection is &lt;code&gt;null&lt;/code&gt; or
                * an element in the collection is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>noNullElements</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Validate</name>.
                                    <name>notNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>collection</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Iterator</name>
                                </type>
                                <name>it</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>collection</name>.
                                                <name>iterator</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>it</name>.
                                                <name>next</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"The validated collection contains null element at
                                                                index: " +
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Validate an argument, throwing &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                * if the argument collection is &lt;code&gt;null&lt;/code&gt; or has elements that
                * are not of type &lt;code&gt;clazz&lt;/code&gt; or a subclass.&lt;/p&gt;
                *
                * &lt;pre&gt;
                * Validate.allElementsOfType(collection, String.class, "Collection has invalid elements");
                * &lt;/pre&gt;
                *
                * @param collection the collection to check, not null
                * @param clazz the &lt;code&gt;Class&lt;/code&gt; which the collection's elements are expected to be,
                not null
                * @param message the exception message if the &lt;code&gt;Collection&lt;/code&gt; has elements not of
                type &lt;code&gt;clazz&lt;/code&gt;
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>allElementsOfType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>clazz</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Validate</name>.
                                    <name>notNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>collection</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Validate</name>.
                                    <name>notNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>clazz</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Iterator</name>
                                </type>
                                <name>it</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>collection</name>.
                                                <name>iterator</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>clazz</name>.
                                                <name>isInstance</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>it</name>.
                                                                <name>next</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>message</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * Validate an argument, throwing &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the argument
                collection is
                * &lt;code&gt;null&lt;/code&gt; or has elements that are not of type &lt;code&gt;clazz&lt;/code&gt; or a
                subclass.
                * &lt;/p&gt;
                *
                * &lt;pre&gt;
                * Validate.allElementsOfType(collection, String.class);
                * &lt;/pre&gt;
                *
                * &lt;p&gt;
                * The message in the exception is 'The validated collection contains an element not of type clazz at
                index: '.
                * &lt;/p&gt;
                *
                * @param collection the collection to check, not null
                * @param clazz the &lt;code&gt;Class&lt;/code&gt; which the collection's elements are expected to be,
                not null
                * @since 2.1
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>allElementsOfType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Collection</name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>clazz</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Validate</name>.
                                    <name>notNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>collection</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Validate</name>.
                                    <name>notNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>clazz</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Iterator</name>
                                </type>
                                <name>it</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>collection</name>.
                                                <name>iterator</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>clazz</name>.
                                                <name>isInstance</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>it</name>.
                                                                <name>next</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        == false
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"The validated collection contains an element not of
                                                                type "
                                                                +
                                                                <call>
                                                                    <name><name>clazz</name>.
                                                                        <name>getName</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                + " at index: " +
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
