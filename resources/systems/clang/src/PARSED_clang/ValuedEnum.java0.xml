<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clang\src\main\java\org\apache\commons\lang\enums\ValuedEnum.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>enums</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationTargetException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Method</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>lang</name>.
            <name>ClassUtils</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Abstract superclass for type-safe enums with integer values suitable
        * for use in &lt;code&gt;switch&lt;/code&gt; statements.&lt;/p&gt;
        *
        * &lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt;Due to the way in which Java ClassLoaders work, comparing
        * &lt;code&gt;Enum&lt;/code&gt; objects should always be done using the equals() method,
        * not &lt;code&gt;==&lt;/code&gt;. The equals() method will try &lt;code&gt;==&lt;/code&gt; first so
        * in most cases the effect is the same.&lt;/p&gt;
        *
        * &lt;p&gt;To use this class, it must be subclassed. For example:&lt;/p&gt;
        *
        * &lt;pre&gt;
        * public final class JavaVersionEnum extends ValuedEnum {
        * //standard enums for version of JVM
        * public static final int JAVA1_0_VALUE = 100;
        * public static final int JAVA1_1_VALUE = 110;
        * public static final int JAVA1_2_VALUE = 120;
        * public static final int JAVA1_3_VALUE = 130;
        * public static final JavaVersionEnum JAVA1_0 = new JavaVersionEnum( "Java 1.0", JAVA1_0_VALUE );
        * public static final JavaVersionEnum JAVA1_1 = new JavaVersionEnum( "Java 1.1", JAVA1_1_VALUE );
        * public static final JavaVersionEnum JAVA1_2 = new JavaVersionEnum( "Java 1.2", JAVA1_2_VALUE );
        * public static final JavaVersionEnum JAVA1_3 = new JavaVersionEnum( "Java 1.3", JAVA1_3_VALUE );
        *
        * private JavaVersionEnum(String name, int value) {
        * super( name, value );
        * }
        *
        * public static JavaVersionEnum getEnum(String javaVersion) {
        * return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);
        * }
        *
        * public static JavaVersionEnum getEnum(int javaVersion) {
        * return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);
        * }
        *
        * public static Map getEnumMap() {
        * return getEnumMap(JavaVersionEnum.class);
        * }
        *
        * public static List getEnumList() {
        * return getEnumList(JavaVersionEnum.class);
        * }
        *
        * public static Iterator iterator() {
        * return iterator(JavaVersionEnum.class);
        * }
        * }
        * &lt;/pre&gt;
        *
        * &lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt;These are declared &lt;code&gt;final&lt;/code&gt;, so compilers may
        * inline the code. Ensure you recompile everything when using final. &lt;/p&gt;
        *
        * &lt;p&gt;The above class could then be used as follows:&lt;/p&gt;
        *
        * &lt;pre&gt;
        * public void doSomething(JavaVersionEnum ver) {
        * switch (ver.getValue()) {
        * case JAVA1_0_VALUE:
        * // ...
        * break;
        * case JAVA1_1_VALUE:
        * // ...
        * break;
        * //...
        * }
        * }
        * &lt;/pre&gt;
        *
        * &lt;p&gt;As shown, each enum has a name and a value. These can be accessed using
        * &lt;code&gt;getName&lt;/code&gt; and &lt;code&gt;getValue&lt;/code&gt;.&lt;/p&gt;
        *
        * &lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Because the switch is ultimately sitting on top of an
        * int, the example above is not type-safe. That is, there is nothing that
        * checks that JAVA1_0_VALUE is a legal constant for JavaVersionEnum. &lt;/p&gt;
        *
        * &lt;p&gt;The &lt;code&gt;getEnum&lt;/code&gt; and &lt;code&gt;iterator&lt;/code&gt; methods are recommended.
        * Unfortunately, Java restrictions require these to be coded as shown in each subclass.
        * An alternative choice is to use the {@link EnumUtils} class.&lt;/p&gt;
        *
        * @author Apache Avalon project
        * @author Apache Software Foundation
        * @since 2.1 (class existed in enum package from v1.0)
        * @version $Id: ValuedEnum.java 905636 2010-02-02 14:03:32Z niallp $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>ValuedEnum</name>
        <super>
            <extends>extends
                <name>Enum</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Required for serialization support.
                *
                * @see java.io.Serializable
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-7129650521543789085L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The value contained in enum.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>iValue</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructor for enum item.
                *
                * @param name the name of enum item
                * @param value the value of enum item
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>ValuedEnum</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>iValue</name>
                            =
                            <name>value</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * &lt;p&gt;Gets an &lt;code&gt;Enum&lt;/code&gt; object by class and value.&lt;/p&gt;
                *
                * &lt;p&gt;This method loops through the list of &lt;code&gt;Enum&lt;/code&gt;,
                * thus if there are many &lt;code&gt;Enum&lt;/code&gt;s this will be
                * slow.&lt;/p&gt;
                *
                * @param enumClass the class of the &lt;code&gt;Enum&lt;/code&gt; to get
                * @param value the value of the &lt;code&gt;Enum&lt;/code&gt; to get
                * @return the enum object, or null if the enum does not exist
                * @throws IllegalArgumentException if the enum class is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>Enum</name>
                </type>
                <name>getEnum</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>enumClass</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>enumClass</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The Enum Class must not be null"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Enum</name>.
                                            <name>getEnumList</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>enumClass</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Iterator</name>
                                </type>
                                <name>it</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>list</name>.
                                                <name>iterator</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr/>)
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ValuedEnum</name>
                                    </type>
                                    <name>enumeration</name> =
                                    <init>
                                        <expr>(<name>ValuedEnum</name>)
                                            <call>
                                                <name><name>it</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>enumeration</name>.
                                                <name>getValue</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name>value</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>enumeration</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Get value of enum item.&lt;/p&gt;
                *
                * @return the enum item's value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>getValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>iValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Tests for order.&lt;/p&gt;
                *
                * &lt;p&gt;The default ordering is numeric by value, but this
                * can be overridden by subclasses.&lt;/p&gt;
                *
                * &lt;p&gt;NOTE: From v2.2 the enums must be of the same type.
                * If the parameter is in a different class loader than this instance,
                * reflection is used to compare the values.&lt;/p&gt;
                *
                * @see java.lang.Comparable#compareTo(Object)
                * @param other the other object to compare to
                * @return -ve if this is less than the other object, +ve if greater than,
                * &lt;code&gt;0&lt;/code&gt; of equal
                * @throws ClassCastException if other is not an &lt;code&gt;Enum&lt;/code&gt;
                * @throws NullPointerException if other is &lt;code&gt;null&lt;/code&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>compareTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>other</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>other</name>.
                                        <name>getClass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <call>
                                    <name><name>this</name>.
                                        <name>getClass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>other</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>equals</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>this</name>.
                                                                    <name>getClass</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>getName</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>iValue</name>
                                                    -
                                                    <call>
                                                        <name>getValueInOtherClassLoader</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>other</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ClassCastException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Different enum class '" +
                                                        <call>
                                                            <name><name>ClassUtils</name>.
                                                                <name>getShortClassName</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>other</name>.
                                                                                <name>getClass</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        + "'"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>iValue</name>
                            - ((<name>ValuedEnum</name>) <name>other</name>).
                            <name>iValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Use reflection to return an objects value.&lt;/p&gt;
                *
                * @param other the object to determine the value for
                * @return the value
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>int</name>
                </type>
                <name>getValueInOtherClassLoader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Method</name>
                                    </type>
                                    <name>mth</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>other</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getMethod</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"getValue"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Integer</name>
                                    </type>
                                    <name>value</name> =
                                    <init>
                                        <expr>(<name>Integer</name>)
                                            <call>
                                                <name><name>mth</name>.
                                                    <name>invoke</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>other</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>value</name>.
                                            <name>intValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NoSuchMethodException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// ignore - should never happen</comment>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalAccessException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// ignore - should never happen</comment>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InvocationTargetException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// ignore - should never happen</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalStateException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"This should not happen"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;p&gt;Human readable description of this &lt;code&gt;Enum&lt;/code&gt; item.&lt;/p&gt;
                *
                * @return String in the form &lt;code&gt;type[name=value]&lt;/code&gt;, for example:
                * &lt;code&gt;JavaVersion[Java 1.0=100]&lt;/code&gt;. Note that the package name is
                * stripped from the type name.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>iToString</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>shortName</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>ClassUtils</name>.
                                                        <name>getShortClassName</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>getEnumClass</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>iToString</name>
                                        = <name>shortName</name> + "[" +
                                        <call>
                                            <name>getName</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        + "=" +
                                        <call>
                                            <name>getValue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        + "]"
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>iToString</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
