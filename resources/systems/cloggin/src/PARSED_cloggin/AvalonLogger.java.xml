<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cloggin\src\main\java\org\apache\commons\logging\impl\AvalonLogger.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>logging</name>.
            <name>impl</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>avalon</name>.<name>framework</name>.<name>logger</name>.
            <name>Logger</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>logging</name>.
            <name>Log</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Implementation of commons-logging Log interface that delegates all
        * logging calls to the Avalon logging abstraction: the Logger interface.
        * &lt;p&gt;
        * There are two ways in which this class can be used:
        * &lt;ul&gt;
        * &lt;li&gt;the instance can be constructed with an Avalon logger
        * (by calling {@link #AvalonLogger(Logger)}). In this case, it acts
        * as a simple thin wrapping implementation over the logger. This is
        * particularly useful when using a property setter.
        * &lt;/li&gt;
        * &lt;li&gt;the {@link #setDefaultLogger} class property can be called which
        * sets the ancestral Avalon logger for this class. Any &lt;code&gt;AvalonLogger&lt;/code&gt;
        * instances created through the &lt;code&gt;LogFactory&lt;/code&gt; mechanisms will output
        * to child loggers of this &lt;code&gt;Logger&lt;/code&gt;.
        * &lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;p&gt;
        * &lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;AvalonLogger&lt;/code&gt; does not implement Serializable
        * because the constructors available for it make this impossible to achieve in all
        * circumstances; there is no way to "reconnect" to an underlying Logger object on
        * deserialization if one was just passed in to the constructor of the original
        * object. This class &lt;i&gt;was&lt;/i&gt; marked Serializable in the 1.0.4 release of
        * commons-logging, but this never actually worked (a NullPointerException would
        * be thrown as soon as the deserialized object was used), so removing this marker
        * is not considered to be an incompatible change.
        *
        * @version $Id: AvalonLogger.java 1435115 2013-01-18 12:40:19Z tn $
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>AvalonLogger</name>
        <super>
            <implements>implements
                <name>Log</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/** Ancestral Avalon logger. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>volatile</name>
                        <name>Logger</name>
                    </type>
                    <name>defaultLogger</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/** Avalon logger used to perform log. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>transient</name>
                        <name>Logger</name>
                    </type>
                    <name>logger</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructs an &lt;code&gt;AvalonLogger&lt;/code&gt; that outputs to the given
                * &lt;code&gt;Logger&lt;/code&gt; instance.
                *
                * @param logger the Avalon logger implementation to delegate to
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>AvalonLogger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Logger</name>
                            </type>
                            <name>logger</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>logger</name>
                            </name>
                            =
                            <name>logger</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs an &lt;code&gt;AvalonLogger&lt;/code&gt; that will log to a child
                * of the &lt;code&gt;Logger&lt;/code&gt; set by calling {@link #setDefaultLogger}.
                *
                * @param name the name of the avalon logger implementation to delegate to
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>AvalonLogger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>defaultLogger</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"default logger has to be specified if this constructor is
                                                        used!"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>logger</name>
                            </name>
                            =
                            <call>
                                <name><name>defaultLogger</name>.
                                    <name>getChildLogger</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Gets the Avalon logger implementation used to perform logging.
                *
                * @return avalon logger implementation
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Logger</name>
                </type>
                <name>getLogger</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>logger</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the ancestral Avalon logger from which the delegating loggers will descend.
                *
                * @param logger the default avalon logger,
                * in case there is no logger instance supplied in constructor
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>setDefaultLogger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Logger</name>
                            </type>
                            <name>logger</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>defaultLogger</name>
                            =
                            <name>logger</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.debug&lt;/code&gt;.
                *
                * @param message to log
                * @param t log this cause
                * @see org.apache.commons.logging.Log#debug(Object, Throwable)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>debug</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isDebugEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>debug</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>t</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.debug&lt;/code&gt;.
                *
                * @param message to log.
                * @see org.apache.commons.logging.Log#debug(Object)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>debug</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isDebugEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>debug</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.error&lt;/code&gt;.
                *
                * @param message to log
                * @param t log this cause
                * @see org.apache.commons.logging.Log#error(Object, Throwable)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>error</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isErrorEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>error</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>t</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.error&lt;/code&gt;.
                *
                * @param message to log
                * @see org.apache.commons.logging.Log#error(Object)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>error</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isErrorEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>error</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.fatalError&lt;/code&gt;.
                *
                * @param message to log.
                * @param t log this cause.
                * @see org.apache.commons.logging.Log#fatal(Object, Throwable)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>fatal</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isFatalErrorEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>fatalError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>t</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.fatalError&lt;/code&gt;.
                *
                * @param message to log
                * @see org.apache.commons.logging.Log#fatal(Object)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>fatal</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isFatalErrorEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>fatalError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.info&lt;/code&gt;.
                *
                * @param message to log
                * @param t log this cause
                * @see org.apache.commons.logging.Log#info(Object, Throwable)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>info</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isInfoEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>info</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>t</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.info&lt;/code&gt;.
                *
                * @param message to log
                * @see org.apache.commons.logging.Log#info(Object)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>info</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isInfoEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>info</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is logging to &lt;code&gt;org.apache.avalon.framework.logger.Logger.debug&lt;/code&gt; enabled?
                * @see org.apache.commons.logging.Log#isDebugEnabled()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isDebugEnabled</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getLogger</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isDebugEnabled</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is logging to &lt;code&gt;org.apache.avalon.framework.logger.Logger.error&lt;/code&gt; enabled?
                * @see org.apache.commons.logging.Log#isErrorEnabled()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isErrorEnabled</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getLogger</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isErrorEnabled</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is logging to &lt;code&gt;org.apache.avalon.framework.logger.Logger.fatalError&lt;/code&gt; enabled?
                * @see org.apache.commons.logging.Log#isFatalEnabled()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFatalEnabled</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getLogger</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isFatalErrorEnabled</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is logging to &lt;code&gt;org.apache.avalon.framework.logger.Logger.info&lt;/code&gt; enabled?
                * @see org.apache.commons.logging.Log#isInfoEnabled()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isInfoEnabled</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getLogger</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isInfoEnabled</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is logging to &lt;code&gt;org.apache.avalon.framework.logger.Logger.debug&lt;/code&gt; enabled?
                * @see org.apache.commons.logging.Log#isTraceEnabled()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isTraceEnabled</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getLogger</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isDebugEnabled</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Is logging to &lt;code&gt;org.apache.avalon.framework.logger.Logger.warn&lt;/code&gt; enabled?
                * @see org.apache.commons.logging.Log#isWarnEnabled()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isWarnEnabled</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getLogger</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isWarnEnabled</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.debug&lt;/code&gt;.
                *
                * @param message to log.
                * @param t log this cause.
                * @see org.apache.commons.logging.Log#trace(Object, Throwable)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>trace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isDebugEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>debug</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>t</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.debug&lt;/code&gt;.
                *
                * @param message to log
                * @see org.apache.commons.logging.Log#trace(Object)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>trace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isDebugEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>debug</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.warn&lt;/code&gt;.
                *
                * @param message to log
                * @param t log this cause
                * @see org.apache.commons.logging.Log#warn(Object, Throwable)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>warn</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isWarnEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>warn</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>t</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Logs a message with &lt;code&gt;org.apache.avalon.framework.logger.Logger.warn&lt;/code&gt;.
                *
                * @param message to log
                * @see org.apache.commons.logging.Log#warn(Object)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>warn</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getLogger</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>isWarnEnabled</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>getLogger</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>warn</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>message</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
