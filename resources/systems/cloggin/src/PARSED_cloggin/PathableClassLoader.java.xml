<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\cloggin\src\test\java\org\apache\commons\logging\PathableClassLoader.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>logging</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>net</name>.
            <name>URL</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>net</name>.
            <name>URLClassLoader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Enumeration</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A ClassLoader which sees only specified classes, and which can be
        * set to do parent-first or child-first path lookup.
        * &lt;p&gt;
        * Note that this classloader is not "industrial strength"; users
        * looking for such a class may wish to look at the Tomcat sourcecode
        * instead. In particular, this class may not be threadsafe.
        * &lt;p&gt;
        * Note that the ClassLoader.getResources method isn't overloaded here.
        * It would be nice to ensure that when child-first lookup is set the
        * resources from the child are returned earlier in the list than the
        * resources from the parent. However overriding this method isn't possible
        * as the java 1.4 version of ClassLoader declares this method final
        * (though the java 1.5 version has removed the final qualifier). As the
        * ClassLoader javadoc doesn't specify the order in which resources
        * are returned, it's valid to return the resources in any order (just
        * untidy) so the inherited implementation is technically ok.
        */
    </comment>

    <class>
        <specifier>public</specifier>
        class <name>PathableClassLoader</name>
        <super>
            <extends>extends
                <name>URLClassLoader</name>
            </extends>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>URL</name>
                        <index>[]</index>
                    </type>
                    <name>NO_URLS</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>URL</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A map of package-prefix to ClassLoader. Any class which is in
                * this map is looked up via the specified classloader instead of
                * the classpath associated with this classloader or its parents.
                * &lt;p&gt;
                * This is necessary in order for the rest of the world to communicate
                * with classes loaded via a custom classloader. As an example, junit
                * testcases which are loaded via a custom classloader needs to see
                * the same junit classes as the code invoking the testcase, otherwise
                * they can't pass result objects back.
                * &lt;p&gt;
                * Normally, only a classloader created with a null parent needs to
                * have any lookasides defined.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>HashMap</name>
                    </type>
                    <name>lookasides</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * See setParentFirst.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>parentFirst</name> =
                    <init>
                        <expr>true</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructor.
                * &lt;p&gt;
                * Often, null is passed as the parent, ie the parent of the new
                * instance is the bootloader. This ensures that the classpath is
                * totally clean; nothing but the standard java library will be
                * present.
                * &lt;p&gt;
                * When using a null parent classloader with a junit testcase, it *is*
                * necessary for the junit library to also be visible. In this case, it
                * is recommended that the following code be used:
                * &lt;pre&gt;
                * pathableLoader.useExplicitLoader(
                * "junit.",
                * junit.framework.Test.class.getClassLoader());
                * &lt;/pre&gt;
                * Note that this works regardless of whether junit is on the system
                * classpath, or whether it has been loaded by some test framework that
                * creates its own classloader to run unit tests in (eg maven2's
                * Surefire plugin).
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>PathableClassLoader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ClassLoader</name>
                            </type>
                            <name>parent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>NO_URLS</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parent</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Allow caller to explicitly add paths. Generally this not a good idea;
                * use addLogicalLib instead, then define the location for that logical
                * library in the build.xml file.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addURL</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>URL</name>
                            </type>
                            <name>url</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>addURL</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>url</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Specify whether this classloader should ask the parent classloader
                * to resolve a class first, before trying to resolve it via its own
                * classpath.
                * &lt;p&gt;
                * Checking with the parent first is the normal approach for java, but
                * components within containers such as servlet engines can use
                * child-first lookup instead, to allow the components to override libs
                * which are visible in shared classloaders provided by the container.
                * &lt;p&gt;
                * Note that the method getResources always behaves as if parentFirst=true,
                * because of limitations in java 1.4; see the javadoc for method
                * getResourcesInOrder for details.
                * &lt;p&gt;
                * This value defaults to true.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setParentFirst</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>state</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>parentFirst</name>
                            =
                            <name>state</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * For classes with the specified prefix, get them from the system
                * classpath &lt;i&gt;which is active at the point this method is called&lt;/i&gt;.
                * &lt;p&gt;
                * This method is just a shortcut for
                * &lt;pre&gt;
                * useExplicitLoader(prefix, ClassLoader.getSystemClassLoader());
                * &lt;/pre&gt;
                * &lt;p&gt;
                * Of course, this assumes that the classes of interest are already
                * in the classpath of the system classloader.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>useSystemLoader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>useExplicitLoader</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ClassLoader</name>.
                                                    <name>getSystemClassLoader</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Specify a classloader to use for specific java packages.
                * &lt;p&gt;
                * The specified classloader is normally a loader that is NOT
                * an ancestor of this classloader. In particular, this loader
                * may have the bootloader as its parent, but be configured to
                * see specific other classes (eg the junit library loaded
                * via the system classloader).
                * &lt;p&gt;
                * The differences between using this method, and using
                * addLogicalLib are:
                * &lt;ul&gt;
                * &lt;li&gt;If code calls getClassLoader on a class loaded via
                * "lookaside", then traces up its inheritance chain, it
                * will see the "real" classloaders. When the class is remapped
                * into this classloader via addLogicalLib, the classloader
                * chain seen is this object plus ancestors.
                * &lt;li&gt;If two different jars contain classes in the same
                * package, then it is not possible to load both jars into
                * the same "lookaside" classloader (eg the system classloader)
                * then map one of those subsets from here. Of course they could
                * be loaded into two different "lookaside" classloaders and
                * then a prefix used to map from here to one of those classloaders.
                * &lt;/ul&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>useExplicitLoader</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>prefix</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ClassLoader</name>
                            </type>
                            <name>loader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>lookasides</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>lookasides</name>
                                        = new
                                        <call>
                                            <name>HashMap</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>lookasides</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>prefix</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>loader</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Specify a collection of logical libraries. See addLogicalLib.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addLogicalLib</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>logicalLibs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name><name>logicalLibs</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>addLogicalLib</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>logicalLibs</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Specify a logical library to be included in the classpath used to
                * locate classes.
                * &lt;p&gt;
                * The specified lib name is used as a key into the system properties;
                * there is expected to be a system property defined with that name
                * whose value is a url that indicates where that logical library can
                * be found. Typically this is the name of a jar file, or a directory
                * containing class files.
                * &lt;p&gt;
                * If there is no system property, but the classloader that loaded
                * this class is a URLClassLoader then the set of URLs that the
                * classloader uses for its classpath is scanned; any jar in the
                * URL set whose name starts with the specified string is added to
                * the classpath managed by this instance.
                * &lt;p&gt;
                * Using logical library names allows the calling code to specify its
                * desired classpath without knowing the exact location of the necessary
                * classes.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addLogicalLib</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>logicalLib</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// first, check the system properties</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>filename</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>getProperty</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>logicalLib</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>filename</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>URL</name>
                                                </type>
                                                <name>libUrl</name> =
                                                <init>
                                                    <expr>new
                                                        <call>
                                                            <name>File</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>filename</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>toURL</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>addURL</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>libUrl</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return;</return>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name><name>java</name>.<name>net</name>.
                                                        <name>MalformedURLException</name>
                                                    </name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>UnknownError</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Invalid file [" + <name>filename</name> + "] for
                                                                    logical lib [" + <name>logicalLib</name> + "]"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// now check the classpath for a similar-named lib</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>URL</name>
                            </type>
                            <name>libUrl</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>libFromClasspath</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>logicalLib</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>libUrl</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>addURL</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>libUrl</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// lib not found</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnknownError</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Logical lib [" + <name>logicalLib</name> + "] is not defined"
                                            + " as a System property."
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If the classloader that loaded this class has this logical lib in its
                * path, then return the matching URL otherwise return null.
                * &lt;p&gt;
                * This only works when the classloader loading this class is an instance
                * of URLClassLoader and thus has a getURLs method that returns the classpath
                * it uses when loading classes. However in practice, the vast majority of the
                * time this type is the classloader used.
                * &lt;p&gt;
                * The classpath of the classloader for this instance is scanned, and any
                * jarfile in the path whose name starts with the logicalLib string is
                * considered a match. For example, passing "foo" will match a url
                * of &lt;code&gt;file:///some/where/foo-2.7.jar&lt;/code&gt;.
                * &lt;p&gt;
                * When multiple classpath entries match the specified logicalLib string,
                * the one with the shortest filename component is returned. This means that
                * if "foo-1.1.jar" and "foobar-1.1.jar" are in the path, then a logicalLib
                * name of "foo" will match the first entry above.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>URL</name>
                </type>
                <name>libFromClasspath</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>logicalLib</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ClassLoader</name>
                            </type>
                            <name>cl</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.
                                            <name>getClass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getClassLoader</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cl</name>
                                <name>instanceof</name>
                                <name>URLClassLoader</name> == false
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>URLClassLoader</name>
                            </type>
                            <name>ucl</name> =
                            <init>
                                <expr>(<name>URLClassLoader</name>)
                                    <name>cl</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>URL</name>
                                <index>[]</index>
                            </type>
                            <name>path</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ucl</name>.
                                            <name>getURLs</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>URL</name>
                            </type>
                            <name>shortestMatch</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>shortestMatchLen</name> =
                            <init>
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name><name>path</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>i</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>URL</name>
                                    </type>
                                    <name>u</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>path</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <comment type="line">// extract the filename bit on the end of the url</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>filename</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>u</name>.
                                                    <name>toString</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>filename</name>.
                                                <name>endsWith</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>".jar"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// not a jarfile, ignore it</comment>
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>lastSlash</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>filename</name>.
                                                    <name>lastIndexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>'/'</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>lastSlash</name>
                                        &gt;= 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>filename</name>
                                                =
                                                <call>
                                                    <name><name>filename</name>.
                                                        <name>substring</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr><name>lastSlash</name>+1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>filename</name>.
                                                <name>startsWith</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>logicalLib</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// ok, this is a candidate</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>filename</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    &lt;
                                                    <name>shortestMatchLen</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>shortestMatch</name>
                                                            =
                                                            <name>u</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>shortestMatchLen</name>
                                                            =
                                                            <call>
                                                                <name><name>filename</name>.
                                                                    <name>length</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <return>return
                        <expr>
                            <name>shortestMatch</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Override ClassLoader method.
                * &lt;p&gt;
                * For each explicitly mapped package prefix, if the name matches the
                * prefix associated with that entry then attempt to load the class via
                * that entries' classloader.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>Class</name>
                </type>
                <name>loadClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>resolve</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// just for performance, check java and javax</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>name</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"java."</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>name</name>.
                                        <name>startsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"javax."</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>super</name>.
                                                <name>loadClass</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>resolve</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>lookasides</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for(
                                    <init>
                                        <decl>
                                            <type>
                                                <name>Iterator</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>lookasides</name>.
                                                            <name>entrySet</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>iterator</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <call>
                                                <name><name>i</name>.
                                                    <name>hasNext</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr/>)
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name><name>Map</name>.
                                                        <name>Entry</name>
                                                    </name>
                                                </type>
                                                <name>entry</name> =
                                                <init>
                                                    <expr>(
                                                        <name><name>Map</name>.
                                                            <name>Entry</name>
                                                        </name>
                                                        )
                                                        <call>
                                                            <name><name>i</name>.
                                                                <name>next</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>prefix</name> =
                                                <init>
                                                    <expr>(<name>String</name>)
                                                        <call>
                                                            <name><name>entry</name>.
                                                                <name>getKey</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>name</name>.
                                                            <name>startsWith</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>prefix</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    == true
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>ClassLoader</name>
                                                            </type>
                                                            <name>loader</name> =
                                                            <init>
                                                                <expr>(<name>ClassLoader</name>)
                                                                    <call>
                                                                        <name><name>entry</name>.
                                                                            <name>getValue</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>Class</name>
                                                            </type>
                                                            <name>clazz</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>Class</name>.
                                                                            <name>forName</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>name</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>resolve</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>loader</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <return>return
                                                        <expr>
                                                            <name>clazz</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>parentFirst</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>super</name>.
                                                <name>loadClass</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>resolve</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// Implement child-first.</comment>
                                <comment type="line">//</comment>
                                <comment type="line">// It appears that the findClass method doesn't check whether the
                                </comment>
                                <comment type="line">// class has already been loaded. This seems odd to me, but
                                    without
                                </comment>
                                <comment type="line">// first checking via findLoadedClass we can get
                                    java.lang.LinkageError
                                </comment>
                                <comment type="line">// with message "duplicate class definition" which isn't good.
                                </comment>

                                <try>try
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Class</name>
                                                </type>
                                                <name>clazz</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>findLoadedClass</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>name</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>clazz</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>clazz</name>
                                                            =
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>findClass</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>name</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>resolve</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>resolveClass</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>clazz</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <name>clazz</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                    <catch>catch(
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>ClassNotFoundException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>super</name>.
                                                            <name>loadClass</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>name</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>resolve</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Same as parent class method except that when parentFirst is false
                * the resource is looked for in the local classpath before the parent
                * loader is consulted.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>URL</name>
                </type>
                <name>getResource</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>parentFirst</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>super</name>.
                                                <name>getResource</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>URL</name>
                                        </type>
                                        <name>local</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>super</name>.
                                                        <name>findResource</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>name</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>local</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>local</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>super</name>.
                                                <name>getResource</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Emulate a proper implementation of getResources which respects the
                * setting for parentFirst.
                * &lt;p&gt;
                * Note that it's not possible to override the inherited getResources, as
                * it's declared final in java1.4 (thought that's been removed for 1.5).
                * The inherited implementation always behaves as if parentFirst=true.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Enumeration</name>
                </type>
                <name>getResourcesInOrder</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>parentFirst</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>super</name>.
                                                <name>getResources</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Enumeration</name>
                                        </type>
                                        <name>localUrls</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>super</name>.
                                                        <name>findResources</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>name</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ClassLoader</name>
                                        </type>
                                        <name>parent</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>getParent</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>parent</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// Alas, there is no method to get matching resources
                                            </comment>
                                            <comment type="line">// from a null (BOOT) parent classloader. Calling
                                            </comment>
                                            <comment type="line">// ClassLoader.getSystemClassLoader isn't right.
                                                Maybe
                                            </comment>
                                            <comment type="line">// calling Class.class.getResources(name) would do?
                                            </comment>
                                            <comment type="line">//</comment>
                                            <comment type="line">// However for the purposes of unit tests, we can
                                            </comment>
                                            <comment type="line">// simply assume that no relevant resources are
                                            </comment>
                                            <comment type="line">// loadable from the parent; unit tests will never be
                                            </comment>
                                            <comment type="line">// putting any of their resources in a "boot"
                                                classloader
                                            </comment>
                                            <comment type="line">// path!</comment>
                                            <return>return
                                                <expr>
                                                    <name>localUrls</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Enumeration</name>
                                        </type>
                                        <name>parentUrls</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>parent</name>.
                                                        <name>getResources</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>name</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ArrayList</name>
                                        </type>
                                        <name>localItems</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>toList</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>localUrls</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>ArrayList</name>
                                        </type>
                                        <name>parentItems</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>toList</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>parentUrls</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>localItems</name>.
                                                <name>addAll</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>parentItems</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Collections</name>.
                                                <name>enumeration</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>localItems</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                *
                * Clean implementation of list function of
                * {@link java.utils.Collection} added in JDK 1.4
                * @param en &lt;code&gt;Enumeration&lt;/code&gt;, possibly null
                * @return &lt;code&gt;ArrayList&lt;/code&gt; containing the enumerated
                * elements in the enumerated order, not null
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>ArrayList</name>
                </type>
                <name>toList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Enumeration</name>
                            </type>
                            <name>en</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ArrayList</name>
                            </type>
                            <name>results</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArrayList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>en</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <while>while
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>en</name>.
                                                    <name>hasMoreElements</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>Object</name>
                                                </type>
                                                <name>element</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>en</name>.
                                                                <name>nextElement</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>results</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>element</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>results</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Same as parent class method except that when parentFirst is false
                * the resource is looked for in the local classpath before the parent
                * loader is consulted.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>InputStream</name>
                </type>
                <name>getResourceAsStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>parentFirst</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>super</name>.
                                                <name>getResourceAsStream</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>URL</name>
                                        </type>
                                        <name>local</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>super</name>.
                                                        <name>findResource</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>name</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>local</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <try>try
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name><name>local</name>.
                                                                    <name>openStream</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                                <catch>catch(
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>IOException</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// TODO: check if this is right or whether
                                                            we should
                                                        </comment>
                                                        <comment type="line">// fall back to trying parent. The javadoc
                                                            doesn't say...
                                                        </comment>
                                                        <return>return
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>super</name>.
                                                <name>getResourceAsStream</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>name</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
