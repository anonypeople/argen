<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clogging\src\test\java\org\apache\commons\logging\PathableTestSuite.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.
            <name>logging</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Properties</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>junit</name>.<name>framework</name>.
            <name>Test</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>junit</name>.<name>framework</name>.
            <name>TestResult</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>junit</name>.<name>framework</name>.
            <name>TestSuite</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Custom TestSuite class that can be used to control the context classloader
        * in operation when a test runs.
        * &lt;p&gt;
        * For tests that need to control exactly what the classloader hierarchy is
        * like when the test is run, something like the following is recommended:
        * &lt;pre&gt;
        * class SomeTestCase extends TestCase {
        * public static Test suite() throws Exception {
        * PathableClassLoader parent = new PathableClassLoader(null);
        * parent.useSystemLoader("junit.");
        *
        * PathableClassLoader child = new PathableClassLoader(parent);
        * child.addLogicalLib("testclasses");
        * child.addLogicalLib("log4j12");
        * child.addLogicalLib("commons-logging");
        *
        * Class testClass = child.loadClass(SomeTestCase.class.getName());
        * ClassLoader contextClassLoader = child;
        *
        * PathableTestSuite suite = new PathableTestSuite(testClass, child);
        * return suite;
        * }
        *
        * // test methods go here
        * }
        * &lt;/pre&gt;
        * Note that if the suite method throws an exception then this will be handled
        * reasonable gracefully by junit; it will report that the suite method for
        * a test case failed with exception yyy.
        * &lt;p&gt;
        * The use of PathableClassLoader is not required to use this class, but it
        * is expected that using the two classes together is common practice.
        * &lt;p&gt;
        * This class will run each test methods within the specified TestCase using
        * the specified context classloader and system classloader. If different
        * tests within the same class require different context classloaders,
        * then the context classloader passed to the constructor should be the
        * "lowest" one available, and tests that need the context set to some parent
        * of this "lowest" classloader can call
        * &lt;pre&gt;
        * // NB: pseudo-code only
        * setContextClassLoader(getContextClassLoader().getParent());
        * &lt;/pre&gt;
        * This class ensures that any context classloader changes applied by a test
        * is undone after the test is run, so tests don't need to worry about
        * restoring the context classloader on exit. This class also ensures that
        * the system properties are restored to their original settings after each
        * test, so tests that manipulate those don't need to worry about resetting them.
        * &lt;p&gt;
        * This class does not provide facilities for manipulating system properties;
        * tests that need specific system properties can simply set them in the
        * fixture or at the start of a test method.
        * &lt;p&gt;
        * &lt;b&gt;Important!&lt;/b&gt; When the test case is run, "this.getClass()" refers of
        * course to the Class object passed to the constructor of this class - which
        * is different from the class whose suite() method was executed to determine
        * the classpath. This means that the suite method cannot communicate with
        * the test cases simply by setting static variables (for example to make the
        * custom classloaders available to the test methods or setUp/tearDown fixtures).
        * If this is really necessary then it is possible to use reflection to invoke
        * static methods on the class object passed to the constructor of this class.
        * &lt;p&gt;
        * &lt;h2&gt;Limitations&lt;/h2&gt;
        * &lt;p&gt;
        * This class cannot control the system classloader (ie what method
        * ClassLoader.getSystemClassLoader returns) because Java provides no
        * mechanism for setting the system classloader. In this case, the only
        * option is to invoke the unit test in a separate JVM with the appropriate
        * settings.
        * &lt;p&gt;
        * The effect of using this approach in a system that uses junit's
        * "reloading classloader" behaviour is unknown. This junit feature is
        * intended for junit GUI apps where a test may be run multiple times
        * within the same JVM - and in particular, when the .class file may
        * be modified between runs of the test. How junit achieves this is
        * actually rather weird (the whole junit code is rather weird in fact)
        * and it is not clear whether this approach will work as expected in
        * such situations.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>PathableTestSuite</name>
        <super>
            <extends>extends
                <name>TestSuite</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * The classloader that should be set as the context classloader
                * before each test in the suite is run.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>ClassLoader</name>
                    </type>
                    <name>contextLoader</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructor.
                *
                * @param testClass is the TestCase that is to be run, as loaded by
                * the appropriate ClassLoader.
                *
                * @param contextClassLoader is the loader that should be returned by
                * calls to Thread.currentThread.getContextClassLoader from test methods
                * (or any method called by test methods).
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>PathableTestSuite</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>testClass</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ClassLoader</name>
                            </type>
                            <name>contextClassLoader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>testClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>contextLoader</name>
                            =
                            <name>contextClassLoader</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * This method is invoked once for each Test in the current TestSuite.
                * Note that a Test may itself be a TestSuite object (ie a collection
                * of tests).
                * &lt;p&gt;
                * The context classloader and system properties are saved before each
                * test, and restored after the test completes to better isolate tests.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>runTest</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Test</name>
                            </type>
                            <name>test</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TestResult</name>
                            </type>
                            <name>result</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ClassLoader</name>
                            </type>
                            <name>origContext</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Thread</name>.
                                            <name>currentThread</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getContextClassLoader</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Properties</name>
                            </type>
                            <name>oldSysProps</name> =
                            <init>
                                <expr>(<name>Properties</name>)
                                    <call>
                                        <name><name>System</name>.
                                            <name>getProperties</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>clone</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>Thread</name>.
                                            <name>currentThread</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>setContextClassLoader</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>contextLoader</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>test</name>.
                                            <name>run</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>result</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>System</name>.
                                                <name>setProperties</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>oldSysProps</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>Thread</name>.
                                                <name>currentThread</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>setContextClassLoader</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>origContext</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
