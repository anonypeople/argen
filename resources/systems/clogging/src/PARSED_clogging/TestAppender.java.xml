<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\clogging\src\test\java\org\apache\commons\logging\log4j\log4j12\TestAppender.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>logging</name>.<name>log4j</name>.
            <name>log4j12</name>
        </name>
        ;
    </package>


    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>logging</name>.<name>log4j</name>.
            <name>StandardTests</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>log4j</name>.
            <name>AppenderSkeleton</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>log4j</name>.<name>spi</name>.
            <name>LoggingEvent</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A custom implementation of &lt;code&gt;org.apache.log4j.Appender&lt;/code&gt; which
        * converts the log4j-specific log event record into a representation that
        * doesn't have a dependency on log4j and stores that new representation into
        * an external list.
        */
    </comment>

    <class>
        <specifier>public</specifier>
        class <name>TestAppender</name>
        <super>
            <extends>extends
                <name>AppenderSkeleton</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Constructor.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>TestAppender</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>List</name>
                            </type>
                            <name>logEvents</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>events</name>
                            =
                            <name>logEvents</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// ----------------------------------------------------- Instance Variables</comment>


            <comment type="line">// The set of logged events for this appender</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>List</name>
                    </type>
                    <name>events</name>
                </decl>
                ;
            </decl_stmt>


            <comment type="line">// ------------------------------------------------------- Appender Methods</comment>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>LoggingEvent</name>
                            </type>
                            <name>event</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>StandardTests</name>.
                                    <name>LogEvent</name>
                                </name>
                            </type>
                            <name>lev</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name><name>StandardTests</name>.
                                            <name>LogEvent</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name><name>lev</name>.
                                <name>level</name>
                            </name>
                            =
                            <call>
                                <name><name>event</name>.
                                    <name>getLevel</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>event</name>.
                                        <name>getMessage</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>lev</name>.
                                            <name>msg</name>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>lev</name>.
                                            <name>msg</name>
                                        </name>
                                        =
                                        <call>
                                            <name><name>event</name>.
                                                <name>getMessage</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>toString</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>event</name>.
                                        <name>getThrowableInformation</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>lev</name>.
                                            <name>throwable</name>
                                        </name>
                                        =
                                        <name>null</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>lev</name>.
                                            <name>throwable</name>
                                        </name>
                                        =
                                        <call>
                                            <name><name>event</name>.
                                                <name>getThrowableInformation</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>getThrowable</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>events</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lev</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>close</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </function>


            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>requiresLayout</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>


            }
        </block>
    </class>
</unit>
