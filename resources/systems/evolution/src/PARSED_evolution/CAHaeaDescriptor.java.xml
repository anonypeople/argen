<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\thesisCode\git\biorimp\BIO-RIMP\test_data\code\evolution\src\unalcol\evolution\haea\CAHaeaDescriptor.java">
    <package>package
        <name><name>unalcol</name>.<name>evolution</name>.
            <name>haea</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * &lt;p&gt;Title: CAHaeaDescriptors&lt;/p&gt;
        * &lt;p&gt;Description: Descriptors for the CAHAEA Algorithm.&lt;/p&gt;
        * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
        * @author Jonatan Gomez
        * @version 1.0
        *
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CAHaeaDescriptor</name>
        <super>
            <extends>extends
                <name>HaeaStrategyDescriptor</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Returns the Class that owns the PlugIn
                * @return Class The PlugIns owner class
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>owner</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>CAHaeaStrategy</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            class
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a CAHAEA statistics using the information from the population
                * and the operators rate information
                * @param tr CAHAEA Strategy object to be described
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>descriptors</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>HaeaStrategy</name>
                            </type>
                            <name>tr</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>CAHaeaStrategy</name>
                            </type>
                            <name>st</name> =
                            <init>
                                <expr>(<name>CAHaeaStrategy</name>)
                                    <name>tr</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>d</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>descriptors</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>st</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>s</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>st</name>.
                                    <name>ca</name>
                                </name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>s</name>
                                        =
                                        <call>
                                            <name><name>st</name>.<name>ca</name>.
                                                <name>aliveCells</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>s</name>
                                        = 200
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>nd</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[
                                            <expr>
                                                <name><name>d</name>.
                                                    <name>length</name>
                                                </name>
                                                +1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>nd</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <name>s</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name><name>d</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>nd</name>
                                        <index>[
                                            <expr><name>i</name>+1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>d</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>nd</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
