<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\thesisCode\git\biorimp\BIO-RIMP\test_data\code\evolution\src\unalcol\ca\CambrianExtinctionCA.java">
    <package>package
        <name><name>unalcol</name>.
            <name>ca</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * &lt;p&gt;Title: CambrianExtictionCA&lt;/p&gt;
        * &lt;p&gt;Description: The Cambrian Extintion Cellular Automata as
        * proposed by Cantor and Gomez in , Proceedings of WCCI 2010.&lt;/p&gt;
        * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
        * @author Jonatan Gomez
        * @version 1.0
        *
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CambrianExtinctionCA</name>
        <super>
            <extends>extends
                <name>CellularAutomata</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Creates a Conway's game of life (toroidal) with cambriam and massive extinctions
                * @param n Number of rows
                * @param m Number of columns
                * @param aliveProb Probability of being alive in the initial state of the CA
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>CambrianExtinctionCA</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>m</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>aliveProb</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>m</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>aliveProb</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * generates a cambrian explosion
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>cambrian</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>random</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    *
                                                    <name><name>state</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>random</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    *
                                                    <name>
                                                        <name>state</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    .
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>cambrian</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>j</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Generates a cambrian explosion around the given cell
                * @param i Cell's row
                * @param j Cell's column
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>cambrian</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>extinction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>j</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <name><name>state</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>m</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>state</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                    .
                                    <name>length</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>
                                <name>state</name>
                                <index>[
                                    <expr>(<name>i</name>-1+<name>n</name>)%
                                        <name>n</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>(<name>j</name>-1+<name>m</name>)%
                                        <name>m</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>state</name>
                                <index>[
                                    <expr>(<name>i</name>-1+<name>n</name>)%
                                        <name>n</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>
                                        <name>j</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>state</name>
                                <index>[
                                    <expr>(<name>i</name>-1+<name>n</name>)%
                                        <name>n</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>(<name>j</name>+1+<name>m</name>)%
                                        <name>m</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>
                                <name>state</name>
                                <index>[
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>(<name>j</name>-1+<name>m</name>)%
                                        <name>m</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>state</name>
                                <index>[
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>
                                        <name>j</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>state</name>
                                <index>[
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>(<name>j</name>+1+<name>m</name>)%
                                        <name>m</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>
                                <name>state</name>
                                <index>[
                                    <expr>(<name>i</name>+1+<name>n</name>)%
                                        <name>n</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>(<name>j</name>-1+<name>m</name>)%
                                        <name>m</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>state</name>
                                <index>[
                                    <expr>(<name>i</name>+1+<name>n</name>)%
                                        <name>n</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>
                                        <name>j</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>state</name>
                                <index>[
                                    <expr>(<name>i</name>+1+<name>n</name>)%
                                        <name>n</name>
                                    </expr>
                                    ]
                                </index>
                                <index>[
                                    <expr>(<name>j</name>+1+<name>m</name>)%
                                        <name>m</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Generates a massive extinction
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>extinction</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>random</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    *
                                                    <name><name>state</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name> =
                            <init>
                                <expr>
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>random</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    *
                                                    <name>
                                                        <name>state</name>
                                                        <index>[
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    .
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>extinction</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>j</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Generates a massive extinction around the given cell
                * @param i Cell's row
                * @param j Cell's column
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>extinction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>j</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <name><name>state</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>m</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>state</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                    .
                                    <name>length</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>k</name>=
                                <init>
                                    <expr>-2</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>k</name>&lt;3
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>k</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>row</name> =
                                    <init>
                                        <expr>(<name>i</name>+<name>k</name>+<name>n</name>)%
                                            <name>n</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for(
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>l</name>=
                                        <init>
                                            <expr>-2</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr><name>l</name>&lt;3
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>l</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>column</name> =
                                            <init>
                                                <expr>(<name>j</name>+<name>k</name>+<name>m</name>)%
                                                    <name>m</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>state</name>
                                                <index>[
                                                    <expr>
                                                        <name>row</name>
                                                    </expr>
                                                    ]
                                                </index>
                                                <index>[
                                                    <expr>
                                                        <name>column</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            = false
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Simulates the ca with cambrian explosions and massive extinctions una step in a synchronous mode
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>simulate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>s</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>aliveCells</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Math</name>.
                                        <name>random</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt; (<name>double</name>)<name>s</name>/
                                <call>(<name>double</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>state</name>.
                                                    <name>length</name>
                                                </name>
                                                *
                                                <name>
                                                    <name>state</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                .
                                                <name>length</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>extinction</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Math</name>.
                                        <name>random</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt; (<name>double</name>)<name>s</name>/
                                <call>(<name>double</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>state</name>.
                                                    <name>length</name>
                                                </name>
                                                *
                                                <name>
                                                    <name>state</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                                .
                                                <name>length</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>cambrian</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>simulate</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
