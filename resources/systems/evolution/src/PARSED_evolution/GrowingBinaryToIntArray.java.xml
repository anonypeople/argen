<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\thesisCode\git\biorimp\BIO-RIMP\test_data\code\evolution\src\unalcol\evolution\genotype\binary\util\GrowingBinaryToIntArray.java">
    <package>package
        <name><name>unalcol</name>.<name>evolution</name>.<name>genotype</name>.<name>binary</name>.
            <name>util</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>unalcol</name>.<name>evolution</name>.
            <name>GrowingFunction</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.
            <name>bitarray</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Title:GrowingBinaryToIntArray&lt;/p&gt;
        * &lt;p&gt;Description: Growing function that creates an array of integers from a bit array&lt;/p&gt;
        * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
        * @author Jonatan Gomez
        * @version 1.0
        */
    </comment>

    <class>
        <specifier>public</specifier>
        class <name>GrowingBinaryToIntArray</name>
        <super>
            <extends>extends
                <name>
                    <name>GrowingFunction</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>int</name>
                                <index>[]</index>
                            </name>
                        </argument>
                        ,
                        <argument>
                            <name>BitArray</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * If grayCode is used
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>grayCode</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * int size
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>int_size</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructor: Creates an individual with a random genome
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>GrowingBinaryToIntArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>_int_size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>_grayCode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>grayCode</name>
                            =
                            <name>_grayCode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>int_size</name>
                            =
                            <name>_int_size</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructor: Creates an individual with a random genome
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>GrowingBinaryToIntArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>_int_size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>grayCode</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>int_size</name>
                            =
                            <name>_int_size</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Generates a thing from the given genome
                * @param genome Genome of the thing to be expressed
                * @return A thing expressed from the genome
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                    <index>[]</index>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BitArray</name>
                            </type>
                            <name>genome</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>BitArrayConverter</name>.
                                    <name>getIntArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>genome</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>int_size</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>grayCode</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Generates a genome from the given thing
                * @param thing A thing expressed from the genome
                * @return Genome of the thing
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>BitArray</name>
                </type>
                <name>set</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>thing</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BitArray</name>
                            </type>
                            <name>A</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>BitArray</name>
                                        <argument_list>(
                                            <argument>
                                                <expr><name>int_size</name>*
                                                    <name><name>thing</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>BitArrayConverter</name>.
                                    <name>setIntArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>A</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>thing</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>int_size</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>grayCode</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>A</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>min</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>int_size</name>
                                == 32
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>Integer</name>.
                                            <name>MIN_VALUE</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>max</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>int_size</name>
                                &gt;= 31
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>Integer</name>.
                                            <name>MAX_VALUE</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>(1 &lt;&lt; <name>int_size</name>) - 1
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>main</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>String</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;=32
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>GrowingBinaryToIntArray</name>
                                    </type>
                                    <name>grow</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>GrowingBinaryToIntArray</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.<name>out</name>.
                                            <name>println</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                    + ","+
                                                    <call>
                                                        <name><name>grow</name>.
                                                            <name>min</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    + "," +
                                                    <call>
                                                        <name><name>grow</name>.
                                                            <name>max</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
