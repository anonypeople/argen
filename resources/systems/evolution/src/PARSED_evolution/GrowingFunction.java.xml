<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\thesisCode\git\biorimp\BIO-RIMP\test_data\code\evolution\src\unalcol\evolution\GrowingFunction.java">
    <package>package
        <name><name>unalcol</name>.
            <name>evolution</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.
            <name>Operator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.
            <name>Solution</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.
            <name>vector</name>
        </name>
        .*;
    </import>

    <import>import
        <name><name>unalcol</name>.<name>reflect</name>.
            <name>service</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Title: GrowingFunction&lt;/p&gt;
        * &lt;p&gt;Description: An individual coding/encoding function&lt;/p&gt;
        * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
        * @author Jonatan Gomez
        * @version 1.0
        */
    </comment>

    <class>
        <specifier>public</specifier>
        class
        <name>
            <name>GrowingFunction</name>
            <argument_list>&lt;
                <argument>
                    <name>G</name>
                </argument>
                ,
                <argument>
                    <name>P</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>Service</name>
            </implements>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Default constructor
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>GrowingFunction</name>
                <parameter_list>()</parameter_list>
                <block>{ }</block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>owner</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>Object</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            class
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Generates a thing from the given genome
                * @param genome Genome of the thing to be expressed
                * @return A thing expressed from the genome
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>P</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>G</name>
                            </type>
                            <name>genome</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>P</name>)
                            <name>genome</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Generates a genome from the given thing
                * @param thing A thing expressed from the genome
                * @return Genome of the thing
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>G</name>
                </type>
                <name>set</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>P</name>
                            </type>
                            <name>thing</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>G</name>)
                            <name>thing</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Generates a population of individuals from the given collection of genomes
                * @param genomes Genomes used for building the population of individuals
                * @return Population of individuals built upon the given genomes
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Vector</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Solution</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>P</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>build</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Vector</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>G</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>genomes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>G</name>
                            </type>
                            <name>genome</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Vector</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Solution</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>P</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>v</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>genomes</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name>n</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>genome</name>
                                    =
                                    <call>
                                        <name><name>genomes</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>P</name>
                                    </type>
                                    <name>thing</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>get</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>genome</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>thing</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>v</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>new
                                                                <call>
                                                                    <name>Individual</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>genome</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>thing</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>v</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>new
                                                                <call>
                                                                    <name>Individual</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>genome</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>this</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>v</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Obtains the first &lt;i&gt;n&lt;/i&gt; candidate solutions genomes of the population
                * @param n Number of candidate solutions genomes to obtain
                * @param population Population used for obtaining the first &lt;i&gt;n&lt;/i&gt; genomes
                * @return The first &lt;i&gt;n&lt;/i&gt; candidate solutions genomes of the population
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Vector</name>
                        <argument_list>&lt;
                            <argument>
                                <name>G</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>genomes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Vector</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Solution</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>P</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>population</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Vector</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>G</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>genomes</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Vector</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for(
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name>=
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr><name>i</name>&lt;
                                <name>n</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>genomes</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>((
                                                    <name>
                                                        <name>Individual</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>G</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>P</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    )
                                                    <call>
                                                        <name><name>population</name>.
                                                            <name>get</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ).
                                                    <call>
                                                        <name>genome</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>genomes</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Applies the genetic operator over the first &lt;i&gt;n&lt;/i&gt; candidate solutions genomes
                * of a given population. Here, &lt;i&gt;n&lt;/i&gt; is the number of genomes required by
                * the genetic operator
                * @param operator Genetic Operator to be applied on the first &lt;i&gt;n&lt;/i&gt; candidate
                * solutions genomes of a given population. Here, &lt;i&gt;n&lt;/i&gt; is the number of
                * genomes required by the genetic operator
                * @param population Source population
                * @return A collection of candidate solutions generated by the genetic operator
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Vector</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Solution</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>P</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>apply</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Operator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>G</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>operator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Vector</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Solution</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>P</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>population</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>build</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>operator</name>.
                                                    <name>apply</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>genomes</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>operator</name>.
                                                                                    <name>getArity</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>population</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
