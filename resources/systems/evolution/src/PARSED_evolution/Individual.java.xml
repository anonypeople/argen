<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\thesisCode\git\biorimp\BIO-RIMP\test_data\code\evolution\src\unalcol\evolution\Individual.java">
    <package>package
        <name><name>unalcol</name>.
            <name>evolution</name>
        </name>
        ;
    </package>
    <import>import
        <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.
            <name>Solution</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.
            <name>optimization</name>
        </name>
        .*;
    </import>
    <import>import
        <name><name>unalcol</name>.
            <name>clone</name>
        </name>
        .*;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Title: Individual&lt;/p&gt;
        * &lt;p&gt;Description: A candidate solution obtained by an evolutionary algorithm.
        * It is compossed by two main elements: Genotype and phenotype&lt;/p&gt;
        * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
        * @author Jonatan Gomez
        * @version 1.0
        */
    </comment>

    <class>
        <specifier>public</specifier>
        class
        <name>
            <name>Individual</name>
            <argument_list>&lt;
                <argument>
                    <name>G</name>
                </argument>
                ,
                <argument>
                    <name>P</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>Solution</name>
                    <argument_list>&lt;
                        <argument>
                            <name>P</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>Cloneable</name>
            </implements>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Chromosome of the individual
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>G</name>
                    </type>
                    <name>genome</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Thing represented by the individual
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>P</name>
                    </type>
                    <name>thing</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Growing function used by the individual (used for mutable individuals)
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>
                            <name>GrowingFunction</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>G</name>
                                </argument>
                                ,
                                <argument>
                                    <name>P</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>grow</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructor: Creates an individual
                * @param genome The genome of the individual
                * @param thing The thing represented by the individual
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>Individual</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>G</name>
                            </type>
                            <name>genome</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>P</name>
                            </type>
                            <name>thing</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>genome</name>
                            </name>
                            =
                            <name>genome</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>thing</name>
                            </name>
                            =
                            <name>thing</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructor: Creates an individual
                * @param genome The genome of the individual
                * @param grow Growing function used by the individual (used for mutable individuals)
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>Individual</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>G</name>
                            </type>
                            <name>genome</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>GrowingFunction</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>G</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>P</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>grow</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>genome</name>
                            </name>
                            =
                            <name>genome</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>grow</name>
                            </name>
                            =
                            <name>grow</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Determines if the genome can represent different phenotypes if the problem allows
                * mutable individuals
                * @return &lt;i&gt;true&lt;/i&gt; if the genome represents different phenotypes (mutable individuals).
                * &lt;i&gt;false&lt;/i&gt; otherwise.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>mutable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>grow</name> != <name>null</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Constructor: Creates a clone from the given Individual
                * @param source Individual to be cloned
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>Individual</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Individual</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>G</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>P</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>source</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>value</name>
                                    </name>
                                    =
                                    <name><name>source</name>.
                                        <name>value</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>genome</name>
                                    = (<name>G</name>)
                                    <call>
                                        <name><name>Clone</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>source</name>.
                                                        <name>genome</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>source</name>.
                                                <name>mutable</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>grow</name>
                                                =
                                                <name><name>source</name>.
                                                    <name>grow</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>thing</name>
                                                = (<name>P</name>)
                                                <call>
                                                    <name><name>Clone</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>source</name>.
                                                                    <name>thing</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                        <catch>catch(
                            <param>
                                <decl>
                                    <type>
                                        <name>Exception</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>e</name>.
                                                <name>printStackTrace</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Creates a clone
                * @return a clone of the individual
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>clone</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Individual</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the thing represented by the individual
                * @return Thing represented by the individual
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>P</name>
                </type>
                <name>get</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>mutable</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>grow</name>.
                                                <name>get</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>genome</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <name>thing</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the genome of the individual
                * @return Individual's genome
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>G</name>
                </type>
                <name>genome</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>genome</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Return an individual converted in a string
                * @return A String
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>thing</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>thing</name>
                                            <name>instanceof</name>
                                            <name>
                                                <name>double</name>
                                                <index>[]</index>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>double</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>x</name> =
                                                    <init>
                                                        <expr>(
                                                            <name>
                                                                <name>double</name>
                                                                <index>[]</index>
                                                            </name>
                                                            )
                                                            <name>thing</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>StringBuffer</name>
                                                    </type>
                                                    <name>sb</name> =
                                                    <init>
                                                        <expr>new
                                                            <call>
                                                                <name>StringBuffer</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>sb</name>.
                                                            <name>append</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"["</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <for>for(
                                                <init>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>i</name>=
                                                        <init>
                                                            <expr>0</expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </init>
                                                <condition>
                                                    <expr><name>i</name>&lt;
                                                        <name><name>x</name>.
                                                            <name>length</name>
                                                        </name>
                                                        -1
                                                    </expr>
                                                    ;
                                                </condition>
                                                <incr>
                                                    <expr><name>i</name>++
                                                    </expr>
                                                </incr>
                                                )
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>sb</name>.
                                                                    <name>append</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>x</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                            +","
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </for>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>x</name>.
                                                            <name>length</name>
                                                        </name>
                                                        &gt; 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>sb</name>.
                                                                        <name>append</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>
                                                                                    <name>x</name>
                                                                                    <index>[
                                                                                        <expr>
                                                                                            <name><name>x</name>.
                                                                                                <name>length</name>
                                                                                            </name>
                                                                                            -1
                                                                                        </expr>
                                                                                        ]
                                                                                    </index>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>sb</name>.
                                                            <name>append</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"]"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>sb</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>thing</name>.
                                                            <name>toString</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>genome</name>.
                                                <name>toString</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Determines if the genotype represents a valid individual
                * @return true if the genotype represents a valid individual, false in other case
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isFeasible</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
