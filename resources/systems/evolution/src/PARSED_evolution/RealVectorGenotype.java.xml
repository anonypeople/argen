<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\thesisCode\git\biorimp\BIO-RIMP\test_data\code\evolution\src\unalcol\evolution\genotype\real\RealVectorGenotype.java">
    <package>package
        <name><name>unalcol</name>.<name>evolution</name>.<name>genotype</name>.
            <name>real</name>
        </name>
        ;
    </package>
    <import>import
        <name><name>unalcol</name>.<name>evolution</name>.
            <name>Genotype</name>
        </name>
        ;
    </import>
    <comment type="line">//import unalcol.math.realvector.RandomVector;</comment>
    <import>import
        <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name>.
            <name>DoubleArrayInit</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;Title: RealVectorGenotype&lt;/p&gt;
        * &lt;p&gt;Description: Real vector encoding&lt;/p&gt;
        * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
        * @author Jonatan Gomez
        * @version 1.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>RealVectorGenotype</name>
        <super>
            <extends>extends
                <name>
                    <name>Genotype</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>double</name>
                                <index>[]</index>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>n</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a RealVectorGenotype With the given RealVectorLimits
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>RealVectorGenotype</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Creates a RealVectorGenotype With the given RealVectorLimits
                * @param n Dimension of the real vector
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>RealVectorGenotype</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>n</name>
                            </name>
                            =
                            <name>n</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Creates a new genome of the given genotype
                * @return Object The new genome
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>get</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>DoubleArrayInit</name>.
                                    <name>random</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the number of genes in the individual's genome
                * @return Number of genes in the individual's genome
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>genome</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>genome</name>.
                                <name>length</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>owner</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>
                                <name>double</name>
                                <index>[]</index>
                            </name>
                            .class
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
