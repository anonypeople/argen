<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\evolutionaryagent\src\evolutionaryagent\evolution\agent\teseo\interpreter\BitArrayTeseoInterpreterManager.java">
    <comment type="block">/*
        * To change this license header, choose License Headers in Project Properties.
        * To change this template file, choose Tools | Templates
        * and open the template in the editor.
        */
    </comment>
    <package>package
        <name><name>evolutionaryagent</name>.<name>evolution</name>.<name>agent</name>.<name>teseo</name>.
            <name>interpreter</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>evolutionaryagent</name>.<name>evolution</name>.<name>agent</name>.<name>teseo</name>.
            <name>TeseoMemory</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>evolutionaryagent</name>.<name>types</name>.<name>interpreter</name>.
            <name>InterpreterManager</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>evolutionaryagent</name>.<name>types</name>.<name>statement</name>.
            <name>Action</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>evolutionaryagent</name>.<name>types</name>.<name>statement</name>.
            <name>Statement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.<name>agents</name>.
            <name>Percept</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name>.
            <name>BitArray</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.
            <name>Vector</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        *
        * @author Camilo Alaguna
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>BitArrayTeseoInterpreterManager</name>
        <super>
            <extends>extends
                <name>
                    <name>InterpreterManager</name>
                    <argument_list>&lt;
                        <argument>
                            <name>BitArray</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>TeseoMemory</name>
                    </type>
                    <name>memory</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>public</specifier>
                <name>BitArrayTeseoInterpreterManager</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BitArrayTeseoInterpreter</name>
                            </type>
                            <name>interpreter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>interpreter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setMemory</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>TeseoMemory</name>
                            </type>
                            <name>memory</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>memory</name>
                            </name>
                            =
                            <name>memory</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>((<name>BitArrayTeseoInterpreter</name>)
                            <name><name>this</name>.
                                <name>interpreter</name>
                            </name>
                            ).
                            <call>
                                <name>setMemory</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>memory</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getNextInstruction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Percept</name>
                            </type>
                            <name>prcpt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <while>while
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isThereAction</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <if>if
                            <condition>(
                                <expr>
                                    <call>
                                        <name><name>statements</name>.
                                            <name>isEmpty</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    &amp;&amp; !
                                    <call>
                                        <name><name>interpreter</name>.
                                            <name>areStatements</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                )
                            </condition>
                            <then>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>statements</name>.
                                                <name>push</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>Action</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>((<name>BitArrayTeseoInterpreter</name>)<name>
                                                                        interpreter</name>).
                                                                        <call>
                                                                            <name>getDieAction</name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                            </then>
                            <else>else
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>manageStatements</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>prcpt</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                            </else>
                        </if>
                    </while>
                    <return>return
                        <expr>((<name>Action</name>)
                            <call>
                                <name><name>statements</name>.
                                    <name>pop</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ).
                            <call>
                                <name>getInstruction</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isThereAction</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <call>
                                <name><name>statements</name>.
                                    <name>isEmpty</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>statements</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getType</name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <name><name>Action</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            class
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>manageStatements</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Percept</name>
                            </type>
                            <name>prcpt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>type</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>interpreter</name>.
                                            <name>getNextStatementType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>interpreter</name>.
                                    <name>moveToNextStatement</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>manageCase</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>prcpt</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>manageCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Percept</name>
                            </type>
                            <name>prcpt</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>computeStatement</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>prcpt</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>statements</name>.
                                                <name>isEmpty</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>closeStatementSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>prcpt</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>computeStatement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Percept</name>
                            </type>
                            <name>prcpt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Vector</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Statement</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>stms</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>interpreter</name>.
                                            <name>compute</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>prcpt</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>addStatements</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>stms</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>closeStatementSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Percept</name>
                            </type>
                            <name>prcpt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Vector</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Statement</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>inputs</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>Vector</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Statement</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>inputs</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>statements</name>.
                                                    <name>pop</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Vector</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Statement</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>stms</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>interpreter</name>.
                                            <name>compute</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>prcpt</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>inputs</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>addStatements</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>stms</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>addStatements</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Vector</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Statement</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>stms</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IndexOutOfBoundsException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>stms</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <for>for(
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <call>
                                            <name><name>stms</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>++
                                        <name>i</name>
                                    </expr>
                                </incr>
                                )
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>this</name>.<name>statements</name>.
                                                <name>push</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>stms</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                            </for>
                        </then>
                    </if>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
