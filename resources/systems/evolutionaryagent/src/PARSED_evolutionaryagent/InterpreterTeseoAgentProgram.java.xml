<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\evolutionaryagent\src\evolutionaryagent\evolution\agent\teseo\InterpreterTeseoAgentProgram.java">
    <comment type="block">/*
        * To change this license header, choose License Headers in Project Properties.
        * To change this template file, choose Tools | Templates
        * and open the template in the editor.
        */
    </comment>
    <package>package
        <name><name>evolutionaryagent</name>.<name>evolution</name>.<name>agent</name>.
            <name>teseo</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>evolutionaryagent</name>.<name>evolution</name>.<name>agent</name>.
            <name>EvolutionaryAgentProgram</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>evolutionaryagent</name>.<name>evolution</name>.<name>agent</name>.<name>teseo</name>.<name>
            interpreter</name>.
            <name>BitArrayTeseoInterpreter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>evolutionaryagent</name>.<name>evolution</name>.<name>agent</name>.<name>teseo</name>.<name>
            interpreter</name>.
            <name>BitArrayTeseoInterpreterManager</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.<name>agents</name>.
            <name>Action</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.<name>agents</name>.
            <name>Percept</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.<name>agents</name>.<name>simulate</name>.<name>util</name>.
            <name>SimpleLanguage</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name>.
            <name>BitArray</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        *
        * @author Camilo Alaguna
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>InterpreterTeseoAgentProgram</name>
        <super>
            <extends>extends
                <name>EvolutionaryAgentProgram</name>
            </extends>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>TeseoMemory</name>
                    </type>
                    <name>memory</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>BitArrayTeseoInterpreterManager</name>
                    </type>
                    <name>manager</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                    </type>
                    <name>actionsCount</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>double</name>
                    </type>
                    <name>discoverFitness</name> =
                    <init>
                        <expr>0.0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>FRONT</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>EXIT</name> =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DIE</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>public</specifier>
                <name>InterpreterTeseoAgentProgram</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BitArrayTeseoInterpreterManager</name>
                            </type>
                            <name>manager</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>manager</name>
                            </name>
                            =
                            <name>manager</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLanguage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SimpleLanguage</name>
                            </type>
                            <name>language</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>setLanguage</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>language</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>manager</name>.
                                    <name>getInterpreter</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>setLanguage</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>language</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Action</name>
                </type>
                <name>compute</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Percept</name>
                            </type>
                            <name>prcpt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>memory</name>.
                                    <name>saveActualSquareData</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>prcpt</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>action</name> =
                            <init>
                                <expr>"die"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isInTheExit</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>prcpt</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>action</name>
                                        =
                                        <call>
                                            <name>getNextAction</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>prcpt</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>act</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>action</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <expr_stmt>
                                <expr>
                                    <name>fitness</name>
                                    += 1000000.0 -
                                    <name>discoverFitness</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </else>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>Action</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>action</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isInTheExit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Percept</name>
                            </type>
                            <name>prcpt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>((<name>BitArrayTeseoInterpreter</name>)
                            <call>
                                <name><name>manager</name>.
                                    <name>getInterpreter</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ).
                            <call>
                                <name>getPerception</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>prcpt</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>EXIT</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>String</name>
                </type>
                <name>getNextAction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Percept</name>
                            </type>
                            <name>prcpt</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>action</name> =
                            <init>
                                <expr>"no_op"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <do>do
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>action</name>
                                    =
                                    <call>
                                        <name><name>manager</name>.
                                            <name>getNextInstruction</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>prcpt</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        while
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isValidAction</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>prcpt</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>action</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        ;
                    </do>
                    <return>return
                        <expr>
                            <name>action</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>boolean</name>
                </type>
                <name>isValidAction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Percept</name>
                            </type>
                            <name>prcpt</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>action</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>action</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"advance"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return
                                <expr>!((<name>BitArrayTeseoInterpreter</name>)
                                    <call>
                                        <name><name>manager</name>.
                                            <name>getInterpreter</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    ).
                                    <call>
                                        <name>getPerception</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>prcpt</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>FRONT</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>act</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>action</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>action</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"advance"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>advance</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>action</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"rotate"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>rotate</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </then>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>rotate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>memory</name>.
                                    <name>rotate</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>fitness</name>
                            -= 0.01
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>++
                            <name>actionsCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>void</name>
                </type>
                <name>advance</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>memory</name>.
                                        <name>advance</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>fitness</name>
                                        += 1.0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>discoverFitness</name>
                                        += 1.0
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>fitness</name>
                            -= 0.01
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>++
                            <name>actionsCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>BitArray</name>
                </type>
                <name>getInstructions</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>BitArray</name>)
                            <call>
                                <name><name>manager</name>.
                                    <name>getInstructions</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>init</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>actionsCount</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>memory</name>
                            = new
                            <call>
                                <name>TeseoMemory</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>memory</name>.
                                    <name>setLanguage</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>language</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>memory</name>.
                                    <name>init</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>manager</name>.
                                    <name>restart</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>manager</name>.
                                    <name>setMemory</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>memory</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getInstructions</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
