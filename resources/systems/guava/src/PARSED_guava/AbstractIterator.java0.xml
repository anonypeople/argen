<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\AbstractIterator.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkState</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This class provides a skeletal implementation of the {@code Iterator}
        * interface, to make this interface easier to implement for certain types of
        * data sources.
        *
        * &lt;p&gt;{@code Iterator} requires its implementations to support querying the
        * end-of-data status without changing the iterator's state, using the {@link
        * #hasNext} method. But many data sources, such as {@link
        * java.io.Reader#read()}, do not expose this information; the only way to
        * discover whether there is any data left is by trying to retrieve it. These
        * types of data sources are ordinarily difficult to write iterators for. But
        * using this class, one must implement only the {@link #computeNext} method,
        * and invoke the {@link #endOfData} method when appropriate.
        *
        * &lt;p&gt;Another example is an iterator that skips over null elements in a backing
        * iterator. This could be implemented as: &lt;pre&gt; {@code
        *
        * public static Iterator&lt;String&gt; skipNulls(final Iterator&lt;String&gt; in) {
        * return new AbstractIterator&lt;String&gt;() {
        * protected String computeNext() {
        * while (in.hasNext()) {
        * String s = in.next();
        * if (s != null) {
        * return s;
        * }
        * }
        * return endOfData();
        * }
        * };
        * }}&lt;/pre&gt;
        *
        * &lt;p&gt;This class supports iterators that include null elements.
        *
        * @author Kevin Bourrillion
        * @since 2.0
        */
    </comment>
    <comment type="line">// When making changes to this class, please also update the copy at</comment>
    <comment type="line">// com.google.common.base.AbstractIterator</comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>AbstractIterator</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>UnmodifiableIterator</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>State</name>
                    </type>
                    <name>state</name> =
                    <init>
                        <expr>
                            <name><name>State</name>.
                                <name>NOT_READY</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Constructor for use by subclasses. */</comment>
            <constructor>
                <specifier>protected</specifier>
                <name>AbstractIterator</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <enum>
                <specifier>private</specifier>
                enum <name>State</name>
                <block>{
                    <comment type="javadoc">/** We have computed the next element and haven't returned it yet. */
                    </comment>
                    <expr>
                        <name>READY</name>
                    </expr>
                    ,

                    <comment type="javadoc">/** We haven't yet computed or have already returned the element. */
                    </comment>
                    <expr>
                        <name>NOT_READY</name>
                    </expr>
                    ,

                    <comment type="javadoc">/** We have reached the end of the data and are finished. */</comment>
                    <expr>
                        <name>DONE</name>
                    </expr>
                    ,

                    <comment type="javadoc">/** We've suffered an exception and are kaput. */</comment>
                    <expr>
                        <name>FAILED</name>
                    </expr>
                    ,
                    }
                </block>

                private <name>T</name>
                <name>next</name>;
            </enum>

            <comment type="javadoc">/**
                * Returns the next element. &lt;b&gt;Note:&lt;/b&gt; the implementation must call {@link
                * #endOfData()} when there are no elements left in the iteration. Failure to
                * do so could result in an infinite loop.
                *
                * &lt;p&gt;The initial invocation of {@link #hasNext()} or {@link #next()} calls
                * this method, as does the first invocation of {@code hasNext} or {@code
                * next} following each successful call to {@code next}. Once the
                * implementation either invokes {@code endOfData} or throws an exception,
                * {@code computeNext} is guaranteed to never be called again.
                *
                * &lt;p&gt;If this method throws an exception, it will propagate outward to the
                * {@code hasNext} or {@code next} invocation that invoked this method. Any
                * further attempts to use the iterator will result in an {@link
                * IllegalStateException}.
                *
                * &lt;p&gt;The implementation of this method may not invoke the {@code hasNext},
                * {@code next}, or {@link #peek()} methods on this instance; if it does, an
                * {@code IllegalStateException} will result.
                *
                * @return the next element if there was one. If {@code endOfData} was called
                * during execution, the return value will be ignored.
                * @throws RuntimeException if any unrecoverable error happens. This exception
                * will propagate outward to the {@code hasNext()}, {@code next()}, or
                * {@code peek()} invocation that invoked this method. Any further
                * attempts to use the iterator will result in an
                * {@link IllegalStateException}.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>T</name>
                </type>
                <name>computeNext</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Implementations of {@link #computeNext} &lt;b&gt;must&lt;/b&gt; invoke this method when
                * there are no elements left in the iteration.
                *
                * @return {@code null}; a convenience so your {@code computeNext}
                * implementation can use the simple statement {@code return endOfData();}
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>T</name>
                </type>
                <name>endOfData</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>state</name>
                            =
                            <name><name>State</name>.
                                <name>DONE</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>hasNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkState</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>state</name>
                                            !=
                                            <name><name>State</name>.
                                                <name>FAILED</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>state</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>DONE</name>
                                </expr>
                                :
                                <return>return <expr>false</expr>;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>READY</name>
                                </expr>
                                :
                                <return>return <expr>true</expr>;
                                </return>
                            </case>
                            <default>default:
                            </default>}
                        </block>
                    </switch>
                    <return>return
                        <expr>
                            <call>
                                <name>tryToComputeNext</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>tryToComputeNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>state</name>
                            =
                            <name><name>State</name>.
                                <name>FAILED</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// temporary pessimism</comment>
                    <expr_stmt>
                        <expr>
                            <name>next</name>
                            =
                            <call>
                                <name>computeNext</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>state</name>
                                !=
                                <name><name>State</name>.
                                    <name>DONE</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>state</name>
                                        =
                                        <name><name>State</name>.
                                            <name>READY</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>T</name>
                </type>
                <name>next</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>hasNext</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchElementException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>state</name>
                            =
                            <name><name>State</name>.
                                <name>NOT_READY</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>next</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>next</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the next element in the iteration without advancing the iteration,
                * according to the contract of {@link PeekingIterator#peek()}.
                *
                * &lt;p&gt;Implementations of {@code AbstractIterator} that wish to expose this
                * functionality should implement {@code PeekingIterator}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>T</name>
                </type>
                <name>peek</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>hasNext</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchElementException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>next</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
