<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\AbstractSequentialIterator.java">
    <comment type="block">/*
        * Copyright (C) 2010 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This class provides a skeletal implementation of the {@code Iterator}
        * interface for sequences whose next element can always be derived from the
        * previous element. Null elements are not supported, nor is the
        * {@link #remove()} method.
        *
        * &lt;p&gt;Example: &lt;pre&gt; {@code
        *
        * Iterator&lt;Integer&gt; powersOfTwo =
        * new AbstractSequentialIterator&lt;Integer&gt;(1) {
        * protected Integer computeNext(Integer previous) {
        * return (previous == 1 &lt;&lt; 30) ? null : previous * 2;
        * }
        * };}&lt;/pre&gt;
        *
        * @author Chris Povirk
        * @since 12.0 (in Guava as {@code AbstractLinkedIterator} since 8.0)
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>AbstractSequentialIterator</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>UnmodifiableIterator</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>T</name>
                    </type>
                    <name>nextOrNull</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new iterator with the given first element, or, if {@code
                * firstOrNull} is null, creates a new empty iterator.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>AbstractSequentialIterator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>firstOrNull</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextOrNull</name>
                            </name>
                            =
                            <name>firstOrNull</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the element that follows {@code previous}, or returns {@code null}
                * if no elements remain. This method is invoked during each call to
                * {@link #next()} in order to compute the result of a &lt;i&gt;future&lt;/i&gt; call to
                * {@code next()}.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>T</name>
                </type>
                <name>computeNext</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>hasNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextOrNull</name>
                            !=
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>T</name>
                </type>
                <name>next</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>hasNext</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchElementException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <name>nextOrNull</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>nextOrNull</name>
                                        =
                                        <call>
                                            <name>computeNext</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>nextOrNull</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
