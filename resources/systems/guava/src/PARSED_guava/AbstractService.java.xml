<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\AbstractService.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkState</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Service</name>.<name>State</name>.
            <name>FAILED</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Service</name>.<name>State</name>.
            <name>NEW</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Service</name>.<name>State</name>.
            <name>RUNNING</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Service</name>.<name>State</name>.
            <name>STARTING</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Service</name>.<name>State</name>.
            <name>STOPPING</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Service</name>.<name>State</name>.
            <name>TERMINATED</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            ListenerCallQueue</name>.
            <name>Callback</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Monitor</name>.
            <name>Guard</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Service</name>.
            <name>State</name>
        </name>
        ;
    </import>
    <comment type="line">// javadoc needs this</comment>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Executor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeoutException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.<name>concurrent</name>.
            <name>GuardedBy</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.<name>concurrent</name>.
            <name>Immutable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Base class for implementing services that can handle {@link #doStart} and {@link #doStop}
        * requests, responding to them with {@link #notifyStarted()} and {@link #notifyStopped()}
        * callbacks. Its subclasses must manage threads manually; consider
        * {@link AbstractExecutionThreadService} if you need only a single execution thread.
        *
        * @author Jesse Wilson
        * @author Luke Sandberg
        * @since 1.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>AbstractService</name>
        <super>
            <implements>implements
                <name>Service</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Callback</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Listener</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>STARTING_CALLBACK</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Callback</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Listener</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>"starting()"</expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <name>void</name>
                                        </type>
                                        <name>call</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Listener</name>
                                                    </type>
                                                    <name>listener</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>listener</name>.
                                                            <name>starting</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Callback</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Listener</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>RUNNING_CALLBACK</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Callback</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Listener</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>"running()"</expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <name>void</name>
                                        </type>
                                        <name>call</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Listener</name>
                                                    </type>
                                                    <name>listener</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>listener</name>.
                                                            <name>running</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Callback</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Listener</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>STOPPING_FROM_STARTING_CALLBACK</name> =
                    <init>
                        <expr>
                            <call>
                                <name>stoppingCallback</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>STARTING</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Callback</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Listener</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>STOPPING_FROM_RUNNING_CALLBACK</name> =
                    <init>
                        <expr>
                            <call>
                                <name>stoppingCallback</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>RUNNING</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Callback</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Listener</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>TERMINATED_FROM_NEW_CALLBACK</name> =
                    <init>
                        <expr>
                            <call>
                                <name>terminatedCallback</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>NEW</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Callback</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Listener</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>TERMINATED_FROM_RUNNING_CALLBACK</name> =
                    <init>
                        <expr>
                            <call>
                                <name>terminatedCallback</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>RUNNING</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Callback</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Listener</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>TERMINATED_FROM_STOPPING_CALLBACK</name> =
                    <init>
                        <expr>
                            <call>
                                <name>terminatedCallback</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>STOPPING</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Callback</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Listener</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>terminatedCallback</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>State</name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Callback</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Listener</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>"terminated({from = " + <name>from</name> + "})"
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <name>void</name>
                                        </type>
                                        <name>call</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Listener</name>
                                                    </type>
                                                    <name>listener</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>listener</name>.
                                                            <name>terminated</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>from</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Callback</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Listener</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>stoppingCallback</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>State</name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Callback</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Listener</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>"stopping({from = " + <name>from</name> + "})"
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <name>void</name>
                                        </type>
                                        <name>call</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Listener</name>
                                                    </type>
                                                    <name>listener</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>listener</name>.
                                                            <name>stopping</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>from</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Monitor</name>
                    </type>
                    <name>monitor</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>Monitor</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Guard</name>
                    </type>
                    <name>isStartable</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>Guard</name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>monitor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>boolean</name>
                                        </type>
                                        <name>isSatisfied</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>state</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <name>NEW</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Guard</name>
                    </type>
                    <name>isStoppable</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>Guard</name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>monitor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>boolean</name>
                                        </type>
                                        <name>isSatisfied</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>state</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>compareTo</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>RUNNING</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &lt;= 0
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Guard</name>
                    </type>
                    <name>hasReachedRunning</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>Guard</name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>monitor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>boolean</name>
                                        </type>
                                        <name>isSatisfied</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>state</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>compareTo</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>RUNNING</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &gt;= 0
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Guard</name>
                    </type>
                    <name>isStopped</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>Guard</name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>monitor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>boolean</name>
                                        </type>
                                        <name>isSatisfied</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>state</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>isTerminal</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The listeners to notify during a state transition.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>GuardedBy</name>
                            <argument_list>("monitor")</argument_list>
                        </annotation>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>ListenerCallQueue</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Listener</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>listeners</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>synchronizedList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>
                                                    <name>ArrayList</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>
                                                                <name>ListenerCallQueue</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>Listener</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The current state of the service. This should be written with the lock held but can be read
                * without it because it is an immutable object in a volatile field. This is desirable so that
                * methods like {@link #state}, {@link #failureCause} and notably {@link #toString} can be run
                * without grabbing the lock.
                *
                * &lt;p&gt;To update this field correctly the lock must be held to guarantee that the state is
                * consistent.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>GuardedBy</name>
                            <argument_list>("monitor")</argument_list>
                        </annotation>
                        <specifier>private</specifier>
                        <name>volatile</name>
                        <name>StateSnapshot</name>
                    </type>
                    <name>snapshot</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>StateSnapshot</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>NEW</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Constructor for use by subclasses. */</comment>
            <constructor>
                <specifier>protected</specifier>
                <name>AbstractService</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * This method is called by {@link #startAsync} to initiate service startup. The invocation of
                * this method should cause a call to {@link #notifyStarted()}, either during this method's run,
                * or after it has returned. If startup fails, the invocation should cause a call to
                * {@link #notifyFailed(Throwable)} instead.
                *
                * &lt;p&gt;This method should return promptly; prefer to do work on a different thread where it is
                * convenient. It is invoked exactly once on service startup, even when {@link #startAsync} is
                * called multiple times.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>doStart</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * This method should be used to initiate service shutdown. The invocation of this method should
                * cause a call to {@link #notifyStopped()}, either during this method's run, or after it has
                * returned. If shutdown fails, the invocation should cause a call to
                * {@link #notifyFailed(Throwable)} instead.
                *
                * &lt;p&gt; This method should return promptly; prefer to do work on a different thread where it is
                * convenient. It is invoked exactly once on service shutdown, even when {@link #stopAsync} is
                * called multiple times.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>doStop</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>Service</name>
                </type>
                <name>startAsync</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>monitor</name>.
                                        <name>enterIf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>isStartable</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>snapshot</name>
                                                = new
                                                <call>
                                                    <name>StateSnapshot</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>STARTING</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>starting</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>doStart</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Throwable</name>
                                                </type>
                                                <name>startupFailure</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>notifyFailed</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>startupFailure</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </catch>
                                    <finally>finally
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>monitor</name>.
                                                            <name>leave</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>executeListeners</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Service " + <name>this</name> + " has already been started"
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>Service</name>
                </type>
                <name>stopAsync</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>monitor</name>.
                                        <name>enterIf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>isStoppable</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>State</name>
                                                </type>
                                                <name>previous</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>state</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <switch>switch
                                            <condition>(
                                                <expr>
                                                    <name>previous</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <case>case
                                                    <expr>
                                                        <name>NEW</name>
                                                    </expr>
                                                    :
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>snapshot</name>
                                                            = new
                                                            <call>
                                                                <name>StateSnapshot</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>TERMINATED</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>terminated</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>NEW</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name>STARTING</name>
                                                    </expr>
                                                    :
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>snapshot</name>
                                                            = new
                                                            <call>
                                                                <name>StateSnapshot</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>STARTING</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>true</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>null</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>stopping</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>STARTING</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name>RUNNING</name>
                                                    </expr>
                                                    :
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>snapshot</name>
                                                            = new
                                                            <call>
                                                                <name>StateSnapshot</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>STOPPING</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>stopping</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>RUNNING</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>doStop</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <break>break;</break>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name>STOPPING</name>
                                                    </expr>
                                                    :
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name>TERMINATED</name>
                                                    </expr>
                                                    :
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name>FAILED</name>
                                                    </expr>
                                                    :
                                                    <comment type="line">// These cases are impossible due to the if
                                                        statement above.
                                                    </comment>
                                                    <throw>throw
                                                        <expr>new
                                                            <call>
                                                                <name>AssertionError</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"isStoppable is incorrectly implemented,
                                                                            saw: " +
                                                                            <name>previous</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </case>
                                                <default>default:
                                                    <throw>throw
                                                        <expr>new
                                                            <call>
                                                                <name>AssertionError</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"Unexpected state: " +
                                                                            <name>previous</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </throw>
                                                </default>
                                                }
                                            </block>
                                        </switch>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>Throwable</name>
                                                </type>
                                                <name>shutdownFailure</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>notifyFailed</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>shutdownFailure</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </catch>
                                    <finally>finally
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>monitor</name>.
                                                            <name>leave</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>executeListeners</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>awaitRunning</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>monitor</name>.
                                    <name>enterWhenUninterruptibly</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>hasReachedRunning</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkCurrentState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>RUNNING</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>monitor</name>.
                                                <name>leave</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>awaitRunning</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>TimeoutException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>monitor</name>.
                                        <name>enterWhenUninterruptibly</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>hasReachedRunning</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>timeout</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>unit</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>checkCurrentState</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>RUNNING</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <finally>finally
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>monitor</name>.
                                                            <name>leave</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// It is possible due to races the we are currently in the expected
                                    state even though we
                                </comment>
                                <comment type="line">// timed out. e.g. if we weren't event able to grab the lock within
                                    the timeout we would never
                                </comment>
                                <comment type="line">// even check the guard. I don't think we care too much about this
                                    use case but it could lead
                                </comment>
                                <comment type="line">// to a confusing error message.</comment>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>TimeoutException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Timed out waiting for " + <name>this</name> + " to reach the
                                                        RUNNING state. "
                                                        + "Current state: " +
                                                        <call>
                                                            <name>state</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>awaitTerminated</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>monitor</name>.
                                    <name>enterWhenUninterruptibly</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>isStopped</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkCurrentState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>TERMINATED</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>monitor</name>.
                                                <name>leave</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>awaitTerminated</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>TimeoutException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>monitor</name>.
                                        <name>enterWhenUninterruptibly</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>isStopped</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>timeout</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>unit</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>checkCurrentState</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>TERMINATED</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <finally>finally
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>monitor</name>.
                                                            <name>leave</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// It is possible due to races the we are currently in the expected
                                    state even though we
                                </comment>
                                <comment type="line">// timed out. e.g. if we weren't event able to grab the lock within
                                    the timeout we would never
                                </comment>
                                <comment type="line">// even check the guard. I don't think we care too much about this
                                    use case but it could lead
                                </comment>
                                <comment type="line">// to a confusing error message.</comment>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>TimeoutException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Timed out waiting for " + <name>this</name> + " to reach a
                                                        terminal state. "
                                                        + "Current state: " +
                                                        <call>
                                                            <name>state</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Checks that the current state is equal to the expected state. */</comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("monitor")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>checkCurrentState</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>State</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>State</name>
                            </type>
                            <name>actual</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>state</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>actual</name>
                                !=
                                <name>expected</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>actual</name>
                                            ==
                                            <name>FAILED</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// Handle this specially so that we can include the
                                                failureCause, if there is one.
                                            </comment>
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>IllegalStateException</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"Expected the service to be " +
                                                                    <name>expected</name>
                                                                    + ", but the service has FAILED"
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name>failureCause</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Expected the service to be " + <name>expected</name> + ", but
                                                        was "
                                                        +
                                                        <name>actual</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Implementing classes should invoke this method once their service has started. It will cause
                * the service to transition from {@link State#STARTING} to {@link State#RUNNING}.
                *
                * @throws IllegalStateException if the service is not {@link State#STARTING}.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>notifyStarted</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>monitor</name>.
                                    <name>enter</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <comment type="line">// We have to examine the internal state of the snapshot here to
                                properly handle the stop
                            </comment>
                            <comment type="line">// while starting case.</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>snapshot</name>.
                                            <name>state</name>
                                        </name>
                                        !=
                                        <name>STARTING</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>IllegalStateException</name>
                                                </type>
                                                <name>failure</name> =
                                                <init>
                                                    <expr>new
                                                        <call>
                                                            <name>IllegalStateException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"Cannot notifyStarted() when the service is "
                                                                        +
                                                                        <name><name>snapshot</name>.
                                                                            <name>state</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>notifyFailed</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>failure</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <throw>throw
                                            <expr>
                                                <name>failure</name>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>snapshot</name>.
                                            <name>shutdownWhenStartupFinishes</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>snapshot</name>
                                                = new
                                                <call>
                                                    <name>StateSnapshot</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>STOPPING</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// We don't call listeners here because we already did that
                                            when we set the
                                        </comment>
                                        <comment type="line">// shutdownWhenStartupFinishes flag.</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>doStop</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>snapshot</name>
                                                = new
                                                <call>
                                                    <name>StateSnapshot</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>RUNNING</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>running</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>monitor</name>.
                                                <name>leave</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>executeListeners</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Implementing classes should invoke this method once their service has stopped. It will cause
                * the service to transition from {@link State#STOPPING} to {@link State#TERMINATED}.
                *
                * @throws IllegalStateException if the service is neither {@link State#STOPPING} nor
                * {@link State#RUNNING}.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>notifyStopped</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>monitor</name>.
                                    <name>enter</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <comment type="line">// We check the internal state of the snapshot instead of state()
                                directly so we don't allow
                            </comment>
                            <comment type="line">// notifyStopped() to be called while STARTING, even if stop() has
                                already been called.
                            </comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>State</name>
                                    </type>
                                    <name>previous</name> =
                                    <init>
                                        <expr>
                                            <name><name>snapshot</name>.
                                                <name>state</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>previous</name>
                                        != <name>STOPPING</name> &amp;&amp; <name>previous</name> !=
                                        <name>RUNNING</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>IllegalStateException</name>
                                                </type>
                                                <name>failure</name> =
                                                <init>
                                                    <expr>new
                                                        <call>
                                                            <name>IllegalStateException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"Cannot notifyStopped() when the service is "
                                                                        +
                                                                        <name>previous</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>notifyFailed</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>failure</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <throw>throw
                                            <expr>
                                                <name>failure</name>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>snapshot</name>
                                    = new
                                    <call>
                                        <name>StateSnapshot</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>TERMINATED</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>terminated</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>previous</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>monitor</name>.
                                                <name>leave</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>executeListeners</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Invoke this method to transition the service to the {@link State#FAILED}. The service will
                * &lt;b&gt;not be stopped&lt;/b&gt; if it is running. Invoke this method when a service has failed
                critically
                * or otherwise cannot be started nor stopped.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>notifyFailed</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cause</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>monitor</name>.
                                    <name>enter</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>State</name>
                                    </type>
                                    <name>previous</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>state</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>previous</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name>NEW</name>
                                        </expr>
                                        :
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>TERMINATED</name>
                                        </expr>
                                        :
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalStateException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Failed while in state:" +
                                                                <name>previous</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>cause</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>RUNNING</name>
                                        </expr>
                                        :
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>STARTING</name>
                                        </expr>
                                        :
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>STOPPING</name>
                                        </expr>
                                        :
                                        <expr_stmt>
                                            <expr>
                                                <name>snapshot</name>
                                                = new
                                                <call>
                                                    <name>StateSnapshot</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>FAILED</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>false</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>cause</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>failed</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>previous</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>cause</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <break>break;</break>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>FAILED</name>
                                        </expr>
                                        :
                                        <comment type="line">// Do nothing</comment>
                                        <break>break;</break>
                                    </case>
                                    <default>default:
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>AssertionError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Unexpected state: " +
                                                                <name>previous</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>monitor</name>.
                                                <name>leave</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>executeListeners</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isRunning</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>state</name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <name>RUNNING</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>State</name>
                </type>
                <name>state</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>snapshot</name>.
                                    <name>externalState</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>Throwable</name>
                </type>
                <name>failureCause</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>snapshot</name>.
                                    <name>failureCause</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * @since 13.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>addListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Listener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>listener</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"listener"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"executor"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>monitor</name>.
                                    <name>enter</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>state</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>isTerminal</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>listeners</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>new
                                                                <call>
                                                                    <name>
                                                                        <name>ListenerCallQueue</name>
                                                                        <argument_list>&lt;
                                                                            <argument>
                                                                                <name>Listener</name>
                                                                            </argument>
                                                                            &gt;
                                                                        </argument_list>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>listener</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>executor</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>monitor</name>.
                                                <name>leave</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getClass</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getSimpleName</name>
                                <argument_list>()</argument_list>
                            </call>
                            + " [" +
                            <call>
                                <name>state</name>
                                <argument_list>()</argument_list>
                            </call>
                            + "]"
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Attempts to execute all the listeners in {@link #listeners} while not holding the
                * {@link #monitor}.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>executeListeners</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>monitor</name>.
                                        <name>isOccupiedByCurrentThread</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// iterate by index to avoid concurrent modification exceptions
                                </comment>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <call>
                                                <name><name>listeners</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>listeners</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>execute</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("monitor")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>starting</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>STARTING_CALLBACK</name>.
                                    <name>enqueueOn</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>listeners</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("monitor")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>running</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>RUNNING_CALLBACK</name>.
                                    <name>enqueueOn</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>listeners</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("monitor")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>stopping</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>State</name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>from</name>
                                ==
                                <name><name>State</name>.
                                    <name>STARTING</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>STOPPING_FROM_STARTING_CALLBACK</name>.
                                                <name>enqueueOn</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>listeners</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>from</name>
                                        ==
                                        <name><name>State</name>.
                                            <name>RUNNING</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>STOPPING_FROM_RUNNING_CALLBACK</name>.
                                                        <name>enqueueOn</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>listeners</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>AssertionError</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("monitor")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>terminated</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>State</name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>from</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>NEW</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>TERMINATED_FROM_NEW_CALLBACK</name>.
                                                <name>enqueueOn</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>listeners</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>RUNNING</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>TERMINATED_FROM_RUNNING_CALLBACK</name>.
                                                <name>enqueueOn</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>listeners</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>STOPPING</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>TERMINATED_FROM_STOPPING_CALLBACK</name>.
                                                <name>enqueueOn</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>listeners</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>STARTING</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>TERMINATED</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>FAILED</name>
                                </expr>
                                :
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("monitor")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>failed</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>State</name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Throwable</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// can't memoize this one due to the exception</comment>
                    <expr_stmt>
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Callback</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Listener</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>"failed({from = " + <name>from</name> + ", cause = " + <name>cause</name> +
                                            "})"
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <name>void</name>
                                        </type>
                                        <name>call</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Listener</name>
                                                    </type>
                                                    <name>listener</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>listener</name>.
                                                            <name>failed</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>from</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>cause</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                            .
                            <call>
                                <name>enqueueOn</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>listeners</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * An immutable snapshot of the current state of the service. This class represents a consistent
                * snapshot of the state and therefore it can be used to answer simple queries without needing to
                * grab a lock.
                */
            </comment>
            <class>
                <annotation>@
                    <name>Immutable</name>
                </annotation>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>StateSnapshot</name>
                <block>{
                    <comment type="javadoc">/**
                        * The internal state, which equals external state unless
                        * shutdownWhenStartupFinishes is true.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>State</name>
                            </type>
                            <name>state</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * If true, the user requested a shutdown while the service was still starting
                        * up.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>boolean</name>
                            </type>
                            <name>shutdownWhenStartupFinishes</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * The exception that caused this service to fail. This will be {@code null}
                        * unless the service has failed.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <specifier>final</specifier>
                                <name>Throwable</name>
                            </type>
                            <name>failure</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>StateSnapshot</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>State</name>
                                    </type>
                                    <name>internalState</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>this</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>internalState</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <constructor>
                        <name>StateSnapshot</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>State</name>
                                    </type>
                                    <name>internalState</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>boolean</name>
                                    </type>
                                    <name>shutdownWhenStartupFinishes</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>Throwable</name>
                                    </type>
                                    <name>failure</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkArgument</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>!<name>shutdownWhenStartupFinishes</name> || <name>internalState
                                                </name> ==
                                                    <name>STARTING</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"shudownWhenStartupFinishes can only be set if state is STARTING.
                                                    Got %s instead."
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>internalState</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkArgument</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>!(<name>failure</name> != <name>null</name> ^ <name>
                                                    internalState
                                                </name> == <name>FAILED</name>)
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"A failure cause should be set if and only if the state is failed.
                                                    Got %s and %s "
                                                    + "instead."
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>internalState</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>failure</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>state</name>
                                    </name>
                                    =
                                    <name>internalState</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>shutdownWhenStartupFinishes</name>
                                    </name>
                                    =
                                    <name>shutdownWhenStartupFinishes</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>failure</name>
                                    </name>
                                    =
                                    <name>failure</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/** @see Service#state() */</comment>
                    <function>
                        <type>
                            <name>State</name>
                        </type>
                        <name>externalState</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>shutdownWhenStartupFinishes</name>
                                        &amp;&amp; <name>state</name> ==
                                        <name>STARTING</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>STOPPING</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>state</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/** @see Service#failureCause() */</comment>
                    <function>
                        <type>
                            <name>Throwable</name>
                        </type>
                        <name>failureCause</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>state</name>
                                                    ==
                                                    <name>FAILED</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"failureCause() is only valid if the service has failed, service
                                                    is %s"
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>state</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>failure</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
