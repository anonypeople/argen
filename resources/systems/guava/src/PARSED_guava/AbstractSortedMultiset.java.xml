<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\AbstractSortedMultiset.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>j2objc</name>.<name>annotations</name>.
            <name>WeakOuter</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NavigableSet</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * This class provides a skeletal implementation of the {@link SortedMultiset} interface.
        *
        * &lt;p&gt;The {@link #count} and {@link #size} implementations all iterate across the set returned by
        * {@link Multiset#entrySet()}, as do many methods acting on the set returned by
        * {@link #elementSet()}. Override those methods for better performance.
        *
        * @author Louis Wasserman
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>abstract</specifier>
        class
        <name>
            <name>AbstractSortedMultiset</name>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractMultiset</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>SortedMultiset</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>GwtTransient</name>
                        </annotation>
                        <specifier>final</specifier>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>E</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>comparator</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// needed for serialization</comment>
            <constructor>
                <annotation>@
                    <name>SuppressWarnings</name>
                    <argument_list>("unchecked")</argument_list>
                </annotation>
                <name>AbstractSortedMultiset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Comparator</name>)
                                            <call>
                                                <name><name>Ordering</name>.
                                                    <name>natural</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <name>AbstractSortedMultiset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>comparator</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>elementSet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>NavigableSet</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <call>
                                <name><name>super</name>.
                                    <name>elementSet</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createElementSet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name><name>SortedMultisets</name>.
                                    <name>
                                        <name>NavigableElementSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>E</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>comparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>comparator</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>firstEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entryIterator</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>entryIterator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>entryIterator</name>.
                                    <name>hasNext</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ?
                            <call>
                                <name><name>entryIterator</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lastEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entryIterator</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>descendingEntryIterator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>entryIterator</name>.
                                    <name>hasNext</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ?
                            <call>
                                <name><name>entryIterator</name>.
                                    <name>next</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollFirstEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entryIterator</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>entryIterator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>entryIterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>result</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>entryIterator</name>.
                                                        <name>next</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>result</name>
                                        =
                                        <call>
                                            <name><name>Multisets</name>.
                                                <name>immutableEntry</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>result</name>.
                                                                <name>getElement</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>result</name>.
                                                                <name>getCount</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>entryIterator</name>.
                                                <name>remove</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>result</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollLastEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entryIterator</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>descendingEntryIterator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>entryIterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>result</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>entryIterator</name>.
                                                        <name>next</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>result</name>
                                        =
                                        <call>
                                            <name><name>Multisets</name>.
                                                <name>immutableEntry</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>result</name>.
                                                                <name>getElement</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>result</name>.
                                                                <name>getCount</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>entryIterator</name>.
                                                <name>remove</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>result</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMultiset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>BoundType</name>
                            </type>
                            <name>fromBoundType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>BoundType</name>
                            </type>
                            <name>toBoundType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// These are checked elsewhere, but NullPointerTester wants them checked
                        eagerly.
                    </comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromBoundType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toBoundType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>tailMultiset</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fromBoundType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>headMultiset</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toBoundType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingEntryIterator</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingIterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Multisets</name>.
                                    <name>iteratorImpl</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>descendingMultiset</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>
                            <name>SortedMultiset</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>descendingMultiset</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingMultiset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>SortedMultiset</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>descendingMultiset</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>result</name> == <name>null</name>) ? <name>descendingMultiset</name> =
                            <call>
                                <name>createDescendingMultiset</name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>
                        <name>SortedMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createDescendingMultiset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <class>
                        <annotation>@
                            <name>WeakOuter</name>
                        </annotation>
                        class <name>DescendingMultisetImpl</name>
                        <super>
                            <extends>extends
                                <name>
                                    <name>DescendingMultiset</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </extends>
                        </super>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <name>
                                        <name>SortedMultiset</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>forwardMultiset</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name><name>AbstractSortedMultiset</name>.
                                                <name>this</name>
                                            </name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <name>
                                        <name>Iterator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>E</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>entryIterator</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>descendingEntryIterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>Iterator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>iterator</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>descendingIterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                    <return>return
                        <expr>new
                            <call>
                                <name>DescendingMultisetImpl</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
