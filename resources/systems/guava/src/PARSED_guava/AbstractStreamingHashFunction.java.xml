<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\hash\AbstractStreamingHashFunction.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>hash</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Preconditions</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>nio</name>.
            <name>ByteBuffer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>nio</name>.
            <name>ByteOrder</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>nio</name>.<name>charset</name>.
            <name>Charset</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Skeleton implementation of {@link HashFunction}. Provides default implementations which
        * invokes the appropriate method on {@link #newHasher()}, then return the result of
        * {@link Hasher#hash}.
        *
        * &lt;p&gt;Invocations of {@link #newHasher(int)} also delegate to {@linkplain #newHasher()}, ignoring
        * the expected input size parameter.
        *
        * @author Kevin Bourrillion
        */
    </comment>
    <class>
        <specifier>abstract</specifier>
        class <name>AbstractStreamingHashFunction</name>
        <super>
            <implements>implements
                <name>HashFunction</name>
            </implements>
        </super>
        <block>{
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>HashCode</name>
                </type>
                <name>hashObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>instance</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Funnel</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>funnel</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>newHasher</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>putObject</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>instance</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>hash</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>HashCode</name>
                </type>
                <name>hashUnencodedChars</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>newHasher</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>putUnencodedChars</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>hash</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>HashCode</name>
                </type>
                <name>hashString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Charset</name>
                            </type>
                            <name>charset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>newHasher</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>putString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>charset</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>hash</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>HashCode</name>
                </type>
                <name>hashInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>newHasher</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>putInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>hash</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>HashCode</name>
                </type>
                <name>hashLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>newHasher</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>putLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>hash</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>HashCode</name>
                </type>
                <name>hashBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>newHasher</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>putBytes</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>hash</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>HashCode</name>
                </type>
                <name>hashBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>newHasher</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>putBytes</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>off</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>len</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>hash</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Hasher</name>
                </type>
                <name>newHasher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>expectedInputSize</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Preconditions</name>.
                                    <name>checkArgument</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>expectedInputSize</name>
                                            &gt;= 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>newHasher</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A convenience base class for implementors of {@code Hasher}; handles accumulating data
                * until an entire "chunk" (of implementation-dependent length) is ready to be hashed.
                *
                * @author Kevin Bourrillion
                * @author Dimitris Andreou
                */
            </comment>
            <comment type="line">// TODO(kevinb): this class still needs some design-and-document-for-inheritance love
            </comment>
            <class>
                <specifier>protected</specifier>
                <specifier>static</specifier>
                <specifier>abstract</specifier> class <name>AbstractStreamingHasher</name>
                <super>
                    <extends>extends
                        <name>AbstractHasher</name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/** Buffer via which we pass data to the hash algorithm (the implementor)
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>ByteBuffer</name>
                            </type>
                            <name>buffer</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/** Number of bytes to be filled before process() invocation(s). */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>bufferSize</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/** Number of bytes processed per process() invocation. */</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>chunkSize</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Constructor for use by subclasses. This hasher instance will process chunks of the specified
                        * size.
                        *
                        * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;
                        * must be at least 4
                        */
                    </comment>
                    <constructor>
                        <specifier>protected</specifier>
                        <name>AbstractStreamingHasher</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>chunkSize</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>this</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>chunkSize</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>chunkSize</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Constructor for use by subclasses. This hasher instance will process chunks of the specified
                        * size, using an internal buffer of {@code bufferSize} size, which must be a multiple of
                        * {@code chunkSize}.
                        *
                        * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;
                        * must be at least 4
                        * @param bufferSize the size of the internal buffer. Must be a multiple of chunkSize
                        */
                    </comment>
                    <constructor>
                        <specifier>protected</specifier>
                        <name>AbstractStreamingHasher</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>chunkSize</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bufferSize</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <comment type="line">// TODO(kevinb): check more preconditions (as bufferSize &gt;=
                                chunkSize) if this is ever public
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkArgument</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bufferSize</name>
                                                    % <name>chunkSize</name> == 0
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// TODO(user): benchmark performance difference with longer buffer
                            </comment>
                            <comment type="line">// always space for a single primitive</comment>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>buffer</name>
                                    </name>
                                    =
                                    <call>
                                        <name><name>ByteBuffer</name>.
                                            <name>allocate</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bufferSize</name>
                                                    + 7
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>order</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>ByteOrder</name>.
                                                        <name>LITTLE_ENDIAN</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>bufferSize</name>
                                    </name>
                                    =
                                    <name>bufferSize</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>chunkSize</name>
                                    </name>
                                    =
                                    <name>chunkSize</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Processes the available bytes of the buffer (at most {@code chunk} bytes).
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <specifier>protected</specifier>
                            <specifier>abstract</specifier>
                            <name>void</name>
                        </type>
                        <name>process</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ByteBuffer</name>
                                    </type>
                                    <name>bb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>

                    <comment type="javadoc">/**
                        * This is invoked for the last bytes of the input, which are not enough to
                        * fill a whole chunk. The passed {@code ByteBuffer} is guaranteed to be
                        * non-empty.
                        *
                        * &lt;p&gt;This implementation simply pads with zeros and delegates to
                        * {@link #process(ByteBuffer)}.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>protected</specifier>
                            <name>void</name>
                        </type>
                        <name>processRemaining</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ByteBuffer</name>
                                    </type>
                                    <name>bb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>bb</name>.
                                            <name>position</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>bb</name>.
                                                            <name>limit</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// move at the end</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>bb</name>.
                                            <name>limit</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>chunkSize</name>
                                                    + 7
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// get ready to pad with longs</comment>
                            <while>while
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>bb</name>.
                                                <name>position</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &lt;
                                        <name>chunkSize</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>bb</name>.
                                                    <name>putLong</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>bb</name>.
                                            <name>limit</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>chunkSize</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>bb</name>.
                                            <name>flip</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>process</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bb</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>Hasher</name>
                        </type>
                        <name>putBytes</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>bytes</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>putBytes</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bytes</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>bytes</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>Hasher</name>
                        </type>
                        <name>putBytes</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>bytes</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>off</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>len</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>putBytes</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ByteBuffer</name>.
                                                            <name>wrap</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>bytes</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>off</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>len</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>order</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>ByteOrder</name>.
                                                                        <name>LITTLE_ENDIAN</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>Hasher</name>
                        </type>
                        <name>putBytes</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ByteBuffer</name>
                                    </type>
                                    <name>readBuffer</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <comment type="line">// If we have room for all of it, this is easy</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>readBuffer</name>.
                                                <name>remaining</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &lt;=
                                        <call>
                                            <name><name>buffer</name>.
                                                <name>remaining</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>buffer</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>readBuffer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>munchIfFull</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <name>this</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// First add just enough to fill buffer size, and munch that</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>bytesToCopy</name> =
                                    <init>
                                        <expr>
                                            <name>bufferSize</name>
                                            -
                                            <call>
                                                <name><name>buffer</name>.
                                                    <name>position</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>bytesToCopy</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>buffer</name>.
                                                    <name>put</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>readBuffer</name>.
                                                                    <name>get</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>munch</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// buffer becomes empty here, since chunkSize divides bufferSize
                            </comment>

                            <comment type="line">// Now process directly from the rest of the input buffer</comment>
                            <while>while
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>readBuffer</name>.
                                                <name>remaining</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt;=
                                        <name>chunkSize</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>process</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>readBuffer</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>

                            <comment type="line">// Finally stick the remainder back in our usual buffer</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>readBuffer</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>Hasher</name>
                        </type>
                        <name>putUnencodedChars</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>CharSequence</name>
                                    </type>
                                    <name>charSequence</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <call>
                                            <name><name>charSequence</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>putChar</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>charSequence</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="block">/*
                        * Note: hashString(CharSequence, Charset) is intentionally not overridden.
                        *
                        * While intuitively, using CharsetEncoder to encode the CharSequence directly to the buffer
                        * (or even to an intermediate buffer) should be considerably more efficient than potentially
                        * copying the CharSequence to a String and then calling getBytes(Charset) on that String, in
                        * reality there are optimizations that make the getBytes(Charset) approach considerably faster,
                        * at least for commonly used charsets like UTF-8.
                        */
                    </comment>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>Hasher</name>
                        </type>
                        <name>putByte</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                    </type>
                                    <name>b</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>b</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>munchIfFull</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>Hasher</name>
                        </type>
                        <name>putShort</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>short</name>
                                    </type>
                                    <name>s</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>putShort</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>s</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>munchIfFull</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>Hasher</name>
                        </type>
                        <name>putChar</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>putChar</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>c</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>munchIfFull</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>Hasher</name>
                        </type>
                        <name>putInt</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>i</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>putInt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>munchIfFull</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>Hasher</name>
                        </type>
                        <name>putLong</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>l</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>putLong</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>l</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>munchIfFull</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                            <name>Hasher</name>
                        </type>
                        <name>putObject</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>T</name>
                                    </type>
                                    <name>instance</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Funnel</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>T</name>
                                                    </super>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>funnel</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>funnel</name>.
                                            <name>funnel</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>instance</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>HashCode</name>
                        </type>
                        <name>hash</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>munch</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>flip</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>buffer</name>.
                                                <name>remaining</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>processRemaining</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>buffer</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <call>
                                        <name>makeHash</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function_decl>
                        <type>
                            <specifier>abstract</specifier>
                            <name>HashCode</name>
                        </type>
                        <name>makeHash</name>
                        <parameter_list>()</parameter_list>;
                    </function_decl>

                    <comment type="line">// Process pent-up data in chunks</comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>munchIfFull</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>buffer</name>.
                                                <name>remaining</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &lt; 8
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// buffer is full; not enough room for a primitive. We have
                                            at least one full chunk.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>munch</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>munch</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>flip</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>buffer</name>.
                                                <name>remaining</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &gt;=
                                        <name>chunkSize</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <comment type="line">// we could limit the buffer to ensure process() does not read
                                        more than
                                    </comment>
                                    <comment type="line">// chunkSize number of bytes, but we trust the
                                        implementations
                                    </comment>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>process</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>buffer</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>buffer</name>.
                                            <name>compact</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// preserve any remaining data that do not make a full chunk</comment>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
