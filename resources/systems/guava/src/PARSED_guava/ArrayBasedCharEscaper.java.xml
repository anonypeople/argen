<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\escape\ArrayBasedCharEscaper.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>escape</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A {@link CharEscaper} that uses an array to quickly look up replacement
        * characters for a given {@code char} value. An additional safe range is
        * provided that determines whether {@code char} values without specific
        * replacements are to be considered safe and left unescaped or should be
        * escaped in a general way.
        *
        * &lt;p&gt;A good example of usage of this class is for Java source code escaping
        * where the replacement array contains information about special ASCII
        * characters such as {@code \\t} and {@code \\n} while {@link #escapeUnsafe}
        * is overridden to handle general escaping of the form {@code \\uxxxx}.
        *
        * &lt;p&gt;The size of the data structure used by {@link ArrayBasedCharEscaper} is
        * proportional to the highest valued character that requires escaping.
        * For example a replacement map containing the single character
        * '{@code \}{@code u1000}' will require approximately 16K of memory. If you
        * need to create multiple escaper instances that have the same character
        * replacement mapping consider using {@link ArrayBasedEscaperMap}.
        *
        * @author Sven Mawson
        * @author David Beaumont
        * @since 15.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>ArrayBasedCharEscaper</name>
        <super>
            <extends>extends
                <name>CharEscaper</name>
            </extends>
        </super>
        <block>{
            <comment type="line">// The replacement array (see ArrayBasedEscaperMap).</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                        <index>[]</index>
                        <index>[]</index>
                    </type>
                    <name>replacements</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// The number of elements in the replacement array.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>replacementsLength</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// The first character in the safe range.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>safeMin</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// The last character in the safe range.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>safeMax</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new ArrayBasedCharEscaper instance with the given replacement map
                * and specified safe range. If {@code safeMax &lt; safeMin} then no characters
                * are considered safe.
                *
                * &lt;p&gt;If a character has no mapped replacement then it is checked against the
                * safe range. If it lies outside that, then {@link #escapeUnsafe} is
                * called, otherwise no escaping is performed.
                *
                * @param replacementMap a map of characters to their escaped representations
                * @param safeMin the lowest character value in the safe range
                * @param safeMax the highest character value in the safe range
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>ArrayBasedCharEscaper</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Character</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>replacementMap</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>safeMin</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>safeMax</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ArrayBasedEscaperMap</name>.
                                                    <name>create</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>replacementMap</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>safeMin</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>safeMax</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Creates a new ArrayBasedCharEscaper instance with the given replacement map
                * and specified safe range. If {@code safeMax &lt; safeMin} then no characters
                * are considered safe. This initializer is useful when explicit instances of
                * ArrayBasedEscaperMap are used to allow the sharing of large replacement
                * mappings.
                *
                * &lt;p&gt;If a character has no mapped replacement then it is checked against the
                * safe range. If it lies outside that, then {@link #escapeUnsafe} is
                * called, otherwise no escaping is performed.
                *
                * @param escaperMap the mapping of characters to be escaped
                * @param safeMin the lowest character value in the safe range
                * @param safeMax the highest character value in the safe range
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>ArrayBasedCharEscaper</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ArrayBasedEscaperMap</name>
                            </type>
                            <name>escaperMap</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>safeMin</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>safeMax</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>escaperMap</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// GWT specific check (do not optimize)</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>replacements</name>
                            </name>
                            =
                            <call>
                                <name><name>escaperMap</name>.
                                    <name>getReplacementArray</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>replacementsLength</name>
                            </name>
                            =
                            <name><name>replacements</name>.
                                <name>length</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>safeMax</name>
                                &lt;
                                <name>safeMin</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// If the safe range is empty, set the range limits to opposite
                                    extremes
                                </comment>
                                <comment type="line">// to ensure the first test of either value will (almost certainly)
                                    fail.
                                </comment>
                                <expr_stmt>
                                    <expr>
                                        <name>safeMax</name>
                                        =
                                        <name><name>Character</name>.
                                            <name>MIN_VALUE</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>safeMin</name>
                                        =
                                        <name><name>Character</name>.
                                            <name>MAX_VALUE</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>safeMin</name>
                            </name>
                            =
                            <name>safeMin</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>safeMax</name>
                            </name>
                            =
                            <name>safeMax</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="block">/*
                * This is overridden to improve performance. Rough benchmarking shows that
                * this almost doubles the speed when processing strings that do not require
                * any escaping.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>escape</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>s</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// GWT specific check (do not optimize).</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>s</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>s</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>(<name>c</name> &lt; <name>replacementsLength</name> &amp;&amp;
                                        <name>
                                            <name>replacements</name>
                                            <index>[
                                                <expr>
                                                    <name>c</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        != <name>null</name>) ||
                                        <name>c</name>
                                        &gt; <name>safeMax</name> || <name>c</name> &lt;
                                        <name>safeMin</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>escapeSlow</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>s</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>s</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Escapes a single character using the replacement array and safe range
                * values. If the given character does not have an explicit replacement and
                * lies outside the safe range then {@link #escapeUnsafe} is called.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>escape</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>c</name>
                                &lt;
                                <name>replacementsLength</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                            <index>[]</index>
                                        </type>
                                        <name>chars</name> =
                                        <init>
                                            <expr>
                                                <name>
                                                    <name>replacements</name>
                                                    <index>[
                                                        <expr>
                                                            <name>c</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>chars</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>chars</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>c</name>
                                &gt;= <name>safeMin</name> &amp;&amp; <name>c</name> &lt;=
                                <name>safeMax</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>escapeUnsafe</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>c</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Escapes a {@code char} value that has no direct explicit value in the
                * replacement array and lies outside the stated safe range. Subclasses should
                * override this method to provide generalized escaping for characters.
                *
                * &lt;p&gt;Note that arrays returned by this method must not be modified once they
                * have been returned. However it is acceptable to return the same array
                * multiple times (even for different input characters).
                *
                * @param c the character to escape
                * @return the replacement characters, or {@code null} if no escaping was
                * required
                */
            </comment>
            <comment type="line">// TODO(user,cpovirk): Rename this something better once refactoring done</comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>escapeUnsafe</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
