<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\Ascii.java">
    <comment type="block">/*
        * Copyright (C) 2010 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static methods pertaining to ASCII characters (those in the range of values
        * {@code 0x00} through {@code 0x7F}), and to strings containing such
        * characters.
        *
        * &lt;p&gt;ASCII utilities also exist in other classes of this package:
        * &lt;ul&gt;
        * &lt;!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? --&gt;
        * &lt;li&gt;{@link Charsets#US_ASCII} specifies the {@code Charset} of ASCII characters.
        * &lt;li&gt;{@link CharMatcher#ASCII} matches ASCII characters and provides text processing methods
        * which operate only on the ASCII characters of a string.
        * &lt;/ul&gt;
        *
        * @author Craig Berry
        * @author Gregory Kick
        * @since 7.0
        */
    </comment>
    <class>
        <annotation>@
            <name>CheckReturnValue</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>Ascii</name>
        <block>{

            <constructor>
                <specifier>private</specifier>
                <name>Ascii</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="block">/* The ASCII control characters, per RFC 20. */</comment>
            <comment type="javadoc">/**
                * Null ('\0'): The all-zeros character which may serve to accomplish
                * time fill and media fill. Normally used as a C string terminator.
                * &lt;p&gt;Although RFC 20 names this as "Null", note that it is distinct
                * from the C/C++ "NULL" pointer.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>NUL</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Start of Heading: A communication control character used at
                * the beginning of a sequence of characters which constitute a
                * machine-sensible address or routing information. Such a sequence is
                * referred to as the "heading." An STX character has the effect of
                * terminating a heading.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>SOH</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Start of Text: A communication control character which
                * precedes a sequence of characters that is to be treated as an entity
                * and entirely transmitted through to the ultimate destination. Such a
                * sequence is referred to as "text." STX may be used to terminate a
                * sequence of characters started by SOH.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>STX</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * End of Text: A communication control character used to
                * terminate a sequence of characters started with STX and transmitted
                * as an entity.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>ETX</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * End of Transmission: A communication control character used
                * to indicate the conclusion of a transmission, which may have
                * contained one or more texts and any associated headings.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>EOT</name> =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Enquiry: A communication control character used in data
                * communication systems as a request for a response from a remote
                * station. It may be used as a "Who Are You" (WRU) to obtain
                * identification, or may be used to obtain station status, or both.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>ENQ</name> =
                    <init>
                        <expr>5</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Acknowledge: A communication control character transmitted
                * by a receiver as an affirmative response to a sender.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>ACK</name> =
                    <init>
                        <expr>6</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Bell ('\a'): A character for use when there is a need to call for
                * human attention. It may control alarm or attention devices.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>BEL</name> =
                    <init>
                        <expr>7</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Backspace ('\b'): A format effector which controls the movement of
                * the printing position one printing space backward on the same
                * printing line. (Applicable also to display devices.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>BS</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Horizontal Tabulation ('\t'): A format effector which controls the
                * movement of the printing position to the next in a series of
                * predetermined positions along the printing line. (Applicable also to
                * display devices and the skip function on punched cards.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>HT</name> =
                    <init>
                        <expr>9</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Line Feed ('\n'): A format effector which controls the movement of
                * the printing position to the next printing line. (Applicable also to
                * display devices.) Where appropriate, this character may have the
                * meaning "New Line" (NL), a format effector which controls the
                * movement of the printing point to the first printing position on the
                * next printing line. Use of this convention requires agreement
                * between sender and recipient of data.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>LF</name> =
                    <init>
                        <expr>10</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Alternate name for {@link #LF}. ({@code LF} is preferred.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>NL</name> =
                    <init>
                        <expr>10</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Vertical Tabulation ('\v'): A format effector which controls the
                * movement of the printing position to the next in a series of
                * predetermined printing lines. (Applicable also to display devices.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>VT</name> =
                    <init>
                        <expr>11</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Form Feed ('\f'): A format effector which controls the movement of
                * the printing position to the first pre-determined printing line on
                * the next form or page. (Applicable also to display devices.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>FF</name> =
                    <init>
                        <expr>12</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Carriage Return ('\r'): A format effector which controls the
                * movement of the printing position to the first printing position on
                * the same printing line. (Applicable also to display devices.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>CR</name> =
                    <init>
                        <expr>13</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Shift Out: A control character indicating that the code
                * combinations which follow shall be interpreted as outside of the
                * character set of the standard code table until a Shift In character
                * is reached.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>SO</name> =
                    <init>
                        <expr>14</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Shift In: A control character indicating that the code
                * combinations which follow shall be interpreted according to the
                * standard code table.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>SI</name> =
                    <init>
                        <expr>15</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Data Link Escape: A communication control character which
                * will change the meaning of a limited number of contiguously following
                * characters. It is used exclusively to provide supplementary controls
                * in data communication networks.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>DLE</name> =
                    <init>
                        <expr>16</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Device Control 1. Characters for the control
                * of ancillary devices associated with data processing or
                * telecommunication systems, more especially switching devices "on" or
                * "off." (If a single "stop" control is required to interrupt or turn
                * off ancillary devices, DC4 is the preferred assignment.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>DC1</name> =
                    <init>
                        <expr>17</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// aka XON</comment>

            <comment type="javadoc">/**
                * Transmission On: Although originally defined as DC1, this ASCII
                * control character is now better known as the XON code used for software
                * flow control in serial communications. The main use is restarting
                * the transmission after the communication has been stopped by the XOFF
                * control code.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>XON</name> =
                    <init>
                        <expr>17</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// aka DC1</comment>

            <comment type="javadoc">/**
                * Device Control 2. Characters for the control
                * of ancillary devices associated with data processing or
                * telecommunication systems, more especially switching devices "on" or
                * "off." (If a single "stop" control is required to interrupt or turn
                * off ancillary devices, DC4 is the preferred assignment.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>DC2</name> =
                    <init>
                        <expr>18</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Device Control 3. Characters for the control
                * of ancillary devices associated with data processing or
                * telecommunication systems, more especially switching devices "on" or
                * "off." (If a single "stop" control is required to interrupt or turn
                * off ancillary devices, DC4 is the preferred assignment.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>DC3</name> =
                    <init>
                        <expr>19</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// aka XOFF</comment>

            <comment type="javadoc">/**
                * Transmission off. See {@link #XON} for explanation.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>XOFF</name> =
                    <init>
                        <expr>19</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// aka DC3</comment>

            <comment type="javadoc">/**
                * Device Control 4. Characters for the control
                * of ancillary devices associated with data processing or
                * telecommunication systems, more especially switching devices "on" or
                * "off." (If a single "stop" control is required to interrupt or turn
                * off ancillary devices, DC4 is the preferred assignment.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>DC4</name> =
                    <init>
                        <expr>20</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Negative Acknowledge: A communication control character
                * transmitted by a receiver as a negative response to the sender.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>NAK</name> =
                    <init>
                        <expr>21</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Synchronous Idle: A communication control character used by
                * a synchronous transmission system in the absence of any other
                * character to provide a signal from which synchronism may be achieved
                * or retained.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>SYN</name> =
                    <init>
                        <expr>22</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * End of Transmission Block: A communication control character
                * used to indicate the end of a block of data for communication
                * purposes. ETB is used for blocking data where the block structure is
                * not necessarily related to the processing format.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>ETB</name> =
                    <init>
                        <expr>23</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Cancel: A control character used to indicate that the data
                * with which it is sent is in error or is to be disregarded.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>CAN</name> =
                    <init>
                        <expr>24</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * End of Medium: A control character associated with the sent
                * data which may be used to identify the physical end of the medium, or
                * the end of the used, or wanted, portion of information recorded on a
                * medium. (The position of this character does not necessarily
                * correspond to the physical end of the medium.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>EM</name> =
                    <init>
                        <expr>25</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Substitute: A character that may be substituted for a
                * character which is determined to be invalid or in error.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>SUB</name> =
                    <init>
                        <expr>26</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Escape: A control character intended to provide code
                * extension (supplementary characters) in general information
                * interchange. The Escape character itself is a prefix affecting the
                * interpretation of a limited number of contiguously following
                * characters.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>ESC</name> =
                    <init>
                        <expr>27</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * File Separator: These four information separators may be
                * used within data in optional fashion, except that their hierarchical
                * relationship shall be: FS is the most inclusive, then GS, then RS,
                * and US is least inclusive. (The content and length of a File, Group,
                * Record, or Unit are not specified.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>FS</name> =
                    <init>
                        <expr>28</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Group Separator: These four information separators may be
                * used within data in optional fashion, except that their hierarchical
                * relationship shall be: FS is the most inclusive, then GS, then RS,
                * and US is least inclusive. (The content and length of a File, Group,
                * Record, or Unit are not specified.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>GS</name> =
                    <init>
                        <expr>29</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Record Separator: These four information separators may be
                * used within data in optional fashion, except that their hierarchical
                * relationship shall be: FS is the most inclusive, then GS, then RS,
                * and US is least inclusive. (The content and length of a File, Group,
                * Record, or Unit are not specified.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>RS</name> =
                    <init>
                        <expr>30</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Unit Separator: These four information separators may be
                * used within data in optional fashion, except that their hierarchical
                * relationship shall be: FS is the most inclusive, then GS, then RS,
                * and US is least inclusive. (The content and length of a File, Group,
                * Record, or Unit are not specified.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>US</name> =
                    <init>
                        <expr>31</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Space: A normally non-printing graphic character used to
                * separate words. It is also a format effector which controls the
                * movement of the printing position, one printing position forward.
                * (Applicable also to display devices.)
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>SP</name> =
                    <init>
                        <expr>32</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Alternate name for {@link #SP}.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>SPACE</name> =
                    <init>
                        <expr>32</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Delete: This character is used primarily to "erase" or
                * "obliterate" erroneous or unwanted characters in perforated tape.
                *
                * @since 8.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>DEL</name> =
                    <init>
                        <expr>127</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The minimum value of an ASCII character.
                *
                * @since 9.0 (was type {@code int} before 12.0)
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>MIN</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The maximum value of an ASCII character.
                *
                * @since 9.0 (was type {@code int} before 12.0)
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>MAX</name> =
                    <init>
                        <expr>127</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns a copy of the input string in which all {@linkplain #isUpperCase(char) uppercase ASCII
                * characters} have been converted to lowercase. All other characters are copied without
                * modification.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toLowerCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>string</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>length</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>isUpperCase</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>string</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>char</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>chars</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>string</name>.
                                                                <name>toCharArray</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (<init>;</init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>length</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>i</name>++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>char</name>
                                                        </type>
                                                        <name>c</name> =
                                                        <init>
                                                            <expr>
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name>isUpperCase</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>
                                                                        <name>chars</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    =
                                                                    <call>(<name>char</name>)
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>c</name>
                                                                                    ^ 0x20
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </for>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>String</name>.
                                                        <name>valueOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>chars</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>string</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a copy of the input character sequence in which all {@linkplain #isUpperCase(char)
                * uppercase ASCII characters} have been converted to lowercase. All other characters are copied
                * without modification.
                *
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toLowerCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>chars</name>
                                <name>instanceof</name>
                                <name>String</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>toLowerCase</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>String</name>)
                                                        <name>chars</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>chars</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>length</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>builder</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>toLowerCase</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>chars</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If the argument is an {@linkplain #isUpperCase(char) uppercase ASCII character} returns the
                * lowercase equivalent. Otherwise returns the argument.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                </type>
                <name>toLowerCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isUpperCase</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>c</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ?
                            <call>(<name>char</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>c</name>
                                            ^ 0x20
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>c</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a copy of the input string in which all {@linkplain #isLowerCase(char) lowercase ASCII
                * characters} have been converted to uppercase. All other characters are copied without
                * modification.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toUpperCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>string</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>length</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>isLowerCase</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>string</name>.
                                                                <name>charAt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>char</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>chars</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>string</name>.
                                                                <name>toCharArray</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (<init>;</init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>length</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>i</name>++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>char</name>
                                                        </type>
                                                        <name>c</name> =
                                                        <init>
                                                            <expr>
                                                                <name>
                                                                    <name>chars</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name>isLowerCase</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>c</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>
                                                                        <name>chars</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                    =
                                                                    <call>(<name>char</name>)
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>c</name>
                                                                                    &amp; 0x5f
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                }
                                            </block>
                                        </for>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>String</name>.
                                                        <name>valueOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>chars</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>string</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a copy of the input character sequence in which all {@linkplain #isLowerCase(char)
                * lowercase ASCII characters} have been converted to uppercase. All other characters are copied
                * without modification.
                *
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toUpperCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>chars</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>chars</name>
                                <name>instanceof</name>
                                <name>String</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>toUpperCase</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>String</name>)
                                                        <name>chars</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>chars</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>length</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>length</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>builder</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>toUpperCase</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>chars</name>.
                                                                            <name>charAt</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If the argument is a {@linkplain #isLowerCase(char) lowercase ASCII character} returns the
                * uppercase equivalent. Otherwise returns the argument.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>char</name>
                </type>
                <name>toUpperCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isLowerCase</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>c</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ?
                            <call>(<name>char</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>c</name>
                                            &amp; 0x5f
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>c</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicates whether {@code c} is one of the twenty-six lowercase ASCII alphabetic characters
                * between {@code 'a'} and {@code 'z'} inclusive. All others (including non-ASCII characters)
                * return {@code false}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isLowerCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Note: This was benchmarked against the alternate expression "(char)(c - 'a')
                        &lt; 26" (Nov '13)
                    </comment>
                    <comment type="line">// and found to perform at least as well, or better.</comment>
                    <return>return
                        <expr>(<name>c</name> &gt;= 'a') &amp;&amp; (<name>c</name> &lt;= 'z')
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicates whether {@code c} is one of the twenty-six uppercase ASCII alphabetic characters
                * between {@code 'A'} and {@code 'Z'} inclusive. All others (including non-ASCII characters)
                * return {@code false}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isUpperCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>c</name> &gt;= 'A') &amp;&amp; (<name>c</name> &lt;= 'Z')
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Truncates the given character sequence to the given maximum length. If the length of the
                * sequence is greater than {@code maxLength}, the returned string will be exactly
                * {@code maxLength} chars in length and will end with the given {@code truncationIndicator}.
                * Otherwise, the sequence will be returned as a string with no changes to the content.
                *
                * &lt;p&gt;Examples:
                *
                * &lt;pre&gt; {@code
                * Ascii.truncate("foobar", 7, "..."); // returns "foobar"
                * Ascii.truncate("foobar", 5, "..."); // returns "fo..." }&lt;/pre&gt;
                *
                * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method &lt;i&gt;may&lt;/i&gt; work with certain non-ASCII text
                but is not safe for
                * use with arbitrary Unicode text. It is mostly intended for use with text that is known to be
                * safe for use with it (such as all-ASCII text) and for simple debugging text. When using this
                * method, consider the following:
                *
                * &lt;ul&gt;
                * &lt;li&gt;it may split surrogate pairs&lt;/li&gt;
                * &lt;li&gt;it may split characters and combining characters&lt;/li&gt;
                * &lt;li&gt;it does not consider word boundaries&lt;/li&gt;
                * &lt;li&gt;if truncating for display to users, there are other considerations that must be taken
                * into account&lt;/li&gt;
                * &lt;li&gt;the appropriate truncation indicator may be locale-dependent&lt;/li&gt;
                * &lt;li&gt;it is safe to use non-ASCII characters in the truncation indicator&lt;/li&gt;
                * &lt;/ul&gt;
                *
                *
                * @throws IllegalArgumentException if {@code maxLength} is less than the length of
                * {@code truncationIndicator}
                * @since 16.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>truncate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>seq</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>maxLength</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>truncationIndicator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>seq</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// length to truncate the sequence to, not including the truncation indicator
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>truncationLength</name> =
                            <init>
                                <expr>
                                    <name>maxLength</name>
                                    -
                                    <call>
                                        <name><name>truncationIndicator</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// in this worst case, this allows a maxLength equal to the length of the
                        truncationIndicator,
                    </comment>
                    <comment type="line">// meaning that a string will be truncated to just the truncation indicator
                        itself
                    </comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>truncationLength</name>
                                            &gt;= 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"maxLength (%s) must be &gt;= length of the truncation indicator (%s)"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>maxLength</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>truncationIndicator</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>seq</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt;=
                                <name>maxLength</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>string</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>seq</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>string</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &lt;=
                                            <name>maxLength</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>string</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// if the length of the toString() result was &gt; maxLength for
                                    some reason, truncate that
                                </comment>
                                <expr_stmt>
                                    <expr>
                                        <name>seq</name>
                                        =
                                        <name>string</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>new
                            <call>
                                <name>StringBuilder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>maxLength</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>seq</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>truncationLength</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>truncationIndicator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicates whether the contents of the given character sequences {@code s1} and {@code s2} are
                * equal, ignoring the case of any ASCII alphabetic characters between {@code 'a'} and {@code 'z'}
                * or {@code 'A'} and {@code 'Z'} inclusive.
                *
                * &lt;p&gt;This method is significantly faster than {@link String#equalsIgnoreCase} and should be used
                * in preference if at least one of the parameters is known to contain only ASCII characters.
                *
                * &lt;p&gt;Note however that this method does not always behave identically to expressions such as:
                * &lt;ul&gt;
                * &lt;li&gt;{@code string.toUpperCase().equals("UPPER CASE ASCII")}
                * &lt;li&gt;{@code string.toLowerCase().equals("lower case ascii")}
                * &lt;/ul&gt;
                * &lt;p&gt;due to case-folding of some non-ASCII characters (which does not occur in
                * {@link String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used,
                * the author probably wanted the behavior provided by this method rather than the subtle and
                * sometimes surprising behavior of {@code toUpperCase()} and {@code toLowerCase()}.
                *
                * @since 16.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>equalsIgnoreCase</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>s1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>s2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Calling length() is the null pointer check (so do it before we can exit
                        early).
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>length</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>s1</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>s1</name>
                                ==
                                <name>s2</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>length</name>
                                !=
                                <call>
                                    <name><name>s2</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>length</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c1</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>s1</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c2</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>s2</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>c1</name>
                                        ==
                                        <name>c2</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>alphaIndex</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>getAlphaIndex</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>c1</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// This was also benchmarked using '&amp;' to avoid branching (but
                                always evaluate the rhs),
                            </comment>
                            <comment type="line">// however this showed no obvious improvement.</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>alphaIndex</name>
                                        &lt; 26 &amp;&amp; <name>alphaIndex</name> ==
                                        <call>
                                            <name>getAlphaIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>c2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the non-negative index value of the alpha character {@code c}, regardless of case.
                * Ie, 'a'/'A' returns 0 and 'z'/'Z' returns 25. Non-alpha characters return a value of 26 or
                * greater.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>getAlphaIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Fold upper-case ASCII to lower-case and make zero-indexed and unsigned (by
                        casting to char).
                    </comment>
                    <return>return
                        <expr>
                            <call>(<name>char</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>c</name> | 0x20) - 'a'
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
