<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\AsyncFunction.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Future</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Transforms a value, possibly asynchronously. For an example usage and more
        * information, see
        * {@link Futures#transformAsync(ListenableFuture, AsyncFunction)}.
        *
        * @author Chris Povirk
        * @since 11.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>AsyncFunction</name>
            <argument_list>&lt;
                <argument>
                    <name>I</name>
                </argument>
                ,
                <argument>
                    <name>O</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="javadoc">/**
                * Returns an output {@code Future} to use in place of the given {@code
                * input}. The output {@code Future} need not be {@linkplain Future#isDone
                * done}, making {@code AsyncFunction} suitable for asynchronous derivations.
                *
                * &lt;p&gt;Throwing an exception from this method is equivalent to returning a
                * failing {@code Future}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>O</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>apply</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>I</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
