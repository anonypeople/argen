<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\AtomicDouble.java">
    <comment type="block">/*
        * Written by Doug Lea and Martin Buchholz with assistance from
        * members of JCP JSR-166 Expert Group and released to the public
        * domain, as explained at
        * http://creativecommons.org/publicdomain/zero/1.0/
        */
    </comment>

    <comment type="block">/*
        * Source:
        * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166e/extra/AtomicDouble.java?revision=1.13
        * (Modified to adapt to guava coding conventions and
        * to use AtomicLongFieldUpdater instead of sun.misc.Unsafe)
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Double</name>.
            <name>doubleToRawLongBits</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Double</name>.
            <name>longBitsToDouble</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.
            <name>AtomicLongFieldUpdater</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A {@code double} value that may be updated atomically. See the
        * {@link java.util.concurrent.atomic} package specification for
        * description of the properties of atomic variables. An {@code
        * AtomicDouble} is used in applications such as atomic accumulation,
        * and cannot be used as a replacement for a {@link Double}. However,
        * this class does extend {@code Number} to allow uniform access by
        * tools and utilities that deal with numerically-based classes.
        *
        * &lt;p&gt;&lt;a name="bitEquals"&gt;This class compares primitive {@code double}
        * values in methods such as {@link #compareAndSet} by comparing their
        * bitwise representation using {@link Double#doubleToRawLongBits},
        * which differs from both the primitive double {@code ==} operator
        * and from {@link Double#equals}, as if implemented by:
        * &lt;pre&gt; {@code
        * static boolean bitEquals(double x, double y) {
        * long xBits = Double.doubleToRawLongBits(x);
        * long yBits = Double.doubleToRawLongBits(y);
        * return xBits == yBits;
        * }}&lt;/pre&gt;
        *
        * &lt;p&gt;It is possible to write a more scalable updater, at the cost of
        * giving up strict atomicity. See for example
        * &lt;a href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166edocs/jsr166e/DoubleAdder.html"&gt;
        * DoubleAdder&lt;/a&gt;
        * and
        * &lt;a href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166edocs/jsr166e/DoubleMaxUpdater.html"&gt;
        * DoubleMaxUpdater&lt;/a&gt;.
        *
        * @author Doug Lea
        * @author Martin Buchholz
        * @since 11.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>AtomicDouble</name>
        <super>
            <extends>extends
                <name>Number</name>
            </extends>
            <implements>implements <name>java</name>.<name>io</name>.
                <name>Serializable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>0L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>volatile</name>
                        <name>long</name>
                    </type>
                    <name>value</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>AtomicLongFieldUpdater</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>AtomicDouble</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>updater</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>AtomicLongFieldUpdater</name>.
                                    <name>newUpdater</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>AtomicDouble</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"value"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new {@code AtomicDouble} with the given initial value.
                *
                * @param initialValue the initial value
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>AtomicDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>initialValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            =
                            <call>
                                <name>doubleToRawLongBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>initialValue</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Creates a new {@code AtomicDouble} with initial value {@code 0.0}.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>AtomicDouble</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// assert doubleToRawLongBits(0.0) == 0L;</comment>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Gets the current value.
                *
                * @return the current value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>double</name>
                </type>
                <name>get</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>longBitsToDouble</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets to the given value.
                *
                * @param newValue the new value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>set</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>doubleToRawLongBits</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>newValue</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Eventually sets to the given value.
                *
                * @param newValue the new value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>lazySet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>set</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>newValue</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// TODO(user): replace with code below when jdk5 support is dropped.</comment>
                    <comment type="line">// long next = doubleToRawLongBits(newValue);</comment>
                    <comment type="line">// updater.lazySet(this, next);</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Atomically sets to the given value and returns the old value.
                *
                * @param newValue the new value
                * @return the previous value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>double</name>
                </type>
                <name>getAndSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>doubleToRawLongBits</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>newValue</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>longBitsToDouble</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>updater</name>.
                                                    <name>getAndSet</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>next</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Atomically sets the value to the given updated value
                * if the current value is &lt;a href="#bitEquals"&gt;bitwise equal&lt;/a&gt;
                * to the expected value.
                *
                * @param expect the expected value
                * @param update the new value
                * @return {@code true} if successful. False return indicates that
                * the actual value was not bitwise equal to the expected value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>compareAndSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>expect</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>update</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>updater</name>.
                                    <name>compareAndSet</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>doubleToRawLongBits</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>expect</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>doubleToRawLongBits</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>update</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Atomically sets the value to the given updated value
                * if the current value is &lt;a href="#bitEquals"&gt;bitwise equal&lt;/a&gt;
                * to the expected value.
                *
                * &lt;p&gt;May &lt;a
                *
                href="http://download.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html#Spurious"&gt;
                * fail spuriously&lt;/a&gt;
                * and does not provide ordering guarantees, so is only rarely an
                * appropriate alternative to {@code compareAndSet}.
                *
                * @param expect the expected value
                * @param update the new value
                * @return {@code true} if successful
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>weakCompareAndSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>expect</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>update</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>updater</name>.
                                    <name>weakCompareAndSet</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>doubleToRawLongBits</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>expect</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>doubleToRawLongBits</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>update</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Atomically adds the given value to the current value.
                *
                * @param delta the value to add
                * @return the previous value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>double</name>
                </type>
                <name>getAndAdd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>delta</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <while>while
                        <condition>(<expr>true</expr>)
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>current</name> =
                                    <init>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>currentVal</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>longBitsToDouble</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>current</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>nextVal</name> =
                                    <init>
                                        <expr>
                                            <name>currentVal</name>
                                            +
                                            <name>delta</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>doubleToRawLongBits</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>nextVal</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>updater</name>.
                                                <name>compareAndSet</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>current</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>next</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>currentVal</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Atomically adds the given value to the current value.
                *
                * @param delta the value to add
                * @return the updated value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>double</name>
                </type>
                <name>addAndGet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>delta</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <while>while
                        <condition>(<expr>true</expr>)
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>current</name> =
                                    <init>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>currentVal</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>longBitsToDouble</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>current</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>nextVal</name> =
                                    <init>
                                        <expr>
                                            <name>currentVal</name>
                                            +
                                            <name>delta</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>doubleToRawLongBits</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>nextVal</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>updater</name>.
                                                <name>compareAndSet</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>current</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>next</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>nextVal</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the String representation of the current value.
                * @return the String representation of the current value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Double</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>get</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the value of this {@code AtomicDouble} as an {@code int}
                * after a narrowing primitive conversion.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>intValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>int</name>)
                            <call>
                                <name>get</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the value of this {@code AtomicDouble} as a {@code long}
                * after a narrowing primitive conversion.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>longValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>long</name>)
                            <call>
                                <name>get</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the value of this {@code AtomicDouble} as a {@code float}
                * after a narrowing primitive conversion.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>float</name>
                </type>
                <name>floatValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>float</name>)
                            <call>
                                <name>get</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the value of this {@code AtomicDouble} as a {@code double}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>doubleValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>get</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Saves the state to a stream (that is, serializes it).
                *
                * @serialData The current value is emitted (a {@code double}).
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>writeObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>io</name>.
                                    <name>ObjectOutputStream</name>
                                </name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name><name>java</name>.<name>io</name>.
                                <name>IOException</name>
                            </name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>s</name>.
                                    <name>defaultWriteObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>s</name>.
                                    <name>writeDouble</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>get</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reconstitutes the instance from a stream (that is, deserializes it).
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>readObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>io</name>.
                                    <name>ObjectInputStream</name>
                                </name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name><name>java</name>.<name>io</name>.
                                <name>IOException</name>
                            </name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>s</name>.
                                    <name>defaultReadObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>set</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>s</name>.
                                                    <name>readDouble</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
